
diplomski_outdoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  08004cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a4  20000228  08004eec  00020228  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003cc  08004eec  000203cc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014c3d  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f93  00000000  00000000  00034e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a176  00000000  00000000  00037e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000de8  00000000  00000000  00041f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ff8  00000000  00000000  00042d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000081a2  00000000  00000000  00043d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004731  00000000  00000000  0004bf1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005064b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003448  00000000  00000000  000506c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000228 	.word	0x20000228
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004934 	.word	0x08004934

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000022c 	.word	0x2000022c
 8000104:	08004934 	.word	0x08004934

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_uldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d111      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d10f      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_uldivmod+0xe>
 8000438:	2800      	cmp	r0, #0
 800043a:	d002      	beq.n	8000442 <__aeabi_uldivmod+0x16>
 800043c:	2100      	movs	r1, #0
 800043e:	43c9      	mvns	r1, r1
 8000440:	1c08      	adds	r0, r1, #0
 8000442:	b407      	push	{r0, r1, r2}
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <__aeabi_uldivmod+0x24>)
 8000446:	a102      	add	r1, pc, #8	; (adr r1, 8000450 <__aeabi_uldivmod+0x24>)
 8000448:	1840      	adds	r0, r0, r1
 800044a:	9002      	str	r0, [sp, #8]
 800044c:	bd03      	pop	{r0, r1, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	ffffffd9 	.word	0xffffffd9
 8000454:	b403      	push	{r0, r1}
 8000456:	4668      	mov	r0, sp
 8000458:	b501      	push	{r0, lr}
 800045a:	9802      	ldr	r0, [sp, #8]
 800045c:	f000 f806 	bl	800046c <__udivmoddi4>
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	469e      	mov	lr, r3
 8000464:	b002      	add	sp, #8
 8000466:	bc0c      	pop	{r2, r3}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	4657      	mov	r7, sl
 8000470:	464e      	mov	r6, r9
 8000472:	4645      	mov	r5, r8
 8000474:	46de      	mov	lr, fp
 8000476:	b5e0      	push	{r5, r6, r7, lr}
 8000478:	0004      	movs	r4, r0
 800047a:	b083      	sub	sp, #12
 800047c:	000d      	movs	r5, r1
 800047e:	4692      	mov	sl, r2
 8000480:	4699      	mov	r9, r3
 8000482:	428b      	cmp	r3, r1
 8000484:	d82f      	bhi.n	80004e6 <__udivmoddi4+0x7a>
 8000486:	d02c      	beq.n	80004e2 <__udivmoddi4+0x76>
 8000488:	4649      	mov	r1, r9
 800048a:	4650      	mov	r0, sl
 800048c:	f000 f8cc 	bl	8000628 <__clzdi2>
 8000490:	0029      	movs	r1, r5
 8000492:	0006      	movs	r6, r0
 8000494:	0020      	movs	r0, r4
 8000496:	f000 f8c7 	bl	8000628 <__clzdi2>
 800049a:	1a33      	subs	r3, r6, r0
 800049c:	4698      	mov	r8, r3
 800049e:	3b20      	subs	r3, #32
 80004a0:	469b      	mov	fp, r3
 80004a2:	d500      	bpl.n	80004a6 <__udivmoddi4+0x3a>
 80004a4:	e074      	b.n	8000590 <__udivmoddi4+0x124>
 80004a6:	4653      	mov	r3, sl
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	001f      	movs	r7, r3
 80004ae:	4653      	mov	r3, sl
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	001e      	movs	r6, r3
 80004b6:	42af      	cmp	r7, r5
 80004b8:	d829      	bhi.n	800050e <__udivmoddi4+0xa2>
 80004ba:	d026      	beq.n	800050a <__udivmoddi4+0x9e>
 80004bc:	465b      	mov	r3, fp
 80004be:	1ba4      	subs	r4, r4, r6
 80004c0:	41bd      	sbcs	r5, r7
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	da00      	bge.n	80004c8 <__udivmoddi4+0x5c>
 80004c6:	e079      	b.n	80005bc <__udivmoddi4+0x150>
 80004c8:	2200      	movs	r2, #0
 80004ca:	2300      	movs	r3, #0
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	2301      	movs	r3, #1
 80004d2:	465a      	mov	r2, fp
 80004d4:	4093      	lsls	r3, r2
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2301      	movs	r3, #1
 80004da:	4642      	mov	r2, r8
 80004dc:	4093      	lsls	r3, r2
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	e019      	b.n	8000516 <__udivmoddi4+0xaa>
 80004e2:	4282      	cmp	r2, r0
 80004e4:	d9d0      	bls.n	8000488 <__udivmoddi4+0x1c>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <__udivmoddi4+0x8c>
 80004f4:	601c      	str	r4, [r3, #0]
 80004f6:	605d      	str	r5, [r3, #4]
 80004f8:	9800      	ldr	r0, [sp, #0]
 80004fa:	9901      	ldr	r1, [sp, #4]
 80004fc:	b003      	add	sp, #12
 80004fe:	bc3c      	pop	{r2, r3, r4, r5}
 8000500:	4690      	mov	r8, r2
 8000502:	4699      	mov	r9, r3
 8000504:	46a2      	mov	sl, r4
 8000506:	46ab      	mov	fp, r5
 8000508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050a:	42a3      	cmp	r3, r4
 800050c:	d9d6      	bls.n	80004bc <__udivmoddi4+0x50>
 800050e:	2200      	movs	r2, #0
 8000510:	2300      	movs	r3, #0
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	4643      	mov	r3, r8
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0e8      	beq.n	80004ee <__udivmoddi4+0x82>
 800051c:	07fb      	lsls	r3, r7, #31
 800051e:	0872      	lsrs	r2, r6, #1
 8000520:	431a      	orrs	r2, r3
 8000522:	4646      	mov	r6, r8
 8000524:	087b      	lsrs	r3, r7, #1
 8000526:	e00e      	b.n	8000546 <__udivmoddi4+0xda>
 8000528:	42ab      	cmp	r3, r5
 800052a:	d101      	bne.n	8000530 <__udivmoddi4+0xc4>
 800052c:	42a2      	cmp	r2, r4
 800052e:	d80c      	bhi.n	800054a <__udivmoddi4+0xde>
 8000530:	1aa4      	subs	r4, r4, r2
 8000532:	419d      	sbcs	r5, r3
 8000534:	2001      	movs	r0, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2100      	movs	r1, #0
 800053c:	3e01      	subs	r6, #1
 800053e:	1824      	adds	r4, r4, r0
 8000540:	414d      	adcs	r5, r1
 8000542:	2e00      	cmp	r6, #0
 8000544:	d006      	beq.n	8000554 <__udivmoddi4+0xe8>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d9ee      	bls.n	8000528 <__udivmoddi4+0xbc>
 800054a:	3e01      	subs	r6, #1
 800054c:	1924      	adds	r4, r4, r4
 800054e:	416d      	adcs	r5, r5
 8000550:	2e00      	cmp	r6, #0
 8000552:	d1f8      	bne.n	8000546 <__udivmoddi4+0xda>
 8000554:	465b      	mov	r3, fp
 8000556:	9800      	ldr	r0, [sp, #0]
 8000558:	9901      	ldr	r1, [sp, #4]
 800055a:	1900      	adds	r0, r0, r4
 800055c:	4169      	adcs	r1, r5
 800055e:	2b00      	cmp	r3, #0
 8000560:	db22      	blt.n	80005a8 <__udivmoddi4+0x13c>
 8000562:	002b      	movs	r3, r5
 8000564:	465a      	mov	r2, fp
 8000566:	40d3      	lsrs	r3, r2
 8000568:	002a      	movs	r2, r5
 800056a:	4644      	mov	r4, r8
 800056c:	40e2      	lsrs	r2, r4
 800056e:	001c      	movs	r4, r3
 8000570:	465b      	mov	r3, fp
 8000572:	0015      	movs	r5, r2
 8000574:	2b00      	cmp	r3, #0
 8000576:	db2c      	blt.n	80005d2 <__udivmoddi4+0x166>
 8000578:	0026      	movs	r6, r4
 800057a:	409e      	lsls	r6, r3
 800057c:	0033      	movs	r3, r6
 800057e:	0026      	movs	r6, r4
 8000580:	4647      	mov	r7, r8
 8000582:	40be      	lsls	r6, r7
 8000584:	0032      	movs	r2, r6
 8000586:	1a80      	subs	r0, r0, r2
 8000588:	4199      	sbcs	r1, r3
 800058a:	9000      	str	r0, [sp, #0]
 800058c:	9101      	str	r1, [sp, #4]
 800058e:	e7ae      	b.n	80004ee <__udivmoddi4+0x82>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	4652      	mov	r2, sl
 8000598:	40da      	lsrs	r2, r3
 800059a:	4641      	mov	r1, r8
 800059c:	0013      	movs	r3, r2
 800059e:	464a      	mov	r2, r9
 80005a0:	408a      	lsls	r2, r1
 80005a2:	0017      	movs	r7, r2
 80005a4:	431f      	orrs	r7, r3
 80005a6:	e782      	b.n	80004ae <__udivmoddi4+0x42>
 80005a8:	4642      	mov	r2, r8
 80005aa:	2320      	movs	r3, #32
 80005ac:	1a9b      	subs	r3, r3, r2
 80005ae:	002a      	movs	r2, r5
 80005b0:	4646      	mov	r6, r8
 80005b2:	409a      	lsls	r2, r3
 80005b4:	0023      	movs	r3, r4
 80005b6:	40f3      	lsrs	r3, r6
 80005b8:	4313      	orrs	r3, r2
 80005ba:	e7d5      	b.n	8000568 <__udivmoddi4+0xfc>
 80005bc:	4642      	mov	r2, r8
 80005be:	2320      	movs	r3, #32
 80005c0:	2100      	movs	r1, #0
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	2200      	movs	r2, #0
 80005c6:	9100      	str	r1, [sp, #0]
 80005c8:	9201      	str	r2, [sp, #4]
 80005ca:	2201      	movs	r2, #1
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	9201      	str	r2, [sp, #4]
 80005d0:	e782      	b.n	80004d8 <__udivmoddi4+0x6c>
 80005d2:	4642      	mov	r2, r8
 80005d4:	2320      	movs	r3, #32
 80005d6:	0026      	movs	r6, r4
 80005d8:	1a9b      	subs	r3, r3, r2
 80005da:	40de      	lsrs	r6, r3
 80005dc:	002f      	movs	r7, r5
 80005de:	46b4      	mov	ip, r6
 80005e0:	4097      	lsls	r7, r2
 80005e2:	4666      	mov	r6, ip
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7c9      	b.n	800057e <__udivmoddi4+0x112>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f7ff ffdd 	bl	80005ec <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	1c08      	adds	r0, r1, #0
 8000638:	f7ff ffd8 	bl	80005ec <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000644:	20fa      	movs	r0, #250	; 0xfa
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <HAL_InitTick+0x3c>)
 8000648:	0080      	lsls	r0, r0, #2
 800064a:	7819      	ldrb	r1, [r3, #0]
 800064c:	f7ff fd78 	bl	8000140 <__udivsi3>
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <HAL_InitTick+0x40>)
 8000652:	0001      	movs	r1, r0
 8000654:	6818      	ldr	r0, [r3, #0]
 8000656:	f7ff fd73 	bl	8000140 <__udivsi3>
 800065a:	f000 f897 	bl	800078c <HAL_SYSTICK_Config>
 800065e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000660:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000662:	2c00      	cmp	r4, #0
 8000664:	d109      	bne.n	800067a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000666:	2d03      	cmp	r5, #3
 8000668:	d807      	bhi.n	800067a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066a:	3802      	subs	r0, #2
 800066c:	0022      	movs	r2, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f000 f852 	bl	8000718 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	0020      	movs	r0, r4
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <HAL_InitTick+0x44>)
 8000678:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	20000000 	.word	0x20000000
 8000680:	2000000c 	.word	0x2000000c
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <HAL_Init+0x24>)
{
 800068c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800068e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000690:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000692:	430b      	orrs	r3, r1
 8000694:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000696:	f7ff ffd3 	bl	8000640 <HAL_InitTick>
 800069a:	1e04      	subs	r4, r0, #0
 800069c:	d103      	bne.n	80006a6 <HAL_Init+0x1e>
    HAL_MspInit();
 800069e:	f001 ff73 	bl	8002588 <HAL_MspInit>
}
 80006a2:	0020      	movs	r0, r4
 80006a4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80006a6:	2401      	movs	r4, #1
 80006a8:	e7fb      	b.n	80006a2 <HAL_Init+0x1a>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <HAL_IncTick+0x10>)
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_IncTick+0x14>)
 80006b4:	6811      	ldr	r1, [r2, #0]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	185b      	adds	r3, r3, r1
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	4770      	bx	lr
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	2000027c 	.word	0x2000027c
 80006c4:	20000000 	.word	0x20000000

080006c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <HAL_GetTick+0x8>)
 80006ca:	6818      	ldr	r0, [r3, #0]
}
 80006cc:	4770      	bx	lr
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	2000027c 	.word	0x2000027c

080006d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d4:	b570      	push	{r4, r5, r6, lr}
 80006d6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006d8:	f7ff fff6 	bl	80006c8 <HAL_GetTick>
 80006dc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006de:	1c63      	adds	r3, r4, #1
 80006e0:	d002      	beq.n	80006e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_Delay+0x20>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006e8:	f7ff ffee 	bl	80006c8 <HAL_GetTick>
 80006ec:	1b40      	subs	r0, r0, r5
 80006ee:	4284      	cmp	r4, r0
 80006f0:	d8fa      	bhi.n	80006e8 <HAL_Delay+0x14>
  {
  }
}
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	20000000 	.word	0x20000000

080006f8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80006f8:	2102      	movs	r1, #2
 80006fa:	4a02      	ldr	r2, [pc, #8]	; (8000704 <HAL_SuspendTick+0xc>)
 80006fc:	6813      	ldr	r3, [r2, #0]
 80006fe:	438b      	bics	r3, r1
 8000700:	6013      	str	r3, [r2, #0]
}
 8000702:	4770      	bx	lr
 8000704:	e000e010 	.word	0xe000e010

08000708 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000708:	2302      	movs	r3, #2
 800070a:	4a02      	ldr	r2, [pc, #8]	; (8000714 <HAL_ResumeTick+0xc>)
 800070c:	6811      	ldr	r1, [r2, #0]
 800070e:	430b      	orrs	r3, r1
 8000710:	6013      	str	r3, [r2, #0]
}
 8000712:	4770      	bx	lr
 8000714:	e000e010 	.word	0xe000e010

08000718 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800071c:	2800      	cmp	r0, #0
 800071e:	da14      	bge.n	800074a <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000720:	230f      	movs	r3, #15
 8000722:	b2c0      	uxtb	r0, r0
 8000724:	4003      	ands	r3, r0
 8000726:	3b08      	subs	r3, #8
 8000728:	4a11      	ldr	r2, [pc, #68]	; (8000770 <HAL_NVIC_SetPriority+0x58>)
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	189b      	adds	r3, r3, r2
 8000730:	2203      	movs	r2, #3
 8000732:	4010      	ands	r0, r2
 8000734:	4090      	lsls	r0, r2
 8000736:	32fc      	adds	r2, #252	; 0xfc
 8000738:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800073a:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800073e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000740:	69dc      	ldr	r4, [r3, #28]
 8000742:	43ac      	bics	r4, r5
 8000744:	4321      	orrs	r1, r4
 8000746:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000748:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074a:	2503      	movs	r5, #3
 800074c:	0883      	lsrs	r3, r0, #2
 800074e:	4028      	ands	r0, r5
 8000750:	40a8      	lsls	r0, r5
 8000752:	35fc      	adds	r5, #252	; 0xfc
 8000754:	002e      	movs	r6, r5
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_NVIC_SetPriority+0x5c>)
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	189b      	adds	r3, r3, r2
 800075c:	22c0      	movs	r2, #192	; 0xc0
 800075e:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000760:	4029      	ands	r1, r5
 8000762:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000764:	0092      	lsls	r2, r2, #2
 8000766:	589c      	ldr	r4, [r3, r2]
 8000768:	43b4      	bics	r4, r6
 800076a:	4321      	orrs	r1, r4
 800076c:	5099      	str	r1, [r3, r2]
 800076e:	e7eb      	b.n	8000748 <HAL_NVIC_SetPriority+0x30>
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	e000e100 	.word	0xe000e100

08000778 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000778:	231f      	movs	r3, #31
 800077a:	4018      	ands	r0, r3
 800077c:	3b1e      	subs	r3, #30
 800077e:	4083      	lsls	r3, r0
 8000780:	4a01      	ldr	r2, [pc, #4]	; (8000788 <HAL_NVIC_EnableIRQ+0x10>)
 8000782:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000784:	4770      	bx	lr
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	e000e100 	.word	0xe000e100

0800078c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <HAL_SYSTICK_Config+0x28>)
 800078e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000790:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000792:	4293      	cmp	r3, r2
 8000794:	d80d      	bhi.n	80007b2 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000796:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079a:	4808      	ldr	r0, [pc, #32]	; (80007bc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079e:	6a03      	ldr	r3, [r0, #32]
 80007a0:	0609      	lsls	r1, r1, #24
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	430b      	orrs	r3, r1
 80007a8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007aa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ac:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ae:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007b2:	4770      	bx	lr
 80007b4:	00ffffff 	.word	0x00ffffff
 80007b8:	e000e010 	.word	0xe000e010
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007c2:	4a57      	ldr	r2, [pc, #348]	; (8000920 <HAL_GPIO_Init+0x160>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80007c4:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007c6:	1882      	adds	r2, r0, r2
 80007c8:	1e54      	subs	r4, r2, #1
 80007ca:	41a2      	sbcs	r2, r4
{
 80007cc:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 80007ce:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 80007d0:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007d2:	3205      	adds	r2, #5
{
 80007d4:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007d6:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80007d8:	9a04      	ldr	r2, [sp, #16]
 80007da:	40da      	lsrs	r2, r3
 80007dc:	d101      	bne.n	80007e2 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80007de:	b007      	add	sp, #28
 80007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007e2:	2601      	movs	r6, #1
 80007e4:	0037      	movs	r7, r6
 80007e6:	409f      	lsls	r7, r3
 80007e8:	9a04      	ldr	r2, [sp, #16]
 80007ea:	403a      	ands	r2, r7
 80007ec:	9202      	str	r2, [sp, #8]
    if (iocurrent)
 80007ee:	d100      	bne.n	80007f2 <HAL_GPIO_Init+0x32>
 80007f0:	e093      	b.n	800091a <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f2:	9a03      	ldr	r2, [sp, #12]
 80007f4:	6852      	ldr	r2, [r2, #4]
 80007f6:	9201      	str	r2, [sp, #4]
 80007f8:	2210      	movs	r2, #16
 80007fa:	9d01      	ldr	r5, [sp, #4]
 80007fc:	4395      	bics	r5, r2
 80007fe:	1e6a      	subs	r2, r5, #1
 8000800:	42b2      	cmp	r2, r6
 8000802:	d813      	bhi.n	800082c <HAL_GPIO_Init+0x6c>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000804:	2403      	movs	r4, #3
 8000806:	0059      	lsls	r1, r3, #1
 8000808:	408c      	lsls	r4, r1
 800080a:	468c      	mov	ip, r1
        temp = GPIOx->OSPEEDR;
 800080c:	6882      	ldr	r2, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800080e:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000810:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000812:	68cc      	ldr	r4, [r1, #12]
 8000814:	4661      	mov	r1, ip
 8000816:	408c      	lsls	r4, r1
 8000818:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 800081a:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800081c:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OTYPER;
 800081e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000820:	0912      	lsrs	r2, r2, #4
 8000822:	4032      	ands	r2, r6
 8000824:	409a      	lsls	r2, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000826:	43bc      	bics	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000828:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800082a:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800082c:	2203      	movs	r2, #3
 800082e:	005f      	lsls	r7, r3, #1
 8000830:	40ba      	lsls	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000832:	9903      	ldr	r1, [sp, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000834:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000836:	688c      	ldr	r4, [r1, #8]
      temp = GPIOx->PUPDR;
 8000838:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800083a:	40bc      	lsls	r4, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800083c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800083e:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000840:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000842:	2d02      	cmp	r5, #2
 8000844:	d10e      	bne.n	8000864 <HAL_GPIO_Init+0xa4>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000846:	210f      	movs	r1, #15
 8000848:	3505      	adds	r5, #5
 800084a:	401d      	ands	r5, r3
 800084c:	00ad      	lsls	r5, r5, #2
 800084e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8000850:	08dc      	lsrs	r4, r3, #3
 8000852:	00a4      	lsls	r4, r4, #2
 8000854:	1904      	adds	r4, r0, r4
 8000856:	6a26      	ldr	r6, [r4, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000858:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800085a:	9903      	ldr	r1, [sp, #12]
 800085c:	6909      	ldr	r1, [r1, #16]
 800085e:	40a9      	lsls	r1, r5
 8000860:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000862:	6226      	str	r6, [r4, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000864:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 8000866:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000868:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800086a:	9c01      	ldr	r4, [sp, #4]
 800086c:	4034      	ands	r4, r6
 800086e:	40bc      	lsls	r4, r7
 8000870:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000872:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000874:	9a01      	ldr	r2, [sp, #4]
 8000876:	00d2      	lsls	r2, r2, #3
 8000878:	d54f      	bpl.n	800091a <HAL_GPIO_Init+0x15a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2701      	movs	r7, #1
 800087c:	4c29      	ldr	r4, [pc, #164]	; (8000924 <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800087e:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000880:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000882:	4035      	ands	r5, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000884:	433a      	orrs	r2, r7
 8000886:	6362      	str	r2, [r4, #52]	; 0x34
 8000888:	4a27      	ldr	r2, [pc, #156]	; (8000928 <HAL_GPIO_Init+0x168>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800088a:	089c      	lsrs	r4, r3, #2
 800088c:	00a4      	lsls	r4, r4, #2
 800088e:	18a4      	adds	r4, r4, r2
 8000890:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000892:	00ad      	lsls	r5, r5, #2
        temp = SYSCFG->EXTICR[position >> 2U];
 8000894:	4694      	mov	ip, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000896:	220f      	movs	r2, #15
 8000898:	4661      	mov	r1, ip
 800089a:	40aa      	lsls	r2, r5
 800089c:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800089e:	22a0      	movs	r2, #160	; 0xa0
 80008a0:	05d2      	lsls	r2, r2, #23
 80008a2:	4694      	mov	ip, r2
 80008a4:	2200      	movs	r2, #0
 80008a6:	4560      	cmp	r0, ip
 80008a8:	d00d      	beq.n	80008c6 <HAL_GPIO_Init+0x106>
 80008aa:	4a20      	ldr	r2, [pc, #128]	; (800092c <HAL_GPIO_Init+0x16c>)
 80008ac:	4694      	mov	ip, r2
 80008ae:	003a      	movs	r2, r7
 80008b0:	4560      	cmp	r0, ip
 80008b2:	d008      	beq.n	80008c6 <HAL_GPIO_Init+0x106>
 80008b4:	4f1e      	ldr	r7, [pc, #120]	; (8000930 <HAL_GPIO_Init+0x170>)
 80008b6:	1892      	adds	r2, r2, r2
 80008b8:	42b8      	cmp	r0, r7
 80008ba:	d004      	beq.n	80008c6 <HAL_GPIO_Init+0x106>
 80008bc:	4f1d      	ldr	r7, [pc, #116]	; (8000934 <HAL_GPIO_Init+0x174>)
 80008be:	0032      	movs	r2, r6
 80008c0:	42b8      	cmp	r0, r7
 80008c2:	d000      	beq.n	80008c6 <HAL_GPIO_Init+0x106>
 80008c4:	9a05      	ldr	r2, [sp, #20]
 80008c6:	40aa      	lsls	r2, r5
 80008c8:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80008ca:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008cc:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 80008ce:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_GPIO_Init+0x178>)
        temp &= ~((uint32_t)iocurrent);
 80008d2:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 80008d4:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008d6:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80008d8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008da:	03c9      	lsls	r1, r1, #15
 80008dc:	d401      	bmi.n	80008e2 <HAL_GPIO_Init+0x122>
        temp &= ~((uint32_t)iocurrent);
 80008de:	0035      	movs	r5, r6
 80008e0:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80008e2:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008e4:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80008e6:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008e8:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80008ea:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ec:	0389      	lsls	r1, r1, #14
 80008ee:	d401      	bmi.n	80008f4 <HAL_GPIO_Init+0x134>
        temp &= ~((uint32_t)iocurrent);
 80008f0:	0035      	movs	r5, r6
 80008f2:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80008f4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80008f6:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80008f8:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008fa:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80008fc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008fe:	02c9      	lsls	r1, r1, #11
 8000900:	d401      	bmi.n	8000906 <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 8000902:	0035      	movs	r5, r6
 8000904:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000906:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000908:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800090a:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800090c:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800090e:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000910:	0289      	lsls	r1, r1, #10
 8000912:	d401      	bmi.n	8000918 <HAL_GPIO_Init+0x158>
        temp &= ~((uint32_t)iocurrent);
 8000914:	4025      	ands	r5, r4
 8000916:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000918:	60d6      	str	r6, [r2, #12]
    position++;
 800091a:	3301      	adds	r3, #1
 800091c:	e75c      	b.n	80007d8 <HAL_GPIO_Init+0x18>
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	afffe400 	.word	0xafffe400
 8000924:	40021000 	.word	0x40021000
 8000928:	40010000 	.word	0x40010000
 800092c:	50000400 	.word	0x50000400
 8000930:	50000800 	.word	0x50000800
 8000934:	50000c00 	.word	0x50000c00
 8000938:	40010400 	.word	0x40010400

0800093c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800093c:	6803      	ldr	r3, [r0, #0]
 800093e:	699a      	ldr	r2, [r3, #24]
 8000940:	0792      	lsls	r2, r2, #30
 8000942:	d501      	bpl.n	8000948 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000948:	2201      	movs	r2, #1
 800094a:	6999      	ldr	r1, [r3, #24]
 800094c:	4211      	tst	r1, r2
 800094e:	d102      	bne.n	8000956 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000950:	6999      	ldr	r1, [r3, #24]
 8000952:	430a      	orrs	r2, r1
 8000954:	619a      	str	r2, [r3, #24]
  }
}
 8000956:	4770      	bx	lr

08000958 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800095c:	0589      	lsls	r1, r1, #22
 800095e:	4333      	orrs	r3, r6
 8000960:	0d89      	lsrs	r1, r1, #22
 8000962:	4319      	orrs	r1, r3
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	6804      	ldr	r4, [r0, #0]
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	0d70      	lsrs	r0, r6, #21
 800096c:	4018      	ands	r0, r3
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <I2C_TransferConfig+0x28>)
 8000970:	6865      	ldr	r5, [r4, #4]
 8000972:	0412      	lsls	r2, r2, #16
 8000974:	4318      	orrs	r0, r3
 8000976:	4385      	bics	r5, r0
 8000978:	4311      	orrs	r1, r2
 800097a:	4329      	orrs	r1, r5
 800097c:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	03ff63ff 	.word	0x03ff63ff

08000984 <I2C_WaitOnFlagUntilTimeout>:
{
 8000984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000986:	0004      	movs	r4, r0
 8000988:	000e      	movs	r6, r1
 800098a:	0017      	movs	r7, r2
 800098c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800098e:	6822      	ldr	r2, [r4, #0]
 8000990:	6993      	ldr	r3, [r2, #24]
 8000992:	4033      	ands	r3, r6
 8000994:	1b9b      	subs	r3, r3, r6
 8000996:	4259      	negs	r1, r3
 8000998:	414b      	adcs	r3, r1
 800099a:	42bb      	cmp	r3, r7
 800099c:	d001      	beq.n	80009a2 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800099e:	2000      	movs	r0, #0
 80009a0:	e017      	b.n	80009d2 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80009a2:	1c6b      	adds	r3, r5, #1
 80009a4:	d0f4      	beq.n	8000990 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009a6:	f7ff fe8f 	bl	80006c8 <HAL_GetTick>
 80009aa:	9b06      	ldr	r3, [sp, #24]
 80009ac:	1ac0      	subs	r0, r0, r3
 80009ae:	4285      	cmp	r5, r0
 80009b0:	d301      	bcc.n	80009b6 <I2C_WaitOnFlagUntilTimeout+0x32>
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d1eb      	bne.n	800098e <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009b6:	2220      	movs	r2, #32
 80009b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80009ba:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009bc:	4313      	orrs	r3, r2
 80009be:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009c0:	0023      	movs	r3, r4
 80009c2:	3341      	adds	r3, #65	; 0x41
 80009c4:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009c6:	0022      	movs	r2, r4
 80009c8:	2300      	movs	r3, #0
 80009ca:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80009cc:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009ce:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80009d0:	7023      	strb	r3, [r4, #0]
}
 80009d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009d4 <I2C_IsAcknowledgeFailed>:
{
 80009d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009d6:	6803      	ldr	r3, [r0, #0]
{
 80009d8:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009da:	6998      	ldr	r0, [r3, #24]
 80009dc:	2310      	movs	r3, #16
{
 80009de:	000e      	movs	r6, r1
 80009e0:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009e2:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80009e4:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d118      	bne.n	8000a1c <I2C_IsAcknowledgeFailed+0x48>
}
 80009ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80009ec:	1c72      	adds	r2, r6, #1
 80009ee:	d016      	beq.n	8000a1e <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009f0:	f7ff fe6a 	bl	80006c8 <HAL_GetTick>
 80009f4:	1bc0      	subs	r0, r0, r7
 80009f6:	4286      	cmp	r6, r0
 80009f8:	d301      	bcc.n	80009fe <I2C_IsAcknowledgeFailed+0x2a>
 80009fa:	2e00      	cmp	r6, #0
 80009fc:	d10e      	bne.n	8000a1c <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009fe:	2220      	movs	r2, #32
 8000a00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a02:	4313      	orrs	r3, r2
 8000a04:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a06:	0023      	movs	r3, r4
 8000a08:	3341      	adds	r3, #65	; 0x41
 8000a0a:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a0c:	0022      	movs	r2, r4
 8000a0e:	2300      	movs	r3, #0
 8000a10:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8000a12:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a14:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8000a16:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8000a18:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8000a1a:	e7e6      	b.n	80009ea <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	699a      	ldr	r2, [r3, #24]
 8000a20:	422a      	tst	r2, r5
 8000a22:	d0e3      	beq.n	80009ec <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a24:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8000a26:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a28:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a2a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000a2c:	f7ff ff86 	bl	800093c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000a30:	6822      	ldr	r2, [r4, #0]
 8000a32:	4906      	ldr	r1, [pc, #24]	; (8000a4c <I2C_IsAcknowledgeFailed+0x78>)
 8000a34:	6853      	ldr	r3, [r2, #4]
 8000a36:	400b      	ands	r3, r1
 8000a38:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000a42:	0023      	movs	r3, r4
 8000a44:	3341      	adds	r3, #65	; 0x41
 8000a46:	701d      	strb	r5, [r3, #0]
 8000a48:	e7e0      	b.n	8000a0c <I2C_IsAcknowledgeFailed+0x38>
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	fe00e800 	.word	0xfe00e800

08000a50 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	0004      	movs	r4, r0
 8000a54:	000d      	movs	r5, r1
 8000a56:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000a58:	2702      	movs	r7, #2
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	423b      	tst	r3, r7
 8000a60:	d001      	beq.n	8000a66 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000a62:	2000      	movs	r0, #0
}
 8000a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a66:	0032      	movs	r2, r6
 8000a68:	0029      	movs	r1, r5
 8000a6a:	0020      	movs	r0, r4
 8000a6c:	f7ff ffb2 	bl	80009d4 <I2C_IsAcknowledgeFailed>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d115      	bne.n	8000aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000a74:	1c6b      	adds	r3, r5, #1
 8000a76:	d0f0      	beq.n	8000a5a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a78:	f7ff fe26 	bl	80006c8 <HAL_GetTick>
 8000a7c:	1b80      	subs	r0, r0, r6
 8000a7e:	4285      	cmp	r5, r0
 8000a80:	d301      	bcc.n	8000a86 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d1e9      	bne.n	8000a5a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a86:	2220      	movs	r2, #32
 8000a88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a8e:	0023      	movs	r3, r4
 8000a90:	3341      	adds	r3, #65	; 0x41
 8000a92:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a94:	0022      	movs	r2, r4
 8000a96:	2300      	movs	r3, #0
 8000a98:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a9a:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a9c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000a9e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	e7df      	b.n	8000a64 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08000aa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa6:	0004      	movs	r4, r0
 8000aa8:	000d      	movs	r5, r1
 8000aaa:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000aac:	2720      	movs	r7, #32
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	423b      	tst	r3, r7
 8000ab4:	d001      	beq.n	8000aba <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000ab6:	2000      	movs	r0, #0
}
 8000ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000aba:	0032      	movs	r2, r6
 8000abc:	0029      	movs	r1, r5
 8000abe:	0020      	movs	r0, r4
 8000ac0:	f7ff ff88 	bl	80009d4 <I2C_IsAcknowledgeFailed>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d113      	bne.n	8000af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ac8:	f7ff fdfe 	bl	80006c8 <HAL_GetTick>
 8000acc:	1b80      	subs	r0, r0, r6
 8000ace:	4285      	cmp	r5, r0
 8000ad0:	d301      	bcc.n	8000ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d1eb      	bne.n	8000aae <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ada:	4313      	orrs	r3, r2
 8000adc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000ade:	0023      	movs	r3, r4
 8000ae0:	3341      	adds	r3, #65	; 0x41
 8000ae2:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ae4:	0022      	movs	r2, r4
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000aea:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000aec:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000aee:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000af0:	2001      	movs	r0, #1
 8000af2:	e7e1      	b.n	8000ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08000af4 <HAL_I2C_Init>:
{
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000af8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000afa:	2c00      	cmp	r4, #0
 8000afc:	d03f      	beq.n	8000b7e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000afe:	0025      	movs	r5, r4
 8000b00:	3541      	adds	r5, #65	; 0x41
 8000b02:	782b      	ldrb	r3, [r5, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d105      	bne.n	8000b16 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000b0a:	0022      	movs	r2, r4
 8000b0c:	3240      	adds	r2, #64	; 0x40
 8000b0e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000b10:	0020      	movs	r0, r4
 8000b12:	f001 fd47 	bl	80025a4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b16:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000b18:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b1a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000b1c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b1e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	68a6      	ldr	r6, [r4, #8]
 8000b24:	438a      	bics	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b28:	6861      	ldr	r1, [r4, #4]
 8000b2a:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_I2C_Init+0xa0>)
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b30:	6899      	ldr	r1, [r3, #8]
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_I2C_Init+0xa4>)
 8000b34:	4011      	ands	r1, r2
 8000b36:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b38:	2801      	cmp	r0, #1
 8000b3a:	d121      	bne.n	8000b80 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	0209      	lsls	r1, r1, #8
 8000b40:	4331      	orrs	r1, r6
 8000b42:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b44:	6858      	ldr	r0, [r3, #4]
 8000b46:	4915      	ldr	r1, [pc, #84]	; (8000b9c <HAL_I2C_Init+0xa8>)
 8000b48:	4301      	orrs	r1, r0
 8000b4a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b4c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b4e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b50:	400a      	ands	r2, r1
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b54:	6961      	ldr	r1, [r4, #20]
 8000b56:	6922      	ldr	r2, [r4, #16]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	69a1      	ldr	r1, [r4, #24]
 8000b5c:	0209      	lsls	r1, r1, #8
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b62:	6a21      	ldr	r1, [r4, #32]
 8000b64:	69e2      	ldr	r2, [r4, #28]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000b72:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b74:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b76:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b78:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b7a:	3442      	adds	r4, #66	; 0x42
 8000b7c:	7020      	strb	r0, [r4, #0]
}
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b80:	2184      	movs	r1, #132	; 0x84
 8000b82:	0209      	lsls	r1, r1, #8
 8000b84:	4331      	orrs	r1, r6
 8000b86:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d1db      	bne.n	8000b44 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0109      	lsls	r1, r1, #4
 8000b90:	6059      	str	r1, [r3, #4]
 8000b92:	e7d7      	b.n	8000b44 <HAL_I2C_Init+0x50>
 8000b94:	f0ffffff 	.word	0xf0ffffff
 8000b98:	ffff7fff 	.word	0xffff7fff
 8000b9c:	02008000 	.word	0x02008000

08000ba0 <HAL_I2C_Master_Transmit>:
{
 8000ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ba2:	0005      	movs	r5, r0
{
 8000ba4:	b087      	sub	sp, #28
 8000ba6:	9103      	str	r1, [sp, #12]
 8000ba8:	9204      	str	r2, [sp, #16]
 8000baa:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bac:	3541      	adds	r5, #65	; 0x41
 8000bae:	782b      	ldrb	r3, [r5, #0]
{
 8000bb0:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000bb2:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bb4:	2b20      	cmp	r3, #32
 8000bb6:	d114      	bne.n	8000be2 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8000bb8:	0023      	movs	r3, r4
 8000bba:	3340      	adds	r3, #64	; 0x40
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	2a01      	cmp	r2, #1
 8000bc0:	d00f      	beq.n	8000be2 <HAL_I2C_Master_Transmit+0x42>
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000bc6:	f7ff fd7f 	bl	80006c8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000bca:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000bcc:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000bce:	9000      	str	r0, [sp, #0]
 8000bd0:	2319      	movs	r3, #25
 8000bd2:	0032      	movs	r2, r6
 8000bd4:	0209      	lsls	r1, r1, #8
 8000bd6:	0020      	movs	r0, r4
 8000bd8:	f7ff fed4 	bl	8000984 <I2C_WaitOnFlagUntilTimeout>
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d002      	beq.n	8000be6 <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8000be0:	2001      	movs	r0, #1
}
 8000be2:	b007      	add	sp, #28
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000be6:	2321      	movs	r3, #33	; 0x21
 8000be8:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000bea:	0025      	movs	r5, r4
 8000bec:	3b11      	subs	r3, #17
 8000bee:	3542      	adds	r5, #66	; 0x42
 8000bf0:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000bf2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bf4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000bf6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000bf8:	466b      	mov	r3, sp
 8000bfa:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000bfc:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000bfe:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c00:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <HAL_I2C_Master_Transmit+0x124>)
 8000c04:	2aff      	cmp	r2, #255	; 0xff
 8000c06:	d921      	bls.n	8000c4c <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c08:	22ff      	movs	r2, #255	; 0xff
 8000c0a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	045b      	lsls	r3, r3, #17
 8000c12:	9903      	ldr	r1, [sp, #12]
 8000c14:	0020      	movs	r0, r4
 8000c16:	f7ff fe9f 	bl	8000958 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c1a:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000c1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c1e:	003a      	movs	r2, r7
 8000c20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000c22:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d119      	bne.n	8000c5c <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c28:	f7ff ff3c 	bl	8000aa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d1d7      	bne.n	8000be0 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c30:	2120      	movs	r1, #32
 8000c32:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000c34:	4e24      	ldr	r6, [pc, #144]	; (8000cc8 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c36:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4032      	ands	r2, r6
 8000c3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c3e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000c40:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000c42:	3341      	adds	r3, #65	; 0x41
 8000c44:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000c46:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000c48:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000c4a:	e7ca      	b.n	8000be2 <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000c4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	049b      	lsls	r3, r3, #18
 8000c5a:	e7da      	b.n	8000c12 <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c5c:	f7ff fef8 	bl	8000a50 <I2C_WaitOnTXISFlagUntilTimeout>
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d1bd      	bne.n	8000be0 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000c6a:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000c6c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000c6e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000c70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000c74:	3b01      	subs	r3, #1
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c7a:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0ca      	beq.n	8000c1c <HAL_I2C_Master_Transmit+0x7c>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d1c8      	bne.n	8000c1c <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000c8a:	9700      	str	r7, [sp, #0]
 8000c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	0020      	movs	r0, r4
 8000c92:	f7ff fe77 	bl	8000984 <I2C_WaitOnFlagUntilTimeout>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d1a2      	bne.n	8000be0 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c9c:	2bff      	cmp	r3, #255	; 0xff
 8000c9e:	d909      	bls.n	8000cb4 <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ca4:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ca6:	045b      	lsls	r3, r3, #17
 8000ca8:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000caa:	9903      	ldr	r1, [sp, #12]
 8000cac:	0020      	movs	r0, r4
 8000cae:	f7ff fe53 	bl	8000958 <I2C_TransferConfig>
 8000cb2:	e7b3      	b.n	8000c1c <HAL_I2C_Master_Transmit+0x7c>
 8000cb4:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000cb6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cb8:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000cba:	b292      	uxth	r2, r2
 8000cbc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	9000      	str	r0, [sp, #0]
 8000cc2:	e7f2      	b.n	8000caa <HAL_I2C_Master_Transmit+0x10a>
 8000cc4:	80002000 	.word	0x80002000
 8000cc8:	fe00e800 	.word	0xfe00e800

08000ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cce:	0004      	movs	r4, r0
 8000cd0:	3441      	adds	r4, #65	; 0x41
 8000cd2:	7822      	ldrb	r2, [r4, #0]
{
 8000cd4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cd6:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000cd8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cda:	2a20      	cmp	r2, #32
 8000cdc:	d118      	bne.n	8000d10 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000cde:	001d      	movs	r5, r3
 8000ce0:	3540      	adds	r5, #64	; 0x40
 8000ce2:	782e      	ldrb	r6, [r5, #0]
 8000ce4:	2e01      	cmp	r6, #1
 8000ce6:	d013      	beq.n	8000d10 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000ce8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cea:	3022      	adds	r0, #34	; 0x22
 8000cec:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000cee:	681e      	ldr	r6, [r3, #0]
 8000cf0:	3823      	subs	r0, #35	; 0x23
 8000cf2:	4386      	bics	r6, r0
 8000cf4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cf6:	681e      	ldr	r6, [r3, #0]
 8000cf8:	4f06      	ldr	r7, [pc, #24]	; (8000d14 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000cfa:	403e      	ands	r6, r7
 8000cfc:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cfe:	681e      	ldr	r6, [r3, #0]
 8000d00:	4331      	orrs	r1, r6
 8000d02:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000d04:	6819      	ldr	r1, [r3, #0]
 8000d06:	4308      	orrs	r0, r1
 8000d08:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000d0a:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d0c:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000d0e:	7028      	strb	r0, [r5, #0]
  }
}
 8000d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	ffffefff 	.word	0xffffefff

08000d18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	3541      	adds	r5, #65	; 0x41
 8000d1e:	782a      	ldrb	r2, [r5, #0]
{
 8000d20:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d22:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000d24:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d26:	2a20      	cmp	r2, #32
 8000d28:	d117      	bne.n	8000d5a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000d2a:	001c      	movs	r4, r3
 8000d2c:	3440      	adds	r4, #64	; 0x40
 8000d2e:	7826      	ldrb	r6, [r4, #0]
 8000d30:	2e01      	cmp	r6, #1
 8000d32:	d012      	beq.n	8000d5a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000d34:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d36:	3022      	adds	r0, #34	; 0x22
 8000d38:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000d3a:	681e      	ldr	r6, [r3, #0]
 8000d3c:	3823      	subs	r0, #35	; 0x23
 8000d3e:	4386      	bics	r6, r0
 8000d40:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000d42:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000d44:	4f05      	ldr	r7, [pc, #20]	; (8000d5c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000d46:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000d48:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000d4a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000d4c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000d4e:	6819      	ldr	r1, [r3, #0]
 8000d50:	4308      	orrs	r0, r1
 8000d52:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000d54:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d56:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000d58:	7020      	strb	r0, [r4, #0]
  }
}
 8000d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5c:	fffff0ff 	.word	0xfffff0ff

08000d60 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <HAL_PWR_EnableBkUpAccess+0x10>)
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	6811      	ldr	r1, [r2, #0]
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	4770      	bx	lr
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40007000 	.word	0x40007000

08000d74 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8000d74:	2110      	movs	r1, #16
 8000d76:	4a02      	ldr	r2, [pc, #8]	; (8000d80 <HAL_PWR_DisablePVD+0xc>)
 8000d78:	6813      	ldr	r3, [r2, #0]
 8000d7a:	438b      	bics	r3, r1
 8000d7c:	6013      	str	r3, [r2, #0]
}
 8000d7e:	4770      	bx	lr
 8000d80:	40007000 	.word	0x40007000

08000d84 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8000d84:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8000d86:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_PWR_EnterSTOPMode+0x30>)
 8000d8a:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8000d8c:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8000d8e:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8000d90:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8000d92:	2204      	movs	r2, #4
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_PWR_EnterSTOPMode+0x34>)
 8000d96:	6918      	ldr	r0, [r3, #16]
 8000d98:	4302      	orrs	r2, r0
 8000d9a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000d9c:	2901      	cmp	r1, #1
 8000d9e:	d105      	bne.n	8000dac <HAL_PWR_EnterSTOPMode+0x28>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000da0:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8000da2:	2104      	movs	r1, #4
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	438a      	bics	r2, r1
 8000da8:	611a      	str	r2, [r3, #16]

}
 8000daa:	bd10      	pop	{r4, pc}
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8000dac:	bf40      	sev
  __ASM volatile ("wfe");
 8000dae:	bf20      	wfe
 8000db0:	bf20      	wfe
 8000db2:	e7f6      	b.n	8000da2 <HAL_PWR_EnterSTOPMode+0x1e>
 8000db4:	40007000 	.word	0x40007000
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	4a03      	ldr	r2, [pc, #12]	; (8000dcc <HAL_PWREx_EnableUltraLowPower+0x10>)
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	6811      	ldr	r1, [r2, #0]
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	4770      	bx	lr
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000dd0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000dd4:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000dd6:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000dd8:	400a      	ands	r2, r1
 8000dda:	2a08      	cmp	r2, #8
 8000ddc:	d026      	beq.n	8000e2c <HAL_RCC_GetSysClockFreq+0x5c>
 8000dde:	2a0c      	cmp	r2, #12
 8000de0:	d006      	beq.n	8000df0 <HAL_RCC_GetSysClockFreq+0x20>
 8000de2:	2a04      	cmp	r2, #4
 8000de4:	d11a      	bne.n	8000e1c <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	06db      	lsls	r3, r3, #27
 8000dea:	d421      	bmi.n	8000e30 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000dec:	4812      	ldr	r0, [pc, #72]	; (8000e38 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000dee:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000df0:	028a      	lsls	r2, r1, #10
 8000df2:	4812      	ldr	r0, [pc, #72]	; (8000e3c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000df4:	0f12      	lsrs	r2, r2, #28
 8000df6:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000df8:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000dfa:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000dfc:	0f89      	lsrs	r1, r1, #30
 8000dfe:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e00:	03c0      	lsls	r0, r0, #15
 8000e02:	d504      	bpl.n	8000e0e <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000e04:	480e      	ldr	r0, [pc, #56]	; (8000e40 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000e06:	4350      	muls	r0, r2
 8000e08:	f7ff f99a 	bl	8000140 <__udivsi3>
 8000e0c:	e7ef      	b.n	8000dee <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	06db      	lsls	r3, r3, #27
 8000e12:	d501      	bpl.n	8000e18 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <HAL_RCC_GetSysClockFreq+0x74>)
 8000e16:	e7f6      	b.n	8000e06 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <HAL_RCC_GetSysClockFreq+0x68>)
 8000e1a:	e7f4      	b.n	8000e06 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000e1c:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000e1e:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000e20:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000e22:	041b      	lsls	r3, r3, #16
 8000e24:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000e26:	3301      	adds	r3, #1
 8000e28:	4098      	lsls	r0, r3
 8000e2a:	e7e0      	b.n	8000dee <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <HAL_RCC_GetSysClockFreq+0x70>)
 8000e2e:	e7de      	b.n	8000dee <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000e32:	e7dc      	b.n	8000dee <HAL_RCC_GetSysClockFreq+0x1e>
 8000e34:	40021000 	.word	0x40021000
 8000e38:	00f42400 	.word	0x00f42400
 8000e3c:	080049a1 	.word	0x080049a1
 8000e40:	007a1200 	.word	0x007a1200
 8000e44:	003d0900 	.word	0x003d0900

08000e48 <HAL_RCC_OscConfig>:
{
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4a:	0005      	movs	r5, r0
 8000e4c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d102      	bne.n	8000e58 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000e52:	2001      	movs	r0, #1
}
 8000e54:	b007      	add	sp, #28
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e58:	230c      	movs	r3, #12
 8000e5a:	4cbe      	ldr	r4, [pc, #760]	; (8001154 <HAL_RCC_OscConfig+0x30c>)
 8000e5c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e5e:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e60:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	025b      	lsls	r3, r3, #9
 8000e66:	401a      	ands	r2, r3
 8000e68:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6a:	6802      	ldr	r2, [r0, #0]
 8000e6c:	07d2      	lsls	r2, r2, #31
 8000e6e:	d441      	bmi.n	8000ef4 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	079b      	lsls	r3, r3, #30
 8000e74:	d500      	bpl.n	8000e78 <HAL_RCC_OscConfig+0x30>
 8000e76:	e087      	b.n	8000f88 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	06db      	lsls	r3, r3, #27
 8000e7c:	d528      	bpl.n	8000ed0 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d000      	beq.n	8000e84 <HAL_RCC_OscConfig+0x3c>
 8000e82:	e0d9      	b.n	8001038 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	059b      	lsls	r3, r3, #22
 8000e88:	d502      	bpl.n	8000e90 <HAL_RCC_OscConfig+0x48>
 8000e8a:	69eb      	ldr	r3, [r5, #28]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0e0      	beq.n	8000e52 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e90:	6862      	ldr	r2, [r4, #4]
 8000e92:	49b1      	ldr	r1, [pc, #708]	; (8001158 <HAL_RCC_OscConfig+0x310>)
 8000e94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e96:	400a      	ands	r2, r1
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e9c:	6861      	ldr	r1, [r4, #4]
 8000e9e:	6a2a      	ldr	r2, [r5, #32]
 8000ea0:	0209      	lsls	r1, r1, #8
 8000ea2:	0a09      	lsrs	r1, r1, #8
 8000ea4:	0612      	lsls	r2, r2, #24
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	0b5b      	lsrs	r3, r3, #13
 8000eae:	3301      	adds	r3, #1
 8000eb0:	0212      	lsls	r2, r2, #8
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000eb6:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000eb8:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000eba:	060a      	lsls	r2, r1, #24
 8000ebc:	49a7      	ldr	r1, [pc, #668]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000ebe:	0f12      	lsrs	r2, r2, #28
 8000ec0:	5c8a      	ldrb	r2, [r1, r2]
 8000ec2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ec4:	4aa6      	ldr	r2, [pc, #664]	; (8001160 <HAL_RCC_OscConfig+0x318>)
 8000ec6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000ec8:	f7ff fbba 	bl	8000640 <HAL_InitTick>
        if(status != HAL_OK)
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d1c1      	bne.n	8000e54 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	071b      	lsls	r3, r3, #28
 8000ed4:	d500      	bpl.n	8000ed8 <HAL_RCC_OscConfig+0x90>
 8000ed6:	e0e6      	b.n	80010a6 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	075b      	lsls	r3, r3, #29
 8000edc:	d500      	bpl.n	8000ee0 <HAL_RCC_OscConfig+0x98>
 8000ede:	e108      	b.n	80010f2 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	069b      	lsls	r3, r3, #26
 8000ee4:	d500      	bpl.n	8000ee8 <HAL_RCC_OscConfig+0xa0>
 8000ee6:	e18d      	b.n	8001204 <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ee8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d000      	beq.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
 8000eee:	e1bc      	b.n	800126a <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e7af      	b.n	8000e54 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef4:	2e08      	cmp	r6, #8
 8000ef6:	d004      	beq.n	8000f02 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ef8:	2e0c      	cmp	r6, #12
 8000efa:	d109      	bne.n	8000f10 <HAL_RCC_OscConfig+0xc8>
 8000efc:	9a01      	ldr	r2, [sp, #4]
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	039b      	lsls	r3, r3, #14
 8000f06:	d5b3      	bpl.n	8000e70 <HAL_RCC_OscConfig+0x28>
 8000f08:	686b      	ldr	r3, [r5, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1b0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x28>
 8000f0e:	e7a0      	b.n	8000e52 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f10:	686a      	ldr	r2, [r5, #4]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d111      	bne.n	8000f3a <HAL_RCC_OscConfig+0xf2>
 8000f16:	6822      	ldr	r2, [r4, #0]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fbd4 	bl	80006c8 <HAL_GetTick>
 8000f20:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	0292      	lsls	r2, r2, #10
 8000f28:	4213      	tst	r3, r2
 8000f2a:	d1a1      	bne.n	8000e70 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fbcc 	bl	80006c8 <HAL_GetTick>
 8000f30:	1bc0      	subs	r0, r0, r7
 8000f32:	2864      	cmp	r0, #100	; 0x64
 8000f34:	d9f5      	bls.n	8000f22 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000f36:	2003      	movs	r0, #3
 8000f38:	e78c      	b.n	8000e54 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3a:	21a0      	movs	r1, #160	; 0xa0
 8000f3c:	02c9      	lsls	r1, r1, #11
 8000f3e:	428a      	cmp	r2, r1
 8000f40:	d105      	bne.n	8000f4e <HAL_RCC_OscConfig+0x106>
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	6821      	ldr	r1, [r4, #0]
 8000f46:	02d2      	lsls	r2, r2, #11
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	6022      	str	r2, [r4, #0]
 8000f4c:	e7e3      	b.n	8000f16 <HAL_RCC_OscConfig+0xce>
 8000f4e:	6821      	ldr	r1, [r4, #0]
 8000f50:	4884      	ldr	r0, [pc, #528]	; (8001164 <HAL_RCC_OscConfig+0x31c>)
 8000f52:	4001      	ands	r1, r0
 8000f54:	6021      	str	r1, [r4, #0]
 8000f56:	6821      	ldr	r1, [r4, #0]
 8000f58:	400b      	ands	r3, r1
 8000f5a:	9305      	str	r3, [sp, #20]
 8000f5c:	9b05      	ldr	r3, [sp, #20]
 8000f5e:	4982      	ldr	r1, [pc, #520]	; (8001168 <HAL_RCC_OscConfig+0x320>)
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	400b      	ands	r3, r1
 8000f64:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f66:	2a00      	cmp	r2, #0
 8000f68:	d1d8      	bne.n	8000f1c <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fbad 	bl	80006c8 <HAL_GetTick>
 8000f6e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	0292      	lsls	r2, r2, #10
 8000f76:	4213      	tst	r3, r2
 8000f78:	d100      	bne.n	8000f7c <HAL_RCC_OscConfig+0x134>
 8000f7a:	e779      	b.n	8000e70 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fba4 	bl	80006c8 <HAL_GetTick>
 8000f80:	1bc0      	subs	r0, r0, r7
 8000f82:	2864      	cmp	r0, #100	; 0x64
 8000f84:	d9f4      	bls.n	8000f70 <HAL_RCC_OscConfig+0x128>
 8000f86:	e7d6      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000f88:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f8a:	2e04      	cmp	r6, #4
 8000f8c:	d004      	beq.n	8000f98 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f8e:	2e0c      	cmp	r6, #12
 8000f90:	d125      	bne.n	8000fde <HAL_RCC_OscConfig+0x196>
 8000f92:	9b01      	ldr	r3, [sp, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d122      	bne.n	8000fde <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	075b      	lsls	r3, r3, #29
 8000f9c:	d502      	bpl.n	8000fa4 <HAL_RCC_OscConfig+0x15c>
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	d100      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x15c>
 8000fa2:	e756      	b.n	8000e52 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	6861      	ldr	r1, [r4, #4]
 8000fa6:	692b      	ldr	r3, [r5, #16]
 8000fa8:	4870      	ldr	r0, [pc, #448]	; (800116c <HAL_RCC_OscConfig+0x324>)
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	4001      	ands	r1, r0
 8000fae:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fb0:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	438b      	bics	r3, r1
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fbc:	f7ff ff08 	bl	8000dd0 <HAL_RCC_GetSysClockFreq>
 8000fc0:	68e3      	ldr	r3, [r4, #12]
 8000fc2:	4a66      	ldr	r2, [pc, #408]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	0f1b      	lsrs	r3, r3, #28
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	40d8      	lsrs	r0, r3
 8000fcc:	4b64      	ldr	r3, [pc, #400]	; (8001160 <HAL_RCC_OscConfig+0x318>)
 8000fce:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fb35 	bl	8000640 <HAL_InitTick>
      if(status != HAL_OK)
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d100      	bne.n	8000fdc <HAL_RCC_OscConfig+0x194>
 8000fda:	e74d      	b.n	8000e78 <HAL_RCC_OscConfig+0x30>
 8000fdc:	e73a      	b.n	8000e54 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fde:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d018      	beq.n	8001016 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fe4:	2109      	movs	r1, #9
 8000fe6:	438b      	bics	r3, r1
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb6c 	bl	80006c8 <HAL_GetTick>
 8000ff0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	4213      	tst	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffa:	6862      	ldr	r2, [r4, #4]
 8000ffc:	692b      	ldr	r3, [r5, #16]
 8000ffe:	495b      	ldr	r1, [pc, #364]	; (800116c <HAL_RCC_OscConfig+0x324>)
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	400a      	ands	r2, r1
 8001004:	4313      	orrs	r3, r2
 8001006:	6063      	str	r3, [r4, #4]
 8001008:	e736      	b.n	8000e78 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100a:	f7ff fb5d 	bl	80006c8 <HAL_GetTick>
 800100e:	1bc0      	subs	r0, r0, r7
 8001010:	2802      	cmp	r0, #2
 8001012:	d9ee      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x1aa>
 8001014:	e78f      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8001016:	2201      	movs	r2, #1
 8001018:	4393      	bics	r3, r2
 800101a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800101c:	f7ff fb54 	bl	80006c8 <HAL_GetTick>
 8001020:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001022:	2204      	movs	r2, #4
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	4213      	tst	r3, r2
 8001028:	d100      	bne.n	800102c <HAL_RCC_OscConfig+0x1e4>
 800102a:	e725      	b.n	8000e78 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fb4c 	bl	80006c8 <HAL_GetTick>
 8001030:	1bc0      	subs	r0, r0, r7
 8001032:	2802      	cmp	r0, #2
 8001034:	d9f5      	bls.n	8001022 <HAL_RCC_OscConfig+0x1da>
 8001036:	e77e      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001038:	69eb      	ldr	r3, [r5, #28]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d020      	beq.n	8001080 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	6822      	ldr	r2, [r4, #0]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4313      	orrs	r3, r2
 8001046:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001048:	f7ff fb3e 	bl	80006c8 <HAL_GetTick>
 800104c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800104e:	2280      	movs	r2, #128	; 0x80
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4213      	tst	r3, r2
 8001056:	d00d      	beq.n	8001074 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001058:	6863      	ldr	r3, [r4, #4]
 800105a:	4a3f      	ldr	r2, [pc, #252]	; (8001158 <HAL_RCC_OscConfig+0x310>)
 800105c:	4013      	ands	r3, r2
 800105e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001060:	4313      	orrs	r3, r2
 8001062:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001064:	6862      	ldr	r2, [r4, #4]
 8001066:	6a2b      	ldr	r3, [r5, #32]
 8001068:	0212      	lsls	r2, r2, #8
 800106a:	061b      	lsls	r3, r3, #24
 800106c:	0a12      	lsrs	r2, r2, #8
 800106e:	4313      	orrs	r3, r2
 8001070:	6063      	str	r3, [r4, #4]
 8001072:	e72d      	b.n	8000ed0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001074:	f7ff fb28 	bl	80006c8 <HAL_GetTick>
 8001078:	1bc0      	subs	r0, r0, r7
 800107a:	2802      	cmp	r0, #2
 800107c:	d9e7      	bls.n	800104e <HAL_RCC_OscConfig+0x206>
 800107e:	e75a      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	4a3b      	ldr	r2, [pc, #236]	; (8001170 <HAL_RCC_OscConfig+0x328>)
 8001084:	4013      	ands	r3, r2
 8001086:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001088:	f7ff fb1e 	bl	80006c8 <HAL_GetTick>
 800108c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4213      	tst	r3, r2
 8001096:	d100      	bne.n	800109a <HAL_RCC_OscConfig+0x252>
 8001098:	e71a      	b.n	8000ed0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800109a:	f7ff fb15 	bl	80006c8 <HAL_GetTick>
 800109e:	1bc0      	subs	r0, r0, r7
 80010a0:	2802      	cmp	r0, #2
 80010a2:	d9f4      	bls.n	800108e <HAL_RCC_OscConfig+0x246>
 80010a4:	e747      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a6:	696a      	ldr	r2, [r5, #20]
 80010a8:	2301      	movs	r3, #1
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d010      	beq.n	80010d0 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 80010ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80010b0:	4313      	orrs	r3, r2
 80010b2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80010b4:	f7ff fb08 	bl	80006c8 <HAL_GetTick>
 80010b8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010ba:	2202      	movs	r2, #2
 80010bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010be:	4213      	tst	r3, r2
 80010c0:	d000      	beq.n	80010c4 <HAL_RCC_OscConfig+0x27c>
 80010c2:	e709      	b.n	8000ed8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fb00 	bl	80006c8 <HAL_GetTick>
 80010c8:	1bc0      	subs	r0, r0, r7
 80010ca:	2802      	cmp	r0, #2
 80010cc:	d9f5      	bls.n	80010ba <HAL_RCC_OscConfig+0x272>
 80010ce:	e732      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 80010d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80010d2:	439a      	bics	r2, r3
 80010d4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80010d6:	f7ff faf7 	bl	80006c8 <HAL_GetTick>
 80010da:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010dc:	2202      	movs	r2, #2
 80010de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010e0:	4213      	tst	r3, r2
 80010e2:	d100      	bne.n	80010e6 <HAL_RCC_OscConfig+0x29e>
 80010e4:	e6f8      	b.n	8000ed8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e6:	f7ff faef 	bl	80006c8 <HAL_GetTick>
 80010ea:	1bc0      	subs	r0, r0, r7
 80010ec:	2802      	cmp	r0, #2
 80010ee:	d9f5      	bls.n	80010dc <HAL_RCC_OscConfig+0x294>
 80010f0:	e721      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80010f4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010f8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80010fa:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fc:	421a      	tst	r2, r3
 80010fe:	d104      	bne.n	800110a <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001102:	4313      	orrs	r3, r2
 8001104:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	4f19      	ldr	r7, [pc, #100]	; (8001174 <HAL_RCC_OscConfig+0x32c>)
 800110e:	0052      	lsls	r2, r2, #1
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	4213      	tst	r3, r2
 8001114:	d008      	beq.n	8001128 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	68ab      	ldr	r3, [r5, #8]
 800111a:	0052      	lsls	r2, r2, #1
 800111c:	4293      	cmp	r3, r2
 800111e:	d12b      	bne.n	8001178 <HAL_RCC_OscConfig+0x330>
 8001120:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001122:	4313      	orrs	r3, r2
 8001124:	6523      	str	r3, [r4, #80]	; 0x50
 8001126:	e04c      	b.n	80011c2 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	0052      	lsls	r2, r2, #1
 800112e:	4313      	orrs	r3, r2
 8001130:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001132:	f7ff fac9 	bl	80006c8 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800113a:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	9303      	str	r3, [sp, #12]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	9a03      	ldr	r2, [sp, #12]
 8001142:	4213      	tst	r3, r2
 8001144:	d1e7      	bne.n	8001116 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001146:	f7ff fabf 	bl	80006c8 <HAL_GetTick>
 800114a:	9b02      	ldr	r3, [sp, #8]
 800114c:	1ac0      	subs	r0, r0, r3
 800114e:	2864      	cmp	r0, #100	; 0x64
 8001150:	d9f5      	bls.n	800113e <HAL_RCC_OscConfig+0x2f6>
 8001152:	e6f0      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
 8001154:	40021000 	.word	0x40021000
 8001158:	ffff1fff 	.word	0xffff1fff
 800115c:	08004989 	.word	0x08004989
 8001160:	2000000c 	.word	0x2000000c
 8001164:	fffeffff 	.word	0xfffeffff
 8001168:	fffbffff 	.word	0xfffbffff
 800116c:	ffffe0ff 	.word	0xffffe0ff
 8001170:	fffffeff 	.word	0xfffffeff
 8001174:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001178:	2b00      	cmp	r3, #0
 800117a:	d116      	bne.n	80011aa <HAL_RCC_OscConfig+0x362>
 800117c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800117e:	4a6c      	ldr	r2, [pc, #432]	; (8001330 <HAL_RCC_OscConfig+0x4e8>)
 8001180:	4013      	ands	r3, r2
 8001182:	6523      	str	r3, [r4, #80]	; 0x50
 8001184:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001186:	4a6b      	ldr	r2, [pc, #428]	; (8001334 <HAL_RCC_OscConfig+0x4ec>)
 8001188:	4013      	ands	r3, r2
 800118a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800118c:	f7ff fa9c 	bl	80006c8 <HAL_GetTick>
 8001190:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4213      	tst	r3, r2
 800119a:	d02a      	beq.n	80011f2 <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff fa94 	bl	80006c8 <HAL_GetTick>
 80011a0:	4b65      	ldr	r3, [pc, #404]	; (8001338 <HAL_RCC_OscConfig+0x4f0>)
 80011a2:	1bc0      	subs	r0, r0, r7
 80011a4:	4298      	cmp	r0, r3
 80011a6:	d9f4      	bls.n	8001192 <HAL_RCC_OscConfig+0x34a>
 80011a8:	e6c5      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011aa:	21a0      	movs	r1, #160	; 0xa0
 80011ac:	00c9      	lsls	r1, r1, #3
 80011ae:	428b      	cmp	r3, r1
 80011b0:	d10b      	bne.n	80011ca <HAL_RCC_OscConfig+0x382>
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6523      	str	r3, [r4, #80]	; 0x50
 80011bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011be:	431a      	orrs	r2, r3
 80011c0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80011c2:	f7ff fa81 	bl	80006c8 <HAL_GetTick>
 80011c6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011c8:	e00e      	b.n	80011e8 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011cc:	4a58      	ldr	r2, [pc, #352]	; (8001330 <HAL_RCC_OscConfig+0x4e8>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	6523      	str	r3, [r4, #80]	; 0x50
 80011d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011d4:	4a57      	ldr	r2, [pc, #348]	; (8001334 <HAL_RCC_OscConfig+0x4ec>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	e7a4      	b.n	8001124 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f7ff fa75 	bl	80006c8 <HAL_GetTick>
 80011de:	4b56      	ldr	r3, [pc, #344]	; (8001338 <HAL_RCC_OscConfig+0x4f0>)
 80011e0:	1bc0      	subs	r0, r0, r7
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d900      	bls.n	80011e8 <HAL_RCC_OscConfig+0x3a0>
 80011e6:	e6a6      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4213      	tst	r3, r2
 80011f0:	d0f3      	beq.n	80011da <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80011f2:	9b01      	ldr	r3, [sp, #4]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d000      	beq.n	80011fa <HAL_RCC_OscConfig+0x3b2>
 80011f8:	e672      	b.n	8000ee0 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011fc:	4a4f      	ldr	r2, [pc, #316]	; (800133c <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	4013      	ands	r3, r2
 8001200:	63a3      	str	r3, [r4, #56]	; 0x38
 8001202:	e66d      	b.n	8000ee0 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001204:	69a9      	ldr	r1, [r5, #24]
 8001206:	2301      	movs	r3, #1
 8001208:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <HAL_RCC_OscConfig+0x4f8>)
 800120a:	2900      	cmp	r1, #0
 800120c:	d018      	beq.n	8001240 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 800120e:	68a1      	ldr	r1, [r4, #8]
 8001210:	4319      	orrs	r1, r3
 8001212:	60a1      	str	r1, [r4, #8]
 8001214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001216:	430b      	orrs	r3, r1
 8001218:	6363      	str	r3, [r4, #52]	; 0x34
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	6a11      	ldr	r1, [r2, #32]
 800121e:	019b      	lsls	r3, r3, #6
 8001220:	430b      	orrs	r3, r1
 8001222:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001224:	f7ff fa50 	bl	80006c8 <HAL_GetTick>
 8001228:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800122a:	2202      	movs	r2, #2
 800122c:	68a3      	ldr	r3, [r4, #8]
 800122e:	4213      	tst	r3, r2
 8001230:	d000      	beq.n	8001234 <HAL_RCC_OscConfig+0x3ec>
 8001232:	e659      	b.n	8000ee8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001234:	f7ff fa48 	bl	80006c8 <HAL_GetTick>
 8001238:	1bc0      	subs	r0, r0, r7
 800123a:	2802      	cmp	r0, #2
 800123c:	d9f5      	bls.n	800122a <HAL_RCC_OscConfig+0x3e2>
 800123e:	e67a      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8001240:	68a1      	ldr	r1, [r4, #8]
 8001242:	4399      	bics	r1, r3
 8001244:	60a1      	str	r1, [r4, #8]
 8001246:	6a13      	ldr	r3, [r2, #32]
 8001248:	493e      	ldr	r1, [pc, #248]	; (8001344 <HAL_RCC_OscConfig+0x4fc>)
 800124a:	400b      	ands	r3, r1
 800124c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800124e:	f7ff fa3b 	bl	80006c8 <HAL_GetTick>
 8001252:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001254:	2202      	movs	r2, #2
 8001256:	68a3      	ldr	r3, [r4, #8]
 8001258:	4213      	tst	r3, r2
 800125a:	d100      	bne.n	800125e <HAL_RCC_OscConfig+0x416>
 800125c:	e644      	b.n	8000ee8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800125e:	f7ff fa33 	bl	80006c8 <HAL_GetTick>
 8001262:	1bc0      	subs	r0, r0, r7
 8001264:	2802      	cmp	r0, #2
 8001266:	d9f5      	bls.n	8001254 <HAL_RCC_OscConfig+0x40c>
 8001268:	e665      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800126a:	2e0c      	cmp	r6, #12
 800126c:	d043      	beq.n	80012f6 <HAL_RCC_OscConfig+0x4ae>
 800126e:	4a36      	ldr	r2, [pc, #216]	; (8001348 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001270:	2b02      	cmp	r3, #2
 8001272:	d12e      	bne.n	80012d2 <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 8001274:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001276:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001278:	4013      	ands	r3, r2
 800127a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800127c:	f7ff fa24 	bl	80006c8 <HAL_GetTick>
 8001280:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001282:	04b6      	lsls	r6, r6, #18
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	4233      	tst	r3, r6
 8001288:	d11d      	bne.n	80012c6 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800128c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800128e:	68e2      	ldr	r2, [r4, #12]
 8001290:	430b      	orrs	r3, r1
 8001292:	492e      	ldr	r1, [pc, #184]	; (800134c <HAL_RCC_OscConfig+0x504>)
 8001294:	400a      	ands	r2, r1
 8001296:	4313      	orrs	r3, r2
 8001298:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800129a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129c:	4313      	orrs	r3, r2
 800129e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	6822      	ldr	r2, [r4, #0]
 80012a4:	045b      	lsls	r3, r3, #17
 80012a6:	4313      	orrs	r3, r2
 80012a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012aa:	f7ff fa0d 	bl	80006c8 <HAL_GetTick>
 80012ae:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012b0:	04ad      	lsls	r5, r5, #18
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	422b      	tst	r3, r5
 80012b6:	d000      	beq.n	80012ba <HAL_RCC_OscConfig+0x472>
 80012b8:	e61a      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ba:	f7ff fa05 	bl	80006c8 <HAL_GetTick>
 80012be:	1b80      	subs	r0, r0, r6
 80012c0:	2802      	cmp	r0, #2
 80012c2:	d9f6      	bls.n	80012b2 <HAL_RCC_OscConfig+0x46a>
 80012c4:	e637      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c6:	f7ff f9ff 	bl	80006c8 <HAL_GetTick>
 80012ca:	1bc0      	subs	r0, r0, r7
 80012cc:	2802      	cmp	r0, #2
 80012ce:	d9d9      	bls.n	8001284 <HAL_RCC_OscConfig+0x43c>
 80012d0:	e631      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 80012d2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012d4:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80012d6:	4013      	ands	r3, r2
 80012d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012da:	f7ff f9f5 	bl	80006c8 <HAL_GetTick>
 80012de:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012e0:	04ad      	lsls	r5, r5, #18
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	422b      	tst	r3, r5
 80012e6:	d100      	bne.n	80012ea <HAL_RCC_OscConfig+0x4a2>
 80012e8:	e602      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff f9ed 	bl	80006c8 <HAL_GetTick>
 80012ee:	1b80      	subs	r0, r0, r6
 80012f0:	2802      	cmp	r0, #2
 80012f2:	d9f6      	bls.n	80012e2 <HAL_RCC_OscConfig+0x49a>
 80012f4:	e61f      	b.n	8000f36 <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 80012f6:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d100      	bne.n	80012fe <HAL_RCC_OscConfig+0x4b6>
 80012fc:	e5aa      	b.n	8000e54 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fe:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001300:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001302:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001304:	0252      	lsls	r2, r2, #9
 8001306:	401a      	ands	r2, r3
        return HAL_ERROR;
 8001308:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	428a      	cmp	r2, r1
 800130c:	d000      	beq.n	8001310 <HAL_RCC_OscConfig+0x4c8>
 800130e:	e5a1      	b.n	8000e54 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001310:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001314:	0392      	lsls	r2, r2, #14
 8001316:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001318:	428a      	cmp	r2, r1
 800131a:	d000      	beq.n	800131e <HAL_RCC_OscConfig+0x4d6>
 800131c:	e59a      	b.n	8000e54 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800131e:	20c0      	movs	r0, #192	; 0xc0
 8001320:	0400      	lsls	r0, r0, #16
 8001322:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001324:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001326:	1a18      	subs	r0, r3, r0
 8001328:	1e43      	subs	r3, r0, #1
 800132a:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800132c:	b2c0      	uxtb	r0, r0
 800132e:	e591      	b.n	8000e54 <HAL_RCC_OscConfig+0xc>
 8001330:	fffffeff 	.word	0xfffffeff
 8001334:	fffffbff 	.word	0xfffffbff
 8001338:	00001388 	.word	0x00001388
 800133c:	efffffff 	.word	0xefffffff
 8001340:	40010000 	.word	0x40010000
 8001344:	ffffdfff 	.word	0xffffdfff
 8001348:	feffffff 	.word	0xfeffffff
 800134c:	ff02ffff 	.word	0xff02ffff

08001350 <HAL_RCC_ClockConfig>:
{
 8001350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001352:	1e06      	subs	r6, r0, #0
 8001354:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001356:	d101      	bne.n	800135c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
}
 800135a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800135c:	2201      	movs	r2, #1
 800135e:	4c51      	ldr	r4, [pc, #324]	; (80014a4 <HAL_RCC_ClockConfig+0x154>)
 8001360:	9901      	ldr	r1, [sp, #4]
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	4013      	ands	r3, r2
 8001366:	428b      	cmp	r3, r1
 8001368:	d327      	bcc.n	80013ba <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136a:	6832      	ldr	r2, [r6, #0]
 800136c:	0793      	lsls	r3, r2, #30
 800136e:	d42f      	bmi.n	80013d0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001370:	07d3      	lsls	r3, r2, #31
 8001372:	d435      	bmi.n	80013e0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	2301      	movs	r3, #1
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	9901      	ldr	r1, [sp, #4]
 800137a:	401a      	ands	r2, r3
 800137c:	4291      	cmp	r1, r2
 800137e:	d200      	bcs.n	8001382 <HAL_RCC_ClockConfig+0x32>
 8001380:	e081      	b.n	8001486 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001382:	6832      	ldr	r2, [r6, #0]
 8001384:	4c48      	ldr	r4, [pc, #288]	; (80014a8 <HAL_RCC_ClockConfig+0x158>)
 8001386:	0753      	lsls	r3, r2, #29
 8001388:	d500      	bpl.n	800138c <HAL_RCC_ClockConfig+0x3c>
 800138a:	e084      	b.n	8001496 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138c:	0713      	lsls	r3, r2, #28
 800138e:	d506      	bpl.n	800139e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001390:	68e2      	ldr	r2, [r4, #12]
 8001392:	6933      	ldr	r3, [r6, #16]
 8001394:	4945      	ldr	r1, [pc, #276]	; (80014ac <HAL_RCC_ClockConfig+0x15c>)
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	400a      	ands	r2, r1
 800139a:	4313      	orrs	r3, r2
 800139c:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800139e:	f7ff fd17 	bl	8000dd0 <HAL_RCC_GetSysClockFreq>
 80013a2:	68e3      	ldr	r3, [r4, #12]
 80013a4:	4a42      	ldr	r2, [pc, #264]	; (80014b0 <HAL_RCC_ClockConfig+0x160>)
 80013a6:	061b      	lsls	r3, r3, #24
 80013a8:	0f1b      	lsrs	r3, r3, #28
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	40d8      	lsrs	r0, r3
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_ClockConfig+0x164>)
 80013b0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff f944 	bl	8000640 <HAL_InitTick>
 80013b8:	e7cf      	b.n	800135a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	9901      	ldr	r1, [sp, #4]
 80013be:	4393      	bics	r3, r2
 80013c0:	430b      	orrs	r3, r1
 80013c2:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	4013      	ands	r3, r2
 80013c8:	9a01      	ldr	r2, [sp, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d1c4      	bne.n	8001358 <HAL_RCC_ClockConfig+0x8>
 80013ce:	e7cc      	b.n	800136a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d0:	20f0      	movs	r0, #240	; 0xf0
 80013d2:	4935      	ldr	r1, [pc, #212]	; (80014a8 <HAL_RCC_ClockConfig+0x158>)
 80013d4:	68cb      	ldr	r3, [r1, #12]
 80013d6:	4383      	bics	r3, r0
 80013d8:	68b0      	ldr	r0, [r6, #8]
 80013da:	4303      	orrs	r3, r0
 80013dc:	60cb      	str	r3, [r1, #12]
 80013de:	e7c7      	b.n	8001370 <HAL_RCC_ClockConfig+0x20>
 80013e0:	4d31      	ldr	r5, [pc, #196]	; (80014a8 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013e4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e6:	2a02      	cmp	r2, #2
 80013e8:	d119      	bne.n	800141e <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013ea:	039b      	lsls	r3, r3, #14
 80013ec:	d5b4      	bpl.n	8001358 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ee:	2103      	movs	r1, #3
 80013f0:	68eb      	ldr	r3, [r5, #12]
 80013f2:	438b      	bics	r3, r1
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80013f8:	f7ff f966 	bl	80006c8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fc:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80013fe:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001400:	2b02      	cmp	r3, #2
 8001402:	d119      	bne.n	8001438 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001404:	220c      	movs	r2, #12
 8001406:	68eb      	ldr	r3, [r5, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	2b08      	cmp	r3, #8
 800140c:	d0b2      	beq.n	8001374 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140e:	f7ff f95b 	bl	80006c8 <HAL_GetTick>
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <HAL_RCC_ClockConfig+0x168>)
 8001414:	1bc0      	subs	r0, r0, r7
 8001416:	4298      	cmp	r0, r3
 8001418:	d9f4      	bls.n	8001404 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 800141a:	2003      	movs	r0, #3
 800141c:	e79d      	b.n	800135a <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800141e:	2a03      	cmp	r2, #3
 8001420:	d102      	bne.n	8001428 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001422:	019b      	lsls	r3, r3, #6
 8001424:	d4e3      	bmi.n	80013ee <HAL_RCC_ClockConfig+0x9e>
 8001426:	e797      	b.n	8001358 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001428:	2a01      	cmp	r2, #1
 800142a:	d102      	bne.n	8001432 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142c:	075b      	lsls	r3, r3, #29
 800142e:	d4de      	bmi.n	80013ee <HAL_RCC_ClockConfig+0x9e>
 8001430:	e792      	b.n	8001358 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001432:	059b      	lsls	r3, r3, #22
 8001434:	d4db      	bmi.n	80013ee <HAL_RCC_ClockConfig+0x9e>
 8001436:	e78f      	b.n	8001358 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001438:	2b03      	cmp	r3, #3
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800143c:	220c      	movs	r2, #12
 800143e:	68eb      	ldr	r3, [r5, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	4293      	cmp	r3, r2
 8001444:	d096      	beq.n	8001374 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001446:	f7ff f93f 	bl	80006c8 <HAL_GetTick>
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_RCC_ClockConfig+0x168>)
 800144c:	1bc0      	subs	r0, r0, r7
 800144e:	4298      	cmp	r0, r3
 8001450:	d9f4      	bls.n	800143c <HAL_RCC_ClockConfig+0xec>
 8001452:	e7e2      	b.n	800141a <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001454:	2b01      	cmp	r3, #1
 8001456:	d010      	beq.n	800147a <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001458:	220c      	movs	r2, #12
 800145a:	68eb      	ldr	r3, [r5, #12]
 800145c:	4213      	tst	r3, r2
 800145e:	d089      	beq.n	8001374 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001460:	f7ff f932 	bl	80006c8 <HAL_GetTick>
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_RCC_ClockConfig+0x168>)
 8001466:	1bc0      	subs	r0, r0, r7
 8001468:	4298      	cmp	r0, r3
 800146a:	d9f5      	bls.n	8001458 <HAL_RCC_ClockConfig+0x108>
 800146c:	e7d5      	b.n	800141a <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146e:	f7ff f92b 	bl	80006c8 <HAL_GetTick>
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_RCC_ClockConfig+0x168>)
 8001474:	1bc0      	subs	r0, r0, r7
 8001476:	4298      	cmp	r0, r3
 8001478:	d8cf      	bhi.n	800141a <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800147a:	220c      	movs	r2, #12
 800147c:	68eb      	ldr	r3, [r5, #12]
 800147e:	4013      	ands	r3, r2
 8001480:	2b04      	cmp	r3, #4
 8001482:	d1f4      	bne.n	800146e <HAL_RCC_ClockConfig+0x11e>
 8001484:	e776      	b.n	8001374 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	6822      	ldr	r2, [r4, #0]
 8001488:	439a      	bics	r2, r3
 800148a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	421a      	tst	r2, r3
 8001490:	d000      	beq.n	8001494 <HAL_RCC_ClockConfig+0x144>
 8001492:	e761      	b.n	8001358 <HAL_RCC_ClockConfig+0x8>
 8001494:	e775      	b.n	8001382 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001496:	68e3      	ldr	r3, [r4, #12]
 8001498:	4908      	ldr	r1, [pc, #32]	; (80014bc <HAL_RCC_ClockConfig+0x16c>)
 800149a:	400b      	ands	r3, r1
 800149c:	68f1      	ldr	r1, [r6, #12]
 800149e:	430b      	orrs	r3, r1
 80014a0:	60e3      	str	r3, [r4, #12]
 80014a2:	e773      	b.n	800138c <HAL_RCC_ClockConfig+0x3c>
 80014a4:	40022000 	.word	0x40022000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	ffffc7ff 	.word	0xffffc7ff
 80014b0:	08004989 	.word	0x08004989
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	00001388 	.word	0x00001388
 80014bc:	fffff8ff 	.word	0xfffff8ff

080014c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	055b      	lsls	r3, r3, #21
 80014c8:	0f5b      	lsrs	r3, r3, #29
 80014ca:	5cd3      	ldrb	r3, [r2, r3]
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014ce:	6810      	ldr	r0, [r2, #0]
 80014d0:	40d8      	lsrs	r0, r3
}
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000
 80014d8:	08004999 	.word	0x08004999
 80014dc:	2000000c 	.word	0x2000000c

080014e0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	049b      	lsls	r3, r3, #18
 80014e8:	0f5b      	lsrs	r3, r3, #29
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	4a03      	ldr	r2, [pc, #12]	; (80014fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014ee:	6810      	ldr	r0, [r2, #0]
 80014f0:	40d8      	lsrs	r0, r3
}
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	08004999 	.word	0x08004999
 80014fc:	2000000c 	.word	0x2000000c

08001500 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001500:	2382      	movs	r3, #130	; 0x82
{
 8001502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001504:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001506:	011b      	lsls	r3, r3, #4
{
 8001508:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800150a:	421a      	tst	r2, r3
 800150c:	d047      	beq.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001510:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001512:	4c5f      	ldr	r4, [pc, #380]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001514:	055b      	lsls	r3, r3, #21
 8001516:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001518:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151a:	421a      	tst	r2, r3
 800151c:	d104      	bne.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001520:	4313      	orrs	r3, r2
 8001522:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001524:	2301      	movs	r3, #1
 8001526:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	2780      	movs	r7, #128	; 0x80
 800152a:	4e5a      	ldr	r6, [pc, #360]	; (8001694 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800152c:	007f      	lsls	r7, r7, #1
 800152e:	6833      	ldr	r3, [r6, #0]
 8001530:	423b      	tst	r3, r7
 8001532:	d06d      	beq.n	8001610 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001534:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001536:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001538:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	0392      	lsls	r2, r2, #14
 800153e:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001540:	4010      	ands	r0, r2
 8001542:	4283      	cmp	r3, r0
 8001544:	d103      	bne.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001546:	68a8      	ldr	r0, [r5, #8]
 8001548:	4002      	ands	r2, r0
 800154a:	4293      	cmp	r3, r2
 800154c:	d009      	beq.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800154e:	23c0      	movs	r3, #192	; 0xc0
 8001550:	000a      	movs	r2, r1
 8001552:	029b      	lsls	r3, r3, #10
 8001554:	401a      	ands	r2, r3
 8001556:	429a      	cmp	r2, r3
 8001558:	d103      	bne.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800155a:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800155c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800155e:	039b      	lsls	r3, r3, #14
 8001560:	d466      	bmi.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001562:	22c0      	movs	r2, #192	; 0xc0
 8001564:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001566:	0292      	lsls	r2, r2, #10
 8001568:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800156a:	d162      	bne.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800156c:	6869      	ldr	r1, [r5, #4]
 800156e:	23c0      	movs	r3, #192	; 0xc0
 8001570:	000a      	movs	r2, r1
 8001572:	029b      	lsls	r3, r3, #10
 8001574:	401a      	ands	r2, r3
 8001576:	429a      	cmp	r2, r3
 8001578:	d107      	bne.n	800158a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	4846      	ldr	r0, [pc, #280]	; (8001698 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800157e:	4003      	ands	r3, r0
 8001580:	20c0      	movs	r0, #192	; 0xc0
 8001582:	0380      	lsls	r0, r0, #14
 8001584:	4001      	ands	r1, r0
 8001586:	430b      	orrs	r3, r1
 8001588:	6023      	str	r3, [r4, #0]
 800158a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800158c:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800158e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001590:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001592:	2b01      	cmp	r3, #1
 8001594:	d103      	bne.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001596:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001598:	4a40      	ldr	r2, [pc, #256]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800159a:	4013      	ands	r3, r2
 800159c:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800159e:	682b      	ldr	r3, [r5, #0]
 80015a0:	07da      	lsls	r2, r3, #31
 80015a2:	d506      	bpl.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015a4:	2003      	movs	r0, #3
 80015a6:	493a      	ldr	r1, [pc, #232]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80015a8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80015aa:	4382      	bics	r2, r0
 80015ac:	68e8      	ldr	r0, [r5, #12]
 80015ae:	4302      	orrs	r2, r0
 80015b0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015b2:	079a      	lsls	r2, r3, #30
 80015b4:	d506      	bpl.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015b6:	200c      	movs	r0, #12
 80015b8:	4935      	ldr	r1, [pc, #212]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80015ba:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80015bc:	4382      	bics	r2, r0
 80015be:	6928      	ldr	r0, [r5, #16]
 80015c0:	4302      	orrs	r2, r0
 80015c2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80015c4:	075a      	lsls	r2, r3, #29
 80015c6:	d506      	bpl.n	80015d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80015c8:	4931      	ldr	r1, [pc, #196]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80015ca:	4835      	ldr	r0, [pc, #212]	; (80016a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80015cc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80015ce:	4002      	ands	r2, r0
 80015d0:	6968      	ldr	r0, [r5, #20]
 80015d2:	4302      	orrs	r2, r0
 80015d4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015d6:	071a      	lsls	r2, r3, #28
 80015d8:	d506      	bpl.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015da:	492d      	ldr	r1, [pc, #180]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80015dc:	4831      	ldr	r0, [pc, #196]	; (80016a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015de:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80015e0:	4002      	ands	r2, r0
 80015e2:	69a8      	ldr	r0, [r5, #24]
 80015e4:	4302      	orrs	r2, r0
 80015e6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80015e8:	065a      	lsls	r2, r3, #25
 80015ea:	d506      	bpl.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015ec:	4928      	ldr	r1, [pc, #160]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80015ee:	482e      	ldr	r0, [pc, #184]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80015f0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80015f2:	4002      	ands	r2, r0
 80015f4:	6a28      	ldr	r0, [r5, #32]
 80015f6:	4302      	orrs	r2, r0
 80015f8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80015fa:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	d517      	bpl.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001600:	4a23      	ldr	r2, [pc, #140]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001602:	492a      	ldr	r1, [pc, #168]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001604:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001606:	400b      	ands	r3, r1
 8001608:	69e9      	ldr	r1, [r5, #28]
 800160a:	430b      	orrs	r3, r1
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	e00f      	b.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001610:	6833      	ldr	r3, [r6, #0]
 8001612:	433b      	orrs	r3, r7
 8001614:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001616:	f7ff f857 	bl	80006c8 <HAL_GetTick>
 800161a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	6833      	ldr	r3, [r6, #0]
 800161e:	423b      	tst	r3, r7
 8001620:	d188      	bne.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff f851 	bl	80006c8 <HAL_GetTick>
 8001626:	9b01      	ldr	r3, [sp, #4]
 8001628:	1ac0      	subs	r0, r0, r3
 800162a:	2864      	cmp	r0, #100	; 0x64
 800162c:	d9f6      	bls.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 800162e:	2003      	movs	r0, #3
}
 8001630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001632:	4011      	ands	r1, r2
 8001634:	428b      	cmp	r3, r1
 8001636:	d002      	beq.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001638:	6829      	ldr	r1, [r5, #0]
 800163a:	0689      	lsls	r1, r1, #26
 800163c:	d408      	bmi.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800163e:	68a9      	ldr	r1, [r5, #8]
 8001640:	400a      	ands	r2, r1
 8001642:	4293      	cmp	r3, r2
 8001644:	d100      	bne.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001646:	e791      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001648:	682b      	ldr	r3, [r5, #0]
 800164a:	051b      	lsls	r3, r3, #20
 800164c:	d400      	bmi.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800164e:	e78d      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001650:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001652:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001654:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001656:	0312      	lsls	r2, r2, #12
 8001658:	4302      	orrs	r2, r0
 800165a:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800165c:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001660:	4814      	ldr	r0, [pc, #80]	; (80016b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001662:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001664:	4002      	ands	r2, r0
 8001666:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001668:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800166a:	05cb      	lsls	r3, r1, #23
 800166c:	d400      	bmi.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800166e:	e77d      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8001670:	f7ff f82a 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001674:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001676:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001678:	00bf      	lsls	r7, r7, #2
 800167a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800167c:	423b      	tst	r3, r7
 800167e:	d000      	beq.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001680:	e774      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff f821 	bl	80006c8 <HAL_GetTick>
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001688:	1b80      	subs	r0, r0, r6
 800168a:	4298      	cmp	r0, r3
 800168c:	d9f5      	bls.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800168e:	e7ce      	b.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
 8001698:	ffcfffff 	.word	0xffcfffff
 800169c:	efffffff 	.word	0xefffffff
 80016a0:	fffff3ff 	.word	0xfffff3ff
 80016a4:	ffffcfff 	.word	0xffffcfff
 80016a8:	fbffffff 	.word	0xfbffffff
 80016ac:	fff3ffff 	.word	0xfff3ffff
 80016b0:	fffcffff 	.word	0xfffcffff
 80016b4:	fff7ffff 	.word	0xfff7ffff
 80016b8:	00001388 	.word	0x00001388

080016bc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80016bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016be:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80016c0:	1c45      	adds	r5, r0, #1
 80016c2:	7feb      	ldrb	r3, [r5, #31]
{
 80016c4:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80016c6:	0038      	movs	r0, r7
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d024      	beq.n	8001716 <HAL_RTC_DeactivateAlarm+0x5a>
 80016cc:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016ce:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 80016d0:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016d2:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80016d4:	19e6      	adds	r6, r4, r7
 80016d6:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
 80016da:	3a77      	subs	r2, #119	; 0x77
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80016de:	32ad      	adds	r2, #173	; 0xad
 80016e0:	4291      	cmp	r1, r2
 80016e2:	d128      	bne.n	8001736 <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4921      	ldr	r1, [pc, #132]	; (800176c <HAL_RTC_DeactivateAlarm+0xb0>)
 80016e8:	400a      	ands	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	4920      	ldr	r1, [pc, #128]	; (8001770 <HAL_RTC_DeactivateAlarm+0xb4>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80016f4:	f7fe ffe8 	bl	80006c8 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80016f8:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 80016fa:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	68df      	ldr	r7, [r3, #12]
 8001702:	9b01      	ldr	r3, [sp, #4]
 8001704:	401f      	ands	r7, r3
 8001706:	d007      	beq.n	8001718 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800170c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8001710:	2301      	movs	r3, #1
 8001712:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8001714:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8001716:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001718:	f7fe ffd6 	bl	80006c8 <HAL_GetTick>
 800171c:	9b00      	ldr	r3, [sp, #0]
 800171e:	1ac0      	subs	r0, r0, r3
 8001720:	23fa      	movs	r3, #250	; 0xfa
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4298      	cmp	r0, r3
 8001726:	d9ea      	bls.n	80016fe <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001728:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800172a:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001730:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8001732:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 8001734:	e7ef      	b.n	8001716 <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <HAL_RTC_DeactivateAlarm+0xb8>)
 800173a:	400a      	ands	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	490d      	ldr	r1, [pc, #52]	; (8001778 <HAL_RTC_DeactivateAlarm+0xbc>)
 8001742:	400a      	ands	r2, r1
 8001744:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001746:	f7fe ffbf 	bl	80006c8 <HAL_GetTick>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800174a:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 800174c:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	68df      	ldr	r7, [r3, #12]
 8001752:	9b01      	ldr	r3, [sp, #4]
 8001754:	401f      	ands	r7, r3
 8001756:	d1d7      	bne.n	8001708 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001758:	f7fe ffb6 	bl	80006c8 <HAL_GetTick>
 800175c:	9b00      	ldr	r3, [sp, #0]
 800175e:	1ac0      	subs	r0, r0, r3
 8001760:	23fa      	movs	r3, #250	; 0xfa
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4298      	cmp	r0, r3
 8001766:	d9f2      	bls.n	800174e <HAL_RTC_DeactivateAlarm+0x92>
 8001768:	e7de      	b.n	8001728 <HAL_RTC_DeactivateAlarm+0x6c>
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	fffffeff 	.word	0xfffffeff
 8001770:	ffffefff 	.word	0xffffefff
 8001774:	fffffdff 	.word	0xfffffdff
 8001778:	ffffdfff 	.word	0xffffdfff

0800177c <HAL_RTC_AlarmAEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800177c:	4770      	bx	lr
	...

08001780 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001780:	6803      	ldr	r3, [r0, #0]
{
 8001782:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001784:	689a      	ldr	r2, [r3, #8]
{
 8001786:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001788:	04d2      	lsls	r2, r2, #19
 800178a:	d50a      	bpl.n	80017a2 <HAL_RTC_AlarmIRQHandler+0x22>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	05db      	lsls	r3, r3, #23
 8001790:	d507      	bpl.n	80017a2 <HAL_RTC_AlarmIRQHandler+0x22>
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001792:	f7ff fff3 	bl	800177c <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001796:	6821      	ldr	r1, [r4, #0]
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_RTC_AlarmIRQHandler+0x54>)
 800179a:	68ca      	ldr	r2, [r1, #12]
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	4313      	orrs	r3, r2
 80017a0:	60cb      	str	r3, [r1, #12]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	0492      	lsls	r2, r2, #18
 80017a8:	d50b      	bpl.n	80017c2 <HAL_RTC_AlarmIRQHandler+0x42>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	059b      	lsls	r3, r3, #22
 80017ae:	d508      	bpl.n	80017c2 <HAL_RTC_AlarmIRQHandler+0x42>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80017b0:	0020      	movs	r0, r4
 80017b2:	f000 fabb 	bl	8001d2c <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80017b6:	6821      	ldr	r1, [r4, #0]
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_RTC_AlarmIRQHandler+0x58>)
 80017ba:	68ca      	ldr	r2, [r1, #12]
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	4313      	orrs	r3, r2
 80017c0:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_RTC_AlarmIRQHandler+0x5c>)
 80017c6:	0292      	lsls	r2, r2, #10
 80017c8:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 80017ca:	2301      	movs	r3, #1
 80017cc:	3402      	adds	r4, #2
 80017ce:	77e3      	strb	r3, [r4, #31]
}
 80017d0:	bd10      	pop	{r4, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	fffffe7f 	.word	0xfffffe7f
 80017d8:	fffffd7f 	.word	0xfffffd7f
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80017e0:	21a0      	movs	r1, #160	; 0xa0
 80017e2:	6802      	ldr	r2, [r0, #0]
{
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80017e6:	68d3      	ldr	r3, [r2, #12]
{
 80017e8:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80017ea:	438b      	bics	r3, r1
 80017ec:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80017ee:	f7fe ff6b 	bl	80006c8 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80017f2:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80017f4:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80017f6:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80017f8:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	422b      	tst	r3, r5
 8001800:	d001      	beq.n	8001806 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001802:	2000      	movs	r0, #0
}
 8001804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001806:	f7fe ff5f 	bl	80006c8 <HAL_GetTick>
 800180a:	1b80      	subs	r0, r0, r6
 800180c:	42b8      	cmp	r0, r7
 800180e:	d9f4      	bls.n	80017fa <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001810:	2003      	movs	r0, #3
 8001812:	e7f7      	b.n	8001804 <HAL_RTC_WaitForSynchro+0x24>

08001814 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001816:	2440      	movs	r4, #64	; 0x40
 8001818:	6803      	ldr	r3, [r0, #0]
{
 800181a:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	4222      	tst	r2, r4
 8001820:	d001      	beq.n	8001826 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001822:	2000      	movs	r0, #0
}
 8001824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001826:	2201      	movs	r2, #1
 8001828:	4252      	negs	r2, r2
 800182a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800182c:	f7fe ff4c 	bl	80006c8 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001830:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8001832:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001834:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001836:	682b      	ldr	r3, [r5, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4223      	tst	r3, r4
 800183c:	d1f1      	bne.n	8001822 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800183e:	f7fe ff43 	bl	80006c8 <HAL_GetTick>
 8001842:	1b80      	subs	r0, r0, r6
 8001844:	42b8      	cmp	r0, r7
 8001846:	d9f6      	bls.n	8001836 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8001848:	2003      	movs	r0, #3
 800184a:	e7eb      	b.n	8001824 <RTC_EnterInitMode+0x10>

0800184c <HAL_RTC_Init>:
{
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001850:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8001852:	2800      	cmp	r0, #0
 8001854:	d01a      	beq.n	800188c <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001856:	1c86      	adds	r6, r0, #2
 8001858:	7ff3      	ldrb	r3, [r6, #31]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d103      	bne.n	8001868 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8001860:	1942      	adds	r2, r0, r5
 8001862:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8001864:	f000 fed0 	bl	8002608 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001868:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800186a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800186c:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800186e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001870:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
 8001874:	3a77      	subs	r2, #119	; 0x77
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001878:	f7ff ffcc 	bl	8001814 <RTC_EnterInitMode>
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	1e05      	subs	r5, r0, #0
 8001880:	d006      	beq.n	8001890 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001882:	22ff      	movs	r2, #255	; 0xff
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001886:	2304      	movs	r3, #4
 8001888:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800188a:	2501      	movs	r5, #1
}
 800188c:	0028      	movs	r0, r5
 800188e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	491b      	ldr	r1, [pc, #108]	; (8001900 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001894:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001896:	400a      	ands	r2, r1
 8001898:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800189a:	6862      	ldr	r2, [r4, #4]
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	4302      	orrs	r2, r0
 80018a0:	69a0      	ldr	r0, [r4, #24]
 80018a2:	4302      	orrs	r2, r0
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80018a8:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80018aa:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80018ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80018ae:	68a2      	ldr	r2, [r4, #8]
 80018b0:	6919      	ldr	r1, [r3, #16]
 80018b2:	0412      	lsls	r2, r2, #16
 80018b4:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80018b6:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80018b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	438a      	bics	r2, r1
 80018be:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80018c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c2:	397d      	subs	r1, #125	; 0x7d
 80018c4:	438a      	bics	r2, r1
 80018c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80018c8:	69e2      	ldr	r2, [r4, #28]
 80018ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80018cc:	4302      	orrs	r2, r0
 80018ce:	430a      	orrs	r2, r1
 80018d0:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	069b      	lsls	r3, r3, #26
 80018d6:	d40c      	bmi.n	80018f2 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80018d8:	0020      	movs	r0, r4
 80018da:	f7ff ff81 	bl	80017e0 <HAL_RTC_WaitForSynchro>
 80018de:	2800      	cmp	r0, #0
 80018e0:	d007      	beq.n	80018f2 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018e2:	22ff      	movs	r2, #255	; 0xff
 80018e4:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80018e6:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80018ea:	2304      	movs	r3, #4
 80018ec:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80018ee:	77e5      	strb	r5, [r4, #31]
 80018f0:	e7cb      	b.n	800188a <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018f2:	22ff      	movs	r2, #255	; 0xff
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80018f8:	2301      	movs	r3, #1
 80018fa:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80018fc:	e7c6      	b.n	800188c <HAL_RTC_Init+0x40>
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	ff8fffbf 	.word	0xff8fffbf

08001904 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001904:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8001906:	2809      	cmp	r0, #9
 8001908:	d803      	bhi.n	8001912 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	4318      	orrs	r0, r3
 800190e:	b2c0      	uxtb	r0, r0
}
 8001910:	4770      	bx	lr
    Param -= 10U;
 8001912:	380a      	subs	r0, #10
    bcdhigh++;
 8001914:	3301      	adds	r3, #1
    Param -= 10U;
 8001916:	b2c0      	uxtb	r0, r0
 8001918:	e7f5      	b.n	8001906 <RTC_ByteToBcd2+0x2>
	...

0800191c <HAL_RTC_SetTime>:
{
 800191c:	2302      	movs	r3, #2
 800191e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001920:	1c47      	adds	r7, r0, #1
{
 8001922:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001924:	7ff9      	ldrb	r1, [r7, #31]
{
 8001926:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8001928:	001e      	movs	r6, r3
 800192a:	2901      	cmp	r1, #1
 800192c:	d036      	beq.n	800199c <HAL_RTC_SetTime+0x80>
 800192e:	2101      	movs	r1, #1
 8001930:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001932:	18c1      	adds	r1, r0, r3
 8001934:	77cb      	strb	r3, [r1, #31]
 8001936:	9100      	str	r1, [sp, #0]
 8001938:	2140      	movs	r1, #64	; 0x40
 800193a:	6803      	ldr	r3, [r0, #0]
 800193c:	7866      	ldrb	r6, [r4, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	7820      	ldrb	r0, [r4, #0]
 8001942:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001944:	2a00      	cmp	r2, #0
 8001946:	d12b      	bne.n	80019a0 <HAL_RTC_SetTime+0x84>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001948:	2b00      	cmp	r3, #0
 800194a:	d100      	bne.n	800194e <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 800194c:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800194e:	f7ff ffd9 	bl	8001904 <RTC_ByteToBcd2>
 8001952:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001954:	0030      	movs	r0, r6
 8001956:	f7ff ffd5 	bl	8001904 <RTC_ByteToBcd2>
 800195a:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800195c:	78a0      	ldrb	r0, [r4, #2]
 800195e:	f7ff ffd1 	bl	8001904 <RTC_ByteToBcd2>
 8001962:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001964:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001966:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001968:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800196a:	4318      	orrs	r0, r3
 800196c:	9b01      	ldr	r3, [sp, #4]
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	4318      	orrs	r0, r3
 8001972:	4330      	orrs	r0, r6
 8001974:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001976:	22ca      	movs	r2, #202	; 0xca
 8001978:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800197a:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
 800197e:	3a77      	subs	r2, #119	; 0x77
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001982:	f7ff ff47 	bl	8001814 <RTC_EnterInitMode>
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	1e06      	subs	r6, r0, #0
 800198a:	d016      	beq.n	80019ba <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800198c:	22ff      	movs	r2, #255	; 0xff
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001990:	2304      	movs	r3, #4
 8001992:	9a00      	ldr	r2, [sp, #0]
 8001994:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001996:	2300      	movs	r3, #0
 8001998:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800199a:	2601      	movs	r6, #1
}
 800199c:	0030      	movs	r0, r6
 800199e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d100      	bne.n	80019a6 <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 80019a4:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80019a6:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80019a8:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80019aa:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 80019ac:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80019ae:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80019b0:	78e0      	ldrb	r0, [r4, #3]
 80019b2:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80019b4:	4306      	orrs	r6, r0
 80019b6:	9601      	str	r6, [sp, #4]
 80019b8:	e7dd      	b.n	8001976 <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80019ba:	4815      	ldr	r0, [pc, #84]	; (8001a10 <HAL_RTC_SetTime+0xf4>)
 80019bc:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80019be:	4915      	ldr	r1, [pc, #84]	; (8001a14 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80019c0:	4002      	ands	r2, r0
 80019c2:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80019c4:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80019c6:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80019c8:	400a      	ands	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80019cc:	68e2      	ldr	r2, [r4, #12]
 80019ce:	6899      	ldr	r1, [r3, #8]
 80019d0:	4302      	orrs	r2, r0
 80019d2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80019d4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80019d6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	438a      	bics	r2, r1
 80019dc:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	069b      	lsls	r3, r3, #26
 80019e2:	d40c      	bmi.n	80019fe <HAL_RTC_SetTime+0xe2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019e4:	0028      	movs	r0, r5
 80019e6:	f7ff fefb 	bl	80017e0 <HAL_RTC_WaitForSynchro>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d007      	beq.n	80019fe <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019ee:	22ff      	movs	r2, #255	; 0xff
 80019f0:	682b      	ldr	r3, [r5, #0]
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019f4:	2304      	movs	r3, #4
 80019f6:	9a00      	ldr	r2, [sp, #0]
 80019f8:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80019fa:	77fe      	strb	r6, [r7, #31]
 80019fc:	e7cd      	b.n	800199a <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019fe:	22ff      	movs	r2, #255	; 0xff
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001a04:	2301      	movs	r3, #1
 8001a06:	9a00      	ldr	r2, [sp, #0]
 8001a08:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8001a0e:	e7c5      	b.n	800199c <HAL_RTC_SetTime+0x80>
 8001a10:	007f7f7f 	.word	0x007f7f7f
 8001a14:	fffbffff 	.word	0xfffbffff

08001a18 <HAL_RTC_SetDate>:
{
 8001a18:	2302      	movs	r3, #2
 8001a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001a1c:	1c47      	adds	r7, r0, #1
{
 8001a1e:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8001a20:	7ff9      	ldrb	r1, [r7, #31]
{
 8001a22:	b085      	sub	sp, #20
 8001a24:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8001a26:	001e      	movs	r6, r3
 8001a28:	2901      	cmp	r1, #1
 8001a2a:	d035      	beq.n	8001a98 <HAL_RTC_SetDate+0x80>
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a30:	18c1      	adds	r1, r0, r3
 8001a32:	9101      	str	r1, [sp, #4]
 8001a34:	77cb      	strb	r3, [r1, #31]
 8001a36:	786b      	ldrb	r3, [r5, #1]
 8001a38:	78e8      	ldrb	r0, [r5, #3]
 8001a3a:	78ae      	ldrb	r6, [r5, #2]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001a3c:	2a00      	cmp	r2, #0
 8001a3e:	d14e      	bne.n	8001ade <HAL_RTC_SetDate+0xc6>
 8001a40:	3210      	adds	r2, #16
 8001a42:	4213      	tst	r3, r2
 8001a44:	d002      	beq.n	8001a4c <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001a46:	4393      	bics	r3, r2
 8001a48:	330a      	adds	r3, #10
 8001a4a:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a4c:	f7ff ff5a 	bl	8001904 <RTC_ByteToBcd2>
 8001a50:	9002      	str	r0, [sp, #8]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001a52:	7868      	ldrb	r0, [r5, #1]
 8001a54:	f7ff ff56 	bl	8001904 <RTC_ByteToBcd2>
 8001a58:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001a5a:	0030      	movs	r0, r6
 8001a5c:	f7ff ff52 	bl	8001904 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a60:	9b02      	ldr	r3, [sp, #8]
                  ((uint32_t)sDate->WeekDay << 13U));
 8001a62:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a64:	041e      	lsls	r6, r3, #16
                  ((uint32_t)sDate->WeekDay << 13U));
 8001a66:	036d      	lsls	r5, r5, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001a68:	9b03      	ldr	r3, [sp, #12]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a6a:	4305      	orrs	r5, r0
 8001a6c:	4335      	orrs	r5, r6
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001a6e:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a70:	22ca      	movs	r2, #202	; 0xca
 8001a72:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a74:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
 8001a78:	3a77      	subs	r2, #119	; 0x77
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a7c:	f7ff feca 	bl	8001814 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001a80:	4335      	orrs	r5, r6
 8001a82:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a84:	1e06      	subs	r6, r0, #0
 8001a86:	d00a      	beq.n	8001a9e <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a88:	22ff      	movs	r2, #255	; 0xff
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	9a01      	ldr	r2, [sp, #4]
 8001a90:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001a92:	2300      	movs	r3, #0
 8001a94:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8001a96:	2601      	movs	r6, #1
}
 8001a98:	0030      	movs	r0, r6
 8001a9a:	b005      	add	sp, #20
 8001a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001a9e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001aa0:	4812      	ldr	r0, [pc, #72]	; (8001aec <HAL_RTC_SetDate+0xd4>)
 8001aa2:	4005      	ands	r5, r0
 8001aa4:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	069b      	lsls	r3, r3, #26
 8001ab0:	d40c      	bmi.n	8001acc <HAL_RTC_SetDate+0xb4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ab2:	0020      	movs	r0, r4
 8001ab4:	f7ff fe94 	bl	80017e0 <HAL_RTC_WaitForSynchro>
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	d007      	beq.n	8001acc <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001abc:	22ff      	movs	r2, #255	; 0xff
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	9a01      	ldr	r2, [sp, #4]
 8001ac6:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8001ac8:	77fe      	strb	r6, [r7, #31]
 8001aca:	e7e4      	b.n	8001a96 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001acc:	22ff      	movs	r2, #255	; 0xff
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9a01      	ldr	r2, [sp, #4]
 8001ad6:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8001adc:	e7dc      	b.n	8001a98 <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001ade:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001ae0:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001ae2:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001ae4:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8001ae6:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001ae8:	036d      	lsls	r5, r5, #13
 8001aea:	e7c1      	b.n	8001a70 <HAL_RTC_SetDate+0x58>
 8001aec:	00ffff3f 	.word	0x00ffff3f

08001af0 <HAL_RTC_SetAlarm_IT>:
{
 8001af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001af2:	1c43      	adds	r3, r0, #1
 8001af4:	9300      	str	r3, [sp, #0]
{
 8001af6:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8001af8:	7fd9      	ldrb	r1, [r3, #31]
 8001afa:	2302      	movs	r3, #2
{
 8001afc:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8001afe:	0018      	movs	r0, r3
 8001b00:	2901      	cmp	r1, #1
 8001b02:	d100      	bne.n	8001b06 <HAL_RTC_SetAlarm_IT+0x16>
 8001b04:	e08d      	b.n	8001c22 <HAL_RTC_SetAlarm_IT+0x132>
 8001b06:	2101      	movs	r1, #1
 8001b08:	1860      	adds	r0, r4, r1
 8001b0a:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b0c:	18e1      	adds	r1, r4, r3
 8001b0e:	77cb      	strb	r3, [r1, #31]
 8001b10:	2140      	movs	r1, #64	; 0x40
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	7828      	ldrb	r0, [r5, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	786e      	ldrb	r6, [r5, #1]
 8001b1a:	78af      	ldrb	r7, [r5, #2]
 8001b1c:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8001b1e:	2a00      	cmp	r2, #0
 8001b20:	d15d      	bne.n	8001bde <HAL_RTC_SetAlarm_IT+0xee>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d100      	bne.n	8001b28 <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001b26:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b28:	f7ff feec 	bl	8001904 <RTC_ByteToBcd2>
 8001b2c:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001b2e:	0030      	movs	r0, r6
 8001b30:	f7ff fee8 	bl	8001904 <RTC_ByteToBcd2>
 8001b34:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001b36:	0038      	movs	r0, r7
 8001b38:	f7ff fee4 	bl	8001904 <RTC_ByteToBcd2>
 8001b3c:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001b3e:	1c6b      	adds	r3, r5, #1
 8001b40:	7fd8      	ldrb	r0, [r3, #31]
 8001b42:	f7ff fedf 	bl	8001904 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b46:	696a      	ldr	r2, [r5, #20]
 8001b48:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001b4a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b4c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001b4e:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001b50:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001b52:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b54:	4313      	orrs	r3, r2
 8001b56:	431f      	orrs	r7, r3
 8001b58:	9b01      	ldr	r3, [sp, #4]
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	431f      	orrs	r7, r3
 8001b5e:	4337      	orrs	r7, r6
 8001b60:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001b62:	69aa      	ldr	r2, [r5, #24]
 8001b64:	686b      	ldr	r3, [r5, #4]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001b66:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001b68:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b6a:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001b6c:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
 8001b72:	3a77      	subs	r2, #119	; 0x77
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001b76:	32ad      	adds	r2, #173	; 0xad
 8001b78:	4291      	cmp	r1, r2
 8001b7a:	d153      	bne.n	8001c24 <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	493c      	ldr	r1, [pc, #240]	; (8001c70 <HAL_RTC_SetAlarm_IT+0x180>)
 8001b80:	400a      	ands	r2, r1
 8001b82:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001b84:	68d9      	ldr	r1, [r3, #12]
 8001b86:	4a3b      	ldr	r2, [pc, #236]	; (8001c74 <HAL_RTC_SetAlarm_IT+0x184>)
 8001b88:	b2c9      	uxtb	r1, r1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001b8e:	f7fe fd9b 	bl	80006c8 <HAL_GetTick>
 8001b92:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001b94:	2201      	movs	r2, #1
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	68dd      	ldr	r5, [r3, #12]
 8001b9a:	4015      	ands	r5, r2
 8001b9c:	d032      	beq.n	8001c04 <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001b9e:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001ba0:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	6899      	ldr	r1, [r3, #8]
 8001ba8:	0052      	lsls	r2, r2, #1
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	6899      	ldr	r1, [r3, #8]
 8001bb2:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RTC_SetAlarm_IT+0x188>)
 8001bbc:	0292      	lsls	r2, r2, #10
 8001bbe:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8001bc0:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bcc:	22ff      	movs	r2, #255	; 0xff
 8001bce:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY;
 8001bd0:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 8001bd8:	9b00      	ldr	r3, [sp, #0]
 8001bda:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 8001bdc:	e021      	b.n	8001c22 <HAL_RTC_SetAlarm_IT+0x132>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d100      	bne.n	8001be4 <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001be2:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001be4:	69eb      	ldr	r3, [r5, #28]
 8001be6:	696a      	ldr	r2, [r5, #20]
 8001be8:	0400      	lsls	r0, r0, #16
 8001bea:	4313      	orrs	r3, r2
 8001bec:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001bee:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001bf0:	4307      	orrs	r7, r0
 8001bf2:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001bf4:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001bf6:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001bf8:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001bfa:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001bfc:	7fde      	ldrb	r6, [r3, #31]
 8001bfe:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001c00:	4337      	orrs	r7, r6
 8001c02:	e7ae      	b.n	8001b62 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001c04:	f7fe fd60 	bl	80006c8 <HAL_GetTick>
 8001c08:	23fa      	movs	r3, #250	; 0xfa
 8001c0a:	1b80      	subs	r0, r0, r6
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4298      	cmp	r0, r3
 8001c10:	d9c0      	bls.n	8001b94 <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c12:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001c14:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c16:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001c18:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8001c1c:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001c1e:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 8001c20:	77dd      	strb	r5, [r3, #31]
}
 8001c22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	4915      	ldr	r1, [pc, #84]	; (8001c7c <HAL_RTC_SetAlarm_IT+0x18c>)
 8001c28:	400a      	ands	r2, r1
 8001c2a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001c2c:	68d9      	ldr	r1, [r3, #12]
 8001c2e:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_RTC_SetAlarm_IT+0x190>)
 8001c30:	b2c9      	uxtb	r1, r1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001c36:	f7fe fd47 	bl	80006c8 <HAL_GetTick>
 8001c3a:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	68dd      	ldr	r5, [r3, #12]
 8001c42:	4015      	ands	r5, r2
 8001c44:	d00b      	beq.n	8001c5e <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001c46:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001c48:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001c4a:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	6899      	ldr	r1, [r3, #8]
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	430a      	orrs	r2, r1
 8001c54:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	6899      	ldr	r1, [r3, #8]
 8001c5a:	0192      	lsls	r2, r2, #6
 8001c5c:	e7aa      	b.n	8001bb4 <HAL_RTC_SetAlarm_IT+0xc4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001c5e:	f7fe fd33 	bl	80006c8 <HAL_GetTick>
 8001c62:	23fa      	movs	r3, #250	; 0xfa
 8001c64:	1b80      	subs	r0, r0, r6
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4298      	cmp	r0, r3
 8001c6a:	d9e7      	bls.n	8001c3c <HAL_RTC_SetAlarm_IT+0x14c>
 8001c6c:	e7d1      	b.n	8001c12 <HAL_RTC_SetAlarm_IT+0x122>
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	fffffeff 	.word	0xfffffeff
 8001c74:	fffffe7f 	.word	0xfffffe7f
 8001c78:	40010400 	.word	0x40010400
 8001c7c:	fffffdff 	.word	0xfffffdff
 8001c80:	fffffd7f 	.word	0xfffffd7f

08001c84 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001c84:	230a      	movs	r3, #10
 8001c86:	0902      	lsrs	r2, r0, #4
 8001c88:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	4010      	ands	r0, r2
 8001c8e:	1818      	adds	r0, r3, r0
 8001c90:	b2c0      	uxtb	r0, r0
}
 8001c92:	4770      	bx	lr

08001c94 <HAL_RTC_GetTime>:
{
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001c98:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001c9a:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001c9c:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001c9e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001ca0:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001ca2:	690b      	ldr	r3, [r1, #16]
 8001ca4:	045b      	lsls	r3, r3, #17
 8001ca6:	0c5b      	lsrs	r3, r3, #17
 8001ca8:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001caa:	680b      	ldr	r3, [r1, #0]
 8001cac:	490d      	ldr	r1, [pc, #52]	; (8001ce4 <HAL_RTC_GetTime+0x50>)
 8001cae:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001cb0:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001cb2:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001cb4:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001cb6:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8001cb8:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001cba:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8001cbc:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001cbe:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001cc0:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001cc2:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8001cc4:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d10a      	bne.n	8001ce0 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001cca:	f7ff ffdb 	bl	8001c84 <RTC_Bcd2ToByte>
 8001cce:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001cd0:	0030      	movs	r0, r6
 8001cd2:	f7ff ffd7 	bl	8001c84 <RTC_Bcd2ToByte>
 8001cd6:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001cd8:	0028      	movs	r0, r5
 8001cda:	f7ff ffd3 	bl	8001c84 <RTC_Bcd2ToByte>
 8001cde:	70a0      	strb	r0, [r4, #2]
}
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	007f7f7f 	.word	0x007f7f7f

08001ce8 <HAL_RTC_GetDate>:
{
 8001ce8:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001cea:	253f      	movs	r5, #63	; 0x3f
{
 8001cec:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001cee:	6803      	ldr	r3, [r0, #0]
 8001cf0:	490d      	ldr	r1, [pc, #52]	; (8001d28 <HAL_RTC_GetDate+0x40>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001cf6:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001cf8:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001cfa:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8001cfc:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001cfe:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8001d00:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001d02:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001d04:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001d06:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8001d08:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d10a      	bne.n	8001d24 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001d0e:	f7ff ffb9 	bl	8001c84 <RTC_Bcd2ToByte>
 8001d12:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001d14:	0030      	movs	r0, r6
 8001d16:	f7ff ffb5 	bl	8001c84 <RTC_Bcd2ToByte>
 8001d1a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001d1c:	0028      	movs	r0, r5
 8001d1e:	f7ff ffb1 	bl	8001c84 <RTC_Bcd2ToByte>
 8001d22:	70a0      	strb	r0, [r4, #2]
}
 8001d24:	2000      	movs	r0, #0
 8001d26:	bd70      	pop	{r4, r5, r6, pc}
 8001d28:	00ffff3f 	.word	0x00ffff3f

08001d2c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001d34:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001d36:	2c00      	cmp	r4, #0
 8001d38:	d037      	beq.n	8001daa <HAL_SPI_Init+0x7a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3a:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d3c:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d40:	3551      	adds	r5, #81	; 0x51
 8001d42:	782b      	ldrb	r3, [r5, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d105      	bne.n	8001d56 <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d4a:	0022      	movs	r2, r4
 8001d4c:	3250      	adds	r2, #80	; 0x50
 8001d4e:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d50:	0020      	movs	r0, r4
 8001d52:	f000 fc71 	bl	8002638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d56:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d58:	2240      	movs	r2, #64	; 0x40
 8001d5a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d5c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001d5e:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d60:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001d62:	4393      	bics	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d66:	6863      	ldr	r3, [r4, #4]
 8001d68:	69a2      	ldr	r2, [r4, #24]
 8001d6a:	4303      	orrs	r3, r0
 8001d6c:	68e0      	ldr	r0, [r4, #12]
 8001d6e:	4303      	orrs	r3, r0
 8001d70:	6920      	ldr	r0, [r4, #16]
 8001d72:	4303      	orrs	r3, r0
 8001d74:	6960      	ldr	r0, [r4, #20]
 8001d76:	4303      	orrs	r3, r0
 8001d78:	69e0      	ldr	r0, [r4, #28]
 8001d7a:	4303      	orrs	r3, r0
 8001d7c:	6a20      	ldr	r0, [r4, #32]
 8001d7e:	4303      	orrs	r3, r0
 8001d80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d82:	4303      	orrs	r3, r0
 8001d84:	2080      	movs	r0, #128	; 0x80
 8001d86:	0080      	lsls	r0, r0, #2
 8001d88:	4010      	ands	r0, r2
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d8e:	2304      	movs	r3, #4
 8001d90:	0c12      	lsrs	r2, r2, #16
 8001d92:	401a      	ands	r2, r3
 8001d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d96:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d9c:	69cb      	ldr	r3, [r1, #28]
 8001d9e:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_SPI_Init+0x7c>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001da4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001da6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001da8:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
 8001dac:	fffff7ff 	.word	0xfffff7ff

08001db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db2:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001db4:	6925      	ldr	r5, [r4, #16]
 8001db6:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001db8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001dba:	432a      	orrs	r2, r5
 8001dbc:	6965      	ldr	r5, [r4, #20]
 8001dbe:	69c1      	ldr	r1, [r0, #28]
 8001dc0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	4d79      	ldr	r5, [pc, #484]	; (8001fac <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001dc6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001dc8:	4028      	ands	r0, r5
 8001dca:	4302      	orrs	r2, r0
 8001dcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4877      	ldr	r0, [pc, #476]	; (8001fb0 <UART_SetConfig+0x200>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001dd2:	4d78      	ldr	r5, [pc, #480]	; (8001fb4 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dd4:	4002      	ands	r2, r0
 8001dd6:	68e0      	ldr	r0, [r4, #12]
 8001dd8:	4302      	orrs	r2, r0
 8001dda:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ddc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001dde:	42ab      	cmp	r3, r5
 8001de0:	d001      	beq.n	8001de6 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001de2:	6a22      	ldr	r2, [r4, #32]
 8001de4:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	4e73      	ldr	r6, [pc, #460]	; (8001fb8 <UART_SetConfig+0x208>)
 8001dea:	4032      	ands	r2, r6
 8001dec:	4302      	orrs	r2, r0
 8001dee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001df0:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <UART_SetConfig+0x20c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d113      	bne.n	8001e1e <UART_SetConfig+0x6e>
 8001df6:	2203      	movs	r2, #3
 8001df8:	4b71      	ldr	r3, [pc, #452]	; (8001fc0 <UART_SetConfig+0x210>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	4a71      	ldr	r2, [pc, #452]	; (8001fc4 <UART_SetConfig+0x214>)
 8001e00:	5cd0      	ldrb	r0, [r2, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	4299      	cmp	r1, r3
 8001e08:	d000      	beq.n	8001e0c <UART_SetConfig+0x5c>
 8001e0a:	e092      	b.n	8001f32 <UART_SetConfig+0x182>
  {
    switch (clocksource)
 8001e0c:	2808      	cmp	r0, #8
 8001e0e:	d81e      	bhi.n	8001e4e <UART_SetConfig+0x9e>
 8001e10:	f7fe f98c 	bl	800012c <__gnu_thumb1_case_uqi>
 8001e14:	1d636058 	.word	0x1d636058
 8001e18:	1d1d1d84 	.word	0x1d1d1d84
 8001e1c:	87          	.byte	0x87
 8001e1d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e1e:	4a6a      	ldr	r2, [pc, #424]	; (8001fc8 <UART_SetConfig+0x218>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d105      	bne.n	8001e30 <UART_SetConfig+0x80>
 8001e24:	220c      	movs	r2, #12
 8001e26:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <UART_SetConfig+0x210>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	4a67      	ldr	r2, [pc, #412]	; (8001fcc <UART_SetConfig+0x21c>)
 8001e2e:	e7e7      	b.n	8001e00 <UART_SetConfig+0x50>
 8001e30:	42ab      	cmp	r3, r5
 8001e32:	d000      	beq.n	8001e36 <UART_SetConfig+0x86>
 8001e34:	e0b3      	b.n	8001f9e <UART_SetConfig+0x1ee>
 8001e36:	21c0      	movs	r1, #192	; 0xc0
 8001e38:	2080      	movs	r0, #128	; 0x80
 8001e3a:	4a61      	ldr	r2, [pc, #388]	; (8001fc0 <UART_SetConfig+0x210>)
 8001e3c:	0109      	lsls	r1, r1, #4
 8001e3e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001e40:	00c0      	lsls	r0, r0, #3
 8001e42:	400b      	ands	r3, r1
 8001e44:	4283      	cmp	r3, r0
 8001e46:	d038      	beq.n	8001eba <UART_SetConfig+0x10a>
 8001e48:	d803      	bhi.n	8001e52 <UART_SetConfig+0xa2>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <UART_SetConfig+0xb4>
        ret = HAL_ERROR;
 8001e4e:	2501      	movs	r5, #1
 8001e50:	e00d      	b.n	8001e6e <UART_SetConfig+0xbe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e52:	2080      	movs	r0, #128	; 0x80
 8001e54:	0100      	lsls	r0, r0, #4
 8001e56:	4283      	cmp	r3, r0
 8001e58:	d00e      	beq.n	8001e78 <UART_SetConfig+0xc8>
 8001e5a:	428b      	cmp	r3, r1
 8001e5c:	d1f7      	bne.n	8001e4e <UART_SetConfig+0x9e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001e5e:	2080      	movs	r0, #128	; 0x80
 8001e60:	0200      	lsls	r0, r0, #8
 8001e62:	e00d      	b.n	8001e80 <UART_SetConfig+0xd0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001e64:	f7ff fb2c 	bl	80014c0 <HAL_RCC_GetPCLK1Freq>
 8001e68:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8001e6a:	42a8      	cmp	r0, r5
 8001e6c:	d108      	bne.n	8001e80 <UART_SetConfig+0xd0>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e6e:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8001e70:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8001e72:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001e74:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	06db      	lsls	r3, r3, #27
 8001e7c:	d520      	bpl.n	8001ec0 <UART_SetConfig+0x110>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001e7e:	4854      	ldr	r0, [pc, #336]	; (8001fd0 <UART_SetConfig+0x220>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001e80:	2203      	movs	r2, #3
 8001e82:	6863      	ldr	r3, [r4, #4]
 8001e84:	435a      	muls	r2, r3
 8001e86:	4282      	cmp	r2, r0
 8001e88:	d8e1      	bhi.n	8001e4e <UART_SetConfig+0x9e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001e8a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001e8c:	4282      	cmp	r2, r0
 8001e8e:	d3de      	bcc.n	8001e4e <UART_SetConfig+0x9e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001e90:	2700      	movs	r7, #0
 8001e92:	0e02      	lsrs	r2, r0, #24
 8001e94:	0201      	lsls	r1, r0, #8
 8001e96:	085e      	lsrs	r6, r3, #1
 8001e98:	1989      	adds	r1, r1, r6
 8001e9a:	417a      	adcs	r2, r7
 8001e9c:	0008      	movs	r0, r1
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	003b      	movs	r3, r7
 8001ea4:	f7fe fac2 	bl	800042c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <UART_SetConfig+0x224>)
 8001eaa:	18c2      	adds	r2, r0, r3
 8001eac:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <UART_SetConfig+0x228>)
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d8cd      	bhi.n	8001e4e <UART_SetConfig+0x9e>
          huart->Instance->BRR = usartdiv;
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	003d      	movs	r5, r7
 8001eb6:	60d8      	str	r0, [r3, #12]
 8001eb8:	e7d9      	b.n	8001e6e <UART_SetConfig+0xbe>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001eba:	f7fe ff89 	bl	8000dd0 <HAL_RCC_GetSysClockFreq>
        break;
 8001ebe:	e7d3      	b.n	8001e68 <UART_SetConfig+0xb8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001ec0:	4846      	ldr	r0, [pc, #280]	; (8001fdc <UART_SetConfig+0x22c>)
 8001ec2:	e7dd      	b.n	8001e80 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ec4:	f7ff fafc 	bl	80014c0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ec8:	6863      	ldr	r3, [r4, #4]
 8001eca:	0040      	lsls	r0, r0, #1
 8001ecc:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ece:	18c0      	adds	r0, r0, r3
 8001ed0:	6861      	ldr	r1, [r4, #4]
 8001ed2:	e00b      	b.n	8001eec <UART_SetConfig+0x13c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ed4:	f7ff fb04 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
 8001ed8:	e7f6      	b.n	8001ec8 <UART_SetConfig+0x118>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001eda:	2510      	movs	r5, #16
 8001edc:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <UART_SetConfig+0x210>)
 8001ede:	6861      	ldr	r1, [r4, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001ee2:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ee4:	4015      	ands	r5, r2
 8001ee6:	d006      	beq.n	8001ef6 <UART_SetConfig+0x146>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <UART_SetConfig+0x230>)
 8001eea:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001eec:	f7fe f928 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	b283      	uxth	r3, r0
        break;
 8001ef4:	e004      	b.n	8001f00 <UART_SetConfig+0x150>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <UART_SetConfig+0x234>)
 8001ef8:	18c0      	adds	r0, r0, r3
 8001efa:	f7fe f921 	bl	8000140 <__udivsi3>
 8001efe:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f00:	0019      	movs	r1, r3
 8001f02:	4839      	ldr	r0, [pc, #228]	; (8001fe8 <UART_SetConfig+0x238>)
 8001f04:	3910      	subs	r1, #16
 8001f06:	4281      	cmp	r1, r0
 8001f08:	d8a1      	bhi.n	8001e4e <UART_SetConfig+0x9e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f0e:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f10:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f12:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001f14:	6821      	ldr	r1, [r4, #0]
 8001f16:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8001f18:	60cb      	str	r3, [r1, #12]
 8001f1a:	e7a8      	b.n	8001e6e <UART_SetConfig+0xbe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f1c:	f7fe ff58 	bl	8000dd0 <HAL_RCC_GetSysClockFreq>
 8001f20:	e7d2      	b.n	8001ec8 <UART_SetConfig+0x118>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f22:	6863      	ldr	r3, [r4, #4]
 8001f24:	0858      	lsrs	r0, r3, #1
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	025b      	lsls	r3, r3, #9
 8001f2a:	e7d0      	b.n	8001ece <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8001f2c:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e7e6      	b.n	8001f00 <UART_SetConfig+0x150>
    switch (clocksource)
 8001f32:	2808      	cmp	r0, #8
 8001f34:	d837      	bhi.n	8001fa6 <UART_SetConfig+0x1f6>
 8001f36:	f7fe f8f9 	bl	800012c <__gnu_thumb1_case_uqi>
 8001f3a:	0c05      	.short	0x0c05
 8001f3c:	362a360f 	.word	0x362a360f
 8001f40:	3636      	.short	0x3636
 8001f42:	2d          	.byte	0x2d
 8001f43:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f44:	f7ff fabc 	bl	80014c0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f48:	6863      	ldr	r3, [r4, #4]
 8001f4a:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f4c:	18c0      	adds	r0, r0, r3
 8001f4e:	6861      	ldr	r1, [r4, #4]
 8001f50:	e00b      	b.n	8001f6a <UART_SetConfig+0x1ba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f52:	f7ff fac5 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
 8001f56:	e7f7      	b.n	8001f48 <UART_SetConfig+0x198>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f58:	2510      	movs	r5, #16
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <UART_SetConfig+0x210>)
 8001f5c:	6861      	ldr	r1, [r4, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001f60:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f62:	4015      	ands	r5, r2
 8001f64:	d00d      	beq.n	8001f82 <UART_SetConfig+0x1d2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <UART_SetConfig+0x220>)
 8001f68:	18c0      	adds	r0, r0, r3
 8001f6a:	f7fe f8e9 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f6e:	2500      	movs	r5, #0
 8001f70:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f72:	0019      	movs	r1, r3
 8001f74:	481c      	ldr	r0, [pc, #112]	; (8001fe8 <UART_SetConfig+0x238>)
 8001f76:	3910      	subs	r1, #16
 8001f78:	4281      	cmp	r1, r0
 8001f7a:	d900      	bls.n	8001f7e <UART_SetConfig+0x1ce>
 8001f7c:	e767      	b.n	8001e4e <UART_SetConfig+0x9e>
      huart->Instance->BRR = usartdiv;
 8001f7e:	6821      	ldr	r1, [r4, #0]
 8001f80:	e7ca      	b.n	8001f18 <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <UART_SetConfig+0x22c>)
 8001f84:	18c0      	adds	r0, r0, r3
 8001f86:	f7fe f8db 	bl	8000140 <__udivsi3>
 8001f8a:	b283      	uxth	r3, r0
 8001f8c:	e7f1      	b.n	8001f72 <UART_SetConfig+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f8e:	f7fe ff1f 	bl	8000dd0 <HAL_RCC_GetSysClockFreq>
 8001f92:	e7d9      	b.n	8001f48 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f94:	6863      	ldr	r3, [r4, #4]
 8001f96:	0858      	lsrs	r0, r3, #1
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	e7d6      	b.n	8001f4c <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	4299      	cmp	r1, r3
 8001fa4:	d0c2      	beq.n	8001f2c <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 8001fa6:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e7e2      	b.n	8001f72 <UART_SetConfig+0x1c2>
 8001fac:	efff69f3 	.word	0xefff69f3
 8001fb0:	ffffcfff 	.word	0xffffcfff
 8001fb4:	40004800 	.word	0x40004800
 8001fb8:	fffff4ff 	.word	0xfffff4ff
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08004958 	.word	0x08004958
 8001fc8:	40004400 	.word	0x40004400
 8001fcc:	0800495c 	.word	0x0800495c
 8001fd0:	003d0900 	.word	0x003d0900
 8001fd4:	fffffd00 	.word	0xfffffd00
 8001fd8:	000ffcff 	.word	0x000ffcff
 8001fdc:	00f42400 	.word	0x00f42400
 8001fe0:	007a1200 	.word	0x007a1200
 8001fe4:	01e84800 	.word	0x01e84800
 8001fe8:	0000ffef 	.word	0x0000ffef

08001fec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fec:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001fee:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ff0:	07da      	lsls	r2, r3, #31
 8001ff2:	d506      	bpl.n	8002002 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ff4:	6801      	ldr	r1, [r0, #0]
 8001ff6:	4c28      	ldr	r4, [pc, #160]	; (8002098 <UART_AdvFeatureConfig+0xac>)
 8001ff8:	684a      	ldr	r2, [r1, #4]
 8001ffa:	4022      	ands	r2, r4
 8001ffc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ffe:	4322      	orrs	r2, r4
 8002000:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002002:	079a      	lsls	r2, r3, #30
 8002004:	d506      	bpl.n	8002014 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002006:	6801      	ldr	r1, [r0, #0]
 8002008:	4c24      	ldr	r4, [pc, #144]	; (800209c <UART_AdvFeatureConfig+0xb0>)
 800200a:	684a      	ldr	r2, [r1, #4]
 800200c:	4022      	ands	r2, r4
 800200e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002010:	4322      	orrs	r2, r4
 8002012:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002014:	075a      	lsls	r2, r3, #29
 8002016:	d506      	bpl.n	8002026 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002018:	6801      	ldr	r1, [r0, #0]
 800201a:	4c21      	ldr	r4, [pc, #132]	; (80020a0 <UART_AdvFeatureConfig+0xb4>)
 800201c:	684a      	ldr	r2, [r1, #4]
 800201e:	4022      	ands	r2, r4
 8002020:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002022:	4322      	orrs	r2, r4
 8002024:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002026:	071a      	lsls	r2, r3, #28
 8002028:	d506      	bpl.n	8002038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800202a:	6801      	ldr	r1, [r0, #0]
 800202c:	4c1d      	ldr	r4, [pc, #116]	; (80020a4 <UART_AdvFeatureConfig+0xb8>)
 800202e:	684a      	ldr	r2, [r1, #4]
 8002030:	4022      	ands	r2, r4
 8002032:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002034:	4322      	orrs	r2, r4
 8002036:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002038:	06da      	lsls	r2, r3, #27
 800203a:	d506      	bpl.n	800204a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800203c:	6801      	ldr	r1, [r0, #0]
 800203e:	4c1a      	ldr	r4, [pc, #104]	; (80020a8 <UART_AdvFeatureConfig+0xbc>)
 8002040:	688a      	ldr	r2, [r1, #8]
 8002042:	4022      	ands	r2, r4
 8002044:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002046:	4322      	orrs	r2, r4
 8002048:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800204a:	069a      	lsls	r2, r3, #26
 800204c:	d506      	bpl.n	800205c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800204e:	6801      	ldr	r1, [r0, #0]
 8002050:	4c16      	ldr	r4, [pc, #88]	; (80020ac <UART_AdvFeatureConfig+0xc0>)
 8002052:	688a      	ldr	r2, [r1, #8]
 8002054:	4022      	ands	r2, r4
 8002056:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002058:	4322      	orrs	r2, r4
 800205a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800205c:	065a      	lsls	r2, r3, #25
 800205e:	d510      	bpl.n	8002082 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002060:	6801      	ldr	r1, [r0, #0]
 8002062:	4d13      	ldr	r5, [pc, #76]	; (80020b0 <UART_AdvFeatureConfig+0xc4>)
 8002064:	684a      	ldr	r2, [r1, #4]
 8002066:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002068:	402a      	ands	r2, r5
 800206a:	4322      	orrs	r2, r4
 800206c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	0352      	lsls	r2, r2, #13
 8002072:	4294      	cmp	r4, r2
 8002074:	d105      	bne.n	8002082 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002076:	684a      	ldr	r2, [r1, #4]
 8002078:	4c0e      	ldr	r4, [pc, #56]	; (80020b4 <UART_AdvFeatureConfig+0xc8>)
 800207a:	4022      	ands	r2, r4
 800207c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800207e:	4322      	orrs	r2, r4
 8002080:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002082:	061b      	lsls	r3, r3, #24
 8002084:	d506      	bpl.n	8002094 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002086:	6802      	ldr	r2, [r0, #0]
 8002088:	490b      	ldr	r1, [pc, #44]	; (80020b8 <UART_AdvFeatureConfig+0xcc>)
 800208a:	6853      	ldr	r3, [r2, #4]
 800208c:	400b      	ands	r3, r1
 800208e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002090:	430b      	orrs	r3, r1
 8002092:	6053      	str	r3, [r2, #4]
  }
}
 8002094:	bd30      	pop	{r4, r5, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	fffdffff 	.word	0xfffdffff
 800209c:	fffeffff 	.word	0xfffeffff
 80020a0:	fffbffff 	.word	0xfffbffff
 80020a4:	ffff7fff 	.word	0xffff7fff
 80020a8:	ffffefff 	.word	0xffffefff
 80020ac:	ffffdfff 	.word	0xffffdfff
 80020b0:	ffefffff 	.word	0xffefffff
 80020b4:	ff9fffff 	.word	0xff9fffff
 80020b8:	fff7ffff 	.word	0xfff7ffff

080020bc <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020be:	0004      	movs	r4, r0
 80020c0:	000e      	movs	r6, r1
 80020c2:	0015      	movs	r5, r2
 80020c4:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c6:	6822      	ldr	r2, [r4, #0]
 80020c8:	69d3      	ldr	r3, [r2, #28]
 80020ca:	4033      	ands	r3, r6
 80020cc:	1b9b      	subs	r3, r3, r6
 80020ce:	4259      	negs	r1, r3
 80020d0:	414b      	adcs	r3, r1
 80020d2:	42ab      	cmp	r3, r5
 80020d4:	d001      	beq.n	80020da <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80020d6:	2000      	movs	r0, #0
 80020d8:	e01b      	b.n	8002112 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80020da:	9b06      	ldr	r3, [sp, #24]
 80020dc:	3301      	adds	r3, #1
 80020de:	d0f3      	beq.n	80020c8 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e0:	f7fe faf2 	bl	80006c8 <HAL_GetTick>
 80020e4:	9b06      	ldr	r3, [sp, #24]
 80020e6:	1bc0      	subs	r0, r0, r7
 80020e8:	4283      	cmp	r3, r0
 80020ea:	d301      	bcc.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x34>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ea      	bne.n	80020c6 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <UART_WaitOnFlagUntilTimeout+0x58>)
 80020f4:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80020f6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020f8:	400a      	ands	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	31a3      	adds	r1, #163	; 0xa3
 8002100:	31ff      	adds	r1, #255	; 0xff
 8002102:	438a      	bics	r2, r1
 8002104:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002106:	2320      	movs	r3, #32
 8002108:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800210a:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800210c:	2300      	movs	r3, #0
 800210e:	3470      	adds	r4, #112	; 0x70
 8002110:	7023      	strb	r3, [r4, #0]
}
 8002112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002114:	fffffe5f 	.word	0xfffffe5f

08002118 <HAL_UART_Transmit>:
{
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	b087      	sub	sp, #28
 800211c:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800211e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002120:	0004      	movs	r4, r0
 8002122:	000d      	movs	r5, r1
 8002124:	0017      	movs	r7, r2
    return HAL_BUSY;
 8002126:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002128:	2b20      	cmp	r3, #32
 800212a:	d149      	bne.n	80021c0 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 800212c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800212e:	2900      	cmp	r1, #0
 8002130:	d046      	beq.n	80021c0 <HAL_UART_Transmit+0xa8>
 8002132:	2a00      	cmp	r2, #0
 8002134:	d044      	beq.n	80021c0 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	68a2      	ldr	r2, [r4, #8]
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	429a      	cmp	r2, r3
 800213e:	d104      	bne.n	800214a <HAL_UART_Transmit+0x32>
 8002140:	6923      	ldr	r3, [r4, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8002146:	4201      	tst	r1, r0
 8002148:	d13a      	bne.n	80021c0 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800214a:	0023      	movs	r3, r4
 800214c:	3370      	adds	r3, #112	; 0x70
 800214e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002150:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002152:	2a01      	cmp	r2, #1
 8002154:	d034      	beq.n	80021c0 <HAL_UART_Transmit+0xa8>
 8002156:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002158:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 800215a:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800215c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215e:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002160:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002162:	f7fe fab1 	bl	80006c8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002166:	0023      	movs	r3, r4
 8002168:	3350      	adds	r3, #80	; 0x50
 800216a:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 800216c:	3302      	adds	r3, #2
 800216e:	9303      	str	r3, [sp, #12]
 8002170:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002176:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002178:	015b      	lsls	r3, r3, #5
 800217a:	429a      	cmp	r2, r3
 800217c:	d104      	bne.n	8002188 <HAL_UART_Transmit+0x70>
 800217e:	6923      	ldr	r3, [r4, #16]
 8002180:	42b3      	cmp	r3, r6
 8002182:	d101      	bne.n	8002188 <HAL_UART_Transmit+0x70>
 8002184:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002186:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002188:	0023      	movs	r3, r4
 800218a:	3352      	adds	r3, #82	; 0x52
 800218c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800218e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8002190:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8002196:	2a00      	cmp	r2, #0
 8002198:	d10a      	bne.n	80021b0 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800219a:	2140      	movs	r1, #64	; 0x40
 800219c:	0020      	movs	r0, r4
 800219e:	f7ff ff8d 	bl	80020bc <UART_WaitOnFlagUntilTimeout>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d10b      	bne.n	80021be <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80021a6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80021a8:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80021aa:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80021ac:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80021ae:	e007      	b.n	80021c0 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021b0:	2200      	movs	r2, #0
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	0020      	movs	r0, r4
 80021b6:	f7ff ff81 	bl	80020bc <UART_WaitOnFlagUntilTimeout>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d002      	beq.n	80021c4 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80021be:	2003      	movs	r0, #3
}
 80021c0:	b007      	add	sp, #28
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80021c6:	2d00      	cmp	r5, #0
 80021c8:	d10b      	bne.n	80021e2 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ca:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80021cc:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ce:	05db      	lsls	r3, r3, #23
 80021d0:	0ddb      	lsrs	r3, r3, #23
 80021d2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80021d4:	9b03      	ldr	r3, [sp, #12]
 80021d6:	9a03      	ldr	r2, [sp, #12]
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29b      	uxth	r3, r3
 80021de:	8013      	strh	r3, [r2, #0]
 80021e0:	e7d2      	b.n	8002188 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021e2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80021e4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021e6:	6293      	str	r3, [r2, #40]	; 0x28
 80021e8:	e7f4      	b.n	80021d4 <HAL_UART_Transmit+0xbc>
	...

080021ec <UART_CheckIdleState>:
{
 80021ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ee:	2600      	movs	r6, #0
{
 80021f0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80021f4:	f7fe fa68 	bl	80006c8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021f8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80021fa:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	071b      	lsls	r3, r3, #28
 8002200:	d415      	bmi.n	800222e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	075b      	lsls	r3, r3, #29
 8002208:	d50a      	bpl.n	8002220 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <UART_CheckIdleState+0x5c>)
 800220e:	2200      	movs	r2, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	03c9      	lsls	r1, r1, #15
 8002214:	002b      	movs	r3, r5
 8002216:	0020      	movs	r0, r4
 8002218:	f7ff ff50 	bl	80020bc <UART_WaitOnFlagUntilTimeout>
 800221c:	2800      	cmp	r0, #0
 800221e:	d111      	bne.n	8002244 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002220:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002222:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002224:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002226:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002228:	3470      	adds	r4, #112	; 0x70
 800222a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800222c:	e00b      	b.n	8002246 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <UART_CheckIdleState+0x5c>)
 8002232:	0032      	movs	r2, r6
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	0389      	lsls	r1, r1, #14
 8002238:	0003      	movs	r3, r0
 800223a:	0020      	movs	r0, r4
 800223c:	f7ff ff3e 	bl	80020bc <UART_WaitOnFlagUntilTimeout>
 8002240:	2800      	cmp	r0, #0
 8002242:	d0de      	beq.n	8002202 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002244:	2003      	movs	r0, #3
}
 8002246:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002248:	01ffffff 	.word	0x01ffffff

0800224c <HAL_UART_Init>:
{
 800224c:	b510      	push	{r4, lr}
 800224e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002252:	2001      	movs	r0, #1
}
 8002254:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002256:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002258:	2b00      	cmp	r3, #0
 800225a:	d104      	bne.n	8002266 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800225c:	0002      	movs	r2, r0
 800225e:	3270      	adds	r2, #112	; 0x70
 8002260:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002262:	f000 fa15 	bl	8002690 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002266:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002268:	2101      	movs	r1, #1
 800226a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800226c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800226e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002270:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002272:	438b      	bics	r3, r1
 8002274:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002276:	f7ff fd9b 	bl	8001db0 <UART_SetConfig>
 800227a:	2801      	cmp	r0, #1
 800227c:	d0e9      	beq.n	8002252 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800227e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002284:	0020      	movs	r0, r4
 8002286:	f7ff feb1 	bl	8001fec <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <HAL_UART_Init+0x60>)
 800228e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002290:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002292:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002294:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	438a      	bics	r2, r1
 800229c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800229e:	2201      	movs	r2, #1
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80022a6:	f7ff ffa1 	bl	80021ec <UART_CheckIdleState>
 80022aa:	e7d3      	b.n	8002254 <HAL_UART_Init+0x8>
 80022ac:	ffffb7ff 	.word	0xffffb7ff

080022b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b0:	b530      	push	{r4, r5, lr}
 80022b2:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b4:	2238      	movs	r2, #56	; 0x38
 80022b6:	2100      	movs	r1, #0
 80022b8:	a80e      	add	r0, sp, #56	; 0x38
 80022ba:	f000 fcb9 	bl	8002c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022be:	2214      	movs	r2, #20
 80022c0:	2100      	movs	r1, #0
 80022c2:	4668      	mov	r0, sp
 80022c4:	f000 fcb4 	bl	8002c30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c8:	2224      	movs	r2, #36	; 0x24
 80022ca:	2100      	movs	r1, #0
 80022cc:	a805      	add	r0, sp, #20
 80022ce:	f000 fcaf 	bl	8002c30 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	4917      	ldr	r1, [pc, #92]	; (8002334 <SystemClock_Config+0x84>)
 80022d6:	4c18      	ldr	r4, [pc, #96]	; (8002338 <SystemClock_Config+0x88>)
 80022d8:	680a      	ldr	r2, [r1, #0]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4022      	ands	r2, r4
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80022e2:	f7fe fd3d 	bl	8000d60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022e6:	4a15      	ldr	r2, [pc, #84]	; (800233c <SystemClock_Config+0x8c>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e8:	2501      	movs	r5, #1
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ec:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022ee:	4023      	ands	r3, r4
 80022f0:	6513      	str	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80022f2:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022f4:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80022f6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022f8:	33fa      	adds	r3, #250	; 0xfa
 80022fa:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022fc:	3bf0      	subs	r3, #240	; 0xf0
 80022fe:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002300:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002302:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002304:	f7fe fda0 	bl	8000e48 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002308:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800230a:	0021      	movs	r1, r4
 800230c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800230e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002310:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002312:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002314:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002316:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002318:	f7ff f81a 	bl	8001350 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800231c:	232a      	movs	r3, #42	; 0x2a
 800231e:	9305      	str	r3, [sp, #20]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002320:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002322:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002324:	025b      	lsls	r3, r3, #9
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002326:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002328:	940b      	str	r4, [sp, #44]	; 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800232a:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800232c:	f7ff f8e8 	bl	8001500 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002330:	b01d      	add	sp, #116	; 0x74
 8002332:	bd30      	pop	{r4, r5, pc}
 8002334:	40007000 	.word	0x40007000
 8002338:	ffffe7ff 	.word	0xffffe7ff
 800233c:	40021000 	.word	0x40021000

08002340 <main>:
{
 8002340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002342:	b095      	sub	sp, #84	; 0x54
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	ad0a      	add	r5, sp, #40	; 0x28
  HAL_Init();
 8002346:	f7fe f99f 	bl	8000688 <HAL_Init>
  SystemClock_Config();
 800234a:	f7ff ffb1 	bl	80022b0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234e:	2214      	movs	r2, #20
 8002350:	2100      	movs	r1, #0
 8002352:	0028      	movs	r0, r5
 8002354:	f000 fc6c 	bl	8002c30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002358:	2004      	movs	r0, #4
 800235a:	4b7c      	ldr	r3, [pc, #496]	; (800254c <main+0x20c>)
  hi2c1.Init.OwnAddress1 = 0;
 800235c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800235e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002360:	4301      	orrs	r1, r0
 8002362:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002366:	4002      	ands	r2, r0
 8002368:	9201      	str	r2, [sp, #4]
 800236a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800236c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236e:	307c      	adds	r0, #124	; 0x7c
 8002370:	4301      	orrs	r1, r0
 8002372:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	2101      	movs	r1, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002378:	4002      	ands	r2, r0
 800237a:	9202      	str	r2, [sp, #8]
 800237c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002380:	4873      	ldr	r0, [pc, #460]	; (8002550 <main+0x210>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	430a      	orrs	r2, r1
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
 8002386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002388:	400a      	ands	r2, r1
 800238a:	9203      	str	r2, [sp, #12]
 800238c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	1849      	adds	r1, r1, r1
 8002392:	430a      	orrs	r2, r1
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	400b      	ands	r3, r1
 800239a:	9304      	str	r3, [sp, #16]
 800239c:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	019b      	lsls	r3, r3, #6
 80023a2:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023a4:	4b6b      	ldr	r3, [pc, #428]	; (8002554 <main+0x214>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023a6:	0029      	movs	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023a8:	606b      	str	r3, [r5, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f7fe fa09 	bl	80007c0 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80023ae:	4e6a      	ldr	r6, [pc, #424]	; (8002558 <main+0x218>)
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <main+0x21c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023b2:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80023b4:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80023b6:	4b6a      	ldr	r3, [pc, #424]	; (8002560 <main+0x220>)
  hi2c1.Init.OwnAddress1 = 0;
 80023b8:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x00303D5B;
 80023ba:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023bc:	2301      	movs	r3, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023be:	6134      	str	r4, [r6, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023c0:	60f3      	str	r3, [r6, #12]
  hi2c1.Init.OwnAddress2 = 0;
 80023c2:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023c4:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023c6:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023c8:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023ca:	f7fe fb93 	bl	8000af4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023ce:	0021      	movs	r1, r4
 80023d0:	0030      	movs	r0, r6
 80023d2:	f7fe fc7b 	bl	8000ccc <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023d6:	0021      	movs	r1, r4
 80023d8:	0030      	movs	r0, r6
 80023da:	f7fe fc9d 	bl	8000d18 <HAL_I2CEx_ConfigDigitalFilter>
  RTC_TimeTypeDef sTime = {0};
 80023de:	0021      	movs	r1, r4
 80023e0:	2214      	movs	r2, #20
 80023e2:	a805      	add	r0, sp, #20
 80023e4:	f000 fc24 	bl	8002c30 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80023e8:	0021      	movs	r1, r4
 80023ea:	2228      	movs	r2, #40	; 0x28
 80023ec:	0028      	movs	r0, r5
  RTC_DateTypeDef sDate = {0};
 80023ee:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80023f0:	f000 fc1e 	bl	8002c30 <memset>
  hrtc.Instance = RTC;
 80023f4:	4f5b      	ldr	r7, [pc, #364]	; (8002564 <main+0x224>)
 80023f6:	4b5c      	ldr	r3, [pc, #368]	; (8002568 <main+0x228>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023f8:	0038      	movs	r0, r7
  hrtc.Instance = RTC;
 80023fa:	603b      	str	r3, [r7, #0]
  hrtc.Init.AsynchPrediv = 127;
 80023fc:	237f      	movs	r3, #127	; 0x7f
 80023fe:	60bb      	str	r3, [r7, #8]
  hrtc.Init.SynchPrediv = 255;
 8002400:	3380      	adds	r3, #128	; 0x80
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002402:	607c      	str	r4, [r7, #4]
  hrtc.Init.SynchPrediv = 255;
 8002404:	60fb      	str	r3, [r7, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002406:	613c      	str	r4, [r7, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002408:	617c      	str	r4, [r7, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800240a:	61bc      	str	r4, [r7, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800240c:	61fc      	str	r4, [r7, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800240e:	f7ff fa1d 	bl	800184c <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8002412:	466b      	mov	r3, sp
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002414:	2201      	movs	r2, #1
 8002416:	a905      	add	r1, sp, #20
 8002418:	0038      	movs	r0, r7
  sTime.Hours = 0x0;
 800241a:	751c      	strb	r4, [r3, #20]
  sTime.Minutes = 0x0;
 800241c:	755c      	strb	r4, [r3, #21]
  sTime.Seconds = 0x0;
 800241e:	759c      	strb	r4, [r3, #22]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002420:	9408      	str	r4, [sp, #32]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002422:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002424:	f7ff fa7a 	bl	800191c <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002428:	466b      	mov	r3, sp
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800242e:	2201      	movs	r2, #1
 8002430:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002432:	2201      	movs	r2, #1
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002434:	4669      	mov	r1, sp
  sDate.Date = 0x1;
 8002436:	709a      	strb	r2, [r3, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002438:	0038      	movs	r0, r7
 800243a:	2201      	movs	r2, #1
  sDate.Year = 0x0;
 800243c:	70dc      	strb	r4, [r3, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800243e:	f7ff faeb 	bl	8001a18 <HAL_RTC_SetDate>
  sAlarm.AlarmDateWeekDay = 0x1;
 8002442:	2329      	movs	r3, #41	; 0x29
 8002444:	2201      	movs	r2, #1
 8002446:	446b      	add	r3, sp
 8002448:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 800244a:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800244c:	2201      	movs	r2, #1
 800244e:	0029      	movs	r1, r5
  sAlarm.Alarm = RTC_ALARM_A;
 8002450:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002452:	0038      	movs	r0, r7
  sAlarm.AlarmTime.Hours = 0x0;
 8002454:	702c      	strb	r4, [r5, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002456:	706c      	strb	r4, [r5, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002458:	70ac      	strb	r4, [r5, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800245a:	606c      	str	r4, [r5, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800245c:	60ec      	str	r4, [r5, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800245e:	612c      	str	r4, [r5, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002460:	616c      	str	r4, [r5, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002462:	61ac      	str	r4, [r5, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002464:	61ec      	str	r4, [r5, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002466:	626b      	str	r3, [r5, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002468:	f7ff fb42 	bl	8001af0 <HAL_RTC_SetAlarm_IT>
  hspi1.Instance = SPI1;
 800246c:	483f      	ldr	r0, [pc, #252]	; (800256c <main+0x22c>)
 800246e:	4b40      	ldr	r3, [pc, #256]	; (8002570 <main+0x230>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002470:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 8002472:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002474:	2382      	movs	r3, #130	; 0x82
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	6043      	str	r3, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800247a:	33fc      	adds	r3, #252	; 0xfc
 800247c:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800247e:	3bfa      	subs	r3, #250	; 0xfa
 8002480:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002482:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002484:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002486:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002488:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248a:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800248c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800248e:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002490:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002492:	f7ff fc4d 	bl	8001d30 <HAL_SPI_Init>
  huart2.Instance = USART2;
 8002496:	4f37      	ldr	r7, [pc, #220]	; (8002574 <main+0x234>)
 8002498:	4b37      	ldr	r3, [pc, #220]	; (8002578 <main+0x238>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800249a:	0038      	movs	r0, r7
  huart2.Instance = USART2;
 800249c:	603b      	str	r3, [r7, #0]
  huart2.Init.BaudRate = 115200;
 800249e:	23e1      	movs	r3, #225	; 0xe1
 80024a0:	025b      	lsls	r3, r3, #9
 80024a2:	607b      	str	r3, [r7, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024a4:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024a6:	60bc      	str	r4, [r7, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024a8:	617b      	str	r3, [r7, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024aa:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ac:	613c      	str	r4, [r7, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ae:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024b2:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b4:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024b6:	f7ff fec9 	bl	800224c <HAL_UART_Init>
  SHT21_Begin();
 80024ba:	f000 f97f 	bl	80027bc <SHT21_Begin>
  glassLCD_Begin(&hi2c1);
 80024be:	0030      	movs	r0, r6
 80024c0:	f000 f9c0 	bl	8002844 <glassLCD_Begin>
  RTC_SetTime(TIME_HOURS(), TIME_MINUTES(), TIME_SECONDS());
 80024c4:	2232      	movs	r2, #50	; 0x32
 80024c6:	2129      	movs	r1, #41	; 0x29
 80024c8:	2017      	movs	r0, #23
 80024ca:	f000 f9c1 	bl	8002850 <RTC_SetTime>
  RTC_SetAlarmEpoch(RTC_GetEpoch() + 10, RTC_ALARMMASK_DATEWEEKDAY);
 80024ce:	f000 fa13 	bl	80028f8 <RTC_GetEpoch>
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	300a      	adds	r0, #10
 80024d6:	0609      	lsls	r1, r1, #24
 80024d8:	f000 fa36 	bl	8002948 <RTC_SetAlarmEpoch>
  HAL_UART_Transmit(&huart2, codeStartedStr, sizeof(codeStartedStr), 1000);
 80024dc:	23fa      	movs	r3, #250	; 0xfa
 80024de:	2214      	movs	r2, #20
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4926      	ldr	r1, [pc, #152]	; (800257c <main+0x23c>)
 80024e4:	0038      	movs	r0, r7
 80024e6:	f7ff fe17 	bl	8002118 <HAL_UART_Transmit>
  HAL_PWR_DisablePVD();
 80024ea:	f7fe fc43 	bl	8000d74 <HAL_PWR_DisablePVD>
  HAL_PWREx_EnableUltraLowPower();
 80024ee:	f7fe fc65 	bl	8000dbc <HAL_PWREx_EnableUltraLowPower>
  HAL_SuspendTick();
 80024f2:	f7fe f901 	bl	80006f8 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80024f6:	2101      	movs	r1, #1
	  sprintf(text, "%04lu", RTC_GetEpoch() % 1000);
 80024f8:	24fa      	movs	r4, #250	; 0xfa
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80024fa:	0008      	movs	r0, r1
 80024fc:	f7fe fc42 	bl	8000d84 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8002500:	f7ff fed6 	bl	80022b0 <SystemClock_Config>
  HAL_ResumeTick();
 8002504:	f7fe f900 	bl	8000708 <HAL_ResumeTick>
	  sprintf(text, "%04lu", RTC_GetEpoch() % 1000);
 8002508:	00a4      	lsls	r4, r4, #2
 800250a:	f000 f9f5 	bl	80028f8 <RTC_GetEpoch>
 800250e:	0021      	movs	r1, r4
 8002510:	f7fd fe9c 	bl	800024c <__aeabi_uidivmod>
 8002514:	0028      	movs	r0, r5
 8002516:	000a      	movs	r2, r1
 8002518:	4919      	ldr	r1, [pc, #100]	; (8002580 <main+0x240>)
 800251a:	f000 fea1 	bl	8003260 <siprintf>
	  glassLCD_WriteData(text);
 800251e:	0028      	movs	r0, r5
 8002520:	f000 f950 	bl	80027c4 <glassLCD_WriteData>
	  sprintf(text, "%lu\r\n", RTC_GetEpoch());
 8002524:	f000 f9e8 	bl	80028f8 <RTC_GetEpoch>
 8002528:	4916      	ldr	r1, [pc, #88]	; (8002584 <main+0x244>)
 800252a:	0002      	movs	r2, r0
 800252c:	0028      	movs	r0, r5
 800252e:	f000 fe97 	bl	8003260 <siprintf>
	  HAL_UART_Transmit(&huart2, text, strlen(text), 1000);
 8002532:	0028      	movs	r0, r5
 8002534:	f7fd fde8 	bl	8000108 <strlen>
 8002538:	0023      	movs	r3, r4
 800253a:	b282      	uxth	r2, r0
 800253c:	0029      	movs	r1, r5
 800253e:	0038      	movs	r0, r7
 8002540:	f7ff fdea 	bl	8002118 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002544:	0020      	movs	r0, r4
 8002546:	f7fe f8c5 	bl	80006d4 <HAL_Delay>
 800254a:	e7de      	b.n	800250a <main+0x1ca>
 800254c:	40021000 	.word	0x40021000
 8002550:	50000800 	.word	0x50000800
 8002554:	10210000 	.word	0x10210000
 8002558:	20000280 	.word	0x20000280
 800255c:	40005400 	.word	0x40005400
 8002560:	00303d5b 	.word	0x00303d5b
 8002564:	200002cc 	.word	0x200002cc
 8002568:	40002800 	.word	0x40002800
 800256c:	200002f0 	.word	0x200002f0
 8002570:	40013000 	.word	0x40013000
 8002574:	20000348 	.word	0x20000348
 8002578:	40004400 	.word	0x40004400
 800257c:	08004969 	.word	0x08004969
 8002580:	0800497d 	.word	0x0800497d
 8002584:	08004983 	.word	0x08004983

08002588 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002588:	2201      	movs	r2, #1
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_MspInit+0x18>)
 800258c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800258e:	430a      	orrs	r2, r1
 8002590:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002596:	0552      	lsls	r2, r2, #21
 8002598:	430a      	orrs	r2, r1
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259c:	4770      	bx	lr
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025a4:	b510      	push	{r4, lr}
 80025a6:	0004      	movs	r4, r0
 80025a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025aa:	2214      	movs	r2, #20
 80025ac:	2100      	movs	r1, #0
 80025ae:	a801      	add	r0, sp, #4
 80025b0:	f000 fb3e 	bl	8002c30 <memset>
  if(hi2c->Instance==I2C1)
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_I2C_MspInit+0x58>)
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d11c      	bne.n	80025f6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025bc:	2102      	movs	r1, #2
 80025be:	4c10      	ldr	r4, [pc, #64]	; (8002600 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	4810      	ldr	r0, [pc, #64]	; (8002604 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025c4:	430a      	orrs	r2, r1
 80025c6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80025c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025ca:	400b      	ands	r3, r1
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025d0:	23c0      	movs	r3, #192	; 0xc0
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d6:	2312      	movs	r3, #18
 80025d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025da:	3b11      	subs	r3, #17
 80025dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	185b      	adds	r3, r3, r1
 80025e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025e4:	3301      	adds	r3, #1
 80025e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f7fe f8ea 	bl	80007c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025f0:	039b      	lsls	r3, r3, #14
 80025f2:	4313      	orrs	r3, r2
 80025f4:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025f6:	b006      	add	sp, #24
 80025f8:	bd10      	pop	{r4, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	40005400 	.word	0x40005400
 8002600:	40021000 	.word	0x40021000
 8002604:	50000400 	.word	0x50000400

08002608 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RTC_MspInit+0x28>)
 800260a:	6802      	ldr	r2, [r0, #0]
{
 800260c:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 800260e:	429a      	cmp	r2, r3
 8002610:	d10d      	bne.n	800262e <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	4a07      	ldr	r2, [pc, #28]	; (8002634 <HAL_RTC_MspInit+0x2c>)
 8002616:	02db      	lsls	r3, r3, #11
 8002618:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800261a:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 800261c:	430b      	orrs	r3, r1
 800261e:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	0011      	movs	r1, r2
 8002624:	f7fe f878 	bl	8000718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002628:	2002      	movs	r0, #2
 800262a:	f7fe f8a5 	bl	8000778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800262e:	bd10      	pop	{r4, pc}
 8002630:	40002800 	.word	0x40002800
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002638:	b510      	push	{r4, lr}
 800263a:	0004      	movs	r4, r0
 800263c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263e:	2214      	movs	r2, #20
 8002640:	2100      	movs	r1, #0
 8002642:	a801      	add	r0, sp, #4
 8002644:	f000 faf4 	bl	8002c30 <memset>
  if(hspi->Instance==SPI1)
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_SPI_MspInit+0x50>)
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d118      	bne.n	8002682 <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_SPI_MspInit+0x54>)
 8002654:	0152      	lsls	r2, r2, #5
 8002656:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800265a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 800265e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	430a      	orrs	r2, r1
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	400b      	ands	r3, r1
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002670:	23e0      	movs	r3, #224	; 0xe0
 8002672:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	3bde      	subs	r3, #222	; 0xde
 8002676:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002678:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f7fe f89f 	bl	80007c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002682:	b006      	add	sp, #24
 8002684:	bd10      	pop	{r4, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40013000 	.word	0x40013000
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002690:	b510      	push	{r4, lr}
 8002692:	0004      	movs	r4, r0
 8002694:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002696:	2214      	movs	r2, #20
 8002698:	2100      	movs	r1, #0
 800269a:	a801      	add	r0, sp, #4
 800269c:	f000 fac8 	bl	8002c30 <memset>
  if(huart->Instance==USART2)
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_UART_MspInit+0x54>)
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d11a      	bne.n	80026de <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_UART_MspInit+0x58>)
 80026ac:	0292      	lsls	r2, r2, #10
 80026ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b2:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026bc:	430a      	orrs	r2, r1
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	400b      	ands	r3, r1
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026c8:	230c      	movs	r3, #12
 80026ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	3b0a      	subs	r3, #10
 80026ce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	185b      	adds	r3, r3, r1
 80026d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80026d4:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80026d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f7fe f871 	bl	80007c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026de:	b006      	add	sp, #24
 80026e0:	bd10      	pop	{r4, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	40004400 	.word	0x40004400
 80026e8:	40021000 	.word	0x40021000

080026ec <NMI_Handler>:
 80026ec:	4770      	bx	lr

080026ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ee:	e7fe      	b.n	80026ee <HardFault_Handler>

080026f0 <SVC_Handler>:
 80026f0:	4770      	bx	lr

080026f2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f2:	4770      	bx	lr

080026f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f6:	f7fd ffdb 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fa:	bd10      	pop	{r4, pc}

080026fc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80026fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026fe:	4802      	ldr	r0, [pc, #8]	; (8002708 <RTC_IRQHandler+0xc>)
 8002700:	f7ff f83e 	bl	8001780 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002704:	bd10      	pop	{r4, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	200002cc 	.word	0x200002cc

0800270c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <_sbrk+0x2c>)
{
 800270e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8002710:	6819      	ldr	r1, [r3, #0]
{
 8002712:	0002      	movs	r2, r0
	if (heap_end == 0)
 8002714:	2900      	cmp	r1, #0
 8002716:	d101      	bne.n	800271c <_sbrk+0x10>
		heap_end = &end;
 8002718:	4908      	ldr	r1, [pc, #32]	; (800273c <_sbrk+0x30>)
 800271a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800271c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800271e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002720:	1882      	adds	r2, r0, r2
 8002722:	428a      	cmp	r2, r1
 8002724:	d906      	bls.n	8002734 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002726:	f000 f975 	bl	8002a14 <__errno>
 800272a:	230c      	movs	r3, #12
 800272c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800272e:	2001      	movs	r0, #1
 8002730:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002732:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8002734:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002736:	e7fc      	b.n	8002732 <_sbrk+0x26>
 8002738:	20000248 	.word	0x20000248
 800273c:	200003cc 	.word	0x200003cc

08002740 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <SystemInit+0x44>)
 8002744:	0052      	lsls	r2, r2, #1
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	490e      	ldr	r1, [pc, #56]	; (8002788 <SystemInit+0x48>)
 8002750:	400a      	ands	r2, r1
 8002752:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	490d      	ldr	r1, [pc, #52]	; (800278c <SystemInit+0x4c>)
 8002758:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800275a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800275c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	438a      	bics	r2, r1
 8002762:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	490a      	ldr	r1, [pc, #40]	; (8002790 <SystemInit+0x50>)
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4909      	ldr	r1, [pc, #36]	; (8002794 <SystemInit+0x54>)
 8002770:	400a      	ands	r2, r1
 8002772:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002778:	2280      	movs	r2, #128	; 0x80
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <SystemInit+0x58>)
 800277c:	0512      	lsls	r2, r2, #20
 800277e:	609a      	str	r2, [r3, #8]
#endif
}
 8002780:	4770      	bx	lr
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	40021000 	.word	0x40021000
 8002788:	88ff400c 	.word	0x88ff400c
 800278c:	fef6fff6 	.word	0xfef6fff6
 8002790:	fffbffff 	.word	0xfffbffff
 8002794:	ff02ffff 	.word	0xff02ffff
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <SHT21_CheckSensor>:
	return SHT21_CheckSensor();
}

uint8_t SHT21_CheckSensor()
{
	return HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, NULL, 0, 1000) == HAL_OK? 1:0;
 800279c:	23fa      	movs	r3, #250	; 0xfa
{
 800279e:	b507      	push	{r0, r1, r2, lr}
	return HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, NULL, 0, 1000) == HAL_OK? 1:0;
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	2180      	movs	r1, #128	; 0x80
 80027a8:	001a      	movs	r2, r3
 80027aa:	4803      	ldr	r0, [pc, #12]	; (80027b8 <SHT21_CheckSensor+0x1c>)
 80027ac:	f7fe f9f8 	bl	8000ba0 <HAL_I2C_Master_Transmit>
 80027b0:	4243      	negs	r3, r0
 80027b2:	4158      	adcs	r0, r3
 80027b4:	b2c0      	uxtb	r0, r0
}
 80027b6:	bd0e      	pop	{r1, r2, r3, pc}
 80027b8:	20000280 	.word	0x20000280

080027bc <SHT21_Begin>:
{
 80027bc:	b510      	push	{r4, lr}
	return SHT21_CheckSensor();
 80027be:	f7ff ffed 	bl	800279c <SHT21_CheckSensor>
}
 80027c2:	bd10      	pop	{r4, pc}

080027c4 <glassLCD_WriteData>:
{
	glassLCD_WriteCmd(LCD_CONFIG);
}

void glassLCD_WriteData(char* s)
{
 80027c4:	b530      	push	{r4, r5, lr}
 80027c6:	0005      	movs	r5, r0
 80027c8:	b087      	sub	sp, #28
	uint8_t _segments[9] = {0};
 80027ca:	ac03      	add	r4, sp, #12
 80027cc:	2100      	movs	r1, #0
 80027ce:	2209      	movs	r2, #9
 80027d0:	0020      	movs	r0, r4
 80027d2:	f000 fa2d 	bl	8002c30 <memset>
	uint8_t _n = strlen(s);
 80027d6:	0028      	movs	r0, r5
 80027d8:	f7fd fc96 	bl	8000108 <strlen>

	//Convert ASCII to segment data
	for (int i = 0; i < _n; i++)
 80027dc:	2300      	movs	r3, #0
	{
	  _segments[i + 1] = asciiToSeg[s[i] - ' '] >> 1;
 80027de:	490d      	ldr	r1, [pc, #52]	; (8002814 <glassLCD_WriteData+0x50>)
	for (int i = 0; i < _n; i++)
 80027e0:	b2c0      	uxtb	r0, r0
 80027e2:	4283      	cmp	r3, r0
 80027e4:	db0c      	blt.n	8002800 <glassLCD_WriteData+0x3c>
	}

	// Add command for RAM addresing
	_segments[0] = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	7023      	strb	r3, [r4, #0]

	// Push all data to I2C!
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _segments, 9, 1000);
 80027ea:	23fa      	movs	r3, #250	; 0xfa
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	0022      	movs	r2, r4
 80027f2:	2309      	movs	r3, #9
 80027f4:	2170      	movs	r1, #112	; 0x70
 80027f6:	4808      	ldr	r0, [pc, #32]	; (8002818 <glassLCD_WriteData+0x54>)
 80027f8:	f7fe f9d2 	bl	8000ba0 <HAL_I2C_Master_Transmit>
}
 80027fc:	b007      	add	sp, #28
 80027fe:	bd30      	pop	{r4, r5, pc}
	  _segments[i + 1] = asciiToSeg[s[i] - ' '] >> 1;
 8002800:	3301      	adds	r3, #1
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	5caa      	ldrb	r2, [r5, r2]
 8002806:	3a20      	subs	r2, #32
 8002808:	0052      	lsls	r2, r2, #1
 800280a:	5a52      	ldrh	r2, [r2, r1]
 800280c:	0852      	lsrs	r2, r2, #1
 800280e:	54e2      	strb	r2, [r4, r3]
 8002810:	e7e7      	b.n	80027e2 <glassLCD_WriteData+0x1e>
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	080049aa 	.word	0x080049aa
 8002818:	20000280 	.word	0x20000280

0800281c <glassLCD_WriteCmd>:
	_data[1] = _dot ? (0b00100000) : (0b00000000);
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 2, 1000);
}

void glassLCD_WriteCmd(uint8_t _comm)
{
 800281c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	_comm = _comm | 0b10000000;
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	425b      	negs	r3, r3
 8002822:	4318      	orrs	r0, r3
{
 8002824:	220f      	movs	r2, #15
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 8002826:	23fa      	movs	r3, #250	; 0xfa
{
 8002828:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 800282a:	009b      	lsls	r3, r3, #2
	_comm = _comm | 0b10000000;
 800282c:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 800282e:	2170      	movs	r1, #112	; 0x70
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4803      	ldr	r0, [pc, #12]	; (8002840 <glassLCD_WriteCmd+0x24>)
 8002834:	2301      	movs	r3, #1
 8002836:	f7fe f9b3 	bl	8000ba0 <HAL_I2C_Master_Transmit>
}
 800283a:	b005      	add	sp, #20
 800283c:	bd00      	pop	{pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	20000280 	.word	0x20000280

08002844 <glassLCD_Begin>:
{
 8002844:	b510      	push	{r4, lr}
	glassLCD_WriteCmd(LCD_CONFIG);
 8002846:	204b      	movs	r0, #75	; 0x4b
 8002848:	f7ff ffe8 	bl	800281c <glassLCD_WriteCmd>
}
 800284c:	bd10      	pop	{r4, pc}
	...

08002850 <RTC_SetTime>:
extern RTC_HandleTypeDef hrtc;
static time_t _epoch;
static const time_t* _epochHandler = &_epoch;

void RTC_SetTime(uint8_t _h, uint8_t _m, uint8_t _s)
{
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002852:	0007      	movs	r7, r0
 8002854:	000e      	movs	r6, r1
 8002856:	0015      	movs	r5, r2
 8002858:	b087      	sub	sp, #28
	RTC_TimeTypeDef sTime = {0};
 800285a:	ac01      	add	r4, sp, #4
 800285c:	2214      	movs	r2, #20
 800285e:	2100      	movs	r1, #0
 8002860:	0020      	movs	r0, r4
 8002862:	f000 f9e5 	bl	8002c30 <memset>
	sTime.Hours = _h;
	sTime.Minutes = _m;
	sTime.Seconds = _s;
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002866:	2200      	movs	r2, #0
 8002868:	0021      	movs	r1, r4
 800286a:	4804      	ldr	r0, [pc, #16]	; (800287c <RTC_SetTime+0x2c>)
	sTime.Hours = _h;
 800286c:	7027      	strb	r7, [r4, #0]
	sTime.Minutes = _m;
 800286e:	7066      	strb	r6, [r4, #1]
	sTime.Seconds = _s;
 8002870:	70a5      	strb	r5, [r4, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002872:	f7ff f853 	bl	800191c <HAL_RTC_SetTime>
}
 8002876:	b007      	add	sp, #28
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	200002cc 	.word	0x200002cc

08002880 <RTC_GetData>:
	struct tm _t = RTC_GetData();
	return mktime(&_t);
}

struct tm RTC_GetData()
{
 8002880:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct tm _t = {0};
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8002882:	2500      	movs	r5, #0
{
 8002884:	0004      	movs	r4, r0
 8002886:	b08b      	sub	sp, #44	; 0x2c
  RTC_TimeTypeDef sTime = {0};
 8002888:	ae05      	add	r6, sp, #20
 800288a:	2214      	movs	r2, #20
 800288c:	2100      	movs	r1, #0
 800288e:	0030      	movs	r0, r6
 8002890:	f000 f9ce 	bl	8002c30 <memset>
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002894:	4f17      	ldr	r7, [pc, #92]	; (80028f4 <RTC_GetData+0x74>)
 8002896:	002a      	movs	r2, r5
 8002898:	0031      	movs	r1, r6
 800289a:	0038      	movs	r0, r7
  RTC_DateTypeDef sDate = {0};
 800289c:	9504      	str	r5, [sp, #16]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800289e:	f7ff f9f9 	bl	8001c94 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80028a2:	002a      	movs	r2, r5
 80028a4:	a904      	add	r1, sp, #16
 80028a6:	0038      	movs	r0, r7
 80028a8:	f7ff fa1e 	bl	8001ce8 <HAL_RTC_GetDate>
  _t.tm_sec = sTime.Seconds;;
  _t.tm_min = sTime.Minutes;
  _t.tm_hour = sTime.Hours;
 80028ac:	7833      	ldrb	r3, [r6, #0]
  _t.tm_min = sTime.Minutes;
 80028ae:	7877      	ldrb	r7, [r6, #1]
  _t.tm_hour = sTime.Hours;
 80028b0:	9301      	str	r3, [sp, #4]
  _t.tm_mday = sDate.Date;
 80028b2:	ab04      	add	r3, sp, #16
 80028b4:	789b      	ldrb	r3, [r3, #2]
  _t.tm_mon = (sDate.Month - 1);
  _t.tm_year = 100 + (sDate.Year % 100);
 80028b6:	2164      	movs	r1, #100	; 0x64
  _t.tm_mday = sDate.Date;
 80028b8:	9302      	str	r3, [sp, #8]
  _t.tm_mon = (sDate.Month - 1);
 80028ba:	ab04      	add	r3, sp, #16
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	3b01      	subs	r3, #1
 80028c0:	9303      	str	r3, [sp, #12]
  _t.tm_year = 100 + (sDate.Year % 100);
 80028c2:	ab04      	add	r3, sp, #16
 80028c4:	78d8      	ldrb	r0, [r3, #3]
 80028c6:	f7fd fcc1 	bl	800024c <__aeabi_uidivmod>
  _t.tm_sec = sTime.Seconds;;
 80028ca:	78b3      	ldrb	r3, [r6, #2]
  _t.tm_isdst = -1;
  _t.tm_yday = 0;
  _t.tm_wday = 0;
  return _t;
}
 80028cc:	0020      	movs	r0, r4
  _t.tm_sec = sTime.Seconds;;
 80028ce:	6023      	str	r3, [r4, #0]
  return _t;
 80028d0:	9b01      	ldr	r3, [sp, #4]
  _t.tm_year = 100 + (sDate.Year % 100);
 80028d2:	b2c9      	uxtb	r1, r1
  return _t;
 80028d4:	60a3      	str	r3, [r4, #8]
 80028d6:	9b02      	ldr	r3, [sp, #8]
  _t.tm_year = 100 + (sDate.Year % 100);
 80028d8:	3164      	adds	r1, #100	; 0x64
  return _t;
 80028da:	60e3      	str	r3, [r4, #12]
 80028dc:	9b03      	ldr	r3, [sp, #12]
 80028de:	6067      	str	r7, [r4, #4]
 80028e0:	6123      	str	r3, [r4, #16]
 80028e2:	2301      	movs	r3, #1
 80028e4:	425b      	negs	r3, r3
 80028e6:	6161      	str	r1, [r4, #20]
 80028e8:	61a5      	str	r5, [r4, #24]
 80028ea:	61e5      	str	r5, [r4, #28]
 80028ec:	6223      	str	r3, [r4, #32]
}
 80028ee:	b00b      	add	sp, #44	; 0x2c
 80028f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	200002cc 	.word	0x200002cc

080028f8 <RTC_GetEpoch>:
{
 80028f8:	b500      	push	{lr}
 80028fa:	b08b      	sub	sp, #44	; 0x2c
	struct tm _t = RTC_GetData();
 80028fc:	a801      	add	r0, sp, #4
 80028fe:	f7ff ffbf 	bl	8002880 <RTC_GetData>
	return mktime(&_t);
 8002902:	a801      	add	r0, sp, #4
 8002904:	f000 fa68 	bl	8002dd8 <mktime>
}
 8002908:	b00b      	add	sp, #44	; 0x2c
 800290a:	bd00      	pop	{pc}

0800290c <RTC_epochToTimeAndDate>:
    _sAlarm.Alarm = RTC_ALARM_A;
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
}

void RTC_epochToTimeAndDate(uint32_t _ep, uint8_t *_sec, uint8_t *_min, uint8_t *_hour, uint8_t *_day, uint8_t *_month, uint8_t *_year)
{
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	001c      	movs	r4, r3
  struct tm *_t;
  _epoch = _ep;
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <RTC_epochToTimeAndDate+0x38>)
{
 8002912:	0015      	movs	r5, r2
  _epoch = _ep;
 8002914:	6018      	str	r0, [r3, #0]
  _t = gmtime(_epochHandler);
 8002916:	0018      	movs	r0, r3
{
 8002918:	000e      	movs	r6, r1
  _t = gmtime(_epochHandler);
 800291a:	f000 f881 	bl	8002a20 <gmtime>
  *_sec = _t->tm_sec;
 800291e:	7803      	ldrb	r3, [r0, #0]
 8002920:	7033      	strb	r3, [r6, #0]
  *_min = _t->tm_min;
 8002922:	7903      	ldrb	r3, [r0, #4]
 8002924:	702b      	strb	r3, [r5, #0]
  *_hour = _t->tm_hour;
 8002926:	7a03      	ldrb	r3, [r0, #8]
 8002928:	7023      	strb	r3, [r4, #0]
  *_day = _t->tm_mday;
 800292a:	7b02      	ldrb	r2, [r0, #12]
 800292c:	9b04      	ldr	r3, [sp, #16]
 800292e:	701a      	strb	r2, [r3, #0]
  *_month = (_t->tm_mon) + 1;
 8002930:	6903      	ldr	r3, [r0, #16]
 8002932:	9a05      	ldr	r2, [sp, #20]
 8002934:	3301      	adds	r3, #1
 8002936:	7013      	strb	r3, [r2, #0]
  *_year = (_t->tm_year) + 1900;
 8002938:	6943      	ldr	r3, [r0, #20]
 800293a:	9a06      	ldr	r2, [sp, #24]
 800293c:	336c      	adds	r3, #108	; 0x6c
 800293e:	7013      	strb	r3, [r2, #0]
}
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	2000024c 	.word	0x2000024c

08002948 <RTC_SetAlarmEpoch>:
{
 8002948:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800294a:	2780      	movs	r7, #128	; 0x80
 800294c:	4e1b      	ldr	r6, [pc, #108]	; (80029bc <RTC_SetAlarmEpoch+0x74>)
{
 800294e:	b097      	sub	sp, #92	; 0x5c
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002950:	007f      	lsls	r7, r7, #1
	RTC_AlarmTypeDef _sAlarm = {0};
 8002952:	ad0c      	add	r5, sp, #48	; 0x30
{
 8002954:	9004      	str	r0, [sp, #16]
 8002956:	9105      	str	r1, [sp, #20]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002958:	0030      	movs	r0, r6
 800295a:	0039      	movs	r1, r7
 800295c:	f7fe feae 	bl	80016bc <HAL_RTC_DeactivateAlarm>
	RTC_TimeTypeDef _sTime = {0};
 8002960:	ac07      	add	r4, sp, #28
	RTC_AlarmTypeDef _sAlarm = {0};
 8002962:	2228      	movs	r2, #40	; 0x28
 8002964:	2100      	movs	r1, #0
 8002966:	0028      	movs	r0, r5
 8002968:	f000 f962 	bl	8002c30 <memset>
	RTC_TimeTypeDef _sTime = {0};
 800296c:	2214      	movs	r2, #20
 800296e:	2100      	movs	r1, #0
 8002970:	0020      	movs	r0, r4
 8002972:	f000 f95d 	bl	8002c30 <memset>
	RTC_epochToTimeAndDate(_alarmEpoch, &_sTime.Seconds, &_sTime.Minutes, &_sTime.Hours, &_sAlarm.AlarmDateWeekDay, &_dummy, &_dummy);
 8002976:	2313      	movs	r3, #19
 8002978:	aa02      	add	r2, sp, #8
 800297a:	189b      	adds	r3, r3, r2
 800297c:	2215      	movs	r2, #21
 800297e:	a902      	add	r1, sp, #8
 8002980:	1852      	adds	r2, r2, r1
 8002982:	2116      	movs	r1, #22
 8002984:	9302      	str	r3, [sp, #8]
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	a802      	add	r0, sp, #8
 800298a:	ab14      	add	r3, sp, #80	; 0x50
 800298c:	1809      	adds	r1, r1, r0
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	9804      	ldr	r0, [sp, #16]
 8002992:	0023      	movs	r3, r4
 8002994:	f7ff ffba 	bl	800290c <RTC_epochToTimeAndDate>
    _sAlarm.AlarmTime = _sTime;
 8002998:	002b      	movs	r3, r5
 800299a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800299c:	c307      	stmia	r3!, {r0, r1, r2}
 800299e:	cc06      	ldmia	r4!, {r1, r2}
 80029a0:	c306      	stmia	r3!, {r1, r2}
    _sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80029a2:	2200      	movs	r2, #0
    _sAlarm.AlarmMask = _mask;
 80029a4:	9b05      	ldr	r3, [sp, #20]
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
 80029a6:	0029      	movs	r1, r5
 80029a8:	0030      	movs	r0, r6
    _sAlarm.AlarmMask = _mask;
 80029aa:	616b      	str	r3, [r5, #20]
    _sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80029ac:	61aa      	str	r2, [r5, #24]
    _sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80029ae:	61ea      	str	r2, [r5, #28]
    _sAlarm.Alarm = RTC_ALARM_A;
 80029b0:	626f      	str	r7, [r5, #36]	; 0x24
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
 80029b2:	f7ff f89d 	bl	8001af0 <HAL_RTC_SetAlarm_IT>
}
 80029b6:	b017      	add	sp, #92	; 0x5c
 80029b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	200002cc 	.word	0x200002cc

080029c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80029c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029c6:	e003      	b.n	80029d0 <LoopCopyDataInit>

080029c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80029ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029ce:	3104      	adds	r1, #4

080029d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d0:	480b      	ldr	r0, [pc, #44]	; (8002a00 <LoopForever+0xa>)
  ldr  r3, =_edata
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopForever+0xe>)
  adds  r2, r0, r1
 80029d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029d8:	d3f6      	bcc.n	80029c8 <CopyDataInit>
  ldr  r2, =_sbss
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <LoopForever+0x12>)
  b  LoopFillZerobss
 80029dc:	e002      	b.n	80029e4 <LoopFillZerobss>

080029de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80029de:	2300      	movs	r3, #0
  str  r3, [r2]
 80029e0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e2:	3204      	adds	r2, #4

080029e4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <LoopForever+0x16>)
  cmp  r2, r3
 80029e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029e8:	d3f9      	bcc.n	80029de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80029ea:	f7ff fea9 	bl	8002740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ee:	f000 f8e7 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7ff fca5 	bl	8002340 <main>

080029f6 <LoopForever>:

LoopForever:
    b LoopForever
 80029f6:	e7fe      	b.n	80029f6 <LoopForever>
  ldr   r0, =_estack
 80029f8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80029fc:	08004cc4 	.word	0x08004cc4
  ldr  r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a04:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8002a08:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8002a0c:	200003cc 	.word	0x200003cc

08002a10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC1_COMP_IRQHandler>
	...

08002a14 <__errno>:
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <__errno+0x8>)
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	4770      	bx	lr
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	20000010 	.word	0x20000010

08002a20 <gmtime>:
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <gmtime+0x20>)
 8002a22:	b570      	push	{r4, r5, r6, lr}
 8002a24:	681c      	ldr	r4, [r3, #0]
 8002a26:	0005      	movs	r5, r0
 8002a28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <gmtime+0x16>
 8002a2e:	2024      	movs	r0, #36	; 0x24
 8002a30:	f000 f8ea 	bl	8002c08 <malloc>
 8002a34:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002a36:	0028      	movs	r0, r5
 8002a38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002a3a:	f000 f803 	bl	8002a44 <gmtime_r>
 8002a3e:	bd70      	pop	{r4, r5, r6, pc}
 8002a40:	20000010 	.word	0x20000010

08002a44 <gmtime_r>:
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a46:	6805      	ldr	r5, [r0, #0]
 8002a48:	b085      	sub	sp, #20
 8002a4a:	000c      	movs	r4, r1
 8002a4c:	0028      	movs	r0, r5
 8002a4e:	4952      	ldr	r1, [pc, #328]	; (8002b98 <gmtime_r+0x154>)
 8002a50:	f7fd fc00 	bl	8000254 <__divsi3>
 8002a54:	4950      	ldr	r1, [pc, #320]	; (8002b98 <gmtime_r+0x154>)
 8002a56:	0006      	movs	r6, r0
 8002a58:	0028      	movs	r0, r5
 8002a5a:	f7fd fce1 	bl	8000420 <__aeabi_idivmod>
 8002a5e:	1e0f      	subs	r7, r1, #0
 8002a60:	da00      	bge.n	8002a64 <gmtime_r+0x20>
 8002a62:	e080      	b.n	8002b66 <gmtime_r+0x122>
 8002a64:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <gmtime_r+0x158>)
 8002a66:	21e1      	movs	r1, #225	; 0xe1
 8002a68:	0038      	movs	r0, r7
 8002a6a:	0109      	lsls	r1, r1, #4
 8002a6c:	18f5      	adds	r5, r6, r3
 8002a6e:	f7fd fbf1 	bl	8000254 <__divsi3>
 8002a72:	21e1      	movs	r1, #225	; 0xe1
 8002a74:	60a0      	str	r0, [r4, #8]
 8002a76:	0109      	lsls	r1, r1, #4
 8002a78:	0038      	movs	r0, r7
 8002a7a:	f7fd fcd1 	bl	8000420 <__aeabi_idivmod>
 8002a7e:	000e      	movs	r6, r1
 8002a80:	213c      	movs	r1, #60	; 0x3c
 8002a82:	0030      	movs	r0, r6
 8002a84:	f7fd fbe6 	bl	8000254 <__divsi3>
 8002a88:	213c      	movs	r1, #60	; 0x3c
 8002a8a:	6060      	str	r0, [r4, #4]
 8002a8c:	0030      	movs	r0, r6
 8002a8e:	f7fd fcc7 	bl	8000420 <__aeabi_idivmod>
 8002a92:	1ce8      	adds	r0, r5, #3
 8002a94:	6021      	str	r1, [r4, #0]
 8002a96:	2107      	movs	r1, #7
 8002a98:	f7fd fcc2 	bl	8000420 <__aeabi_idivmod>
 8002a9c:	0028      	movs	r0, r5
 8002a9e:	61a1      	str	r1, [r4, #24]
 8002aa0:	493f      	ldr	r1, [pc, #252]	; (8002ba0 <gmtime_r+0x15c>)
 8002aa2:	f7fd fbd7 	bl	8000254 <__divsi3>
 8002aa6:	4e3f      	ldr	r6, [pc, #252]	; (8002ba4 <gmtime_r+0x160>)
 8002aa8:	493f      	ldr	r1, [pc, #252]	; (8002ba8 <gmtime_r+0x164>)
 8002aaa:	4346      	muls	r6, r0
 8002aac:	1976      	adds	r6, r6, r5
 8002aae:	0007      	movs	r7, r0
 8002ab0:	0030      	movs	r0, r6
 8002ab2:	f7fd fb45 	bl	8000140 <__udivsi3>
 8002ab6:	493d      	ldr	r1, [pc, #244]	; (8002bac <gmtime_r+0x168>)
 8002ab8:	1985      	adds	r5, r0, r6
 8002aba:	0030      	movs	r0, r6
 8002abc:	f7fd fb40 	bl	8000140 <__udivsi3>
 8002ac0:	493b      	ldr	r1, [pc, #236]	; (8002bb0 <gmtime_r+0x16c>)
 8002ac2:	1a2d      	subs	r5, r5, r0
 8002ac4:	0030      	movs	r0, r6
 8002ac6:	f7fd fb3b 	bl	8000140 <__udivsi3>
 8002aca:	216e      	movs	r1, #110	; 0x6e
 8002acc:	1a2d      	subs	r5, r5, r0
 8002ace:	31ff      	adds	r1, #255	; 0xff
 8002ad0:	0028      	movs	r0, r5
 8002ad2:	f7fd fb35 	bl	8000140 <__udivsi3>
 8002ad6:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <gmtime_r+0x170>)
 8002ad8:	9001      	str	r0, [sp, #4]
 8002ada:	0028      	movs	r0, r5
 8002adc:	f7fd fb30 	bl	8000140 <__udivsi3>
 8002ae0:	4932      	ldr	r1, [pc, #200]	; (8002bac <gmtime_r+0x168>)
 8002ae2:	1986      	adds	r6, r0, r6
 8002ae4:	0028      	movs	r0, r5
 8002ae6:	f7fd fb2b 	bl	8000140 <__udivsi3>
 8002aea:	216e      	movs	r1, #110	; 0x6e
 8002aec:	9b01      	ldr	r3, [sp, #4]
 8002aee:	31ff      	adds	r1, #255	; 0xff
 8002af0:	4359      	muls	r1, r3
 8002af2:	1a36      	subs	r6, r6, r0
 8002af4:	1a73      	subs	r3, r6, r1
 8002af6:	0018      	movs	r0, r3
 8002af8:	2605      	movs	r6, #5
 8002afa:	4370      	muls	r0, r6
 8002afc:	2199      	movs	r1, #153	; 0x99
 8002afe:	3002      	adds	r0, #2
 8002b00:	9302      	str	r3, [sp, #8]
 8002b02:	f7fd fb1d 	bl	8000140 <__udivsi3>
 8002b06:	0005      	movs	r5, r0
 8002b08:	2099      	movs	r0, #153	; 0x99
 8002b0a:	4368      	muls	r0, r5
 8002b0c:	9b02      	ldr	r3, [sp, #8]
 8002b0e:	3002      	adds	r0, #2
 8002b10:	3301      	adds	r3, #1
 8002b12:	0031      	movs	r1, r6
 8002b14:	9303      	str	r3, [sp, #12]
 8002b16:	f7fd fb13 	bl	8000140 <__udivsi3>
 8002b1a:	9b03      	ldr	r3, [sp, #12]
 8002b1c:	1a1b      	subs	r3, r3, r0
 8002b1e:	9303      	str	r3, [sp, #12]
 8002b20:	2302      	movs	r3, #2
 8002b22:	2d09      	cmp	r5, #9
 8002b24:	d900      	bls.n	8002b28 <gmtime_r+0xe4>
 8002b26:	3b0c      	subs	r3, #12
 8002b28:	195d      	adds	r5, r3, r5
 8002b2a:	23c8      	movs	r3, #200	; 0xc8
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	435f      	muls	r7, r3
 8002b30:	9b01      	ldr	r3, [sp, #4]
 8002b32:	2601      	movs	r6, #1
 8002b34:	18ff      	adds	r7, r7, r3
 8002b36:	2300      	movs	r3, #0
 8002b38:	42ae      	cmp	r6, r5
 8002b3a:	415b      	adcs	r3, r3
 8002b3c:	18ff      	adds	r7, r7, r3
 8002b3e:	2332      	movs	r3, #50	; 0x32
 8002b40:	9a02      	ldr	r2, [sp, #8]
 8002b42:	33ff      	adds	r3, #255	; 0xff
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d912      	bls.n	8002b6e <gmtime_r+0x12a>
 8002b48:	0016      	movs	r6, r2
 8002b4a:	3e33      	subs	r6, #51	; 0x33
 8002b4c:	3eff      	subs	r6, #255	; 0xff
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <gmtime_r+0x174>)
 8002b50:	0020      	movs	r0, r4
 8002b52:	18ff      	adds	r7, r7, r3
 8002b54:	9b03      	ldr	r3, [sp, #12]
 8002b56:	61e6      	str	r6, [r4, #28]
 8002b58:	60e3      	str	r3, [r4, #12]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	6167      	str	r7, [r4, #20]
 8002b5e:	6125      	str	r5, [r4, #16]
 8002b60:	6223      	str	r3, [r4, #32]
 8002b62:	b005      	add	sp, #20
 8002b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <gmtime_r+0x154>)
 8002b68:	18cf      	adds	r7, r1, r3
 8002b6a:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <gmtime_r+0x178>)
 8002b6c:	e77b      	b.n	8002a66 <gmtime_r+0x22>
 8002b6e:	9b01      	ldr	r3, [sp, #4]
 8002b70:	079b      	lsls	r3, r3, #30
 8002b72:	d105      	bne.n	8002b80 <gmtime_r+0x13c>
 8002b74:	2164      	movs	r1, #100	; 0x64
 8002b76:	9801      	ldr	r0, [sp, #4]
 8002b78:	f7fd fb68 	bl	800024c <__aeabi_uidivmod>
 8002b7c:	2900      	cmp	r1, #0
 8002b7e:	d106      	bne.n	8002b8e <gmtime_r+0x14a>
 8002b80:	21c8      	movs	r1, #200	; 0xc8
 8002b82:	9801      	ldr	r0, [sp, #4]
 8002b84:	0049      	lsls	r1, r1, #1
 8002b86:	f7fd fb61 	bl	800024c <__aeabi_uidivmod>
 8002b8a:	424e      	negs	r6, r1
 8002b8c:	414e      	adcs	r6, r1
 8002b8e:	9802      	ldr	r0, [sp, #8]
 8002b90:	303b      	adds	r0, #59	; 0x3b
 8002b92:	1986      	adds	r6, r0, r6
 8002b94:	e7db      	b.n	8002b4e <gmtime_r+0x10a>
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	00015180 	.word	0x00015180
 8002b9c:	000afa6c 	.word	0x000afa6c
 8002ba0:	00023ab1 	.word	0x00023ab1
 8002ba4:	fffdc54f 	.word	0xfffdc54f
 8002ba8:	00008eac 	.word	0x00008eac
 8002bac:	000005b4 	.word	0x000005b4
 8002bb0:	00023ab0 	.word	0x00023ab0
 8002bb4:	00008e94 	.word	0x00008e94
 8002bb8:	fffff894 	.word	0xfffff894
 8002bbc:	000afa6b 	.word	0x000afa6b

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	4d0c      	ldr	r5, [pc, #48]	; (8002bf8 <__libc_init_array+0x38>)
 8002bc6:	4c0d      	ldr	r4, [pc, #52]	; (8002bfc <__libc_init_array+0x3c>)
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	2600      	movs	r6, #0
 8002bd2:	f001 feaf 	bl	8004934 <_init>
 8002bd6:	4d0a      	ldr	r5, [pc, #40]	; (8002c00 <__libc_init_array+0x40>)
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	; (8002c04 <__libc_init_array+0x44>)
 8002bda:	1b64      	subs	r4, r4, r5
 8002bdc:	10a4      	asrs	r4, r4, #2
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	00b3      	lsls	r3, r6, #2
 8002be6:	58eb      	ldr	r3, [r5, r3]
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	00b3      	lsls	r3, r6, #2
 8002bf0:	58eb      	ldr	r3, [r5, r3]
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08004cbc 	.word	0x08004cbc
 8002bfc:	08004cbc 	.word	0x08004cbc
 8002c00:	08004cbc 	.word	0x08004cbc
 8002c04:	08004cc0 	.word	0x08004cc0

08002c08 <malloc>:
 8002c08:	b510      	push	{r4, lr}
 8002c0a:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <malloc+0x10>)
 8002c0c:	0001      	movs	r1, r0
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	f000 fab6 	bl	8003180 <_malloc_r>
 8002c14:	bd10      	pop	{r4, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	20000010 	.word	0x20000010

08002c1c <free>:
 8002c1c:	b510      	push	{r4, lr}
 8002c1e:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <free+0x10>)
 8002c20:	0001      	movs	r1, r0
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	f000 fa62 	bl	80030ec <_free_r>
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	20000010 	.word	0x20000010

08002c30 <memset>:
 8002c30:	0003      	movs	r3, r0
 8002c32:	1882      	adds	r2, r0, r2
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d100      	bne.n	8002c3a <memset+0xa>
 8002c38:	4770      	bx	lr
 8002c3a:	7019      	strb	r1, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	e7f9      	b.n	8002c34 <memset+0x4>

08002c40 <validate_structure>:
 8002c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c42:	6801      	ldr	r1, [r0, #0]
 8002c44:	0004      	movs	r4, r0
 8002c46:	293b      	cmp	r1, #59	; 0x3b
 8002c48:	d90b      	bls.n	8002c62 <validate_structure+0x22>
 8002c4a:	223c      	movs	r2, #60	; 0x3c
 8002c4c:	4668      	mov	r0, sp
 8002c4e:	f000 fd5f 	bl	8003710 <div>
 8002c52:	6863      	ldr	r3, [r4, #4]
 8002c54:	9900      	ldr	r1, [sp, #0]
 8002c56:	9a01      	ldr	r2, [sp, #4]
 8002c58:	185b      	adds	r3, r3, r1
 8002c5a:	6063      	str	r3, [r4, #4]
 8002c5c:	2a00      	cmp	r2, #0
 8002c5e:	db6c      	blt.n	8002d3a <validate_structure+0xfa>
 8002c60:	6022      	str	r2, [r4, #0]
 8002c62:	6861      	ldr	r1, [r4, #4]
 8002c64:	293b      	cmp	r1, #59	; 0x3b
 8002c66:	d90b      	bls.n	8002c80 <validate_structure+0x40>
 8002c68:	223c      	movs	r2, #60	; 0x3c
 8002c6a:	4668      	mov	r0, sp
 8002c6c:	f000 fd50 	bl	8003710 <div>
 8002c70:	68a3      	ldr	r3, [r4, #8]
 8002c72:	9900      	ldr	r1, [sp, #0]
 8002c74:	9a01      	ldr	r2, [sp, #4]
 8002c76:	185b      	adds	r3, r3, r1
 8002c78:	60a3      	str	r3, [r4, #8]
 8002c7a:	2a00      	cmp	r2, #0
 8002c7c:	db62      	blt.n	8002d44 <validate_structure+0x104>
 8002c7e:	6062      	str	r2, [r4, #4]
 8002c80:	68a1      	ldr	r1, [r4, #8]
 8002c82:	2917      	cmp	r1, #23
 8002c84:	d90b      	bls.n	8002c9e <validate_structure+0x5e>
 8002c86:	2218      	movs	r2, #24
 8002c88:	4668      	mov	r0, sp
 8002c8a:	f000 fd41 	bl	8003710 <div>
 8002c8e:	68e3      	ldr	r3, [r4, #12]
 8002c90:	9900      	ldr	r1, [sp, #0]
 8002c92:	9a01      	ldr	r2, [sp, #4]
 8002c94:	185b      	adds	r3, r3, r1
 8002c96:	60e3      	str	r3, [r4, #12]
 8002c98:	2a00      	cmp	r2, #0
 8002c9a:	db58      	blt.n	8002d4e <validate_structure+0x10e>
 8002c9c:	60a2      	str	r2, [r4, #8]
 8002c9e:	6921      	ldr	r1, [r4, #16]
 8002ca0:	290b      	cmp	r1, #11
 8002ca2:	d90b      	bls.n	8002cbc <validate_structure+0x7c>
 8002ca4:	220c      	movs	r2, #12
 8002ca6:	4668      	mov	r0, sp
 8002ca8:	f000 fd32 	bl	8003710 <div>
 8002cac:	6963      	ldr	r3, [r4, #20]
 8002cae:	9900      	ldr	r1, [sp, #0]
 8002cb0:	9a01      	ldr	r2, [sp, #4]
 8002cb2:	185b      	adds	r3, r3, r1
 8002cb4:	6163      	str	r3, [r4, #20]
 8002cb6:	2a00      	cmp	r2, #0
 8002cb8:	db4e      	blt.n	8002d58 <validate_structure+0x118>
 8002cba:	6122      	str	r2, [r4, #16]
 8002cbc:	6965      	ldr	r5, [r4, #20]
 8002cbe:	231c      	movs	r3, #28
 8002cc0:	07aa      	lsls	r2, r5, #30
 8002cc2:	d10f      	bne.n	8002ce4 <validate_structure+0xa4>
 8002cc4:	2164      	movs	r1, #100	; 0x64
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	f7fd fbaa 	bl	8000420 <__aeabi_idivmod>
 8002ccc:	231d      	movs	r3, #29
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d108      	bne.n	8002ce4 <validate_structure+0xa4>
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <validate_structure+0x188>)
 8002cd4:	3191      	adds	r1, #145	; 0x91
 8002cd6:	18e8      	adds	r0, r5, r3
 8002cd8:	31ff      	adds	r1, #255	; 0xff
 8002cda:	f7fd fba1 	bl	8000420 <__aeabi_idivmod>
 8002cde:	424b      	negs	r3, r1
 8002ce0:	414b      	adcs	r3, r1
 8002ce2:	331c      	adds	r3, #28
 8002ce4:	68e2      	ldr	r2, [r4, #12]
 8002ce6:	2a00      	cmp	r2, #0
 8002ce8:	dd3b      	ble.n	8002d62 <validate_structure+0x122>
 8002cea:	2602      	movs	r6, #2
 8002cec:	4f37      	ldr	r7, [pc, #220]	; (8002dcc <validate_structure+0x18c>)
 8002cee:	6921      	ldr	r1, [r4, #16]
 8002cf0:	68e2      	ldr	r2, [r4, #12]
 8002cf2:	2901      	cmp	r1, #1
 8002cf4:	d061      	beq.n	8002dba <validate_structure+0x17a>
 8002cf6:	0088      	lsls	r0, r1, #2
 8002cf8:	59c0      	ldr	r0, [r0, r7]
 8002cfa:	4282      	cmp	r2, r0
 8002cfc:	dd35      	ble.n	8002d6a <validate_structure+0x12a>
 8002cfe:	1a12      	subs	r2, r2, r0
 8002d00:	3101      	adds	r1, #1
 8002d02:	60e2      	str	r2, [r4, #12]
 8002d04:	6121      	str	r1, [r4, #16]
 8002d06:	290c      	cmp	r1, #12
 8002d08:	d1f1      	bne.n	8002cee <validate_structure+0xae>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6965      	ldr	r5, [r4, #20]
 8002d0e:	6123      	str	r3, [r4, #16]
 8002d10:	1c68      	adds	r0, r5, #1
 8002d12:	6160      	str	r0, [r4, #20]
 8002d14:	331c      	adds	r3, #28
 8002d16:	0782      	lsls	r2, r0, #30
 8002d18:	d1e9      	bne.n	8002cee <validate_structure+0xae>
 8002d1a:	3158      	adds	r1, #88	; 0x58
 8002d1c:	f7fd fb80 	bl	8000420 <__aeabi_idivmod>
 8002d20:	231d      	movs	r3, #29
 8002d22:	2900      	cmp	r1, #0
 8002d24:	d1e3      	bne.n	8002cee <validate_structure+0xae>
 8002d26:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <validate_structure+0x190>)
 8002d28:	3191      	adds	r1, #145	; 0x91
 8002d2a:	18e8      	adds	r0, r5, r3
 8002d2c:	31ff      	adds	r1, #255	; 0xff
 8002d2e:	f7fd fb77 	bl	8000420 <__aeabi_idivmod>
 8002d32:	424b      	negs	r3, r1
 8002d34:	414b      	adcs	r3, r1
 8002d36:	331c      	adds	r3, #28
 8002d38:	e7d9      	b.n	8002cee <validate_structure+0xae>
 8002d3a:	323c      	adds	r2, #60	; 0x3c
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	6022      	str	r2, [r4, #0]
 8002d40:	6063      	str	r3, [r4, #4]
 8002d42:	e78e      	b.n	8002c62 <validate_structure+0x22>
 8002d44:	323c      	adds	r2, #60	; 0x3c
 8002d46:	3b01      	subs	r3, #1
 8002d48:	6062      	str	r2, [r4, #4]
 8002d4a:	60a3      	str	r3, [r4, #8]
 8002d4c:	e798      	b.n	8002c80 <validate_structure+0x40>
 8002d4e:	3218      	adds	r2, #24
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60a2      	str	r2, [r4, #8]
 8002d54:	60e3      	str	r3, [r4, #12]
 8002d56:	e7a2      	b.n	8002c9e <validate_structure+0x5e>
 8002d58:	320c      	adds	r2, #12
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	6122      	str	r2, [r4, #16]
 8002d5e:	6163      	str	r3, [r4, #20]
 8002d60:	e7ac      	b.n	8002cbc <validate_structure+0x7c>
 8002d62:	271d      	movs	r7, #29
 8002d64:	68e6      	ldr	r6, [r4, #12]
 8002d66:	2e00      	cmp	r6, #0
 8002d68:	dd00      	ble.n	8002d6c <validate_structure+0x12c>
 8002d6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002d6c:	6922      	ldr	r2, [r4, #16]
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	6122      	str	r2, [r4, #16]
 8002d72:	3201      	adds	r2, #1
 8002d74:	d117      	bne.n	8002da6 <validate_structure+0x166>
 8002d76:	230b      	movs	r3, #11
 8002d78:	2203      	movs	r2, #3
 8002d7a:	6965      	ldr	r5, [r4, #20]
 8002d7c:	6123      	str	r3, [r4, #16]
 8002d7e:	1e68      	subs	r0, r5, #1
 8002d80:	6160      	str	r0, [r4, #20]
 8002d82:	3311      	adds	r3, #17
 8002d84:	4210      	tst	r0, r2
 8002d86:	d10e      	bne.n	8002da6 <validate_structure+0x166>
 8002d88:	2164      	movs	r1, #100	; 0x64
 8002d8a:	f7fd fb49 	bl	8000420 <__aeabi_idivmod>
 8002d8e:	003b      	movs	r3, r7
 8002d90:	2900      	cmp	r1, #0
 8002d92:	d108      	bne.n	8002da6 <validate_structure+0x166>
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <validate_structure+0x194>)
 8002d96:	3191      	adds	r1, #145	; 0x91
 8002d98:	18e8      	adds	r0, r5, r3
 8002d9a:	31ff      	adds	r1, #255	; 0xff
 8002d9c:	f7fd fb40 	bl	8000420 <__aeabi_idivmod>
 8002da0:	424b      	negs	r3, r1
 8002da2:	414b      	adcs	r3, r1
 8002da4:	331c      	adds	r3, #28
 8002da6:	6921      	ldr	r1, [r4, #16]
 8002da8:	001a      	movs	r2, r3
 8002daa:	2901      	cmp	r1, #1
 8002dac:	d002      	beq.n	8002db4 <validate_structure+0x174>
 8002dae:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <validate_structure+0x18c>)
 8002db0:	0089      	lsls	r1, r1, #2
 8002db2:	588a      	ldr	r2, [r1, r2]
 8002db4:	1996      	adds	r6, r2, r6
 8002db6:	60e6      	str	r6, [r4, #12]
 8002db8:	e7d4      	b.n	8002d64 <validate_structure+0x124>
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	dad5      	bge.n	8002d6a <validate_structure+0x12a>
 8002dbe:	1ad2      	subs	r2, r2, r3
 8002dc0:	60e2      	str	r2, [r4, #12]
 8002dc2:	6126      	str	r6, [r4, #16]
 8002dc4:	e793      	b.n	8002cee <validate_structure+0xae>
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	0000076c 	.word	0x0000076c
 8002dcc:	080049fc 	.word	0x080049fc
 8002dd0:	0000076d 	.word	0x0000076d
 8002dd4:	0000076b 	.word	0x0000076b

08002dd8 <mktime>:
 8002dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	0004      	movs	r4, r0
 8002dde:	f000 fcf5 	bl	80037cc <__gettzinfo>
 8002de2:	9004      	str	r0, [sp, #16]
 8002de4:	0020      	movs	r0, r4
 8002de6:	f7ff ff2b 	bl	8002c40 <validate_structure>
 8002dea:	233c      	movs	r3, #60	; 0x3c
 8002dec:	6862      	ldr	r2, [r4, #4]
 8002dee:	68a1      	ldr	r1, [r4, #8]
 8002df0:	4353      	muls	r3, r2
 8002df2:	6822      	ldr	r2, [r4, #0]
 8002df4:	6965      	ldr	r5, [r4, #20]
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	22e1      	movs	r2, #225	; 0xe1
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	434a      	muls	r2, r1
 8002dfe:	189b      	adds	r3, r3, r2
 8002e00:	68e2      	ldr	r2, [r4, #12]
 8002e02:	9303      	str	r3, [sp, #12]
 8002e04:	6923      	ldr	r3, [r4, #16]
 8002e06:	1e50      	subs	r0, r2, #1
 8002e08:	4ab1      	ldr	r2, [pc, #708]	; (80030d0 <mktime+0x2f8>)
 8002e0a:	0099      	lsls	r1, r3, #2
 8002e0c:	588a      	ldr	r2, [r1, r2]
 8002e0e:	1882      	adds	r2, r0, r2
 8002e10:	9201      	str	r2, [sp, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	dd12      	ble.n	8002e3c <mktime+0x64>
 8002e16:	07ab      	lsls	r3, r5, #30
 8002e18:	d110      	bne.n	8002e3c <mktime+0x64>
 8002e1a:	2164      	movs	r1, #100	; 0x64
 8002e1c:	0028      	movs	r0, r5
 8002e1e:	f7fd faff 	bl	8000420 <__aeabi_idivmod>
 8002e22:	2900      	cmp	r1, #0
 8002e24:	d107      	bne.n	8002e36 <mktime+0x5e>
 8002e26:	4bab      	ldr	r3, [pc, #684]	; (80030d4 <mktime+0x2fc>)
 8002e28:	3191      	adds	r1, #145	; 0x91
 8002e2a:	31ff      	adds	r1, #255	; 0xff
 8002e2c:	18e8      	adds	r0, r5, r3
 8002e2e:	f7fd faf7 	bl	8000420 <__aeabi_idivmod>
 8002e32:	2900      	cmp	r1, #0
 8002e34:	d102      	bne.n	8002e3c <mktime+0x64>
 8002e36:	9b01      	ldr	r3, [sp, #4]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	9b01      	ldr	r3, [sp, #4]
 8002e3e:	4aa6      	ldr	r2, [pc, #664]	; (80030d8 <mktime+0x300>)
 8002e40:	61e3      	str	r3, [r4, #28]
 8002e42:	4ba6      	ldr	r3, [pc, #664]	; (80030dc <mktime+0x304>)
 8002e44:	18eb      	adds	r3, r5, r3
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d900      	bls.n	8002e4c <mktime+0x74>
 8002e4a:	e0f8      	b.n	800303e <mktime+0x266>
 8002e4c:	2346      	movs	r3, #70	; 0x46
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	2d46      	cmp	r5, #70	; 0x46
 8002e52:	dc00      	bgt.n	8002e56 <mktime+0x7e>
 8002e54:	e072      	b.n	8002f3c <mktime+0x164>
 8002e56:	27b7      	movs	r7, #183	; 0xb7
 8002e58:	26c8      	movs	r6, #200	; 0xc8
 8002e5a:	007f      	lsls	r7, r7, #1
 8002e5c:	0076      	lsls	r6, r6, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	9b02      	ldr	r3, [sp, #8]
 8002e62:	4213      	tst	r3, r2
 8002e64:	d168      	bne.n	8002f38 <mktime+0x160>
 8002e66:	0018      	movs	r0, r3
 8002e68:	2164      	movs	r1, #100	; 0x64
 8002e6a:	f7fd fad9 	bl	8000420 <__aeabi_idivmod>
 8002e6e:	003b      	movs	r3, r7
 8002e70:	2900      	cmp	r1, #0
 8002e72:	d109      	bne.n	8002e88 <mktime+0xb0>
 8002e74:	9b02      	ldr	r3, [sp, #8]
 8002e76:	4a97      	ldr	r2, [pc, #604]	; (80030d4 <mktime+0x2fc>)
 8002e78:	0031      	movs	r1, r6
 8002e7a:	1898      	adds	r0, r3, r2
 8002e7c:	f7fd fad0 	bl	8000420 <__aeabi_idivmod>
 8002e80:	424b      	negs	r3, r1
 8002e82:	414b      	adcs	r3, r1
 8002e84:	336e      	adds	r3, #110	; 0x6e
 8002e86:	33ff      	adds	r3, #255	; 0xff
 8002e88:	9a01      	ldr	r2, [sp, #4]
 8002e8a:	18d3      	adds	r3, r2, r3
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	9b02      	ldr	r3, [sp, #8]
 8002e90:	3301      	adds	r3, #1
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	429d      	cmp	r5, r3
 8002e96:	d1e2      	bne.n	8002e5e <mktime+0x86>
 8002e98:	9a01      	ldr	r2, [sp, #4]
 8002e9a:	4b91      	ldr	r3, [pc, #580]	; (80030e0 <mktime+0x308>)
 8002e9c:	4353      	muls	r3, r2
 8002e9e:	9a03      	ldr	r2, [sp, #12]
 8002ea0:	189b      	adds	r3, r3, r2
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	f000 faac 	bl	8003400 <__tz_lock>
 8002ea8:	f000 faac 	bl	8003404 <_tzset_unlocked>
 8002eac:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <mktime+0x30c>)
 8002eae:	681d      	ldr	r5, [r3, #0]
 8002eb0:	2d00      	cmp	r5, #0
 8002eb2:	d100      	bne.n	8002eb6 <mktime+0xde>
 8002eb4:	e107      	b.n	80030c6 <mktime+0x2ee>
 8002eb6:	6963      	ldr	r3, [r4, #20]
 8002eb8:	4a86      	ldr	r2, [pc, #536]	; (80030d4 <mktime+0x2fc>)
 8002eba:	6a26      	ldr	r6, [r4, #32]
 8002ebc:	1898      	adds	r0, r3, r2
 8002ebe:	2e00      	cmp	r6, #0
 8002ec0:	dd00      	ble.n	8002ec4 <mktime+0xec>
 8002ec2:	2601      	movs	r6, #1
 8002ec4:	9b04      	ldr	r3, [sp, #16]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	9305      	str	r3, [sp, #20]
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	d000      	beq.n	8002ed0 <mktime+0xf8>
 8002ece:	e073      	b.n	8002fb8 <mktime+0x1e0>
 8002ed0:	9b04      	ldr	r3, [sp, #16]
 8002ed2:	9d03      	ldr	r5, [sp, #12]
 8002ed4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	9305      	str	r3, [sp, #20]
 8002eda:	1a1a      	subs	r2, r3, r0
 8002edc:	9b04      	ldr	r3, [sp, #16]
 8002ede:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	1acf      	subs	r7, r1, r3
 8002ee4:	42bd      	cmp	r5, r7
 8002ee6:	db00      	blt.n	8002eea <mktime+0x112>
 8002ee8:	e06d      	b.n	8002fc6 <mktime+0x1ee>
 8002eea:	9904      	ldr	r1, [sp, #16]
 8002eec:	6809      	ldr	r1, [r1, #0]
 8002eee:	2900      	cmp	r1, #0
 8002ef0:	d100      	bne.n	8002ef4 <mktime+0x11c>
 8002ef2:	e06d      	b.n	8002fd0 <mktime+0x1f8>
 8002ef4:	9903      	ldr	r1, [sp, #12]
 8002ef6:	4291      	cmp	r1, r2
 8002ef8:	da00      	bge.n	8002efc <mktime+0x124>
 8002efa:	e0e1      	b.n	80030c0 <mktime+0x2e8>
 8002efc:	2501      	movs	r5, #1
 8002efe:	42b9      	cmp	r1, r7
 8002f00:	db00      	blt.n	8002f04 <mktime+0x12c>
 8002f02:	2500      	movs	r5, #0
 8002f04:	2e00      	cmp	r6, #0
 8002f06:	db00      	blt.n	8002f0a <mktime+0x132>
 8002f08:	e0a0      	b.n	800304c <mktime+0x274>
 8002f0a:	2d01      	cmp	r5, #1
 8002f0c:	d000      	beq.n	8002f10 <mktime+0x138>
 8002f0e:	e0da      	b.n	80030c6 <mktime+0x2ee>
 8002f10:	2501      	movs	r5, #1
 8002f12:	9b04      	ldr	r3, [sp, #16]
 8002f14:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	199e      	adds	r6, r3, r6
 8002f1a:	f000 fa72 	bl	8003402 <__tz_unlock>
 8002f1e:	9801      	ldr	r0, [sp, #4]
 8002f20:	6225      	str	r5, [r4, #32]
 8002f22:	3004      	adds	r0, #4
 8002f24:	2107      	movs	r1, #7
 8002f26:	f7fd fa7b 	bl	8000420 <__aeabi_idivmod>
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	da00      	bge.n	8002f30 <mktime+0x158>
 8002f2e:	e084      	b.n	800303a <mktime+0x262>
 8002f30:	61a1      	str	r1, [r4, #24]
 8002f32:	0030      	movs	r0, r6
 8002f34:	b007      	add	sp, #28
 8002f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f38:	236e      	movs	r3, #110	; 0x6e
 8002f3a:	e7a4      	b.n	8002e86 <mktime+0xae>
 8002f3c:	429d      	cmp	r5, r3
 8002f3e:	d0ab      	beq.n	8002e98 <mktime+0xc0>
 8002f40:	2645      	movs	r6, #69	; 0x45
 8002f42:	2703      	movs	r7, #3
 8002f44:	42ae      	cmp	r6, r5
 8002f46:	dc17      	bgt.n	8002f78 <mktime+0x1a0>
 8002f48:	423d      	tst	r5, r7
 8002f4a:	d130      	bne.n	8002fae <mktime+0x1d6>
 8002f4c:	2164      	movs	r1, #100	; 0x64
 8002f4e:	0028      	movs	r0, r5
 8002f50:	f7fd fa66 	bl	8000420 <__aeabi_idivmod>
 8002f54:	2900      	cmp	r1, #0
 8002f56:	d12c      	bne.n	8002fb2 <mktime+0x1da>
 8002f58:	4b5e      	ldr	r3, [pc, #376]	; (80030d4 <mktime+0x2fc>)
 8002f5a:	3191      	adds	r1, #145	; 0x91
 8002f5c:	18e8      	adds	r0, r5, r3
 8002f5e:	31ff      	adds	r1, #255	; 0xff
 8002f60:	f7fd fa5e 	bl	8000420 <__aeabi_idivmod>
 8002f64:	000b      	movs	r3, r1
 8002f66:	4259      	negs	r1, r3
 8002f68:	4159      	adcs	r1, r3
 8002f6a:	316e      	adds	r1, #110	; 0x6e
 8002f6c:	31ff      	adds	r1, #255	; 0xff
 8002f6e:	9b01      	ldr	r3, [sp, #4]
 8002f70:	9502      	str	r5, [sp, #8]
 8002f72:	1a5b      	subs	r3, r3, r1
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	e78f      	b.n	8002e98 <mktime+0xc0>
 8002f78:	423e      	tst	r6, r7
 8002f7a:	d116      	bne.n	8002faa <mktime+0x1d2>
 8002f7c:	2164      	movs	r1, #100	; 0x64
 8002f7e:	0030      	movs	r0, r6
 8002f80:	f7fd fa4e 	bl	8000420 <__aeabi_idivmod>
 8002f84:	23b7      	movs	r3, #183	; 0xb7
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	d109      	bne.n	8002fa0 <mktime+0x1c8>
 8002f8c:	4b51      	ldr	r3, [pc, #324]	; (80030d4 <mktime+0x2fc>)
 8002f8e:	3191      	adds	r1, #145	; 0x91
 8002f90:	18f0      	adds	r0, r6, r3
 8002f92:	31ff      	adds	r1, #255	; 0xff
 8002f94:	f7fd fa44 	bl	8000420 <__aeabi_idivmod>
 8002f98:	424b      	negs	r3, r1
 8002f9a:	414b      	adcs	r3, r1
 8002f9c:	336e      	adds	r3, #110	; 0x6e
 8002f9e:	33ff      	adds	r3, #255	; 0xff
 8002fa0:	9a01      	ldr	r2, [sp, #4]
 8002fa2:	3e01      	subs	r6, #1
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	e7cc      	b.n	8002f44 <mktime+0x16c>
 8002faa:	236e      	movs	r3, #110	; 0x6e
 8002fac:	e7f7      	b.n	8002f9e <mktime+0x1c6>
 8002fae:	216e      	movs	r1, #110	; 0x6e
 8002fb0:	e7dc      	b.n	8002f6c <mktime+0x194>
 8002fb2:	21b7      	movs	r1, #183	; 0xb7
 8002fb4:	0049      	lsls	r1, r1, #1
 8002fb6:	e7da      	b.n	8002f6e <mktime+0x196>
 8002fb8:	f000 f974 	bl	80032a4 <__tzcalc_limits>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d000      	beq.n	8002fc2 <mktime+0x1ea>
 8002fc0:	e786      	b.n	8002ed0 <mktime+0xf8>
 8002fc2:	0035      	movs	r5, r6
 8002fc4:	e7a1      	b.n	8002f0a <mktime+0x132>
 8002fc6:	9d03      	ldr	r5, [sp, #12]
 8002fc8:	1a09      	subs	r1, r1, r0
 8002fca:	428d      	cmp	r5, r1
 8002fcc:	dbf9      	blt.n	8002fc2 <mktime+0x1ea>
 8002fce:	e78c      	b.n	8002eea <mktime+0x112>
 8002fd0:	9d03      	ldr	r5, [sp, #12]
 8002fd2:	4295      	cmp	r5, r2
 8002fd4:	da36      	bge.n	8003044 <mktime+0x26c>
 8002fd6:	9a03      	ldr	r2, [sp, #12]
 8002fd8:	2501      	movs	r5, #1
 8002fda:	42ba      	cmp	r2, r7
 8002fdc:	da00      	bge.n	8002fe0 <mktime+0x208>
 8002fde:	e791      	b.n	8002f04 <mktime+0x12c>
 8002fe0:	000d      	movs	r5, r1
 8002fe2:	e78f      	b.n	8002f04 <mktime+0x12c>
 8002fe4:	2701      	movs	r7, #1
 8002fe6:	427f      	negs	r7, r7
 8002fe8:	e04b      	b.n	8003082 <mktime+0x2aa>
 8002fea:	21b6      	movs	r1, #182	; 0xb6
 8002fec:	0049      	lsls	r1, r1, #1
 8002fee:	61e1      	str	r1, [r4, #28]
 8002ff0:	e78b      	b.n	8002f0a <mktime+0x132>
 8002ff2:	216e      	movs	r1, #110	; 0x6e
 8002ff4:	e062      	b.n	80030bc <mktime+0x2e4>
 8002ff6:	9a02      	ldr	r2, [sp, #8]
 8002ff8:	421a      	tst	r2, r3
 8002ffa:	d117      	bne.n	800302c <mktime+0x254>
 8002ffc:	2164      	movs	r1, #100	; 0x64
 8002ffe:	0010      	movs	r0, r2
 8003000:	f7fd fa0e 	bl	8000420 <__aeabi_idivmod>
 8003004:	2900      	cmp	r1, #0
 8003006:	d113      	bne.n	8003030 <mktime+0x258>
 8003008:	4a32      	ldr	r2, [pc, #200]	; (80030d4 <mktime+0x2fc>)
 800300a:	9b02      	ldr	r3, [sp, #8]
 800300c:	4694      	mov	ip, r2
 800300e:	3191      	adds	r1, #145	; 0x91
 8003010:	4463      	add	r3, ip
 8003012:	0018      	movs	r0, r3
 8003014:	31ff      	adds	r1, #255	; 0xff
 8003016:	f7fd fa03 	bl	8000420 <__aeabi_idivmod>
 800301a:	000b      	movs	r3, r1
 800301c:	4259      	negs	r1, r3
 800301e:	4159      	adcs	r1, r3
 8003020:	316e      	adds	r1, #110	; 0x6e
 8003022:	31ff      	adds	r1, #255	; 0xff
 8003024:	42b9      	cmp	r1, r7
 8003026:	dd06      	ble.n	8003036 <mktime+0x25e>
 8003028:	61e7      	str	r7, [r4, #28]
 800302a:	e76e      	b.n	8002f0a <mktime+0x132>
 800302c:	216e      	movs	r1, #110	; 0x6e
 800302e:	e7f8      	b.n	8003022 <mktime+0x24a>
 8003030:	21b7      	movs	r1, #183	; 0xb7
 8003032:	0049      	lsls	r1, r1, #1
 8003034:	e7f6      	b.n	8003024 <mktime+0x24c>
 8003036:	1a7f      	subs	r7, r7, r1
 8003038:	e7f6      	b.n	8003028 <mktime+0x250>
 800303a:	3107      	adds	r1, #7
 800303c:	e778      	b.n	8002f30 <mktime+0x158>
 800303e:	2601      	movs	r6, #1
 8003040:	4276      	negs	r6, r6
 8003042:	e776      	b.n	8002f32 <mktime+0x15a>
 8003044:	2501      	movs	r5, #1
 8003046:	2e00      	cmp	r6, #0
 8003048:	da00      	bge.n	800304c <mktime+0x274>
 800304a:	e761      	b.n	8002f10 <mktime+0x138>
 800304c:	406e      	eors	r6, r5
 800304e:	2e01      	cmp	r6, #1
 8003050:	d000      	beq.n	8003054 <mktime+0x27c>
 8003052:	e75a      	b.n	8002f0a <mktime+0x132>
 8003054:	1a1b      	subs	r3, r3, r0
 8003056:	2d00      	cmp	r5, #0
 8003058:	d100      	bne.n	800305c <mktime+0x284>
 800305a:	425b      	negs	r3, r3
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	0020      	movs	r0, r4
 8003060:	18d2      	adds	r2, r2, r3
 8003062:	6022      	str	r2, [r4, #0]
 8003064:	9a03      	ldr	r2, [sp, #12]
 8003066:	68e7      	ldr	r7, [r4, #12]
 8003068:	18d3      	adds	r3, r2, r3
 800306a:	9303      	str	r3, [sp, #12]
 800306c:	f7ff fde8 	bl	8002c40 <validate_structure>
 8003070:	68e3      	ldr	r3, [r4, #12]
 8003072:	1bdf      	subs	r7, r3, r7
 8003074:	d100      	bne.n	8003078 <mktime+0x2a0>
 8003076:	e748      	b.n	8002f0a <mktime+0x132>
 8003078:	2f01      	cmp	r7, #1
 800307a:	dcb3      	bgt.n	8002fe4 <mktime+0x20c>
 800307c:	1c7b      	adds	r3, r7, #1
 800307e:	da00      	bge.n	8003082 <mktime+0x2aa>
 8003080:	0037      	movs	r7, r6
 8003082:	9b01      	ldr	r3, [sp, #4]
 8003084:	69e2      	ldr	r2, [r4, #28]
 8003086:	19db      	adds	r3, r3, r7
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2303      	movs	r3, #3
 800308c:	18bf      	adds	r7, r7, r2
 800308e:	d5b2      	bpl.n	8002ff6 <mktime+0x21e>
 8003090:	9a02      	ldr	r2, [sp, #8]
 8003092:	1e50      	subs	r0, r2, #1
 8003094:	4218      	tst	r0, r3
 8003096:	d1a8      	bne.n	8002fea <mktime+0x212>
 8003098:	2164      	movs	r1, #100	; 0x64
 800309a:	f7fd f9c1 	bl	8000420 <__aeabi_idivmod>
 800309e:	2900      	cmp	r1, #0
 80030a0:	d1a7      	bne.n	8002ff2 <mktime+0x21a>
 80030a2:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <mktime+0x310>)
 80030a4:	9b02      	ldr	r3, [sp, #8]
 80030a6:	4694      	mov	ip, r2
 80030a8:	3191      	adds	r1, #145	; 0x91
 80030aa:	4463      	add	r3, ip
 80030ac:	0018      	movs	r0, r3
 80030ae:	31ff      	adds	r1, #255	; 0xff
 80030b0:	f7fd f9b6 	bl	8000420 <__aeabi_idivmod>
 80030b4:	000b      	movs	r3, r1
 80030b6:	4259      	negs	r1, r3
 80030b8:	4159      	adcs	r1, r3
 80030ba:	316d      	adds	r1, #109	; 0x6d
 80030bc:	31ff      	adds	r1, #255	; 0xff
 80030be:	e796      	b.n	8002fee <mktime+0x216>
 80030c0:	2500      	movs	r5, #0
 80030c2:	2e00      	cmp	r6, #0
 80030c4:	dac2      	bge.n	800304c <mktime+0x274>
 80030c6:	9b04      	ldr	r3, [sp, #16]
 80030c8:	6a1e      	ldr	r6, [r3, #32]
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	199e      	adds	r6, r3, r6
 80030ce:	e724      	b.n	8002f1a <mktime+0x142>
 80030d0:	08004a2c 	.word	0x08004a2c
 80030d4:	0000076c 	.word	0x0000076c
 80030d8:	00004e20 	.word	0x00004e20
 80030dc:	00002710 	.word	0x00002710
 80030e0:	00015180 	.word	0x00015180
 80030e4:	20000274 	.word	0x20000274
 80030e8:	0000076b 	.word	0x0000076b

080030ec <_free_r>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	0005      	movs	r5, r0
 80030f0:	2900      	cmp	r1, #0
 80030f2:	d010      	beq.n	8003116 <_free_r+0x2a>
 80030f4:	1f0c      	subs	r4, r1, #4
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	da00      	bge.n	80030fe <_free_r+0x12>
 80030fc:	18e4      	adds	r4, r4, r3
 80030fe:	0028      	movs	r0, r5
 8003100:	f000 fb68 	bl	80037d4 <__malloc_lock>
 8003104:	4a1d      	ldr	r2, [pc, #116]	; (800317c <_free_r+0x90>)
 8003106:	6813      	ldr	r3, [r2, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <_free_r+0x2c>
 800310c:	6063      	str	r3, [r4, #4]
 800310e:	6014      	str	r4, [r2, #0]
 8003110:	0028      	movs	r0, r5
 8003112:	f000 fb60 	bl	80037d6 <__malloc_unlock>
 8003116:	bd70      	pop	{r4, r5, r6, pc}
 8003118:	42a3      	cmp	r3, r4
 800311a:	d909      	bls.n	8003130 <_free_r+0x44>
 800311c:	6821      	ldr	r1, [r4, #0]
 800311e:	1860      	adds	r0, r4, r1
 8003120:	4283      	cmp	r3, r0
 8003122:	d1f3      	bne.n	800310c <_free_r+0x20>
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	1841      	adds	r1, r0, r1
 800312a:	6021      	str	r1, [r4, #0]
 800312c:	e7ee      	b.n	800310c <_free_r+0x20>
 800312e:	0013      	movs	r3, r2
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	2a00      	cmp	r2, #0
 8003134:	d001      	beq.n	800313a <_free_r+0x4e>
 8003136:	42a2      	cmp	r2, r4
 8003138:	d9f9      	bls.n	800312e <_free_r+0x42>
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	1858      	adds	r0, r3, r1
 800313e:	42a0      	cmp	r0, r4
 8003140:	d10b      	bne.n	800315a <_free_r+0x6e>
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	1809      	adds	r1, r1, r0
 8003146:	1858      	adds	r0, r3, r1
 8003148:	6019      	str	r1, [r3, #0]
 800314a:	4282      	cmp	r2, r0
 800314c:	d1e0      	bne.n	8003110 <_free_r+0x24>
 800314e:	6810      	ldr	r0, [r2, #0]
 8003150:	6852      	ldr	r2, [r2, #4]
 8003152:	1841      	adds	r1, r0, r1
 8003154:	6019      	str	r1, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	e7da      	b.n	8003110 <_free_r+0x24>
 800315a:	42a0      	cmp	r0, r4
 800315c:	d902      	bls.n	8003164 <_free_r+0x78>
 800315e:	230c      	movs	r3, #12
 8003160:	602b      	str	r3, [r5, #0]
 8003162:	e7d5      	b.n	8003110 <_free_r+0x24>
 8003164:	6821      	ldr	r1, [r4, #0]
 8003166:	1860      	adds	r0, r4, r1
 8003168:	4282      	cmp	r2, r0
 800316a:	d103      	bne.n	8003174 <_free_r+0x88>
 800316c:	6810      	ldr	r0, [r2, #0]
 800316e:	6852      	ldr	r2, [r2, #4]
 8003170:	1841      	adds	r1, r0, r1
 8003172:	6021      	str	r1, [r4, #0]
 8003174:	6062      	str	r2, [r4, #4]
 8003176:	605c      	str	r4, [r3, #4]
 8003178:	e7ca      	b.n	8003110 <_free_r+0x24>
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	20000250 	.word	0x20000250

08003180 <_malloc_r>:
 8003180:	2303      	movs	r3, #3
 8003182:	b570      	push	{r4, r5, r6, lr}
 8003184:	1ccd      	adds	r5, r1, #3
 8003186:	439d      	bics	r5, r3
 8003188:	3508      	adds	r5, #8
 800318a:	0006      	movs	r6, r0
 800318c:	2d0c      	cmp	r5, #12
 800318e:	d21e      	bcs.n	80031ce <_malloc_r+0x4e>
 8003190:	250c      	movs	r5, #12
 8003192:	42a9      	cmp	r1, r5
 8003194:	d81d      	bhi.n	80031d2 <_malloc_r+0x52>
 8003196:	0030      	movs	r0, r6
 8003198:	f000 fb1c 	bl	80037d4 <__malloc_lock>
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <_malloc_r+0xb4>)
 800319e:	6814      	ldr	r4, [r2, #0]
 80031a0:	0021      	movs	r1, r4
 80031a2:	2900      	cmp	r1, #0
 80031a4:	d119      	bne.n	80031da <_malloc_r+0x5a>
 80031a6:	4c24      	ldr	r4, [pc, #144]	; (8003238 <_malloc_r+0xb8>)
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <_malloc_r+0x36>
 80031ae:	0030      	movs	r0, r6
 80031b0:	f000 f844 	bl	800323c <_sbrk_r>
 80031b4:	6020      	str	r0, [r4, #0]
 80031b6:	0029      	movs	r1, r5
 80031b8:	0030      	movs	r0, r6
 80031ba:	f000 f83f 	bl	800323c <_sbrk_r>
 80031be:	1c43      	adds	r3, r0, #1
 80031c0:	d12c      	bne.n	800321c <_malloc_r+0x9c>
 80031c2:	230c      	movs	r3, #12
 80031c4:	0030      	movs	r0, r6
 80031c6:	6033      	str	r3, [r6, #0]
 80031c8:	f000 fb05 	bl	80037d6 <__malloc_unlock>
 80031cc:	e003      	b.n	80031d6 <_malloc_r+0x56>
 80031ce:	2d00      	cmp	r5, #0
 80031d0:	dadf      	bge.n	8003192 <_malloc_r+0x12>
 80031d2:	230c      	movs	r3, #12
 80031d4:	6033      	str	r3, [r6, #0]
 80031d6:	2000      	movs	r0, #0
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	680b      	ldr	r3, [r1, #0]
 80031dc:	1b5b      	subs	r3, r3, r5
 80031de:	d41a      	bmi.n	8003216 <_malloc_r+0x96>
 80031e0:	2b0b      	cmp	r3, #11
 80031e2:	d903      	bls.n	80031ec <_malloc_r+0x6c>
 80031e4:	600b      	str	r3, [r1, #0]
 80031e6:	18cc      	adds	r4, r1, r3
 80031e8:	6025      	str	r5, [r4, #0]
 80031ea:	e003      	b.n	80031f4 <_malloc_r+0x74>
 80031ec:	428c      	cmp	r4, r1
 80031ee:	d10e      	bne.n	800320e <_malloc_r+0x8e>
 80031f0:	6863      	ldr	r3, [r4, #4]
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	0030      	movs	r0, r6
 80031f6:	f000 faee 	bl	80037d6 <__malloc_unlock>
 80031fa:	0020      	movs	r0, r4
 80031fc:	2207      	movs	r2, #7
 80031fe:	300b      	adds	r0, #11
 8003200:	1d23      	adds	r3, r4, #4
 8003202:	4390      	bics	r0, r2
 8003204:	1ac3      	subs	r3, r0, r3
 8003206:	d0e7      	beq.n	80031d8 <_malloc_r+0x58>
 8003208:	425a      	negs	r2, r3
 800320a:	50e2      	str	r2, [r4, r3]
 800320c:	e7e4      	b.n	80031d8 <_malloc_r+0x58>
 800320e:	684b      	ldr	r3, [r1, #4]
 8003210:	6063      	str	r3, [r4, #4]
 8003212:	000c      	movs	r4, r1
 8003214:	e7ee      	b.n	80031f4 <_malloc_r+0x74>
 8003216:	000c      	movs	r4, r1
 8003218:	6849      	ldr	r1, [r1, #4]
 800321a:	e7c2      	b.n	80031a2 <_malloc_r+0x22>
 800321c:	2303      	movs	r3, #3
 800321e:	1cc4      	adds	r4, r0, #3
 8003220:	439c      	bics	r4, r3
 8003222:	42a0      	cmp	r0, r4
 8003224:	d0e0      	beq.n	80031e8 <_malloc_r+0x68>
 8003226:	1a21      	subs	r1, r4, r0
 8003228:	0030      	movs	r0, r6
 800322a:	f000 f807 	bl	800323c <_sbrk_r>
 800322e:	1c43      	adds	r3, r0, #1
 8003230:	d1da      	bne.n	80031e8 <_malloc_r+0x68>
 8003232:	e7c6      	b.n	80031c2 <_malloc_r+0x42>
 8003234:	20000250 	.word	0x20000250
 8003238:	20000254 	.word	0x20000254

0800323c <_sbrk_r>:
 800323c:	2300      	movs	r3, #0
 800323e:	b570      	push	{r4, r5, r6, lr}
 8003240:	4c06      	ldr	r4, [pc, #24]	; (800325c <_sbrk_r+0x20>)
 8003242:	0005      	movs	r5, r0
 8003244:	0008      	movs	r0, r1
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	f7ff fa60 	bl	800270c <_sbrk>
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d103      	bne.n	8003258 <_sbrk_r+0x1c>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d000      	beq.n	8003258 <_sbrk_r+0x1c>
 8003256:	602b      	str	r3, [r5, #0]
 8003258:	bd70      	pop	{r4, r5, r6, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	200003c8 	.word	0x200003c8

08003260 <siprintf>:
 8003260:	b40e      	push	{r1, r2, r3}
 8003262:	b510      	push	{r4, lr}
 8003264:	b09d      	sub	sp, #116	; 0x74
 8003266:	a902      	add	r1, sp, #8
 8003268:	9002      	str	r0, [sp, #8]
 800326a:	6108      	str	r0, [r1, #16]
 800326c:	480b      	ldr	r0, [pc, #44]	; (800329c <siprintf+0x3c>)
 800326e:	2482      	movs	r4, #130	; 0x82
 8003270:	6088      	str	r0, [r1, #8]
 8003272:	6148      	str	r0, [r1, #20]
 8003274:	2001      	movs	r0, #1
 8003276:	4240      	negs	r0, r0
 8003278:	ab1f      	add	r3, sp, #124	; 0x7c
 800327a:	81c8      	strh	r0, [r1, #14]
 800327c:	4808      	ldr	r0, [pc, #32]	; (80032a0 <siprintf+0x40>)
 800327e:	cb04      	ldmia	r3!, {r2}
 8003280:	00a4      	lsls	r4, r4, #2
 8003282:	6800      	ldr	r0, [r0, #0]
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	818c      	strh	r4, [r1, #12]
 8003288:	f000 fb08 	bl	800389c <_svfiprintf_r>
 800328c:	2300      	movs	r3, #0
 800328e:	9a02      	ldr	r2, [sp, #8]
 8003290:	7013      	strb	r3, [r2, #0]
 8003292:	b01d      	add	sp, #116	; 0x74
 8003294:	bc10      	pop	{r4}
 8003296:	bc08      	pop	{r3}
 8003298:	b003      	add	sp, #12
 800329a:	4718      	bx	r3
 800329c:	7fffffff 	.word	0x7fffffff
 80032a0:	20000010 	.word	0x20000010

080032a4 <__tzcalc_limits>:
 80032a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	0004      	movs	r4, r0
 80032aa:	f000 fa8f 	bl	80037cc <__gettzinfo>
 80032ae:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <__tzcalc_limits+0x13c>)
 80032b0:	0007      	movs	r7, r0
 80032b2:	2000      	movs	r0, #0
 80032b4:	429c      	cmp	r4, r3
 80032b6:	dd58      	ble.n	800336a <__tzcalc_limits+0xc6>
 80032b8:	256e      	movs	r5, #110	; 0x6e
 80032ba:	2164      	movs	r1, #100	; 0x64
 80032bc:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <__tzcalc_limits+0x140>)
 80032be:	35ff      	adds	r5, #255	; 0xff
 80032c0:	18e0      	adds	r0, r4, r3
 80032c2:	4345      	muls	r5, r0
 80032c4:	4b48      	ldr	r3, [pc, #288]	; (80033e8 <__tzcalc_limits+0x144>)
 80032c6:	607c      	str	r4, [r7, #4]
 80032c8:	18e0      	adds	r0, r4, r3
 80032ca:	4b48      	ldr	r3, [pc, #288]	; (80033ec <__tzcalc_limits+0x148>)
 80032cc:	1080      	asrs	r0, r0, #2
 80032ce:	182d      	adds	r5, r5, r0
 80032d0:	4249      	negs	r1, r1
 80032d2:	18e0      	adds	r0, r4, r3
 80032d4:	f7fc ffbe 	bl	8000254 <__divsi3>
 80032d8:	21c8      	movs	r1, #200	; 0xc8
 80032da:	4b45      	ldr	r3, [pc, #276]	; (80033f0 <__tzcalc_limits+0x14c>)
 80032dc:	182d      	adds	r5, r5, r0
 80032de:	0049      	lsls	r1, r1, #1
 80032e0:	18e0      	adds	r0, r4, r3
 80032e2:	f7fc ffb7 	bl	8000254 <__divsi3>
 80032e6:	2164      	movs	r1, #100	; 0x64
 80032e8:	182b      	adds	r3, r5, r0
 80032ea:	0020      	movs	r0, r4
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	f7fd f897 	bl	8000420 <__aeabi_idivmod>
 80032f2:	9102      	str	r1, [sp, #8]
 80032f4:	21c8      	movs	r1, #200	; 0xc8
 80032f6:	0020      	movs	r0, r4
 80032f8:	0049      	lsls	r1, r1, #1
 80032fa:	f7fd f891 	bl	8000420 <__aeabi_idivmod>
 80032fe:	000a      	movs	r2, r1
 8003300:	4253      	negs	r3, r2
 8003302:	415a      	adcs	r2, r3
 8003304:	003b      	movs	r3, r7
 8003306:	3340      	adds	r3, #64	; 0x40
 8003308:	9307      	str	r3, [sp, #28]
 800330a:	2303      	movs	r3, #3
 800330c:	003d      	movs	r5, r7
 800330e:	401c      	ands	r4, r3
 8003310:	9103      	str	r1, [sp, #12]
 8003312:	9205      	str	r2, [sp, #20]
 8003314:	3508      	adds	r5, #8
 8003316:	9406      	str	r4, [sp, #24]
 8003318:	782b      	ldrb	r3, [r5, #0]
 800331a:	2b4a      	cmp	r3, #74	; 0x4a
 800331c:	d127      	bne.n	800336e <__tzcalc_limits+0xca>
 800331e:	9a01      	ldr	r2, [sp, #4]
 8003320:	68eb      	ldr	r3, [r5, #12]
 8003322:	18d1      	adds	r1, r2, r3
 8003324:	9a06      	ldr	r2, [sp, #24]
 8003326:	2a00      	cmp	r2, #0
 8003328:	d102      	bne.n	8003330 <__tzcalc_limits+0x8c>
 800332a:	9a02      	ldr	r2, [sp, #8]
 800332c:	2a00      	cmp	r2, #0
 800332e:	d103      	bne.n	8003338 <__tzcalc_limits+0x94>
 8003330:	2400      	movs	r4, #0
 8003332:	9a03      	ldr	r2, [sp, #12]
 8003334:	42a2      	cmp	r2, r4
 8003336:	d103      	bne.n	8003340 <__tzcalc_limits+0x9c>
 8003338:	2401      	movs	r4, #1
 800333a:	2b3b      	cmp	r3, #59	; 0x3b
 800333c:	dc00      	bgt.n	8003340 <__tzcalc_limits+0x9c>
 800333e:	2400      	movs	r4, #0
 8003340:	1864      	adds	r4, r4, r1
 8003342:	3c01      	subs	r4, #1
 8003344:	492b      	ldr	r1, [pc, #172]	; (80033f4 <__tzcalc_limits+0x150>)
 8003346:	692b      	ldr	r3, [r5, #16]
 8003348:	434c      	muls	r4, r1
 800334a:	18e4      	adds	r4, r4, r3
 800334c:	69ab      	ldr	r3, [r5, #24]
 800334e:	18e4      	adds	r4, r4, r3
 8003350:	9b07      	ldr	r3, [sp, #28]
 8003352:	616c      	str	r4, [r5, #20]
 8003354:	351c      	adds	r5, #28
 8003356:	42ab      	cmp	r3, r5
 8003358:	d1de      	bne.n	8003318 <__tzcalc_limits+0x74>
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800335e:	2301      	movs	r3, #1
 8003360:	428a      	cmp	r2, r1
 8003362:	db00      	blt.n	8003366 <__tzcalc_limits+0xc2>
 8003364:	2300      	movs	r3, #0
 8003366:	2001      	movs	r0, #1
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	b009      	add	sp, #36	; 0x24
 800336c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800336e:	2b44      	cmp	r3, #68	; 0x44
 8003370:	d103      	bne.n	800337a <__tzcalc_limits+0xd6>
 8003372:	9b01      	ldr	r3, [sp, #4]
 8003374:	68ea      	ldr	r2, [r5, #12]
 8003376:	189c      	adds	r4, r3, r2
 8003378:	e7e4      	b.n	8003344 <__tzcalc_limits+0xa0>
 800337a:	9a06      	ldr	r2, [sp, #24]
 800337c:	9b05      	ldr	r3, [sp, #20]
 800337e:	2a00      	cmp	r2, #0
 8003380:	d103      	bne.n	800338a <__tzcalc_limits+0xe6>
 8003382:	9a02      	ldr	r2, [sp, #8]
 8003384:	2a00      	cmp	r2, #0
 8003386:	d000      	beq.n	800338a <__tzcalc_limits+0xe6>
 8003388:	2301      	movs	r3, #1
 800338a:	2230      	movs	r2, #48	; 0x30
 800338c:	4353      	muls	r3, r2
 800338e:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <__tzcalc_limits+0x154>)
 8003390:	686e      	ldr	r6, [r5, #4]
 8003392:	189b      	adds	r3, r3, r2
 8003394:	9304      	str	r3, [sp, #16]
 8003396:	001a      	movs	r2, r3
 8003398:	2301      	movs	r3, #1
 800339a:	9c01      	ldr	r4, [sp, #4]
 800339c:	42b3      	cmp	r3, r6
 800339e:	db18      	blt.n	80033d2 <__tzcalc_limits+0x12e>
 80033a0:	2e00      	cmp	r6, #0
 80033a2:	dc00      	bgt.n	80033a6 <__tzcalc_limits+0x102>
 80033a4:	2601      	movs	r6, #1
 80033a6:	1d20      	adds	r0, r4, #4
 80033a8:	2107      	movs	r1, #7
 80033aa:	f7fd f839 	bl	8000420 <__aeabi_idivmod>
 80033ae:	68eb      	ldr	r3, [r5, #12]
 80033b0:	1a5b      	subs	r3, r3, r1
 80033b2:	d500      	bpl.n	80033b6 <__tzcalc_limits+0x112>
 80033b4:	3307      	adds	r3, #7
 80033b6:	2107      	movs	r1, #7
 80033b8:	68aa      	ldr	r2, [r5, #8]
 80033ba:	3a01      	subs	r2, #1
 80033bc:	4351      	muls	r1, r2
 80033be:	18c9      	adds	r1, r1, r3
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <__tzcalc_limits+0x158>)
 80033c2:	18f6      	adds	r6, r6, r3
 80033c4:	9b04      	ldr	r3, [sp, #16]
 80033c6:	00b6      	lsls	r6, r6, #2
 80033c8:	58f3      	ldr	r3, [r6, r3]
 80033ca:	4299      	cmp	r1, r3
 80033cc:	da05      	bge.n	80033da <__tzcalc_limits+0x136>
 80033ce:	1864      	adds	r4, r4, r1
 80033d0:	e7b8      	b.n	8003344 <__tzcalc_limits+0xa0>
 80033d2:	ca02      	ldmia	r2!, {r1}
 80033d4:	3301      	adds	r3, #1
 80033d6:	1864      	adds	r4, r4, r1
 80033d8:	e7e0      	b.n	800339c <__tzcalc_limits+0xf8>
 80033da:	3907      	subs	r1, #7
 80033dc:	e7f5      	b.n	80033ca <__tzcalc_limits+0x126>
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	000007b1 	.word	0x000007b1
 80033e4:	fffff84e 	.word	0xfffff84e
 80033e8:	fffff84f 	.word	0xfffff84f
 80033ec:	fffff893 	.word	0xfffff893
 80033f0:	fffff9bf 	.word	0xfffff9bf
 80033f4:	00015180 	.word	0x00015180
 80033f8:	08004a98 	.word	0x08004a98
 80033fc:	3fffffff 	.word	0x3fffffff

08003400 <__tz_lock>:
 8003400:	4770      	bx	lr

08003402 <__tz_unlock>:
 8003402:	4770      	bx	lr

08003404 <_tzset_unlocked>:
 8003404:	b510      	push	{r4, lr}
 8003406:	4b02      	ldr	r3, [pc, #8]	; (8003410 <_tzset_unlocked+0xc>)
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	f000 f803 	bl	8003414 <_tzset_unlocked_r>
 800340e:	bd10      	pop	{r4, pc}
 8003410:	20000010 	.word	0x20000010

08003414 <_tzset_unlocked_r>:
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	b08d      	sub	sp, #52	; 0x34
 8003418:	0007      	movs	r7, r0
 800341a:	f000 f9d7 	bl	80037cc <__gettzinfo>
 800341e:	49af      	ldr	r1, [pc, #700]	; (80036dc <_tzset_unlocked_r+0x2c8>)
 8003420:	0006      	movs	r6, r0
 8003422:	0038      	movs	r0, r7
 8003424:	f000 f9cc 	bl	80037c0 <_getenv_r>
 8003428:	4dad      	ldr	r5, [pc, #692]	; (80036e0 <_tzset_unlocked_r+0x2cc>)
 800342a:	1e04      	subs	r4, r0, #0
 800342c:	d10d      	bne.n	800344a <_tzset_unlocked_r+0x36>
 800342e:	4bad      	ldr	r3, [pc, #692]	; (80036e4 <_tzset_unlocked_r+0x2d0>)
 8003430:	4aad      	ldr	r2, [pc, #692]	; (80036e8 <_tzset_unlocked_r+0x2d4>)
 8003432:	6018      	str	r0, [r3, #0]
 8003434:	4bad      	ldr	r3, [pc, #692]	; (80036ec <_tzset_unlocked_r+0x2d8>)
 8003436:	6018      	str	r0, [r3, #0]
 8003438:	4bad      	ldr	r3, [pc, #692]	; (80036f0 <_tzset_unlocked_r+0x2dc>)
 800343a:	6828      	ldr	r0, [r5, #0]
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	f7ff fbec 	bl	8002c1c <free>
 8003444:	602c      	str	r4, [r5, #0]
 8003446:	b00d      	add	sp, #52	; 0x34
 8003448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800344a:	6829      	ldr	r1, [r5, #0]
 800344c:	2900      	cmp	r1, #0
 800344e:	d15a      	bne.n	8003506 <_tzset_unlocked_r+0xf2>
 8003450:	6828      	ldr	r0, [r5, #0]
 8003452:	f7ff fbe3 	bl	8002c1c <free>
 8003456:	0020      	movs	r0, r4
 8003458:	f7fc fe56 	bl	8000108 <strlen>
 800345c:	1c41      	adds	r1, r0, #1
 800345e:	0038      	movs	r0, r7
 8003460:	f7ff fe8e 	bl	8003180 <_malloc_r>
 8003464:	6028      	str	r0, [r5, #0]
 8003466:	2800      	cmp	r0, #0
 8003468:	d152      	bne.n	8003510 <_tzset_unlocked_r+0xfc>
 800346a:	7823      	ldrb	r3, [r4, #0]
 800346c:	3b3a      	subs	r3, #58	; 0x3a
 800346e:	4259      	negs	r1, r3
 8003470:	4159      	adcs	r1, r3
 8003472:	1864      	adds	r4, r4, r1
 8003474:	ab0a      	add	r3, sp, #40	; 0x28
 8003476:	4a9f      	ldr	r2, [pc, #636]	; (80036f4 <_tzset_unlocked_r+0x2e0>)
 8003478:	499f      	ldr	r1, [pc, #636]	; (80036f8 <_tzset_unlocked_r+0x2e4>)
 800347a:	0020      	movs	r0, r4
 800347c:	f000 fc9a 	bl	8003db4 <siscanf>
 8003480:	2800      	cmp	r0, #0
 8003482:	dde0      	ble.n	8003446 <_tzset_unlocked_r+0x32>
 8003484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003486:	18e4      	adds	r4, r4, r3
 8003488:	7823      	ldrb	r3, [r4, #0]
 800348a:	2b2d      	cmp	r3, #45	; 0x2d
 800348c:	d144      	bne.n	8003518 <_tzset_unlocked_r+0x104>
 800348e:	3b2e      	subs	r3, #46	; 0x2e
 8003490:	3401      	adds	r4, #1
 8003492:	9304      	str	r3, [sp, #16]
 8003494:	2716      	movs	r7, #22
 8003496:	ab02      	add	r3, sp, #8
 8003498:	18ff      	adds	r7, r7, r3
 800349a:	2300      	movs	r3, #0
 800349c:	803b      	strh	r3, [r7, #0]
 800349e:	2300      	movs	r3, #0
 80034a0:	ad08      	add	r5, sp, #32
 80034a2:	802b      	strh	r3, [r5, #0]
 80034a4:	ab0a      	add	r3, sp, #40	; 0x28
 80034a6:	9303      	str	r3, [sp, #12]
 80034a8:	9502      	str	r5, [sp, #8]
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	9700      	str	r7, [sp, #0]
 80034ae:	aa07      	add	r2, sp, #28
 80034b0:	4992      	ldr	r1, [pc, #584]	; (80036fc <_tzset_unlocked_r+0x2e8>)
 80034b2:	0020      	movs	r0, r4
 80034b4:	f000 fc7e 	bl	8003db4 <siscanf>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	ddc4      	ble.n	8003446 <_tzset_unlocked_r+0x32>
 80034bc:	233c      	movs	r3, #60	; 0x3c
 80034be:	883a      	ldrh	r2, [r7, #0]
 80034c0:	4f8f      	ldr	r7, [pc, #572]	; (8003700 <_tzset_unlocked_r+0x2ec>)
 80034c2:	4353      	muls	r3, r2
 80034c4:	882a      	ldrh	r2, [r5, #0]
 80034c6:	4d8a      	ldr	r5, [pc, #552]	; (80036f0 <_tzset_unlocked_r+0x2dc>)
 80034c8:	189b      	adds	r3, r3, r2
 80034ca:	aa02      	add	r2, sp, #8
 80034cc:	8a91      	ldrh	r1, [r2, #20]
 80034ce:	22e1      	movs	r2, #225	; 0xe1
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	434a      	muls	r2, r1
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	9a04      	ldr	r2, [sp, #16]
 80034d8:	4987      	ldr	r1, [pc, #540]	; (80036f8 <_tzset_unlocked_r+0x2e4>)
 80034da:	435a      	muls	r2, r3
 80034dc:	4b85      	ldr	r3, [pc, #532]	; (80036f4 <_tzset_unlocked_r+0x2e0>)
 80034de:	6232      	str	r2, [r6, #32]
 80034e0:	602b      	str	r3, [r5, #0]
 80034e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034e4:	003a      	movs	r2, r7
 80034e6:	18e4      	adds	r4, r4, r3
 80034e8:	0020      	movs	r0, r4
 80034ea:	ab0a      	add	r3, sp, #40	; 0x28
 80034ec:	f000 fc62 	bl	8003db4 <siscanf>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	dc18      	bgt.n	8003526 <_tzset_unlocked_r+0x112>
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	6a32      	ldr	r2, [r6, #32]
 80034f8:	606b      	str	r3, [r5, #4]
 80034fa:	4b7a      	ldr	r3, [pc, #488]	; (80036e4 <_tzset_unlocked_r+0x2d0>)
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	4b7a      	ldr	r3, [pc, #488]	; (80036ec <_tzset_unlocked_r+0x2d8>)
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e79f      	b.n	8003446 <_tzset_unlocked_r+0x32>
 8003506:	f7fc fe06 	bl	8000116 <strcmp>
 800350a:	2800      	cmp	r0, #0
 800350c:	d09b      	beq.n	8003446 <_tzset_unlocked_r+0x32>
 800350e:	e79f      	b.n	8003450 <_tzset_unlocked_r+0x3c>
 8003510:	0021      	movs	r1, r4
 8003512:	f000 fc79 	bl	8003e08 <strcpy>
 8003516:	e7a8      	b.n	800346a <_tzset_unlocked_r+0x56>
 8003518:	2201      	movs	r2, #1
 800351a:	3b2b      	subs	r3, #43	; 0x2b
 800351c:	9204      	str	r2, [sp, #16]
 800351e:	4259      	negs	r1, r3
 8003520:	4159      	adcs	r1, r3
 8003522:	1864      	adds	r4, r4, r1
 8003524:	e7b6      	b.n	8003494 <_tzset_unlocked_r+0x80>
 8003526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003528:	606f      	str	r7, [r5, #4]
 800352a:	18e4      	adds	r4, r4, r3
 800352c:	7823      	ldrb	r3, [r4, #0]
 800352e:	2b2d      	cmp	r3, #45	; 0x2d
 8003530:	d000      	beq.n	8003534 <_tzset_unlocked_r+0x120>
 8003532:	e08f      	b.n	8003654 <_tzset_unlocked_r+0x240>
 8003534:	3b2e      	subs	r3, #46	; 0x2e
 8003536:	3401      	adds	r4, #1
 8003538:	9304      	str	r3, [sp, #16]
 800353a:	2716      	movs	r7, #22
 800353c:	2300      	movs	r3, #0
 800353e:	aa02      	add	r2, sp, #8
 8003540:	18bf      	adds	r7, r7, r2
 8003542:	ad07      	add	r5, sp, #28
 8003544:	8313      	strh	r3, [r2, #24]
 8003546:	802b      	strh	r3, [r5, #0]
 8003548:	803b      	strh	r3, [r7, #0]
 800354a:	aa08      	add	r2, sp, #32
 800354c:	930a      	str	r3, [sp, #40]	; 0x28
 800354e:	ab0a      	add	r3, sp, #40	; 0x28
 8003550:	9202      	str	r2, [sp, #8]
 8003552:	9303      	str	r3, [sp, #12]
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	9700      	str	r7, [sp, #0]
 8003558:	002a      	movs	r2, r5
 800355a:	4968      	ldr	r1, [pc, #416]	; (80036fc <_tzset_unlocked_r+0x2e8>)
 800355c:	0020      	movs	r0, r4
 800355e:	f000 fc29 	bl	8003db4 <siscanf>
 8003562:	2800      	cmp	r0, #0
 8003564:	dd00      	ble.n	8003568 <_tzset_unlocked_r+0x154>
 8003566:	e07c      	b.n	8003662 <_tzset_unlocked_r+0x24e>
 8003568:	6a33      	ldr	r3, [r6, #32]
 800356a:	4a66      	ldr	r2, [pc, #408]	; (8003704 <_tzset_unlocked_r+0x2f0>)
 800356c:	189b      	adds	r3, r3, r2
 800356e:	63f3      	str	r3, [r6, #60]	; 0x3c
 8003570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003572:	0037      	movs	r7, r6
 8003574:	18e4      	adds	r4, r4, r3
 8003576:	2300      	movs	r3, #0
 8003578:	3708      	adds	r7, #8
 800357a:	9304      	str	r3, [sp, #16]
 800357c:	7823      	ldrb	r3, [r4, #0]
 800357e:	3b2c      	subs	r3, #44	; 0x2c
 8003580:	4259      	negs	r1, r3
 8003582:	4159      	adcs	r1, r3
 8003584:	1864      	adds	r4, r4, r1
 8003586:	7825      	ldrb	r5, [r4, #0]
 8003588:	2d4d      	cmp	r5, #77	; 0x4d
 800358a:	d000      	beq.n	800358e <_tzset_unlocked_r+0x17a>
 800358c:	e078      	b.n	8003680 <_tzset_unlocked_r+0x26c>
 800358e:	221e      	movs	r2, #30
 8003590:	a902      	add	r1, sp, #8
 8003592:	1852      	adds	r2, r2, r1
 8003594:	9202      	str	r2, [sp, #8]
 8003596:	aa09      	add	r2, sp, #36	; 0x24
 8003598:	9200      	str	r2, [sp, #0]
 800359a:	221a      	movs	r2, #26
 800359c:	ab0a      	add	r3, sp, #40	; 0x28
 800359e:	1852      	adds	r2, r2, r1
 80035a0:	9303      	str	r3, [sp, #12]
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	4958      	ldr	r1, [pc, #352]	; (8003708 <_tzset_unlocked_r+0x2f4>)
 80035a6:	0020      	movs	r0, r4
 80035a8:	f000 fc04 	bl	8003db4 <siscanf>
 80035ac:	2803      	cmp	r0, #3
 80035ae:	d000      	beq.n	80035b2 <_tzset_unlocked_r+0x19e>
 80035b0:	e749      	b.n	8003446 <_tzset_unlocked_r+0x32>
 80035b2:	ab02      	add	r3, sp, #8
 80035b4:	8b59      	ldrh	r1, [r3, #26]
 80035b6:	1e4b      	subs	r3, r1, #1
 80035b8:	2b0b      	cmp	r3, #11
 80035ba:	d900      	bls.n	80035be <_tzset_unlocked_r+0x1aa>
 80035bc:	e743      	b.n	8003446 <_tzset_unlocked_r+0x32>
 80035be:	ab02      	add	r3, sp, #8
 80035c0:	8b9a      	ldrh	r2, [r3, #28]
 80035c2:	1e53      	subs	r3, r2, #1
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d900      	bls.n	80035ca <_tzset_unlocked_r+0x1b6>
 80035c8:	e73d      	b.n	8003446 <_tzset_unlocked_r+0x32>
 80035ca:	ab02      	add	r3, sp, #8
 80035cc:	8bdb      	ldrh	r3, [r3, #30]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d900      	bls.n	80035d4 <_tzset_unlocked_r+0x1c0>
 80035d2:	e738      	b.n	8003446 <_tzset_unlocked_r+0x32>
 80035d4:	703d      	strb	r5, [r7, #0]
 80035d6:	6079      	str	r1, [r7, #4]
 80035d8:	60ba      	str	r2, [r7, #8]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035de:	18e5      	adds	r5, r4, r3
 80035e0:	2302      	movs	r3, #2
 80035e2:	aa07      	add	r2, sp, #28
 80035e4:	8013      	strh	r3, [r2, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	a902      	add	r1, sp, #8
 80035ea:	ac08      	add	r4, sp, #32
 80035ec:	82cb      	strh	r3, [r1, #22]
 80035ee:	8023      	strh	r3, [r4, #0]
 80035f0:	930a      	str	r3, [sp, #40]	; 0x28
 80035f2:	782b      	ldrb	r3, [r5, #0]
 80035f4:	2b2f      	cmp	r3, #47	; 0x2f
 80035f6:	d10b      	bne.n	8003610 <_tzset_unlocked_r+0x1fc>
 80035f8:	2116      	movs	r1, #22
 80035fa:	a802      	add	r0, sp, #8
 80035fc:	1809      	adds	r1, r1, r0
 80035fe:	ab0a      	add	r3, sp, #40	; 0x28
 8003600:	9100      	str	r1, [sp, #0]
 8003602:	9303      	str	r3, [sp, #12]
 8003604:	9402      	str	r4, [sp, #8]
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	4940      	ldr	r1, [pc, #256]	; (800370c <_tzset_unlocked_r+0x2f8>)
 800360a:	0028      	movs	r0, r5
 800360c:	f000 fbd2 	bl	8003db4 <siscanf>
 8003610:	ab02      	add	r3, sp, #8
 8003612:	8ada      	ldrh	r2, [r3, #22]
 8003614:	233c      	movs	r3, #60	; 0x3c
 8003616:	4353      	muls	r3, r2
 8003618:	8822      	ldrh	r2, [r4, #0]
 800361a:	189b      	adds	r3, r3, r2
 800361c:	aa07      	add	r2, sp, #28
 800361e:	8811      	ldrh	r1, [r2, #0]
 8003620:	22e1      	movs	r2, #225	; 0xe1
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	434a      	muls	r2, r1
 8003626:	189b      	adds	r3, r3, r2
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800362c:	371c      	adds	r7, #28
 800362e:	18ec      	adds	r4, r5, r3
 8003630:	9b04      	ldr	r3, [sp, #16]
 8003632:	3301      	adds	r3, #1
 8003634:	9304      	str	r3, [sp, #16]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d1a0      	bne.n	800357c <_tzset_unlocked_r+0x168>
 800363a:	6870      	ldr	r0, [r6, #4]
 800363c:	f7ff fe32 	bl	80032a4 <__tzcalc_limits>
 8003640:	6a32      	ldr	r2, [r6, #32]
 8003642:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <_tzset_unlocked_r+0x2d0>)
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	1e5a      	subs	r2, r3, #1
 800364c:	4193      	sbcs	r3, r2
 800364e:	4a27      	ldr	r2, [pc, #156]	; (80036ec <_tzset_unlocked_r+0x2d8>)
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e6f8      	b.n	8003446 <_tzset_unlocked_r+0x32>
 8003654:	2201      	movs	r2, #1
 8003656:	3b2b      	subs	r3, #43	; 0x2b
 8003658:	9204      	str	r2, [sp, #16]
 800365a:	4259      	negs	r1, r3
 800365c:	4159      	adcs	r1, r3
 800365e:	1864      	adds	r4, r4, r1
 8003660:	e76b      	b.n	800353a <_tzset_unlocked_r+0x126>
 8003662:	233c      	movs	r3, #60	; 0x3c
 8003664:	883a      	ldrh	r2, [r7, #0]
 8003666:	8829      	ldrh	r1, [r5, #0]
 8003668:	4353      	muls	r3, r2
 800366a:	aa02      	add	r2, sp, #8
 800366c:	8b12      	ldrh	r2, [r2, #24]
 800366e:	189b      	adds	r3, r3, r2
 8003670:	22e1      	movs	r2, #225	; 0xe1
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	434a      	muls	r2, r1
 8003676:	189b      	adds	r3, r3, r2
 8003678:	9a04      	ldr	r2, [sp, #16]
 800367a:	435a      	muls	r2, r3
 800367c:	0013      	movs	r3, r2
 800367e:	e776      	b.n	800356e <_tzset_unlocked_r+0x15a>
 8003680:	2344      	movs	r3, #68	; 0x44
 8003682:	9305      	str	r3, [sp, #20]
 8003684:	2d4a      	cmp	r5, #74	; 0x4a
 8003686:	d101      	bne.n	800368c <_tzset_unlocked_r+0x278>
 8003688:	3401      	adds	r4, #1
 800368a:	9505      	str	r5, [sp, #20]
 800368c:	220a      	movs	r2, #10
 800368e:	a90b      	add	r1, sp, #44	; 0x2c
 8003690:	0020      	movs	r0, r4
 8003692:	f000 fc69 	bl	8003f68 <strtoul>
 8003696:	231e      	movs	r3, #30
 8003698:	aa02      	add	r2, sp, #8
 800369a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800369c:	189b      	adds	r3, r3, r2
 800369e:	8018      	strh	r0, [r3, #0]
 80036a0:	42ac      	cmp	r4, r5
 80036a2:	d115      	bne.n	80036d0 <_tzset_unlocked_r+0x2bc>
 80036a4:	9b04      	ldr	r3, [sp, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d108      	bne.n	80036bc <_tzset_unlocked_r+0x2a8>
 80036aa:	334d      	adds	r3, #77	; 0x4d
 80036ac:	7233      	strb	r3, [r6, #8]
 80036ae:	2303      	movs	r3, #3
 80036b0:	60f3      	str	r3, [r6, #12]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6133      	str	r3, [r6, #16]
 80036b6:	9b04      	ldr	r3, [sp, #16]
 80036b8:	6173      	str	r3, [r6, #20]
 80036ba:	e791      	b.n	80035e0 <_tzset_unlocked_r+0x1cc>
 80036bc:	224d      	movs	r2, #77	; 0x4d
 80036be:	1d73      	adds	r3, r6, #5
 80036c0:	77da      	strb	r2, [r3, #31]
 80036c2:	230b      	movs	r3, #11
 80036c4:	62b3      	str	r3, [r6, #40]	; 0x28
 80036c6:	3b0a      	subs	r3, #10
 80036c8:	62f3      	str	r3, [r6, #44]	; 0x2c
 80036ca:	2300      	movs	r3, #0
 80036cc:	6333      	str	r3, [r6, #48]	; 0x30
 80036ce:	e787      	b.n	80035e0 <_tzset_unlocked_r+0x1cc>
 80036d0:	466b      	mov	r3, sp
 80036d2:	7d1b      	ldrb	r3, [r3, #20]
 80036d4:	b280      	uxth	r0, r0
 80036d6:	703b      	strb	r3, [r7, #0]
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	e781      	b.n	80035e0 <_tzset_unlocked_r+0x1cc>
 80036dc:	08004a5c 	.word	0x08004a5c
 80036e0:	20000270 	.word	0x20000270
 80036e4:	20000278 	.word	0x20000278
 80036e8:	08004a5f 	.word	0x08004a5f
 80036ec:	20000274 	.word	0x20000274
 80036f0:	20000074 	.word	0x20000074
 80036f4:	20000263 	.word	0x20000263
 80036f8:	08004a63 	.word	0x08004a63
 80036fc:	08004a86 	.word	0x08004a86
 8003700:	20000258 	.word	0x20000258
 8003704:	fffff1f0 	.word	0xfffff1f0
 8003708:	08004a72 	.word	0x08004a72
 800370c:	08004a85 	.word	0x08004a85

08003710 <div>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	000f      	movs	r7, r1
 8003714:	0006      	movs	r6, r0
 8003716:	0011      	movs	r1, r2
 8003718:	0038      	movs	r0, r7
 800371a:	0015      	movs	r5, r2
 800371c:	f7fc fd9a 	bl	8000254 <__divsi3>
 8003720:	0029      	movs	r1, r5
 8003722:	0004      	movs	r4, r0
 8003724:	0038      	movs	r0, r7
 8003726:	f7fc fe7b 	bl	8000420 <__aeabi_idivmod>
 800372a:	2f00      	cmp	r7, #0
 800372c:	db07      	blt.n	800373e <div+0x2e>
 800372e:	2900      	cmp	r1, #0
 8003730:	da01      	bge.n	8003736 <div+0x26>
 8003732:	3401      	adds	r4, #1
 8003734:	1b49      	subs	r1, r1, r5
 8003736:	0030      	movs	r0, r6
 8003738:	6034      	str	r4, [r6, #0]
 800373a:	6071      	str	r1, [r6, #4]
 800373c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800373e:	2900      	cmp	r1, #0
 8003740:	ddf9      	ble.n	8003736 <div+0x26>
 8003742:	3c01      	subs	r4, #1
 8003744:	1949      	adds	r1, r1, r5
 8003746:	e7f6      	b.n	8003736 <div+0x26>

08003748 <_findenv_r>:
 8003748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374a:	000e      	movs	r6, r1
 800374c:	b085      	sub	sp, #20
 800374e:	0007      	movs	r7, r0
 8003750:	9203      	str	r2, [sp, #12]
 8003752:	f000 fc1d 	bl	8003f90 <__env_lock>
 8003756:	4c19      	ldr	r4, [pc, #100]	; (80037bc <_findenv_r+0x74>)
 8003758:	0033      	movs	r3, r6
 800375a:	6825      	ldr	r5, [r4, #0]
 800375c:	2d00      	cmp	r5, #0
 800375e:	d106      	bne.n	800376e <_findenv_r+0x26>
 8003760:	0038      	movs	r0, r7
 8003762:	f000 fc16 	bl	8003f92 <__env_unlock>
 8003766:	2000      	movs	r0, #0
 8003768:	b005      	add	sp, #20
 800376a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376c:	3301      	adds	r3, #1
 800376e:	781a      	ldrb	r2, [r3, #0]
 8003770:	2a00      	cmp	r2, #0
 8003772:	d01f      	beq.n	80037b4 <_findenv_r+0x6c>
 8003774:	2a3d      	cmp	r2, #61	; 0x3d
 8003776:	d1f9      	bne.n	800376c <_findenv_r+0x24>
 8003778:	e7f2      	b.n	8003760 <_findenv_r+0x18>
 800377a:	3504      	adds	r5, #4
 800377c:	6828      	ldr	r0, [r5, #0]
 800377e:	2800      	cmp	r0, #0
 8003780:	d0ee      	beq.n	8003760 <_findenv_r+0x18>
 8003782:	9a01      	ldr	r2, [sp, #4]
 8003784:	0031      	movs	r1, r6
 8003786:	f000 fb47 	bl	8003e18 <strncmp>
 800378a:	2800      	cmp	r0, #0
 800378c:	d1f5      	bne.n	800377a <_findenv_r+0x32>
 800378e:	9a01      	ldr	r2, [sp, #4]
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	4694      	mov	ip, r2
 8003794:	4463      	add	r3, ip
 8003796:	9302      	str	r3, [sp, #8]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b3d      	cmp	r3, #61	; 0x3d
 800379c:	d1ed      	bne.n	800377a <_findenv_r+0x32>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	0038      	movs	r0, r7
 80037a2:	1aed      	subs	r5, r5, r3
 80037a4:	9b03      	ldr	r3, [sp, #12]
 80037a6:	10ad      	asrs	r5, r5, #2
 80037a8:	601d      	str	r5, [r3, #0]
 80037aa:	f000 fbf2 	bl	8003f92 <__env_unlock>
 80037ae:	9802      	ldr	r0, [sp, #8]
 80037b0:	3001      	adds	r0, #1
 80037b2:	e7d9      	b.n	8003768 <_findenv_r+0x20>
 80037b4:	1b9b      	subs	r3, r3, r6
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	e7e0      	b.n	800377c <_findenv_r+0x34>
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	20000008 	.word	0x20000008

080037c0 <_getenv_r>:
 80037c0:	b507      	push	{r0, r1, r2, lr}
 80037c2:	aa01      	add	r2, sp, #4
 80037c4:	f7ff ffc0 	bl	8003748 <_findenv_r>
 80037c8:	bd0e      	pop	{r1, r2, r3, pc}
	...

080037cc <__gettzinfo>:
 80037cc:	4800      	ldr	r0, [pc, #0]	; (80037d0 <__gettzinfo+0x4>)
 80037ce:	4770      	bx	lr
 80037d0:	2000007c 	.word	0x2000007c

080037d4 <__malloc_lock>:
 80037d4:	4770      	bx	lr

080037d6 <__malloc_unlock>:
 80037d6:	4770      	bx	lr

080037d8 <__ssputs_r>:
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	688e      	ldr	r6, [r1, #8]
 80037dc:	b085      	sub	sp, #20
 80037de:	0007      	movs	r7, r0
 80037e0:	000c      	movs	r4, r1
 80037e2:	9203      	str	r2, [sp, #12]
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	429e      	cmp	r6, r3
 80037e8:	d839      	bhi.n	800385e <__ssputs_r+0x86>
 80037ea:	2390      	movs	r3, #144	; 0x90
 80037ec:	898a      	ldrh	r2, [r1, #12]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	421a      	tst	r2, r3
 80037f2:	d034      	beq.n	800385e <__ssputs_r+0x86>
 80037f4:	2503      	movs	r5, #3
 80037f6:	6909      	ldr	r1, [r1, #16]
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	1a5b      	subs	r3, r3, r1
 80037fc:	9302      	str	r3, [sp, #8]
 80037fe:	6963      	ldr	r3, [r4, #20]
 8003800:	9802      	ldr	r0, [sp, #8]
 8003802:	435d      	muls	r5, r3
 8003804:	0feb      	lsrs	r3, r5, #31
 8003806:	195d      	adds	r5, r3, r5
 8003808:	9b01      	ldr	r3, [sp, #4]
 800380a:	106d      	asrs	r5, r5, #1
 800380c:	3301      	adds	r3, #1
 800380e:	181b      	adds	r3, r3, r0
 8003810:	42ab      	cmp	r3, r5
 8003812:	d900      	bls.n	8003816 <__ssputs_r+0x3e>
 8003814:	001d      	movs	r5, r3
 8003816:	0553      	lsls	r3, r2, #21
 8003818:	d532      	bpl.n	8003880 <__ssputs_r+0xa8>
 800381a:	0029      	movs	r1, r5
 800381c:	0038      	movs	r0, r7
 800381e:	f7ff fcaf 	bl	8003180 <_malloc_r>
 8003822:	1e06      	subs	r6, r0, #0
 8003824:	d109      	bne.n	800383a <__ssputs_r+0x62>
 8003826:	230c      	movs	r3, #12
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	2340      	movs	r3, #64	; 0x40
 800382c:	2001      	movs	r0, #1
 800382e:	89a2      	ldrh	r2, [r4, #12]
 8003830:	4240      	negs	r0, r0
 8003832:	4313      	orrs	r3, r2
 8003834:	81a3      	strh	r3, [r4, #12]
 8003836:	b005      	add	sp, #20
 8003838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800383a:	9a02      	ldr	r2, [sp, #8]
 800383c:	6921      	ldr	r1, [r4, #16]
 800383e:	f000 fbd8 	bl	8003ff2 <memcpy>
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <__ssputs_r+0xc0>)
 8003846:	401a      	ands	r2, r3
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	4313      	orrs	r3, r2
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	9b02      	ldr	r3, [sp, #8]
 8003850:	6126      	str	r6, [r4, #16]
 8003852:	18f6      	adds	r6, r6, r3
 8003854:	6026      	str	r6, [r4, #0]
 8003856:	6165      	str	r5, [r4, #20]
 8003858:	9e01      	ldr	r6, [sp, #4]
 800385a:	1aed      	subs	r5, r5, r3
 800385c:	60a5      	str	r5, [r4, #8]
 800385e:	9b01      	ldr	r3, [sp, #4]
 8003860:	42b3      	cmp	r3, r6
 8003862:	d200      	bcs.n	8003866 <__ssputs_r+0x8e>
 8003864:	001e      	movs	r6, r3
 8003866:	0032      	movs	r2, r6
 8003868:	9903      	ldr	r1, [sp, #12]
 800386a:	6820      	ldr	r0, [r4, #0]
 800386c:	f000 fbca 	bl	8004004 <memmove>
 8003870:	68a3      	ldr	r3, [r4, #8]
 8003872:	2000      	movs	r0, #0
 8003874:	1b9b      	subs	r3, r3, r6
 8003876:	60a3      	str	r3, [r4, #8]
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	199e      	adds	r6, r3, r6
 800387c:	6026      	str	r6, [r4, #0]
 800387e:	e7da      	b.n	8003836 <__ssputs_r+0x5e>
 8003880:	002a      	movs	r2, r5
 8003882:	0038      	movs	r0, r7
 8003884:	f000 fbd0 	bl	8004028 <_realloc_r>
 8003888:	1e06      	subs	r6, r0, #0
 800388a:	d1e0      	bne.n	800384e <__ssputs_r+0x76>
 800388c:	6921      	ldr	r1, [r4, #16]
 800388e:	0038      	movs	r0, r7
 8003890:	f7ff fc2c 	bl	80030ec <_free_r>
 8003894:	e7c7      	b.n	8003826 <__ssputs_r+0x4e>
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	fffffb7f 	.word	0xfffffb7f

0800389c <_svfiprintf_r>:
 800389c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800389e:	b09f      	sub	sp, #124	; 0x7c
 80038a0:	9002      	str	r0, [sp, #8]
 80038a2:	9305      	str	r3, [sp, #20]
 80038a4:	898b      	ldrh	r3, [r1, #12]
 80038a6:	000f      	movs	r7, r1
 80038a8:	0016      	movs	r6, r2
 80038aa:	061b      	lsls	r3, r3, #24
 80038ac:	d511      	bpl.n	80038d2 <_svfiprintf_r+0x36>
 80038ae:	690b      	ldr	r3, [r1, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10e      	bne.n	80038d2 <_svfiprintf_r+0x36>
 80038b4:	2140      	movs	r1, #64	; 0x40
 80038b6:	f7ff fc63 	bl	8003180 <_malloc_r>
 80038ba:	6038      	str	r0, [r7, #0]
 80038bc:	6138      	str	r0, [r7, #16]
 80038be:	2800      	cmp	r0, #0
 80038c0:	d105      	bne.n	80038ce <_svfiprintf_r+0x32>
 80038c2:	230c      	movs	r3, #12
 80038c4:	9a02      	ldr	r2, [sp, #8]
 80038c6:	3801      	subs	r0, #1
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	b01f      	add	sp, #124	; 0x7c
 80038cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ce:	2340      	movs	r3, #64	; 0x40
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	2300      	movs	r3, #0
 80038d4:	ad06      	add	r5, sp, #24
 80038d6:	616b      	str	r3, [r5, #20]
 80038d8:	3320      	adds	r3, #32
 80038da:	766b      	strb	r3, [r5, #25]
 80038dc:	3310      	adds	r3, #16
 80038de:	76ab      	strb	r3, [r5, #26]
 80038e0:	0034      	movs	r4, r6
 80038e2:	7823      	ldrb	r3, [r4, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d147      	bne.n	8003978 <_svfiprintf_r+0xdc>
 80038e8:	1ba3      	subs	r3, r4, r6
 80038ea:	9304      	str	r3, [sp, #16]
 80038ec:	d00d      	beq.n	800390a <_svfiprintf_r+0x6e>
 80038ee:	1ba3      	subs	r3, r4, r6
 80038f0:	0032      	movs	r2, r6
 80038f2:	0039      	movs	r1, r7
 80038f4:	9802      	ldr	r0, [sp, #8]
 80038f6:	f7ff ff6f 	bl	80037d8 <__ssputs_r>
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	d100      	bne.n	8003900 <_svfiprintf_r+0x64>
 80038fe:	e0b5      	b.n	8003a6c <_svfiprintf_r+0x1d0>
 8003900:	696a      	ldr	r2, [r5, #20]
 8003902:	9b04      	ldr	r3, [sp, #16]
 8003904:	4694      	mov	ip, r2
 8003906:	4463      	add	r3, ip
 8003908:	616b      	str	r3, [r5, #20]
 800390a:	7823      	ldrb	r3, [r4, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d100      	bne.n	8003912 <_svfiprintf_r+0x76>
 8003910:	e0ac      	b.n	8003a6c <_svfiprintf_r+0x1d0>
 8003912:	2201      	movs	r2, #1
 8003914:	2300      	movs	r3, #0
 8003916:	4252      	negs	r2, r2
 8003918:	606a      	str	r2, [r5, #4]
 800391a:	a902      	add	r1, sp, #8
 800391c:	3254      	adds	r2, #84	; 0x54
 800391e:	1852      	adds	r2, r2, r1
 8003920:	3401      	adds	r4, #1
 8003922:	602b      	str	r3, [r5, #0]
 8003924:	60eb      	str	r3, [r5, #12]
 8003926:	60ab      	str	r3, [r5, #8]
 8003928:	7013      	strb	r3, [r2, #0]
 800392a:	65ab      	str	r3, [r5, #88]	; 0x58
 800392c:	4e58      	ldr	r6, [pc, #352]	; (8003a90 <_svfiprintf_r+0x1f4>)
 800392e:	2205      	movs	r2, #5
 8003930:	7821      	ldrb	r1, [r4, #0]
 8003932:	0030      	movs	r0, r6
 8003934:	f000 fb52 	bl	8003fdc <memchr>
 8003938:	1c62      	adds	r2, r4, #1
 800393a:	2800      	cmp	r0, #0
 800393c:	d120      	bne.n	8003980 <_svfiprintf_r+0xe4>
 800393e:	6829      	ldr	r1, [r5, #0]
 8003940:	06cb      	lsls	r3, r1, #27
 8003942:	d504      	bpl.n	800394e <_svfiprintf_r+0xb2>
 8003944:	2353      	movs	r3, #83	; 0x53
 8003946:	ae02      	add	r6, sp, #8
 8003948:	3020      	adds	r0, #32
 800394a:	199b      	adds	r3, r3, r6
 800394c:	7018      	strb	r0, [r3, #0]
 800394e:	070b      	lsls	r3, r1, #28
 8003950:	d504      	bpl.n	800395c <_svfiprintf_r+0xc0>
 8003952:	2353      	movs	r3, #83	; 0x53
 8003954:	202b      	movs	r0, #43	; 0x2b
 8003956:	ae02      	add	r6, sp, #8
 8003958:	199b      	adds	r3, r3, r6
 800395a:	7018      	strb	r0, [r3, #0]
 800395c:	7823      	ldrb	r3, [r4, #0]
 800395e:	2b2a      	cmp	r3, #42	; 0x2a
 8003960:	d016      	beq.n	8003990 <_svfiprintf_r+0xf4>
 8003962:	2000      	movs	r0, #0
 8003964:	210a      	movs	r1, #10
 8003966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003968:	7822      	ldrb	r2, [r4, #0]
 800396a:	3a30      	subs	r2, #48	; 0x30
 800396c:	2a09      	cmp	r2, #9
 800396e:	d955      	bls.n	8003a1c <_svfiprintf_r+0x180>
 8003970:	2800      	cmp	r0, #0
 8003972:	d015      	beq.n	80039a0 <_svfiprintf_r+0x104>
 8003974:	9309      	str	r3, [sp, #36]	; 0x24
 8003976:	e013      	b.n	80039a0 <_svfiprintf_r+0x104>
 8003978:	2b25      	cmp	r3, #37	; 0x25
 800397a:	d0b5      	beq.n	80038e8 <_svfiprintf_r+0x4c>
 800397c:	3401      	adds	r4, #1
 800397e:	e7b0      	b.n	80038e2 <_svfiprintf_r+0x46>
 8003980:	2301      	movs	r3, #1
 8003982:	1b80      	subs	r0, r0, r6
 8003984:	4083      	lsls	r3, r0
 8003986:	6829      	ldr	r1, [r5, #0]
 8003988:	0014      	movs	r4, r2
 800398a:	430b      	orrs	r3, r1
 800398c:	602b      	str	r3, [r5, #0]
 800398e:	e7cd      	b.n	800392c <_svfiprintf_r+0x90>
 8003990:	9b05      	ldr	r3, [sp, #20]
 8003992:	1d18      	adds	r0, r3, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	9005      	str	r0, [sp, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	db39      	blt.n	8003a10 <_svfiprintf_r+0x174>
 800399c:	9309      	str	r3, [sp, #36]	; 0x24
 800399e:	0014      	movs	r4, r2
 80039a0:	7823      	ldrb	r3, [r4, #0]
 80039a2:	2b2e      	cmp	r3, #46	; 0x2e
 80039a4:	d10b      	bne.n	80039be <_svfiprintf_r+0x122>
 80039a6:	7863      	ldrb	r3, [r4, #1]
 80039a8:	1c62      	adds	r2, r4, #1
 80039aa:	2b2a      	cmp	r3, #42	; 0x2a
 80039ac:	d13e      	bne.n	8003a2c <_svfiprintf_r+0x190>
 80039ae:	9b05      	ldr	r3, [sp, #20]
 80039b0:	3402      	adds	r4, #2
 80039b2:	1d1a      	adds	r2, r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	9205      	str	r2, [sp, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db34      	blt.n	8003a26 <_svfiprintf_r+0x18a>
 80039bc:	9307      	str	r3, [sp, #28]
 80039be:	4e35      	ldr	r6, [pc, #212]	; (8003a94 <_svfiprintf_r+0x1f8>)
 80039c0:	7821      	ldrb	r1, [r4, #0]
 80039c2:	2203      	movs	r2, #3
 80039c4:	0030      	movs	r0, r6
 80039c6:	f000 fb09 	bl	8003fdc <memchr>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d006      	beq.n	80039dc <_svfiprintf_r+0x140>
 80039ce:	2340      	movs	r3, #64	; 0x40
 80039d0:	1b80      	subs	r0, r0, r6
 80039d2:	4083      	lsls	r3, r0
 80039d4:	682a      	ldr	r2, [r5, #0]
 80039d6:	3401      	adds	r4, #1
 80039d8:	4313      	orrs	r3, r2
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	7821      	ldrb	r1, [r4, #0]
 80039de:	2206      	movs	r2, #6
 80039e0:	482d      	ldr	r0, [pc, #180]	; (8003a98 <_svfiprintf_r+0x1fc>)
 80039e2:	1c66      	adds	r6, r4, #1
 80039e4:	7629      	strb	r1, [r5, #24]
 80039e6:	f000 faf9 	bl	8003fdc <memchr>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d046      	beq.n	8003a7c <_svfiprintf_r+0x1e0>
 80039ee:	4b2b      	ldr	r3, [pc, #172]	; (8003a9c <_svfiprintf_r+0x200>)
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d12f      	bne.n	8003a54 <_svfiprintf_r+0x1b8>
 80039f4:	6829      	ldr	r1, [r5, #0]
 80039f6:	9b05      	ldr	r3, [sp, #20]
 80039f8:	2207      	movs	r2, #7
 80039fa:	05c9      	lsls	r1, r1, #23
 80039fc:	d528      	bpl.n	8003a50 <_svfiprintf_r+0x1b4>
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	4393      	bics	r3, r2
 8003a02:	3308      	adds	r3, #8
 8003a04:	9305      	str	r3, [sp, #20]
 8003a06:	696b      	ldr	r3, [r5, #20]
 8003a08:	9a03      	ldr	r2, [sp, #12]
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	616b      	str	r3, [r5, #20]
 8003a0e:	e767      	b.n	80038e0 <_svfiprintf_r+0x44>
 8003a10:	425b      	negs	r3, r3
 8003a12:	60eb      	str	r3, [r5, #12]
 8003a14:	2302      	movs	r3, #2
 8003a16:	430b      	orrs	r3, r1
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	e7c0      	b.n	800399e <_svfiprintf_r+0x102>
 8003a1c:	434b      	muls	r3, r1
 8003a1e:	3401      	adds	r4, #1
 8003a20:	189b      	adds	r3, r3, r2
 8003a22:	2001      	movs	r0, #1
 8003a24:	e7a0      	b.n	8003968 <_svfiprintf_r+0xcc>
 8003a26:	2301      	movs	r3, #1
 8003a28:	425b      	negs	r3, r3
 8003a2a:	e7c7      	b.n	80039bc <_svfiprintf_r+0x120>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	0014      	movs	r4, r2
 8003a30:	200a      	movs	r0, #10
 8003a32:	001a      	movs	r2, r3
 8003a34:	606b      	str	r3, [r5, #4]
 8003a36:	7821      	ldrb	r1, [r4, #0]
 8003a38:	3930      	subs	r1, #48	; 0x30
 8003a3a:	2909      	cmp	r1, #9
 8003a3c:	d903      	bls.n	8003a46 <_svfiprintf_r+0x1aa>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0bd      	beq.n	80039be <_svfiprintf_r+0x122>
 8003a42:	9207      	str	r2, [sp, #28]
 8003a44:	e7bb      	b.n	80039be <_svfiprintf_r+0x122>
 8003a46:	4342      	muls	r2, r0
 8003a48:	3401      	adds	r4, #1
 8003a4a:	1852      	adds	r2, r2, r1
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e7f2      	b.n	8003a36 <_svfiprintf_r+0x19a>
 8003a50:	3307      	adds	r3, #7
 8003a52:	e7d5      	b.n	8003a00 <_svfiprintf_r+0x164>
 8003a54:	ab05      	add	r3, sp, #20
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	003a      	movs	r2, r7
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <_svfiprintf_r+0x204>)
 8003a5c:	0029      	movs	r1, r5
 8003a5e:	9802      	ldr	r0, [sp, #8]
 8003a60:	e000      	b.n	8003a64 <_svfiprintf_r+0x1c8>
 8003a62:	bf00      	nop
 8003a64:	9003      	str	r0, [sp, #12]
 8003a66:	9b03      	ldr	r3, [sp, #12]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	d1cc      	bne.n	8003a06 <_svfiprintf_r+0x16a>
 8003a6c:	89bb      	ldrh	r3, [r7, #12]
 8003a6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003a70:	065b      	lsls	r3, r3, #25
 8003a72:	d400      	bmi.n	8003a76 <_svfiprintf_r+0x1da>
 8003a74:	e729      	b.n	80038ca <_svfiprintf_r+0x2e>
 8003a76:	2001      	movs	r0, #1
 8003a78:	4240      	negs	r0, r0
 8003a7a:	e726      	b.n	80038ca <_svfiprintf_r+0x2e>
 8003a7c:	ab05      	add	r3, sp, #20
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	003a      	movs	r2, r7
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <_svfiprintf_r+0x204>)
 8003a84:	0029      	movs	r1, r5
 8003a86:	9802      	ldr	r0, [sp, #8]
 8003a88:	f000 f87a 	bl	8003b80 <_printf_i>
 8003a8c:	e7ea      	b.n	8003a64 <_svfiprintf_r+0x1c8>
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	08004af8 	.word	0x08004af8
 8003a94:	08004afe 	.word	0x08004afe
 8003a98:	08004b02 	.word	0x08004b02
 8003a9c:	00000000 	.word	0x00000000
 8003aa0:	080037d9 	.word	0x080037d9

08003aa4 <_printf_common>:
 8003aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aa6:	0015      	movs	r5, r2
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	688a      	ldr	r2, [r1, #8]
 8003aac:	690b      	ldr	r3, [r1, #16]
 8003aae:	9000      	str	r0, [sp, #0]
 8003ab0:	000c      	movs	r4, r1
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	da00      	bge.n	8003ab8 <_printf_common+0x14>
 8003ab6:	0013      	movs	r3, r2
 8003ab8:	0022      	movs	r2, r4
 8003aba:	602b      	str	r3, [r5, #0]
 8003abc:	3243      	adds	r2, #67	; 0x43
 8003abe:	7812      	ldrb	r2, [r2, #0]
 8003ac0:	2a00      	cmp	r2, #0
 8003ac2:	d001      	beq.n	8003ac8 <_printf_common+0x24>
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	602b      	str	r3, [r5, #0]
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	069b      	lsls	r3, r3, #26
 8003acc:	d502      	bpl.n	8003ad4 <_printf_common+0x30>
 8003ace:	682b      	ldr	r3, [r5, #0]
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	602b      	str	r3, [r5, #0]
 8003ad4:	2706      	movs	r7, #6
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	401f      	ands	r7, r3
 8003ada:	d027      	beq.n	8003b2c <_printf_common+0x88>
 8003adc:	0023      	movs	r3, r4
 8003ade:	3343      	adds	r3, #67	; 0x43
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	1e5a      	subs	r2, r3, #1
 8003ae4:	4193      	sbcs	r3, r2
 8003ae6:	6822      	ldr	r2, [r4, #0]
 8003ae8:	0692      	lsls	r2, r2, #26
 8003aea:	d430      	bmi.n	8003b4e <_printf_common+0xaa>
 8003aec:	0022      	movs	r2, r4
 8003aee:	9901      	ldr	r1, [sp, #4]
 8003af0:	3243      	adds	r2, #67	; 0x43
 8003af2:	9800      	ldr	r0, [sp, #0]
 8003af4:	9e08      	ldr	r6, [sp, #32]
 8003af6:	47b0      	blx	r6
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d025      	beq.n	8003b48 <_printf_common+0xa4>
 8003afc:	2306      	movs	r3, #6
 8003afe:	6820      	ldr	r0, [r4, #0]
 8003b00:	682a      	ldr	r2, [r5, #0]
 8003b02:	68e1      	ldr	r1, [r4, #12]
 8003b04:	4003      	ands	r3, r0
 8003b06:	2500      	movs	r5, #0
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d103      	bne.n	8003b14 <_printf_common+0x70>
 8003b0c:	1a8d      	subs	r5, r1, r2
 8003b0e:	43eb      	mvns	r3, r5
 8003b10:	17db      	asrs	r3, r3, #31
 8003b12:	401d      	ands	r5, r3
 8003b14:	68a3      	ldr	r3, [r4, #8]
 8003b16:	6922      	ldr	r2, [r4, #16]
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	dd01      	ble.n	8003b20 <_printf_common+0x7c>
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	18ed      	adds	r5, r5, r3
 8003b20:	2700      	movs	r7, #0
 8003b22:	42bd      	cmp	r5, r7
 8003b24:	d120      	bne.n	8003b68 <_printf_common+0xc4>
 8003b26:	2000      	movs	r0, #0
 8003b28:	e010      	b.n	8003b4c <_printf_common+0xa8>
 8003b2a:	3701      	adds	r7, #1
 8003b2c:	68e3      	ldr	r3, [r4, #12]
 8003b2e:	682a      	ldr	r2, [r5, #0]
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	429f      	cmp	r7, r3
 8003b34:	dad2      	bge.n	8003adc <_printf_common+0x38>
 8003b36:	0022      	movs	r2, r4
 8003b38:	2301      	movs	r3, #1
 8003b3a:	3219      	adds	r2, #25
 8003b3c:	9901      	ldr	r1, [sp, #4]
 8003b3e:	9800      	ldr	r0, [sp, #0]
 8003b40:	9e08      	ldr	r6, [sp, #32]
 8003b42:	47b0      	blx	r6
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d1f0      	bne.n	8003b2a <_printf_common+0x86>
 8003b48:	2001      	movs	r0, #1
 8003b4a:	4240      	negs	r0, r0
 8003b4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b4e:	2030      	movs	r0, #48	; 0x30
 8003b50:	18e1      	adds	r1, r4, r3
 8003b52:	3143      	adds	r1, #67	; 0x43
 8003b54:	7008      	strb	r0, [r1, #0]
 8003b56:	0021      	movs	r1, r4
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	3145      	adds	r1, #69	; 0x45
 8003b5c:	7809      	ldrb	r1, [r1, #0]
 8003b5e:	18a2      	adds	r2, r4, r2
 8003b60:	3243      	adds	r2, #67	; 0x43
 8003b62:	3302      	adds	r3, #2
 8003b64:	7011      	strb	r1, [r2, #0]
 8003b66:	e7c1      	b.n	8003aec <_printf_common+0x48>
 8003b68:	0022      	movs	r2, r4
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	321a      	adds	r2, #26
 8003b6e:	9901      	ldr	r1, [sp, #4]
 8003b70:	9800      	ldr	r0, [sp, #0]
 8003b72:	9e08      	ldr	r6, [sp, #32]
 8003b74:	47b0      	blx	r6
 8003b76:	1c43      	adds	r3, r0, #1
 8003b78:	d0e6      	beq.n	8003b48 <_printf_common+0xa4>
 8003b7a:	3701      	adds	r7, #1
 8003b7c:	e7d1      	b.n	8003b22 <_printf_common+0x7e>
	...

08003b80 <_printf_i>:
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	b08b      	sub	sp, #44	; 0x2c
 8003b84:	9206      	str	r2, [sp, #24]
 8003b86:	000a      	movs	r2, r1
 8003b88:	3243      	adds	r2, #67	; 0x43
 8003b8a:	9307      	str	r3, [sp, #28]
 8003b8c:	9005      	str	r0, [sp, #20]
 8003b8e:	9204      	str	r2, [sp, #16]
 8003b90:	7e0a      	ldrb	r2, [r1, #24]
 8003b92:	000c      	movs	r4, r1
 8003b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b96:	2a6e      	cmp	r2, #110	; 0x6e
 8003b98:	d100      	bne.n	8003b9c <_printf_i+0x1c>
 8003b9a:	e08f      	b.n	8003cbc <_printf_i+0x13c>
 8003b9c:	d817      	bhi.n	8003bce <_printf_i+0x4e>
 8003b9e:	2a63      	cmp	r2, #99	; 0x63
 8003ba0:	d02c      	beq.n	8003bfc <_printf_i+0x7c>
 8003ba2:	d808      	bhi.n	8003bb6 <_printf_i+0x36>
 8003ba4:	2a00      	cmp	r2, #0
 8003ba6:	d100      	bne.n	8003baa <_printf_i+0x2a>
 8003ba8:	e099      	b.n	8003cde <_printf_i+0x15e>
 8003baa:	2a58      	cmp	r2, #88	; 0x58
 8003bac:	d054      	beq.n	8003c58 <_printf_i+0xd8>
 8003bae:	0026      	movs	r6, r4
 8003bb0:	3642      	adds	r6, #66	; 0x42
 8003bb2:	7032      	strb	r2, [r6, #0]
 8003bb4:	e029      	b.n	8003c0a <_printf_i+0x8a>
 8003bb6:	2a64      	cmp	r2, #100	; 0x64
 8003bb8:	d001      	beq.n	8003bbe <_printf_i+0x3e>
 8003bba:	2a69      	cmp	r2, #105	; 0x69
 8003bbc:	d1f7      	bne.n	8003bae <_printf_i+0x2e>
 8003bbe:	6821      	ldr	r1, [r4, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	0608      	lsls	r0, r1, #24
 8003bc4:	d523      	bpl.n	8003c0e <_printf_i+0x8e>
 8003bc6:	1d11      	adds	r1, r2, #4
 8003bc8:	6019      	str	r1, [r3, #0]
 8003bca:	6815      	ldr	r5, [r2, #0]
 8003bcc:	e025      	b.n	8003c1a <_printf_i+0x9a>
 8003bce:	2a73      	cmp	r2, #115	; 0x73
 8003bd0:	d100      	bne.n	8003bd4 <_printf_i+0x54>
 8003bd2:	e088      	b.n	8003ce6 <_printf_i+0x166>
 8003bd4:	d808      	bhi.n	8003be8 <_printf_i+0x68>
 8003bd6:	2a6f      	cmp	r2, #111	; 0x6f
 8003bd8:	d029      	beq.n	8003c2e <_printf_i+0xae>
 8003bda:	2a70      	cmp	r2, #112	; 0x70
 8003bdc:	d1e7      	bne.n	8003bae <_printf_i+0x2e>
 8003bde:	2220      	movs	r2, #32
 8003be0:	6809      	ldr	r1, [r1, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	6022      	str	r2, [r4, #0]
 8003be6:	e003      	b.n	8003bf0 <_printf_i+0x70>
 8003be8:	2a75      	cmp	r2, #117	; 0x75
 8003bea:	d020      	beq.n	8003c2e <_printf_i+0xae>
 8003bec:	2a78      	cmp	r2, #120	; 0x78
 8003bee:	d1de      	bne.n	8003bae <_printf_i+0x2e>
 8003bf0:	0022      	movs	r2, r4
 8003bf2:	2178      	movs	r1, #120	; 0x78
 8003bf4:	3245      	adds	r2, #69	; 0x45
 8003bf6:	7011      	strb	r1, [r2, #0]
 8003bf8:	4a6c      	ldr	r2, [pc, #432]	; (8003dac <_printf_i+0x22c>)
 8003bfa:	e030      	b.n	8003c5e <_printf_i+0xde>
 8003bfc:	000e      	movs	r6, r1
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	3642      	adds	r6, #66	; 0x42
 8003c02:	1d11      	adds	r1, r2, #4
 8003c04:	6019      	str	r1, [r3, #0]
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	7033      	strb	r3, [r6, #0]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e079      	b.n	8003d02 <_printf_i+0x182>
 8003c0e:	0649      	lsls	r1, r1, #25
 8003c10:	d5d9      	bpl.n	8003bc6 <_printf_i+0x46>
 8003c12:	1d11      	adds	r1, r2, #4
 8003c14:	6019      	str	r1, [r3, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	5ed5      	ldrsh	r5, [r2, r3]
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	da03      	bge.n	8003c26 <_printf_i+0xa6>
 8003c1e:	232d      	movs	r3, #45	; 0x2d
 8003c20:	9a04      	ldr	r2, [sp, #16]
 8003c22:	426d      	negs	r5, r5
 8003c24:	7013      	strb	r3, [r2, #0]
 8003c26:	4b62      	ldr	r3, [pc, #392]	; (8003db0 <_printf_i+0x230>)
 8003c28:	270a      	movs	r7, #10
 8003c2a:	9303      	str	r3, [sp, #12]
 8003c2c:	e02f      	b.n	8003c8e <_printf_i+0x10e>
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	0605      	lsls	r5, r0, #24
 8003c34:	d503      	bpl.n	8003c3e <_printf_i+0xbe>
 8003c36:	1d08      	adds	r0, r1, #4
 8003c38:	6018      	str	r0, [r3, #0]
 8003c3a:	680d      	ldr	r5, [r1, #0]
 8003c3c:	e005      	b.n	8003c4a <_printf_i+0xca>
 8003c3e:	0640      	lsls	r0, r0, #25
 8003c40:	d5f9      	bpl.n	8003c36 <_printf_i+0xb6>
 8003c42:	680d      	ldr	r5, [r1, #0]
 8003c44:	1d08      	adds	r0, r1, #4
 8003c46:	6018      	str	r0, [r3, #0]
 8003c48:	b2ad      	uxth	r5, r5
 8003c4a:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <_printf_i+0x230>)
 8003c4c:	2708      	movs	r7, #8
 8003c4e:	9303      	str	r3, [sp, #12]
 8003c50:	2a6f      	cmp	r2, #111	; 0x6f
 8003c52:	d018      	beq.n	8003c86 <_printf_i+0x106>
 8003c54:	270a      	movs	r7, #10
 8003c56:	e016      	b.n	8003c86 <_printf_i+0x106>
 8003c58:	3145      	adds	r1, #69	; 0x45
 8003c5a:	700a      	strb	r2, [r1, #0]
 8003c5c:	4a54      	ldr	r2, [pc, #336]	; (8003db0 <_printf_i+0x230>)
 8003c5e:	9203      	str	r2, [sp, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	6821      	ldr	r1, [r4, #0]
 8003c64:	1d10      	adds	r0, r2, #4
 8003c66:	6018      	str	r0, [r3, #0]
 8003c68:	6815      	ldr	r5, [r2, #0]
 8003c6a:	0608      	lsls	r0, r1, #24
 8003c6c:	d522      	bpl.n	8003cb4 <_printf_i+0x134>
 8003c6e:	07cb      	lsls	r3, r1, #31
 8003c70:	d502      	bpl.n	8003c78 <_printf_i+0xf8>
 8003c72:	2320      	movs	r3, #32
 8003c74:	4319      	orrs	r1, r3
 8003c76:	6021      	str	r1, [r4, #0]
 8003c78:	2710      	movs	r7, #16
 8003c7a:	2d00      	cmp	r5, #0
 8003c7c:	d103      	bne.n	8003c86 <_printf_i+0x106>
 8003c7e:	2320      	movs	r3, #32
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	439a      	bics	r2, r3
 8003c84:	6022      	str	r2, [r4, #0]
 8003c86:	0023      	movs	r3, r4
 8003c88:	2200      	movs	r2, #0
 8003c8a:	3343      	adds	r3, #67	; 0x43
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	60a3      	str	r3, [r4, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db5c      	blt.n	8003d50 <_printf_i+0x1d0>
 8003c96:	2204      	movs	r2, #4
 8003c98:	6821      	ldr	r1, [r4, #0]
 8003c9a:	4391      	bics	r1, r2
 8003c9c:	6021      	str	r1, [r4, #0]
 8003c9e:	2d00      	cmp	r5, #0
 8003ca0:	d158      	bne.n	8003d54 <_printf_i+0x1d4>
 8003ca2:	9e04      	ldr	r6, [sp, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d064      	beq.n	8003d72 <_printf_i+0x1f2>
 8003ca8:	0026      	movs	r6, r4
 8003caa:	9b03      	ldr	r3, [sp, #12]
 8003cac:	3642      	adds	r6, #66	; 0x42
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	7033      	strb	r3, [r6, #0]
 8003cb2:	e05e      	b.n	8003d72 <_printf_i+0x1f2>
 8003cb4:	0648      	lsls	r0, r1, #25
 8003cb6:	d5da      	bpl.n	8003c6e <_printf_i+0xee>
 8003cb8:	b2ad      	uxth	r5, r5
 8003cba:	e7d8      	b.n	8003c6e <_printf_i+0xee>
 8003cbc:	6809      	ldr	r1, [r1, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	0608      	lsls	r0, r1, #24
 8003cc2:	d505      	bpl.n	8003cd0 <_printf_i+0x150>
 8003cc4:	1d11      	adds	r1, r2, #4
 8003cc6:	6019      	str	r1, [r3, #0]
 8003cc8:	6813      	ldr	r3, [r2, #0]
 8003cca:	6962      	ldr	r2, [r4, #20]
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e006      	b.n	8003cde <_printf_i+0x15e>
 8003cd0:	0649      	lsls	r1, r1, #25
 8003cd2:	d5f7      	bpl.n	8003cc4 <_printf_i+0x144>
 8003cd4:	1d11      	adds	r1, r2, #4
 8003cd6:	6019      	str	r1, [r3, #0]
 8003cd8:	6813      	ldr	r3, [r2, #0]
 8003cda:	8aa2      	ldrh	r2, [r4, #20]
 8003cdc:	801a      	strh	r2, [r3, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9e04      	ldr	r6, [sp, #16]
 8003ce2:	6123      	str	r3, [r4, #16]
 8003ce4:	e054      	b.n	8003d90 <_printf_i+0x210>
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	1d11      	adds	r1, r2, #4
 8003cea:	6019      	str	r1, [r3, #0]
 8003cec:	6816      	ldr	r6, [r2, #0]
 8003cee:	2100      	movs	r1, #0
 8003cf0:	6862      	ldr	r2, [r4, #4]
 8003cf2:	0030      	movs	r0, r6
 8003cf4:	f000 f972 	bl	8003fdc <memchr>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d001      	beq.n	8003d00 <_printf_i+0x180>
 8003cfc:	1b80      	subs	r0, r0, r6
 8003cfe:	6060      	str	r0, [r4, #4]
 8003d00:	6863      	ldr	r3, [r4, #4]
 8003d02:	6123      	str	r3, [r4, #16]
 8003d04:	2300      	movs	r3, #0
 8003d06:	9a04      	ldr	r2, [sp, #16]
 8003d08:	7013      	strb	r3, [r2, #0]
 8003d0a:	e041      	b.n	8003d90 <_printf_i+0x210>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	0032      	movs	r2, r6
 8003d10:	9906      	ldr	r1, [sp, #24]
 8003d12:	9805      	ldr	r0, [sp, #20]
 8003d14:	9d07      	ldr	r5, [sp, #28]
 8003d16:	47a8      	blx	r5
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d043      	beq.n	8003da4 <_printf_i+0x224>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	2500      	movs	r5, #0
 8003d20:	079b      	lsls	r3, r3, #30
 8003d22:	d40f      	bmi.n	8003d44 <_printf_i+0x1c4>
 8003d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d26:	68e0      	ldr	r0, [r4, #12]
 8003d28:	4298      	cmp	r0, r3
 8003d2a:	da3d      	bge.n	8003da8 <_printf_i+0x228>
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	e03b      	b.n	8003da8 <_printf_i+0x228>
 8003d30:	0022      	movs	r2, r4
 8003d32:	2301      	movs	r3, #1
 8003d34:	3219      	adds	r2, #25
 8003d36:	9906      	ldr	r1, [sp, #24]
 8003d38:	9805      	ldr	r0, [sp, #20]
 8003d3a:	9e07      	ldr	r6, [sp, #28]
 8003d3c:	47b0      	blx	r6
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	d030      	beq.n	8003da4 <_printf_i+0x224>
 8003d42:	3501      	adds	r5, #1
 8003d44:	68e3      	ldr	r3, [r4, #12]
 8003d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	429d      	cmp	r5, r3
 8003d4c:	dbf0      	blt.n	8003d30 <_printf_i+0x1b0>
 8003d4e:	e7e9      	b.n	8003d24 <_printf_i+0x1a4>
 8003d50:	2d00      	cmp	r5, #0
 8003d52:	d0a9      	beq.n	8003ca8 <_printf_i+0x128>
 8003d54:	9e04      	ldr	r6, [sp, #16]
 8003d56:	0028      	movs	r0, r5
 8003d58:	0039      	movs	r1, r7
 8003d5a:	f7fc fa77 	bl	800024c <__aeabi_uidivmod>
 8003d5e:	9b03      	ldr	r3, [sp, #12]
 8003d60:	3e01      	subs	r6, #1
 8003d62:	5c5b      	ldrb	r3, [r3, r1]
 8003d64:	0028      	movs	r0, r5
 8003d66:	7033      	strb	r3, [r6, #0]
 8003d68:	0039      	movs	r1, r7
 8003d6a:	f7fc f9e9 	bl	8000140 <__udivsi3>
 8003d6e:	1e05      	subs	r5, r0, #0
 8003d70:	d1f1      	bne.n	8003d56 <_printf_i+0x1d6>
 8003d72:	2f08      	cmp	r7, #8
 8003d74:	d109      	bne.n	8003d8a <_printf_i+0x20a>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	07db      	lsls	r3, r3, #31
 8003d7a:	d506      	bpl.n	8003d8a <_printf_i+0x20a>
 8003d7c:	6863      	ldr	r3, [r4, #4]
 8003d7e:	6922      	ldr	r2, [r4, #16]
 8003d80:	4293      	cmp	r3, r2
 8003d82:	dc02      	bgt.n	8003d8a <_printf_i+0x20a>
 8003d84:	2330      	movs	r3, #48	; 0x30
 8003d86:	3e01      	subs	r6, #1
 8003d88:	7033      	strb	r3, [r6, #0]
 8003d8a:	9b04      	ldr	r3, [sp, #16]
 8003d8c:	1b9b      	subs	r3, r3, r6
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	9b07      	ldr	r3, [sp, #28]
 8003d92:	aa09      	add	r2, sp, #36	; 0x24
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	0021      	movs	r1, r4
 8003d98:	9b06      	ldr	r3, [sp, #24]
 8003d9a:	9805      	ldr	r0, [sp, #20]
 8003d9c:	f7ff fe82 	bl	8003aa4 <_printf_common>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d1b3      	bne.n	8003d0c <_printf_i+0x18c>
 8003da4:	2001      	movs	r0, #1
 8003da6:	4240      	negs	r0, r0
 8003da8:	b00b      	add	sp, #44	; 0x2c
 8003daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dac:	08004b1a 	.word	0x08004b1a
 8003db0:	08004b09 	.word	0x08004b09

08003db4 <siscanf>:
 8003db4:	b40e      	push	{r1, r2, r3}
 8003db6:	2381      	movs	r3, #129	; 0x81
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	b09d      	sub	sp, #116	; 0x74
 8003dbc:	ac02      	add	r4, sp, #8
 8003dbe:	ad21      	add	r5, sp, #132	; 0x84
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	cd40      	ldmia	r5!, {r6}
 8003dc4:	81a3      	strh	r3, [r4, #12]
 8003dc6:	9002      	str	r0, [sp, #8]
 8003dc8:	9006      	str	r0, [sp, #24]
 8003dca:	f7fc f99d 	bl	8000108 <strlen>
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <siscanf+0x48>)
 8003dd0:	6060      	str	r0, [r4, #4]
 8003dd2:	6263      	str	r3, [r4, #36]	; 0x24
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6160      	str	r0, [r4, #20]
 8003dd8:	4809      	ldr	r0, [pc, #36]	; (8003e00 <siscanf+0x4c>)
 8003dda:	6363      	str	r3, [r4, #52]	; 0x34
 8003ddc:	64a3      	str	r3, [r4, #72]	; 0x48
 8003dde:	3b01      	subs	r3, #1
 8003de0:	81e3      	strh	r3, [r4, #14]
 8003de2:	0032      	movs	r2, r6
 8003de4:	002b      	movs	r3, r5
 8003de6:	0021      	movs	r1, r4
 8003de8:	6800      	ldr	r0, [r0, #0]
 8003dea:	9501      	str	r5, [sp, #4]
 8003dec:	f000 f99e 	bl	800412c <__ssvfiscanf_r>
 8003df0:	b01d      	add	sp, #116	; 0x74
 8003df2:	bc70      	pop	{r4, r5, r6}
 8003df4:	bc08      	pop	{r3}
 8003df6:	b003      	add	sp, #12
 8003df8:	4718      	bx	r3
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	08003e05 	.word	0x08003e05
 8003e00:	20000010 	.word	0x20000010

08003e04 <__seofread>:
 8003e04:	2000      	movs	r0, #0
 8003e06:	4770      	bx	lr

08003e08 <strcpy>:
 8003e08:	1c03      	adds	r3, r0, #0
 8003e0a:	780a      	ldrb	r2, [r1, #0]
 8003e0c:	3101      	adds	r1, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	2a00      	cmp	r2, #0
 8003e14:	d1f9      	bne.n	8003e0a <strcpy+0x2>
 8003e16:	4770      	bx	lr

08003e18 <strncmp>:
 8003e18:	2300      	movs	r3, #0
 8003e1a:	b530      	push	{r4, r5, lr}
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d00a      	beq.n	8003e36 <strncmp+0x1e>
 8003e20:	3a01      	subs	r2, #1
 8003e22:	5cc4      	ldrb	r4, [r0, r3]
 8003e24:	5ccd      	ldrb	r5, [r1, r3]
 8003e26:	42ac      	cmp	r4, r5
 8003e28:	d104      	bne.n	8003e34 <strncmp+0x1c>
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d002      	beq.n	8003e34 <strncmp+0x1c>
 8003e2e:	3301      	adds	r3, #1
 8003e30:	2c00      	cmp	r4, #0
 8003e32:	d1f6      	bne.n	8003e22 <strncmp+0xa>
 8003e34:	1b63      	subs	r3, r4, r5
 8003e36:	0018      	movs	r0, r3
 8003e38:	bd30      	pop	{r4, r5, pc}

08003e3a <_strtoul_l.isra.0>:
 8003e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3c:	001f      	movs	r7, r3
 8003e3e:	000e      	movs	r6, r1
 8003e40:	b087      	sub	sp, #28
 8003e42:	9005      	str	r0, [sp, #20]
 8003e44:	9103      	str	r1, [sp, #12]
 8003e46:	9201      	str	r2, [sp, #4]
 8003e48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003e4a:	7834      	ldrb	r4, [r6, #0]
 8003e4c:	f000 f8a2 	bl	8003f94 <__locale_ctype_ptr_l>
 8003e50:	2208      	movs	r2, #8
 8003e52:	1900      	adds	r0, r0, r4
 8003e54:	7843      	ldrb	r3, [r0, #1]
 8003e56:	1c75      	adds	r5, r6, #1
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d10c      	bne.n	8003e76 <_strtoul_l.isra.0+0x3c>
 8003e5c:	2c2d      	cmp	r4, #45	; 0x2d
 8003e5e:	d10c      	bne.n	8003e7a <_strtoul_l.isra.0+0x40>
 8003e60:	3301      	adds	r3, #1
 8003e62:	782c      	ldrb	r4, [r5, #0]
 8003e64:	9302      	str	r3, [sp, #8]
 8003e66:	1cb5      	adds	r5, r6, #2
 8003e68:	2f00      	cmp	r7, #0
 8003e6a:	d00c      	beq.n	8003e86 <_strtoul_l.isra.0+0x4c>
 8003e6c:	2f10      	cmp	r7, #16
 8003e6e:	d114      	bne.n	8003e9a <_strtoul_l.isra.0+0x60>
 8003e70:	2c30      	cmp	r4, #48	; 0x30
 8003e72:	d00a      	beq.n	8003e8a <_strtoul_l.isra.0+0x50>
 8003e74:	e011      	b.n	8003e9a <_strtoul_l.isra.0+0x60>
 8003e76:	002e      	movs	r6, r5
 8003e78:	e7e6      	b.n	8003e48 <_strtoul_l.isra.0+0xe>
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	2c2b      	cmp	r4, #43	; 0x2b
 8003e7e:	d1f3      	bne.n	8003e68 <_strtoul_l.isra.0+0x2e>
 8003e80:	782c      	ldrb	r4, [r5, #0]
 8003e82:	1cb5      	adds	r5, r6, #2
 8003e84:	e7f0      	b.n	8003e68 <_strtoul_l.isra.0+0x2e>
 8003e86:	2c30      	cmp	r4, #48	; 0x30
 8003e88:	d12f      	bne.n	8003eea <_strtoul_l.isra.0+0xb0>
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	782b      	ldrb	r3, [r5, #0]
 8003e8e:	4393      	bics	r3, r2
 8003e90:	2b58      	cmp	r3, #88	; 0x58
 8003e92:	d154      	bne.n	8003f3e <_strtoul_l.isra.0+0x104>
 8003e94:	2710      	movs	r7, #16
 8003e96:	786c      	ldrb	r4, [r5, #1]
 8003e98:	3502      	adds	r5, #2
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	0039      	movs	r1, r7
 8003e9e:	4240      	negs	r0, r0
 8003ea0:	f7fc f94e 	bl	8000140 <__udivsi3>
 8003ea4:	0006      	movs	r6, r0
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	0039      	movs	r1, r7
 8003eaa:	4240      	negs	r0, r0
 8003eac:	f7fc f9ce 	bl	800024c <__aeabi_uidivmod>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9104      	str	r1, [sp, #16]
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	0018      	movs	r0, r3
 8003eba:	468c      	mov	ip, r1
 8003ebc:	4252      	negs	r2, r2
 8003ebe:	0021      	movs	r1, r4
 8003ec0:	3930      	subs	r1, #48	; 0x30
 8003ec2:	2909      	cmp	r1, #9
 8003ec4:	d813      	bhi.n	8003eee <_strtoul_l.isra.0+0xb4>
 8003ec6:	000c      	movs	r4, r1
 8003ec8:	42a7      	cmp	r7, r4
 8003eca:	dd1e      	ble.n	8003f0a <_strtoul_l.isra.0+0xd0>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db1a      	blt.n	8003f06 <_strtoul_l.isra.0+0xcc>
 8003ed0:	0013      	movs	r3, r2
 8003ed2:	4286      	cmp	r6, r0
 8003ed4:	d306      	bcc.n	8003ee4 <_strtoul_l.isra.0+0xaa>
 8003ed6:	d102      	bne.n	8003ede <_strtoul_l.isra.0+0xa4>
 8003ed8:	9904      	ldr	r1, [sp, #16]
 8003eda:	42a1      	cmp	r1, r4
 8003edc:	db02      	blt.n	8003ee4 <_strtoul_l.isra.0+0xaa>
 8003ede:	4663      	mov	r3, ip
 8003ee0:	4378      	muls	r0, r7
 8003ee2:	1820      	adds	r0, r4, r0
 8003ee4:	782c      	ldrb	r4, [r5, #0]
 8003ee6:	3501      	adds	r5, #1
 8003ee8:	e7e9      	b.n	8003ebe <_strtoul_l.isra.0+0x84>
 8003eea:	270a      	movs	r7, #10
 8003eec:	e7d5      	b.n	8003e9a <_strtoul_l.isra.0+0x60>
 8003eee:	0021      	movs	r1, r4
 8003ef0:	3941      	subs	r1, #65	; 0x41
 8003ef2:	2919      	cmp	r1, #25
 8003ef4:	d801      	bhi.n	8003efa <_strtoul_l.isra.0+0xc0>
 8003ef6:	3c37      	subs	r4, #55	; 0x37
 8003ef8:	e7e6      	b.n	8003ec8 <_strtoul_l.isra.0+0x8e>
 8003efa:	0021      	movs	r1, r4
 8003efc:	3961      	subs	r1, #97	; 0x61
 8003efe:	2919      	cmp	r1, #25
 8003f00:	d803      	bhi.n	8003f0a <_strtoul_l.isra.0+0xd0>
 8003f02:	3c57      	subs	r4, #87	; 0x57
 8003f04:	e7e0      	b.n	8003ec8 <_strtoul_l.isra.0+0x8e>
 8003f06:	0013      	movs	r3, r2
 8003f08:	e7ec      	b.n	8003ee4 <_strtoul_l.isra.0+0xaa>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	da09      	bge.n	8003f22 <_strtoul_l.isra.0+0xe8>
 8003f0e:	2322      	movs	r3, #34	; 0x22
 8003f10:	2001      	movs	r0, #1
 8003f12:	9a05      	ldr	r2, [sp, #20]
 8003f14:	4240      	negs	r0, r0
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	9b01      	ldr	r3, [sp, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <_strtoul_l.isra.0+0xfc>
 8003f1e:	b007      	add	sp, #28
 8003f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f22:	9a02      	ldr	r2, [sp, #8]
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	d000      	beq.n	8003f2a <_strtoul_l.isra.0+0xf0>
 8003f28:	4240      	negs	r0, r0
 8003f2a:	9a01      	ldr	r2, [sp, #4]
 8003f2c:	2a00      	cmp	r2, #0
 8003f2e:	d0f6      	beq.n	8003f1e <_strtoul_l.isra.0+0xe4>
 8003f30:	9a03      	ldr	r2, [sp, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d000      	beq.n	8003f38 <_strtoul_l.isra.0+0xfe>
 8003f36:	1e6a      	subs	r2, r5, #1
 8003f38:	9b01      	ldr	r3, [sp, #4]
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e7ef      	b.n	8003f1e <_strtoul_l.isra.0+0xe4>
 8003f3e:	2430      	movs	r4, #48	; 0x30
 8003f40:	2f00      	cmp	r7, #0
 8003f42:	d1aa      	bne.n	8003e9a <_strtoul_l.isra.0+0x60>
 8003f44:	3708      	adds	r7, #8
 8003f46:	e7a8      	b.n	8003e9a <_strtoul_l.isra.0+0x60>

08003f48 <_strtoul_r>:
 8003f48:	b513      	push	{r0, r1, r4, lr}
 8003f4a:	4c05      	ldr	r4, [pc, #20]	; (8003f60 <_strtoul_r+0x18>)
 8003f4c:	6824      	ldr	r4, [r4, #0]
 8003f4e:	6a24      	ldr	r4, [r4, #32]
 8003f50:	2c00      	cmp	r4, #0
 8003f52:	d100      	bne.n	8003f56 <_strtoul_r+0xe>
 8003f54:	4c03      	ldr	r4, [pc, #12]	; (8003f64 <_strtoul_r+0x1c>)
 8003f56:	9400      	str	r4, [sp, #0]
 8003f58:	f7ff ff6f 	bl	8003e3a <_strtoul_l.isra.0>
 8003f5c:	bd16      	pop	{r1, r2, r4, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	20000010 	.word	0x20000010
 8003f64:	200000bc 	.word	0x200000bc

08003f68 <strtoul>:
 8003f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f6a:	0013      	movs	r3, r2
 8003f6c:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <strtoul+0x20>)
 8003f6e:	0005      	movs	r5, r0
 8003f70:	6810      	ldr	r0, [r2, #0]
 8003f72:	6a04      	ldr	r4, [r0, #32]
 8003f74:	2c00      	cmp	r4, #0
 8003f76:	d100      	bne.n	8003f7a <strtoul+0x12>
 8003f78:	4c04      	ldr	r4, [pc, #16]	; (8003f8c <strtoul+0x24>)
 8003f7a:	000a      	movs	r2, r1
 8003f7c:	9400      	str	r4, [sp, #0]
 8003f7e:	0029      	movs	r1, r5
 8003f80:	f7ff ff5b 	bl	8003e3a <_strtoul_l.isra.0>
 8003f84:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	20000010 	.word	0x20000010
 8003f8c:	200000bc 	.word	0x200000bc

08003f90 <__env_lock>:
 8003f90:	4770      	bx	lr

08003f92 <__env_unlock>:
 8003f92:	4770      	bx	lr

08003f94 <__locale_ctype_ptr_l>:
 8003f94:	30ec      	adds	r0, #236	; 0xec
 8003f96:	6800      	ldr	r0, [r0, #0]
 8003f98:	4770      	bx	lr
	...

08003f9c <__locale_ctype_ptr>:
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <__locale_ctype_ptr+0x14>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d100      	bne.n	8003fa8 <__locale_ctype_ptr+0xc>
 8003fa6:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <__locale_ctype_ptr+0x18>)
 8003fa8:	33ec      	adds	r3, #236	; 0xec
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	4770      	bx	lr
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	20000010 	.word	0x20000010
 8003fb4:	200000bc 	.word	0x200000bc

08003fb8 <__ascii_mbtowc>:
 8003fb8:	b082      	sub	sp, #8
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d100      	bne.n	8003fc0 <__ascii_mbtowc+0x8>
 8003fbe:	a901      	add	r1, sp, #4
 8003fc0:	1e10      	subs	r0, r2, #0
 8003fc2:	d006      	beq.n	8003fd2 <__ascii_mbtowc+0x1a>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d006      	beq.n	8003fd6 <__ascii_mbtowc+0x1e>
 8003fc8:	7813      	ldrb	r3, [r2, #0]
 8003fca:	600b      	str	r3, [r1, #0]
 8003fcc:	7810      	ldrb	r0, [r2, #0]
 8003fce:	1e43      	subs	r3, r0, #1
 8003fd0:	4198      	sbcs	r0, r3
 8003fd2:	b002      	add	sp, #8
 8003fd4:	4770      	bx	lr
 8003fd6:	2002      	movs	r0, #2
 8003fd8:	4240      	negs	r0, r0
 8003fda:	e7fa      	b.n	8003fd2 <__ascii_mbtowc+0x1a>

08003fdc <memchr>:
 8003fdc:	b2c9      	uxtb	r1, r1
 8003fde:	1882      	adds	r2, r0, r2
 8003fe0:	4290      	cmp	r0, r2
 8003fe2:	d101      	bne.n	8003fe8 <memchr+0xc>
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	4770      	bx	lr
 8003fe8:	7803      	ldrb	r3, [r0, #0]
 8003fea:	428b      	cmp	r3, r1
 8003fec:	d0fb      	beq.n	8003fe6 <memchr+0xa>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	e7f6      	b.n	8003fe0 <memchr+0x4>

08003ff2 <memcpy>:
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d100      	bne.n	8003ffc <memcpy+0xa>
 8003ffa:	bd10      	pop	{r4, pc}
 8003ffc:	5ccc      	ldrb	r4, [r1, r3]
 8003ffe:	54c4      	strb	r4, [r0, r3]
 8004000:	3301      	adds	r3, #1
 8004002:	e7f8      	b.n	8003ff6 <memcpy+0x4>

08004004 <memmove>:
 8004004:	b510      	push	{r4, lr}
 8004006:	4288      	cmp	r0, r1
 8004008:	d902      	bls.n	8004010 <memmove+0xc>
 800400a:	188b      	adds	r3, r1, r2
 800400c:	4298      	cmp	r0, r3
 800400e:	d308      	bcc.n	8004022 <memmove+0x1e>
 8004010:	2300      	movs	r3, #0
 8004012:	429a      	cmp	r2, r3
 8004014:	d007      	beq.n	8004026 <memmove+0x22>
 8004016:	5ccc      	ldrb	r4, [r1, r3]
 8004018:	54c4      	strb	r4, [r0, r3]
 800401a:	3301      	adds	r3, #1
 800401c:	e7f9      	b.n	8004012 <memmove+0xe>
 800401e:	5c8b      	ldrb	r3, [r1, r2]
 8004020:	5483      	strb	r3, [r0, r2]
 8004022:	3a01      	subs	r2, #1
 8004024:	d2fb      	bcs.n	800401e <memmove+0x1a>
 8004026:	bd10      	pop	{r4, pc}

08004028 <_realloc_r>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	0007      	movs	r7, r0
 800402c:	000d      	movs	r5, r1
 800402e:	0016      	movs	r6, r2
 8004030:	2900      	cmp	r1, #0
 8004032:	d105      	bne.n	8004040 <_realloc_r+0x18>
 8004034:	0011      	movs	r1, r2
 8004036:	f7ff f8a3 	bl	8003180 <_malloc_r>
 800403a:	0004      	movs	r4, r0
 800403c:	0020      	movs	r0, r4
 800403e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004040:	2a00      	cmp	r2, #0
 8004042:	d103      	bne.n	800404c <_realloc_r+0x24>
 8004044:	f7ff f852 	bl	80030ec <_free_r>
 8004048:	0034      	movs	r4, r6
 800404a:	e7f7      	b.n	800403c <_realloc_r+0x14>
 800404c:	f000 fc6a 	bl	8004924 <_malloc_usable_size_r>
 8004050:	002c      	movs	r4, r5
 8004052:	4286      	cmp	r6, r0
 8004054:	d9f2      	bls.n	800403c <_realloc_r+0x14>
 8004056:	0031      	movs	r1, r6
 8004058:	0038      	movs	r0, r7
 800405a:	f7ff f891 	bl	8003180 <_malloc_r>
 800405e:	1e04      	subs	r4, r0, #0
 8004060:	d0ec      	beq.n	800403c <_realloc_r+0x14>
 8004062:	0029      	movs	r1, r5
 8004064:	0032      	movs	r2, r6
 8004066:	f7ff ffc4 	bl	8003ff2 <memcpy>
 800406a:	0029      	movs	r1, r5
 800406c:	0038      	movs	r0, r7
 800406e:	f7ff f83d 	bl	80030ec <_free_r>
 8004072:	e7e3      	b.n	800403c <_realloc_r+0x14>

08004074 <_sungetc_r>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	0014      	movs	r4, r2
 8004078:	1c4b      	adds	r3, r1, #1
 800407a:	d103      	bne.n	8004084 <_sungetc_r+0x10>
 800407c:	2501      	movs	r5, #1
 800407e:	426d      	negs	r5, r5
 8004080:	0028      	movs	r0, r5
 8004082:	bd70      	pop	{r4, r5, r6, pc}
 8004084:	8993      	ldrh	r3, [r2, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	4393      	bics	r3, r2
 800408a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	b2ce      	uxtb	r6, r1
 8004090:	b2cd      	uxtb	r5, r1
 8004092:	6863      	ldr	r3, [r4, #4]
 8004094:	2a00      	cmp	r2, #0
 8004096:	d010      	beq.n	80040ba <_sungetc_r+0x46>
 8004098:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800409a:	4293      	cmp	r3, r2
 800409c:	da07      	bge.n	80040ae <_sungetc_r+0x3a>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	701e      	strb	r6, [r3, #0]
 80040a6:	6863      	ldr	r3, [r4, #4]
 80040a8:	3301      	adds	r3, #1
 80040aa:	6063      	str	r3, [r4, #4]
 80040ac:	e7e8      	b.n	8004080 <_sungetc_r+0xc>
 80040ae:	0021      	movs	r1, r4
 80040b0:	f000 fbee 	bl	8004890 <__submore>
 80040b4:	2800      	cmp	r0, #0
 80040b6:	d0f2      	beq.n	800409e <_sungetc_r+0x2a>
 80040b8:	e7e0      	b.n	800407c <_sungetc_r+0x8>
 80040ba:	6921      	ldr	r1, [r4, #16]
 80040bc:	6822      	ldr	r2, [r4, #0]
 80040be:	2900      	cmp	r1, #0
 80040c0:	d007      	beq.n	80040d2 <_sungetc_r+0x5e>
 80040c2:	4291      	cmp	r1, r2
 80040c4:	d205      	bcs.n	80040d2 <_sungetc_r+0x5e>
 80040c6:	1e51      	subs	r1, r2, #1
 80040c8:	7808      	ldrb	r0, [r1, #0]
 80040ca:	4285      	cmp	r5, r0
 80040cc:	d101      	bne.n	80040d2 <_sungetc_r+0x5e>
 80040ce:	6021      	str	r1, [r4, #0]
 80040d0:	e7ea      	b.n	80040a8 <_sungetc_r+0x34>
 80040d2:	6423      	str	r3, [r4, #64]	; 0x40
 80040d4:	0023      	movs	r3, r4
 80040d6:	3344      	adds	r3, #68	; 0x44
 80040d8:	6363      	str	r3, [r4, #52]	; 0x34
 80040da:	2303      	movs	r3, #3
 80040dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80040de:	0023      	movs	r3, r4
 80040e0:	3346      	adds	r3, #70	; 0x46
 80040e2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80040e4:	701e      	strb	r6, [r3, #0]
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	2301      	movs	r3, #1
 80040ea:	e7de      	b.n	80040aa <_sungetc_r+0x36>

080040ec <__ssrefill_r>:
 80040ec:	b510      	push	{r4, lr}
 80040ee:	000c      	movs	r4, r1
 80040f0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80040f2:	2900      	cmp	r1, #0
 80040f4:	d00e      	beq.n	8004114 <__ssrefill_r+0x28>
 80040f6:	0023      	movs	r3, r4
 80040f8:	3344      	adds	r3, #68	; 0x44
 80040fa:	4299      	cmp	r1, r3
 80040fc:	d001      	beq.n	8004102 <__ssrefill_r+0x16>
 80040fe:	f7fe fff5 	bl	80030ec <_free_r>
 8004102:	2000      	movs	r0, #0
 8004104:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004106:	6360      	str	r0, [r4, #52]	; 0x34
 8004108:	6063      	str	r3, [r4, #4]
 800410a:	4283      	cmp	r3, r0
 800410c:	d002      	beq.n	8004114 <__ssrefill_r+0x28>
 800410e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd10      	pop	{r4, pc}
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	2001      	movs	r0, #1
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	2300      	movs	r3, #0
 800411c:	89a2      	ldrh	r2, [r4, #12]
 800411e:	6063      	str	r3, [r4, #4]
 8004120:	3320      	adds	r3, #32
 8004122:	4313      	orrs	r3, r2
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	4240      	negs	r0, r0
 8004128:	e7f3      	b.n	8004112 <__ssrefill_r+0x26>
	...

0800412c <__ssvfiscanf_r>:
 800412c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412e:	4cbd      	ldr	r4, [pc, #756]	; (8004424 <__ssvfiscanf_r+0x2f8>)
 8004130:	2586      	movs	r5, #134	; 0x86
 8004132:	44a5      	add	sp, r4
 8004134:	9303      	str	r3, [sp, #12]
 8004136:	2300      	movs	r3, #0
 8004138:	9348      	str	r3, [sp, #288]	; 0x120
 800413a:	9349      	str	r3, [sp, #292]	; 0x124
 800413c:	ab05      	add	r3, sp, #20
 800413e:	934a      	str	r3, [sp, #296]	; 0x128
 8004140:	23be      	movs	r3, #190	; 0xbe
 8004142:	006d      	lsls	r5, r5, #1
 8004144:	9000      	str	r0, [sp, #0]
 8004146:	000c      	movs	r4, r1
 8004148:	a802      	add	r0, sp, #8
 800414a:	49b7      	ldr	r1, [pc, #732]	; (8004428 <__ssvfiscanf_r+0x2fc>)
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	1940      	adds	r0, r0, r5
 8004150:	27c0      	movs	r7, #192	; 0xc0
 8004152:	50c1      	str	r1, [r0, r3]
 8004154:	ab02      	add	r3, sp, #8
 8004156:	195b      	adds	r3, r3, r5
 8004158:	0015      	movs	r5, r2
 800415a:	49b4      	ldr	r1, [pc, #720]	; (800442c <__ssvfiscanf_r+0x300>)
 800415c:	007f      	lsls	r7, r7, #1
 800415e:	51d9      	str	r1, [r3, r7]
 8004160:	782b      	ldrb	r3, [r5, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d100      	bne.n	8004168 <__ssvfiscanf_r+0x3c>
 8004166:	e15b      	b.n	8004420 <__ssvfiscanf_r+0x2f4>
 8004168:	f7ff ff18 	bl	8003f9c <__locale_ctype_ptr>
 800416c:	2208      	movs	r2, #8
 800416e:	782b      	ldrb	r3, [r5, #0]
 8004170:	18c0      	adds	r0, r0, r3
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	7843      	ldrb	r3, [r0, #1]
 8004176:	4013      	ands	r3, r2
 8004178:	d141      	bne.n	80041fe <__ssvfiscanf_r+0xd2>
 800417a:	9a01      	ldr	r2, [sp, #4]
 800417c:	1c6e      	adds	r6, r5, #1
 800417e:	2a25      	cmp	r2, #37	; 0x25
 8004180:	d000      	beq.n	8004184 <__ssvfiscanf_r+0x58>
 8004182:	e0a8      	b.n	80042d6 <__ssvfiscanf_r+0x1aa>
 8004184:	9347      	str	r3, [sp, #284]	; 0x11c
 8004186:	9345      	str	r3, [sp, #276]	; 0x114
 8004188:	786b      	ldrb	r3, [r5, #1]
 800418a:	2b2a      	cmp	r3, #42	; 0x2a
 800418c:	d102      	bne.n	8004194 <__ssvfiscanf_r+0x68>
 800418e:	3b1a      	subs	r3, #26
 8004190:	9345      	str	r3, [sp, #276]	; 0x114
 8004192:	1cae      	adds	r6, r5, #2
 8004194:	0035      	movs	r5, r6
 8004196:	220a      	movs	r2, #10
 8004198:	7829      	ldrb	r1, [r5, #0]
 800419a:	000b      	movs	r3, r1
 800419c:	3b30      	subs	r3, #48	; 0x30
 800419e:	2b09      	cmp	r3, #9
 80041a0:	d948      	bls.n	8004234 <__ssvfiscanf_r+0x108>
 80041a2:	4ea3      	ldr	r6, [pc, #652]	; (8004430 <__ssvfiscanf_r+0x304>)
 80041a4:	2203      	movs	r2, #3
 80041a6:	0030      	movs	r0, r6
 80041a8:	f7ff ff18 	bl	8003fdc <memchr>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d007      	beq.n	80041c0 <__ssvfiscanf_r+0x94>
 80041b0:	2301      	movs	r3, #1
 80041b2:	1b80      	subs	r0, r0, r6
 80041b4:	4083      	lsls	r3, r0
 80041b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80041b8:	3501      	adds	r5, #1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	9202      	str	r2, [sp, #8]
 80041be:	9345      	str	r3, [sp, #276]	; 0x114
 80041c0:	782b      	ldrb	r3, [r5, #0]
 80041c2:	1c6e      	adds	r6, r5, #1
 80041c4:	2b67      	cmp	r3, #103	; 0x67
 80041c6:	d858      	bhi.n	800427a <__ssvfiscanf_r+0x14e>
 80041c8:	2b65      	cmp	r3, #101	; 0x65
 80041ca:	d300      	bcc.n	80041ce <__ssvfiscanf_r+0xa2>
 80041cc:	e0dd      	b.n	800438a <__ssvfiscanf_r+0x25e>
 80041ce:	2b47      	cmp	r3, #71	; 0x47
 80041d0:	d838      	bhi.n	8004244 <__ssvfiscanf_r+0x118>
 80041d2:	2b45      	cmp	r3, #69	; 0x45
 80041d4:	d300      	bcc.n	80041d8 <__ssvfiscanf_r+0xac>
 80041d6:	e0d8      	b.n	800438a <__ssvfiscanf_r+0x25e>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d100      	bne.n	80041de <__ssvfiscanf_r+0xb2>
 80041dc:	e11d      	b.n	800441a <__ssvfiscanf_r+0x2ee>
 80041de:	2b25      	cmp	r3, #37	; 0x25
 80041e0:	d079      	beq.n	80042d6 <__ssvfiscanf_r+0x1aa>
 80041e2:	2303      	movs	r3, #3
 80041e4:	934b      	str	r3, [sp, #300]	; 0x12c
 80041e6:	3307      	adds	r3, #7
 80041e8:	9346      	str	r3, [sp, #280]	; 0x118
 80041ea:	e053      	b.n	8004294 <__ssvfiscanf_r+0x168>
 80041ec:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80041ee:	3301      	adds	r3, #1
 80041f0:	9201      	str	r2, [sp, #4]
 80041f2:	3201      	adds	r2, #1
 80041f4:	9249      	str	r2, [sp, #292]	; 0x124
 80041f6:	6862      	ldr	r2, [r4, #4]
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	3a01      	subs	r2, #1
 80041fc:	6062      	str	r2, [r4, #4]
 80041fe:	6863      	ldr	r3, [r4, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	dd0b      	ble.n	800421c <__ssvfiscanf_r+0xf0>
 8004204:	f7ff feca 	bl	8003f9c <__locale_ctype_ptr>
 8004208:	2108      	movs	r1, #8
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	1880      	adds	r0, r0, r2
 8004210:	7842      	ldrb	r2, [r0, #1]
 8004212:	420a      	tst	r2, r1
 8004214:	d1ea      	bne.n	80041ec <__ssvfiscanf_r+0xc0>
 8004216:	1c6e      	adds	r6, r5, #1
 8004218:	0035      	movs	r5, r6
 800421a:	e7a1      	b.n	8004160 <__ssvfiscanf_r+0x34>
 800421c:	2286      	movs	r2, #134	; 0x86
 800421e:	ab02      	add	r3, sp, #8
 8004220:	0052      	lsls	r2, r2, #1
 8004222:	189b      	adds	r3, r3, r2
 8004224:	59db      	ldr	r3, [r3, r7]
 8004226:	0021      	movs	r1, r4
 8004228:	9800      	ldr	r0, [sp, #0]
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	4798      	blx	r3
 800422e:	2800      	cmp	r0, #0
 8004230:	d0e8      	beq.n	8004204 <__ssvfiscanf_r+0xd8>
 8004232:	e7f0      	b.n	8004216 <__ssvfiscanf_r+0xea>
 8004234:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004236:	3501      	adds	r5, #1
 8004238:	9302      	str	r3, [sp, #8]
 800423a:	4353      	muls	r3, r2
 800423c:	3b30      	subs	r3, #48	; 0x30
 800423e:	1859      	adds	r1, r3, r1
 8004240:	9147      	str	r1, [sp, #284]	; 0x11c
 8004242:	e7a9      	b.n	8004198 <__ssvfiscanf_r+0x6c>
 8004244:	2b5b      	cmp	r3, #91	; 0x5b
 8004246:	d100      	bne.n	800424a <__ssvfiscanf_r+0x11e>
 8004248:	e077      	b.n	800433a <__ssvfiscanf_r+0x20e>
 800424a:	d80f      	bhi.n	800426c <__ssvfiscanf_r+0x140>
 800424c:	2b58      	cmp	r3, #88	; 0x58
 800424e:	d1c8      	bne.n	80041e2 <__ssvfiscanf_r+0xb6>
 8004250:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004252:	9201      	str	r2, [sp, #4]
 8004254:	2280      	movs	r2, #128	; 0x80
 8004256:	9901      	ldr	r1, [sp, #4]
 8004258:	0092      	lsls	r2, r2, #2
 800425a:	430a      	orrs	r2, r1
 800425c:	9245      	str	r2, [sp, #276]	; 0x114
 800425e:	2210      	movs	r2, #16
 8004260:	9246      	str	r2, [sp, #280]	; 0x118
 8004262:	2203      	movs	r2, #3
 8004264:	2b6e      	cmp	r3, #110	; 0x6e
 8004266:	dd14      	ble.n	8004292 <__ssvfiscanf_r+0x166>
 8004268:	3201      	adds	r2, #1
 800426a:	e012      	b.n	8004292 <__ssvfiscanf_r+0x166>
 800426c:	2b63      	cmp	r3, #99	; 0x63
 800426e:	d100      	bne.n	8004272 <__ssvfiscanf_r+0x146>
 8004270:	e071      	b.n	8004356 <__ssvfiscanf_r+0x22a>
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d1b5      	bne.n	80041e2 <__ssvfiscanf_r+0xb6>
 8004276:	220a      	movs	r2, #10
 8004278:	e7f2      	b.n	8004260 <__ssvfiscanf_r+0x134>
 800427a:	2b70      	cmp	r3, #112	; 0x70
 800427c:	d052      	beq.n	8004324 <__ssvfiscanf_r+0x1f8>
 800427e:	d822      	bhi.n	80042c6 <__ssvfiscanf_r+0x19a>
 8004280:	2b6e      	cmp	r3, #110	; 0x6e
 8004282:	d100      	bne.n	8004286 <__ssvfiscanf_r+0x15a>
 8004284:	e06f      	b.n	8004366 <__ssvfiscanf_r+0x23a>
 8004286:	d854      	bhi.n	8004332 <__ssvfiscanf_r+0x206>
 8004288:	2b69      	cmp	r3, #105	; 0x69
 800428a:	d1aa      	bne.n	80041e2 <__ssvfiscanf_r+0xb6>
 800428c:	2300      	movs	r3, #0
 800428e:	2203      	movs	r2, #3
 8004290:	9346      	str	r3, [sp, #280]	; 0x118
 8004292:	924b      	str	r2, [sp, #300]	; 0x12c
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	dc00      	bgt.n	800429c <__ssvfiscanf_r+0x170>
 800429a:	e078      	b.n	800438e <__ssvfiscanf_r+0x262>
 800429c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	065b      	lsls	r3, r3, #25
 80042a2:	d400      	bmi.n	80042a6 <__ssvfiscanf_r+0x17a>
 80042a4:	e08b      	b.n	80043be <__ssvfiscanf_r+0x292>
 80042a6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	dd00      	ble.n	80042ae <__ssvfiscanf_r+0x182>
 80042ac:	e09d      	b.n	80043ea <__ssvfiscanf_r+0x2be>
 80042ae:	ab03      	add	r3, sp, #12
 80042b0:	0022      	movs	r2, r4
 80042b2:	a945      	add	r1, sp, #276	; 0x114
 80042b4:	9800      	ldr	r0, [sp, #0]
 80042b6:	f000 f8bf 	bl	8004438 <_scanf_chars>
 80042ba:	2801      	cmp	r0, #1
 80042bc:	d100      	bne.n	80042c0 <__ssvfiscanf_r+0x194>
 80042be:	e0af      	b.n	8004420 <__ssvfiscanf_r+0x2f4>
 80042c0:	2802      	cmp	r0, #2
 80042c2:	d1a9      	bne.n	8004218 <__ssvfiscanf_r+0xec>
 80042c4:	e025      	b.n	8004312 <__ssvfiscanf_r+0x1e6>
 80042c6:	2b75      	cmp	r3, #117	; 0x75
 80042c8:	d0d5      	beq.n	8004276 <__ssvfiscanf_r+0x14a>
 80042ca:	2b78      	cmp	r3, #120	; 0x78
 80042cc:	d0c0      	beq.n	8004250 <__ssvfiscanf_r+0x124>
 80042ce:	2b73      	cmp	r3, #115	; 0x73
 80042d0:	d187      	bne.n	80041e2 <__ssvfiscanf_r+0xb6>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e03d      	b.n	8004352 <__ssvfiscanf_r+0x226>
 80042d6:	6863      	ldr	r3, [r4, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	dd0f      	ble.n	80042fc <__ssvfiscanf_r+0x1d0>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	9901      	ldr	r1, [sp, #4]
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	4291      	cmp	r1, r2
 80042e4:	d000      	beq.n	80042e8 <__ssvfiscanf_r+0x1bc>
 80042e6:	e09b      	b.n	8004420 <__ssvfiscanf_r+0x2f4>
 80042e8:	3301      	adds	r3, #1
 80042ea:	6862      	ldr	r2, [r4, #4]
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80042f0:	3a01      	subs	r2, #1
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	3301      	adds	r3, #1
 80042f6:	6062      	str	r2, [r4, #4]
 80042f8:	9349      	str	r3, [sp, #292]	; 0x124
 80042fa:	e78d      	b.n	8004218 <__ssvfiscanf_r+0xec>
 80042fc:	2286      	movs	r2, #134	; 0x86
 80042fe:	ab02      	add	r3, sp, #8
 8004300:	0052      	lsls	r2, r2, #1
 8004302:	189b      	adds	r3, r3, r2
 8004304:	59db      	ldr	r3, [r3, r7]
 8004306:	0021      	movs	r1, r4
 8004308:	9800      	ldr	r0, [sp, #0]
 800430a:	9302      	str	r3, [sp, #8]
 800430c:	4798      	blx	r3
 800430e:	2800      	cmp	r0, #0
 8004310:	d0e4      	beq.n	80042dc <__ssvfiscanf_r+0x1b0>
 8004312:	9848      	ldr	r0, [sp, #288]	; 0x120
 8004314:	2800      	cmp	r0, #0
 8004316:	d000      	beq.n	800431a <__ssvfiscanf_r+0x1ee>
 8004318:	e07b      	b.n	8004412 <__ssvfiscanf_r+0x2e6>
 800431a:	3801      	subs	r0, #1
 800431c:	23a7      	movs	r3, #167	; 0xa7
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	449d      	add	sp, r3
 8004322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004324:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004326:	9201      	str	r2, [sp, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	9901      	ldr	r1, [sp, #4]
 800432c:	430a      	orrs	r2, r1
 800432e:	9245      	str	r2, [sp, #276]	; 0x114
 8004330:	e78e      	b.n	8004250 <__ssvfiscanf_r+0x124>
 8004332:	2308      	movs	r3, #8
 8004334:	2204      	movs	r2, #4
 8004336:	9346      	str	r3, [sp, #280]	; 0x118
 8004338:	e7ab      	b.n	8004292 <__ssvfiscanf_r+0x166>
 800433a:	0031      	movs	r1, r6
 800433c:	a805      	add	r0, sp, #20
 800433e:	f000 f9df 	bl	8004700 <__sccl>
 8004342:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004344:	0006      	movs	r6, r0
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	2340      	movs	r3, #64	; 0x40
 800434a:	9a01      	ldr	r2, [sp, #4]
 800434c:	4313      	orrs	r3, r2
 800434e:	9345      	str	r3, [sp, #276]	; 0x114
 8004350:	2301      	movs	r3, #1
 8004352:	934b      	str	r3, [sp, #300]	; 0x12c
 8004354:	e79e      	b.n	8004294 <__ssvfiscanf_r+0x168>
 8004356:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	2340      	movs	r3, #64	; 0x40
 800435c:	9a01      	ldr	r2, [sp, #4]
 800435e:	4313      	orrs	r3, r2
 8004360:	9345      	str	r3, [sp, #276]	; 0x114
 8004362:	2300      	movs	r3, #0
 8004364:	e7f5      	b.n	8004352 <__ssvfiscanf_r+0x226>
 8004366:	9945      	ldr	r1, [sp, #276]	; 0x114
 8004368:	06cb      	lsls	r3, r1, #27
 800436a:	d500      	bpl.n	800436e <__ssvfiscanf_r+0x242>
 800436c:	e754      	b.n	8004218 <__ssvfiscanf_r+0xec>
 800436e:	9b03      	ldr	r3, [sp, #12]
 8004370:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8004372:	07c8      	lsls	r0, r1, #31
 8004374:	d504      	bpl.n	8004380 <__ssvfiscanf_r+0x254>
 8004376:	1d19      	adds	r1, r3, #4
 8004378:	9103      	str	r1, [sp, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	801a      	strh	r2, [r3, #0]
 800437e:	e74b      	b.n	8004218 <__ssvfiscanf_r+0xec>
 8004380:	1d19      	adds	r1, r3, #4
 8004382:	9103      	str	r1, [sp, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e746      	b.n	8004218 <__ssvfiscanf_r+0xec>
 800438a:	2305      	movs	r3, #5
 800438c:	e7e1      	b.n	8004352 <__ssvfiscanf_r+0x226>
 800438e:	2286      	movs	r2, #134	; 0x86
 8004390:	ab02      	add	r3, sp, #8
 8004392:	0052      	lsls	r2, r2, #1
 8004394:	189b      	adds	r3, r3, r2
 8004396:	59db      	ldr	r3, [r3, r7]
 8004398:	0021      	movs	r1, r4
 800439a:	9800      	ldr	r0, [sp, #0]
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	4798      	blx	r3
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d100      	bne.n	80043a6 <__ssvfiscanf_r+0x27a>
 80043a4:	e77a      	b.n	800429c <__ssvfiscanf_r+0x170>
 80043a6:	e7b4      	b.n	8004312 <__ssvfiscanf_r+0x1e6>
 80043a8:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80043aa:	9201      	str	r2, [sp, #4]
 80043ac:	3201      	adds	r2, #1
 80043ae:	9249      	str	r2, [sp, #292]	; 0x124
 80043b0:	6862      	ldr	r2, [r4, #4]
 80043b2:	3a01      	subs	r2, #1
 80043b4:	6062      	str	r2, [r4, #4]
 80043b6:	2a00      	cmp	r2, #0
 80043b8:	dd0b      	ble.n	80043d2 <__ssvfiscanf_r+0x2a6>
 80043ba:	3301      	adds	r3, #1
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	f7ff fded 	bl	8003f9c <__locale_ctype_ptr>
 80043c2:	2108      	movs	r1, #8
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	1880      	adds	r0, r0, r2
 80043ca:	7842      	ldrb	r2, [r0, #1]
 80043cc:	420a      	tst	r2, r1
 80043ce:	d1eb      	bne.n	80043a8 <__ssvfiscanf_r+0x27c>
 80043d0:	e769      	b.n	80042a6 <__ssvfiscanf_r+0x17a>
 80043d2:	2286      	movs	r2, #134	; 0x86
 80043d4:	ab02      	add	r3, sp, #8
 80043d6:	0052      	lsls	r2, r2, #1
 80043d8:	189b      	adds	r3, r3, r2
 80043da:	59db      	ldr	r3, [r3, r7]
 80043dc:	0021      	movs	r1, r4
 80043de:	9800      	ldr	r0, [sp, #0]
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	4798      	blx	r3
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d0ea      	beq.n	80043be <__ssvfiscanf_r+0x292>
 80043e8:	e793      	b.n	8004312 <__ssvfiscanf_r+0x1e6>
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	dc06      	bgt.n	80043fc <__ssvfiscanf_r+0x2d0>
 80043ee:	ab03      	add	r3, sp, #12
 80043f0:	0022      	movs	r2, r4
 80043f2:	a945      	add	r1, sp, #276	; 0x114
 80043f4:	9800      	ldr	r0, [sp, #0]
 80043f6:	f000 f883 	bl	8004500 <_scanf_i>
 80043fa:	e75e      	b.n	80042ba <__ssvfiscanf_r+0x18e>
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <__ssvfiscanf_r+0x308>)
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d100      	bne.n	8004404 <__ssvfiscanf_r+0x2d8>
 8004402:	e709      	b.n	8004218 <__ssvfiscanf_r+0xec>
 8004404:	ab03      	add	r3, sp, #12
 8004406:	0022      	movs	r2, r4
 8004408:	a945      	add	r1, sp, #276	; 0x114
 800440a:	9800      	ldr	r0, [sp, #0]
 800440c:	e000      	b.n	8004410 <__ssvfiscanf_r+0x2e4>
 800440e:	bf00      	nop
 8004410:	e753      	b.n	80042ba <__ssvfiscanf_r+0x18e>
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	065b      	lsls	r3, r3, #25
 8004416:	d400      	bmi.n	800441a <__ssvfiscanf_r+0x2ee>
 8004418:	e780      	b.n	800431c <__ssvfiscanf_r+0x1f0>
 800441a:	2001      	movs	r0, #1
 800441c:	4240      	negs	r0, r0
 800441e:	e77d      	b.n	800431c <__ssvfiscanf_r+0x1f0>
 8004420:	9848      	ldr	r0, [sp, #288]	; 0x120
 8004422:	e77b      	b.n	800431c <__ssvfiscanf_r+0x1f0>
 8004424:	fffffd64 	.word	0xfffffd64
 8004428:	08004075 	.word	0x08004075
 800442c:	080040ed 	.word	0x080040ed
 8004430:	08004afe 	.word	0x08004afe
 8004434:	00000000 	.word	0x00000000

08004438 <_scanf_chars>:
 8004438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800443a:	0015      	movs	r5, r2
 800443c:	688a      	ldr	r2, [r1, #8]
 800443e:	9001      	str	r0, [sp, #4]
 8004440:	000c      	movs	r4, r1
 8004442:	2a00      	cmp	r2, #0
 8004444:	d106      	bne.n	8004454 <_scanf_chars+0x1c>
 8004446:	698a      	ldr	r2, [r1, #24]
 8004448:	1e51      	subs	r1, r2, #1
 800444a:	418a      	sbcs	r2, r1
 800444c:	2101      	movs	r1, #1
 800444e:	4252      	negs	r2, r2
 8004450:	430a      	orrs	r2, r1
 8004452:	60a2      	str	r2, [r4, #8]
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	06d2      	lsls	r2, r2, #27
 8004458:	d403      	bmi.n	8004462 <_scanf_chars+0x2a>
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	1d11      	adds	r1, r2, #4
 800445e:	6019      	str	r1, [r3, #0]
 8004460:	6817      	ldr	r7, [r2, #0]
 8004462:	2600      	movs	r6, #0
 8004464:	69a3      	ldr	r3, [r4, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01c      	beq.n	80044a4 <_scanf_chars+0x6c>
 800446a:	2b01      	cmp	r3, #1
 800446c:	d108      	bne.n	8004480 <_scanf_chars+0x48>
 800446e:	682b      	ldr	r3, [r5, #0]
 8004470:	6962      	ldr	r2, [r4, #20]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	5cd3      	ldrb	r3, [r2, r3]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d114      	bne.n	80044a4 <_scanf_chars+0x6c>
 800447a:	2e00      	cmp	r6, #0
 800447c:	d130      	bne.n	80044e0 <_scanf_chars+0xa8>
 800447e:	e006      	b.n	800448e <_scanf_chars+0x56>
 8004480:	2b02      	cmp	r3, #2
 8004482:	d006      	beq.n	8004492 <_scanf_chars+0x5a>
 8004484:	2e00      	cmp	r6, #0
 8004486:	d12b      	bne.n	80044e0 <_scanf_chars+0xa8>
 8004488:	69a3      	ldr	r3, [r4, #24]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d128      	bne.n	80044e0 <_scanf_chars+0xa8>
 800448e:	2001      	movs	r0, #1
 8004490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004492:	f7ff fd83 	bl	8003f9c <__locale_ctype_ptr>
 8004496:	2208      	movs	r2, #8
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	18c0      	adds	r0, r0, r3
 800449e:	7843      	ldrb	r3, [r0, #1]
 80044a0:	4213      	tst	r3, r2
 80044a2:	d1ef      	bne.n	8004484 <_scanf_chars+0x4c>
 80044a4:	2210      	movs	r2, #16
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	3601      	adds	r6, #1
 80044aa:	4213      	tst	r3, r2
 80044ac:	d103      	bne.n	80044b6 <_scanf_chars+0x7e>
 80044ae:	682b      	ldr	r3, [r5, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	703b      	strb	r3, [r7, #0]
 80044b4:	3701      	adds	r7, #1
 80044b6:	682a      	ldr	r2, [r5, #0]
 80044b8:	686b      	ldr	r3, [r5, #4]
 80044ba:	3201      	adds	r2, #1
 80044bc:	602a      	str	r2, [r5, #0]
 80044be:	68a2      	ldr	r2, [r4, #8]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	3a01      	subs	r2, #1
 80044c4:	606b      	str	r3, [r5, #4]
 80044c6:	60a2      	str	r2, [r4, #8]
 80044c8:	2a00      	cmp	r2, #0
 80044ca:	d009      	beq.n	80044e0 <_scanf_chars+0xa8>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	dcc9      	bgt.n	8004464 <_scanf_chars+0x2c>
 80044d0:	23c0      	movs	r3, #192	; 0xc0
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	58e3      	ldr	r3, [r4, r3]
 80044d6:	0029      	movs	r1, r5
 80044d8:	9801      	ldr	r0, [sp, #4]
 80044da:	4798      	blx	r3
 80044dc:	2800      	cmp	r0, #0
 80044de:	d0c1      	beq.n	8004464 <_scanf_chars+0x2c>
 80044e0:	2310      	movs	r3, #16
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	4013      	ands	r3, r2
 80044e6:	d106      	bne.n	80044f6 <_scanf_chars+0xbe>
 80044e8:	68e2      	ldr	r2, [r4, #12]
 80044ea:	3201      	adds	r2, #1
 80044ec:	60e2      	str	r2, [r4, #12]
 80044ee:	69a2      	ldr	r2, [r4, #24]
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	d000      	beq.n	80044f6 <_scanf_chars+0xbe>
 80044f4:	703b      	strb	r3, [r7, #0]
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	2000      	movs	r0, #0
 80044fa:	199e      	adds	r6, r3, r6
 80044fc:	6126      	str	r6, [r4, #16]
 80044fe:	e7c7      	b.n	8004490 <_scanf_chars+0x58>

08004500 <_scanf_i>:
 8004500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004502:	000c      	movs	r4, r1
 8004504:	b08d      	sub	sp, #52	; 0x34
 8004506:	9302      	str	r3, [sp, #8]
 8004508:	4b77      	ldr	r3, [pc, #476]	; (80046e8 <_scanf_i+0x1e8>)
 800450a:	9005      	str	r0, [sp, #20]
 800450c:	0016      	movs	r6, r2
 800450e:	aa09      	add	r2, sp, #36	; 0x24
 8004510:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004512:	c223      	stmia	r2!, {r0, r1, r5}
 8004514:	4b75      	ldr	r3, [pc, #468]	; (80046ec <_scanf_i+0x1ec>)
 8004516:	9306      	str	r3, [sp, #24]
 8004518:	69a3      	ldr	r3, [r4, #24]
 800451a:	2b03      	cmp	r3, #3
 800451c:	d001      	beq.n	8004522 <_scanf_i+0x22>
 800451e:	4b74      	ldr	r3, [pc, #464]	; (80046f0 <_scanf_i+0x1f0>)
 8004520:	9306      	str	r3, [sp, #24]
 8004522:	22ae      	movs	r2, #174	; 0xae
 8004524:	2000      	movs	r0, #0
 8004526:	68a3      	ldr	r3, [r4, #8]
 8004528:	0052      	lsls	r2, r2, #1
 800452a:	1e59      	subs	r1, r3, #1
 800452c:	9004      	str	r0, [sp, #16]
 800452e:	4291      	cmp	r1, r2
 8004530:	d905      	bls.n	800453e <_scanf_i+0x3e>
 8004532:	3b5e      	subs	r3, #94	; 0x5e
 8004534:	3bff      	subs	r3, #255	; 0xff
 8004536:	9304      	str	r3, [sp, #16]
 8004538:	235e      	movs	r3, #94	; 0x5e
 800453a:	33ff      	adds	r3, #255	; 0xff
 800453c:	60a3      	str	r3, [r4, #8]
 800453e:	0023      	movs	r3, r4
 8004540:	331c      	adds	r3, #28
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	23d0      	movs	r3, #208	; 0xd0
 8004546:	2700      	movs	r7, #0
 8004548:	6822      	ldr	r2, [r4, #0]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	4313      	orrs	r3, r2
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	9b01      	ldr	r3, [sp, #4]
 8004552:	9303      	str	r3, [sp, #12]
 8004554:	6833      	ldr	r3, [r6, #0]
 8004556:	a809      	add	r0, sp, #36	; 0x24
 8004558:	7819      	ldrb	r1, [r3, #0]
 800455a:	00bb      	lsls	r3, r7, #2
 800455c:	2202      	movs	r2, #2
 800455e:	5818      	ldr	r0, [r3, r0]
 8004560:	f7ff fd3c 	bl	8003fdc <memchr>
 8004564:	2800      	cmp	r0, #0
 8004566:	d02b      	beq.n	80045c0 <_scanf_i+0xc0>
 8004568:	2f01      	cmp	r7, #1
 800456a:	d15f      	bne.n	800462c <_scanf_i+0x12c>
 800456c:	6863      	ldr	r3, [r4, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <_scanf_i+0x80>
 8004572:	3308      	adds	r3, #8
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	33f9      	adds	r3, #249	; 0xf9
 800457a:	33ff      	adds	r3, #255	; 0xff
 800457c:	4313      	orrs	r3, r2
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	4b5c      	ldr	r3, [pc, #368]	; (80046f4 <_scanf_i+0x1f4>)
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	4013      	ands	r3, r2
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	68a3      	ldr	r3, [r4, #8]
 800458a:	1e5a      	subs	r2, r3, #1
 800458c:	60a2      	str	r2, [r4, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d016      	beq.n	80045c0 <_scanf_i+0xc0>
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	1c5d      	adds	r5, r3, #1
 8004596:	6833      	ldr	r3, [r6, #0]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	6032      	str	r2, [r6, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	9a03      	ldr	r2, [sp, #12]
 80045a0:	9503      	str	r5, [sp, #12]
 80045a2:	7013      	strb	r3, [r2, #0]
 80045a4:	6873      	ldr	r3, [r6, #4]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	6073      	str	r3, [r6, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	dc08      	bgt.n	80045c0 <_scanf_i+0xc0>
 80045ae:	23c0      	movs	r3, #192	; 0xc0
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	58e3      	ldr	r3, [r4, r3]
 80045b4:	0031      	movs	r1, r6
 80045b6:	9805      	ldr	r0, [sp, #20]
 80045b8:	9307      	str	r3, [sp, #28]
 80045ba:	4798      	blx	r3
 80045bc:	2800      	cmp	r0, #0
 80045be:	d17d      	bne.n	80046bc <_scanf_i+0x1bc>
 80045c0:	3701      	adds	r7, #1
 80045c2:	2f03      	cmp	r7, #3
 80045c4:	d1c6      	bne.n	8004554 <_scanf_i+0x54>
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <_scanf_i+0xd0>
 80045cc:	330a      	adds	r3, #10
 80045ce:	6063      	str	r3, [r4, #4]
 80045d0:	2110      	movs	r1, #16
 80045d2:	2700      	movs	r7, #0
 80045d4:	6863      	ldr	r3, [r4, #4]
 80045d6:	6960      	ldr	r0, [r4, #20]
 80045d8:	1ac9      	subs	r1, r1, r3
 80045da:	4b47      	ldr	r3, [pc, #284]	; (80046f8 <_scanf_i+0x1f8>)
 80045dc:	18c9      	adds	r1, r1, r3
 80045de:	f000 f88f 	bl	8004700 <__sccl>
 80045e2:	9d03      	ldr	r5, [sp, #12]
 80045e4:	68a3      	ldr	r3, [r4, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d041      	beq.n	800466e <_scanf_i+0x16e>
 80045ea:	6832      	ldr	r2, [r6, #0]
 80045ec:	6960      	ldr	r0, [r4, #20]
 80045ee:	7811      	ldrb	r1, [r2, #0]
 80045f0:	5c40      	ldrb	r0, [r0, r1]
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d03b      	beq.n	800466e <_scanf_i+0x16e>
 80045f6:	2930      	cmp	r1, #48	; 0x30
 80045f8:	d128      	bne.n	800464c <_scanf_i+0x14c>
 80045fa:	2080      	movs	r0, #128	; 0x80
 80045fc:	6821      	ldr	r1, [r4, #0]
 80045fe:	0100      	lsls	r0, r0, #4
 8004600:	4201      	tst	r1, r0
 8004602:	d023      	beq.n	800464c <_scanf_i+0x14c>
 8004604:	9a04      	ldr	r2, [sp, #16]
 8004606:	3701      	adds	r7, #1
 8004608:	2a00      	cmp	r2, #0
 800460a:	d003      	beq.n	8004614 <_scanf_i+0x114>
 800460c:	3a01      	subs	r2, #1
 800460e:	3301      	adds	r3, #1
 8004610:	9204      	str	r2, [sp, #16]
 8004612:	60a3      	str	r3, [r4, #8]
 8004614:	6873      	ldr	r3, [r6, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	6073      	str	r3, [r6, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	dd1e      	ble.n	800465c <_scanf_i+0x15c>
 800461e:	6833      	ldr	r3, [r6, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	6033      	str	r3, [r6, #0]
 8004624:	68a3      	ldr	r3, [r4, #8]
 8004626:	3b01      	subs	r3, #1
 8004628:	60a3      	str	r3, [r4, #8]
 800462a:	e7db      	b.n	80045e4 <_scanf_i+0xe4>
 800462c:	2f02      	cmp	r7, #2
 800462e:	d1ab      	bne.n	8004588 <_scanf_i+0x88>
 8004630:	21c0      	movs	r1, #192	; 0xc0
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	6822      	ldr	r2, [r4, #0]
 8004636:	00c9      	lsls	r1, r1, #3
 8004638:	4011      	ands	r1, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4299      	cmp	r1, r3
 800463e:	d1c2      	bne.n	80045c6 <_scanf_i+0xc6>
 8004640:	3bf1      	subs	r3, #241	; 0xf1
 8004642:	3bff      	subs	r3, #255	; 0xff
 8004644:	6063      	str	r3, [r4, #4]
 8004646:	33f0      	adds	r3, #240	; 0xf0
 8004648:	4313      	orrs	r3, r2
 800464a:	e79c      	b.n	8004586 <_scanf_i+0x86>
 800464c:	6821      	ldr	r1, [r4, #0]
 800464e:	4b2b      	ldr	r3, [pc, #172]	; (80046fc <_scanf_i+0x1fc>)
 8004650:	400b      	ands	r3, r1
 8004652:	6023      	str	r3, [r4, #0]
 8004654:	7813      	ldrb	r3, [r2, #0]
 8004656:	702b      	strb	r3, [r5, #0]
 8004658:	3501      	adds	r5, #1
 800465a:	e7db      	b.n	8004614 <_scanf_i+0x114>
 800465c:	23c0      	movs	r3, #192	; 0xc0
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	58e3      	ldr	r3, [r4, r3]
 8004662:	0031      	movs	r1, r6
 8004664:	9805      	ldr	r0, [sp, #20]
 8004666:	9303      	str	r3, [sp, #12]
 8004668:	4798      	blx	r3
 800466a:	2800      	cmp	r0, #0
 800466c:	d0da      	beq.n	8004624 <_scanf_i+0x124>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	05db      	lsls	r3, r3, #23
 8004672:	d50e      	bpl.n	8004692 <_scanf_i+0x192>
 8004674:	9b01      	ldr	r3, [sp, #4]
 8004676:	429d      	cmp	r5, r3
 8004678:	d907      	bls.n	800468a <_scanf_i+0x18a>
 800467a:	23be      	movs	r3, #190	; 0xbe
 800467c:	3d01      	subs	r5, #1
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	7829      	ldrb	r1, [r5, #0]
 8004682:	58e3      	ldr	r3, [r4, r3]
 8004684:	0032      	movs	r2, r6
 8004686:	9805      	ldr	r0, [sp, #20]
 8004688:	4798      	blx	r3
 800468a:	9b01      	ldr	r3, [sp, #4]
 800468c:	2001      	movs	r0, #1
 800468e:	429d      	cmp	r5, r3
 8004690:	d027      	beq.n	80046e2 <_scanf_i+0x1e2>
 8004692:	2210      	movs	r2, #16
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	401a      	ands	r2, r3
 8004698:	d11c      	bne.n	80046d4 <_scanf_i+0x1d4>
 800469a:	702a      	strb	r2, [r5, #0]
 800469c:	6863      	ldr	r3, [r4, #4]
 800469e:	9901      	ldr	r1, [sp, #4]
 80046a0:	9805      	ldr	r0, [sp, #20]
 80046a2:	9e06      	ldr	r6, [sp, #24]
 80046a4:	47b0      	blx	r6
 80046a6:	9b02      	ldr	r3, [sp, #8]
 80046a8:	6822      	ldr	r2, [r4, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0691      	lsls	r1, r2, #26
 80046ae:	d507      	bpl.n	80046c0 <_scanf_i+0x1c0>
 80046b0:	9902      	ldr	r1, [sp, #8]
 80046b2:	1d1a      	adds	r2, r3, #4
 80046b4:	600a      	str	r2, [r1, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6018      	str	r0, [r3, #0]
 80046ba:	e008      	b.n	80046ce <_scanf_i+0x1ce>
 80046bc:	2700      	movs	r7, #0
 80046be:	e7d6      	b.n	800466e <_scanf_i+0x16e>
 80046c0:	07d1      	lsls	r1, r2, #31
 80046c2:	d5f5      	bpl.n	80046b0 <_scanf_i+0x1b0>
 80046c4:	9902      	ldr	r1, [sp, #8]
 80046c6:	1d1a      	adds	r2, r3, #4
 80046c8:	600a      	str	r2, [r1, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	8018      	strh	r0, [r3, #0]
 80046ce:	68e3      	ldr	r3, [r4, #12]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60e3      	str	r3, [r4, #12]
 80046d4:	2000      	movs	r0, #0
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	1aed      	subs	r5, r5, r3
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	19ef      	adds	r7, r5, r7
 80046de:	19df      	adds	r7, r3, r7
 80046e0:	6127      	str	r7, [r4, #16]
 80046e2:	b00d      	add	sp, #52	; 0x34
 80046e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	0800494c 	.word	0x0800494c
 80046ec:	08004871 	.word	0x08004871
 80046f0:	08003f49 	.word	0x08003f49
 80046f4:	fffffaff 	.word	0xfffffaff
 80046f8:	08004b35 	.word	0x08004b35
 80046fc:	fffff6ff 	.word	0xfffff6ff

08004700 <__sccl>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	780b      	ldrb	r3, [r1, #0]
 8004704:	2b5e      	cmp	r3, #94	; 0x5e
 8004706:	d00d      	beq.n	8004724 <__sccl+0x24>
 8004708:	1c4a      	adds	r2, r1, #1
 800470a:	2100      	movs	r1, #0
 800470c:	0004      	movs	r4, r0
 800470e:	1c45      	adds	r5, r0, #1
 8004710:	35ff      	adds	r5, #255	; 0xff
 8004712:	7021      	strb	r1, [r4, #0]
 8004714:	3401      	adds	r4, #1
 8004716:	42a5      	cmp	r5, r4
 8004718:	d1fb      	bne.n	8004712 <__sccl+0x12>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <__sccl+0x2c>
 800471e:	3a01      	subs	r2, #1
 8004720:	0010      	movs	r0, r2
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	1c8a      	adds	r2, r1, #2
 8004726:	784b      	ldrb	r3, [r1, #1]
 8004728:	2101      	movs	r1, #1
 800472a:	e7ef      	b.n	800470c <__sccl+0xc>
 800472c:	2401      	movs	r4, #1
 800472e:	404c      	eors	r4, r1
 8004730:	0011      	movs	r1, r2
 8004732:	54c4      	strb	r4, [r0, r3]
 8004734:	780d      	ldrb	r5, [r1, #0]
 8004736:	1c4a      	adds	r2, r1, #1
 8004738:	2d2d      	cmp	r5, #45	; 0x2d
 800473a:	d007      	beq.n	800474c <__sccl+0x4c>
 800473c:	2d5d      	cmp	r5, #93	; 0x5d
 800473e:	d0ef      	beq.n	8004720 <__sccl+0x20>
 8004740:	2d00      	cmp	r5, #0
 8004742:	d101      	bne.n	8004748 <__sccl+0x48>
 8004744:	000a      	movs	r2, r1
 8004746:	e7eb      	b.n	8004720 <__sccl+0x20>
 8004748:	002b      	movs	r3, r5
 800474a:	e7f1      	b.n	8004730 <__sccl+0x30>
 800474c:	784e      	ldrb	r6, [r1, #1]
 800474e:	2e5d      	cmp	r6, #93	; 0x5d
 8004750:	d0fa      	beq.n	8004748 <__sccl+0x48>
 8004752:	42b3      	cmp	r3, r6
 8004754:	dcf8      	bgt.n	8004748 <__sccl+0x48>
 8004756:	3102      	adds	r1, #2
 8004758:	3301      	adds	r3, #1
 800475a:	54c4      	strb	r4, [r0, r3]
 800475c:	429e      	cmp	r6, r3
 800475e:	dcfb      	bgt.n	8004758 <__sccl+0x58>
 8004760:	e7e8      	b.n	8004734 <__sccl+0x34>
	...

08004764 <_strtol_l.isra.0>:
 8004764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004766:	001f      	movs	r7, r3
 8004768:	000e      	movs	r6, r1
 800476a:	b087      	sub	sp, #28
 800476c:	9005      	str	r0, [sp, #20]
 800476e:	9103      	str	r1, [sp, #12]
 8004770:	9202      	str	r2, [sp, #8]
 8004772:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004774:	7834      	ldrb	r4, [r6, #0]
 8004776:	f7ff fc0d 	bl	8003f94 <__locale_ctype_ptr_l>
 800477a:	2208      	movs	r2, #8
 800477c:	1900      	adds	r0, r0, r4
 800477e:	7843      	ldrb	r3, [r0, #1]
 8004780:	1c75      	adds	r5, r6, #1
 8004782:	4013      	ands	r3, r2
 8004784:	d10c      	bne.n	80047a0 <_strtol_l.isra.0+0x3c>
 8004786:	2c2d      	cmp	r4, #45	; 0x2d
 8004788:	d10c      	bne.n	80047a4 <_strtol_l.isra.0+0x40>
 800478a:	3301      	adds	r3, #1
 800478c:	782c      	ldrb	r4, [r5, #0]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	1cb5      	adds	r5, r6, #2
 8004792:	2f00      	cmp	r7, #0
 8004794:	d00c      	beq.n	80047b0 <_strtol_l.isra.0+0x4c>
 8004796:	2f10      	cmp	r7, #16
 8004798:	d114      	bne.n	80047c4 <_strtol_l.isra.0+0x60>
 800479a:	2c30      	cmp	r4, #48	; 0x30
 800479c:	d00a      	beq.n	80047b4 <_strtol_l.isra.0+0x50>
 800479e:	e011      	b.n	80047c4 <_strtol_l.isra.0+0x60>
 80047a0:	002e      	movs	r6, r5
 80047a2:	e7e6      	b.n	8004772 <_strtol_l.isra.0+0xe>
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	2c2b      	cmp	r4, #43	; 0x2b
 80047a8:	d1f3      	bne.n	8004792 <_strtol_l.isra.0+0x2e>
 80047aa:	782c      	ldrb	r4, [r5, #0]
 80047ac:	1cb5      	adds	r5, r6, #2
 80047ae:	e7f0      	b.n	8004792 <_strtol_l.isra.0+0x2e>
 80047b0:	2c30      	cmp	r4, #48	; 0x30
 80047b2:	d12f      	bne.n	8004814 <_strtol_l.isra.0+0xb0>
 80047b4:	2220      	movs	r2, #32
 80047b6:	782b      	ldrb	r3, [r5, #0]
 80047b8:	4393      	bics	r3, r2
 80047ba:	2b58      	cmp	r3, #88	; 0x58
 80047bc:	d151      	bne.n	8004862 <_strtol_l.isra.0+0xfe>
 80047be:	2710      	movs	r7, #16
 80047c0:	786c      	ldrb	r4, [r5, #1]
 80047c2:	3502      	adds	r5, #2
 80047c4:	9b01      	ldr	r3, [sp, #4]
 80047c6:	4a29      	ldr	r2, [pc, #164]	; (800486c <_strtol_l.isra.0+0x108>)
 80047c8:	0039      	movs	r1, r7
 80047ca:	189e      	adds	r6, r3, r2
 80047cc:	0030      	movs	r0, r6
 80047ce:	f7fb fd3d 	bl	800024c <__aeabi_uidivmod>
 80047d2:	0030      	movs	r0, r6
 80047d4:	9104      	str	r1, [sp, #16]
 80047d6:	0039      	movs	r1, r7
 80047d8:	f7fb fcb2 	bl	8000140 <__udivsi3>
 80047dc:	2101      	movs	r1, #1
 80047de:	2300      	movs	r3, #0
 80047e0:	4249      	negs	r1, r1
 80047e2:	0002      	movs	r2, r0
 80047e4:	468c      	mov	ip, r1
 80047e6:	0018      	movs	r0, r3
 80047e8:	0021      	movs	r1, r4
 80047ea:	3930      	subs	r1, #48	; 0x30
 80047ec:	2909      	cmp	r1, #9
 80047ee:	d813      	bhi.n	8004818 <_strtol_l.isra.0+0xb4>
 80047f0:	000c      	movs	r4, r1
 80047f2:	42a7      	cmp	r7, r4
 80047f4:	dd1c      	ble.n	8004830 <_strtol_l.isra.0+0xcc>
 80047f6:	1c59      	adds	r1, r3, #1
 80047f8:	d009      	beq.n	800480e <_strtol_l.isra.0+0xaa>
 80047fa:	4663      	mov	r3, ip
 80047fc:	4282      	cmp	r2, r0
 80047fe:	d306      	bcc.n	800480e <_strtol_l.isra.0+0xaa>
 8004800:	d102      	bne.n	8004808 <_strtol_l.isra.0+0xa4>
 8004802:	9904      	ldr	r1, [sp, #16]
 8004804:	42a1      	cmp	r1, r4
 8004806:	db02      	blt.n	800480e <_strtol_l.isra.0+0xaa>
 8004808:	2301      	movs	r3, #1
 800480a:	4378      	muls	r0, r7
 800480c:	1820      	adds	r0, r4, r0
 800480e:	782c      	ldrb	r4, [r5, #0]
 8004810:	3501      	adds	r5, #1
 8004812:	e7e9      	b.n	80047e8 <_strtol_l.isra.0+0x84>
 8004814:	270a      	movs	r7, #10
 8004816:	e7d5      	b.n	80047c4 <_strtol_l.isra.0+0x60>
 8004818:	0021      	movs	r1, r4
 800481a:	3941      	subs	r1, #65	; 0x41
 800481c:	2919      	cmp	r1, #25
 800481e:	d801      	bhi.n	8004824 <_strtol_l.isra.0+0xc0>
 8004820:	3c37      	subs	r4, #55	; 0x37
 8004822:	e7e6      	b.n	80047f2 <_strtol_l.isra.0+0x8e>
 8004824:	0021      	movs	r1, r4
 8004826:	3961      	subs	r1, #97	; 0x61
 8004828:	2919      	cmp	r1, #25
 800482a:	d801      	bhi.n	8004830 <_strtol_l.isra.0+0xcc>
 800482c:	3c57      	subs	r4, #87	; 0x57
 800482e:	e7e0      	b.n	80047f2 <_strtol_l.isra.0+0x8e>
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	d108      	bne.n	8004846 <_strtol_l.isra.0+0xe2>
 8004834:	9a05      	ldr	r2, [sp, #20]
 8004836:	3323      	adds	r3, #35	; 0x23
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	9b02      	ldr	r3, [sp, #8]
 800483c:	0030      	movs	r0, r6
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10b      	bne.n	800485a <_strtol_l.isra.0+0xf6>
 8004842:	b007      	add	sp, #28
 8004844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004846:	9a01      	ldr	r2, [sp, #4]
 8004848:	2a00      	cmp	r2, #0
 800484a:	d000      	beq.n	800484e <_strtol_l.isra.0+0xea>
 800484c:	4240      	negs	r0, r0
 800484e:	9a02      	ldr	r2, [sp, #8]
 8004850:	2a00      	cmp	r2, #0
 8004852:	d0f6      	beq.n	8004842 <_strtol_l.isra.0+0xde>
 8004854:	9a03      	ldr	r2, [sp, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d000      	beq.n	800485c <_strtol_l.isra.0+0xf8>
 800485a:	1e6a      	subs	r2, r5, #1
 800485c:	9b02      	ldr	r3, [sp, #8]
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e7ef      	b.n	8004842 <_strtol_l.isra.0+0xde>
 8004862:	2430      	movs	r4, #48	; 0x30
 8004864:	2f00      	cmp	r7, #0
 8004866:	d1ad      	bne.n	80047c4 <_strtol_l.isra.0+0x60>
 8004868:	3708      	adds	r7, #8
 800486a:	e7ab      	b.n	80047c4 <_strtol_l.isra.0+0x60>
 800486c:	7fffffff 	.word	0x7fffffff

08004870 <_strtol_r>:
 8004870:	b513      	push	{r0, r1, r4, lr}
 8004872:	4c05      	ldr	r4, [pc, #20]	; (8004888 <_strtol_r+0x18>)
 8004874:	6824      	ldr	r4, [r4, #0]
 8004876:	6a24      	ldr	r4, [r4, #32]
 8004878:	2c00      	cmp	r4, #0
 800487a:	d100      	bne.n	800487e <_strtol_r+0xe>
 800487c:	4c03      	ldr	r4, [pc, #12]	; (800488c <_strtol_r+0x1c>)
 800487e:	9400      	str	r4, [sp, #0]
 8004880:	f7ff ff70 	bl	8004764 <_strtol_l.isra.0>
 8004884:	bd16      	pop	{r1, r2, r4, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	20000010 	.word	0x20000010
 800488c:	200000bc 	.word	0x200000bc

08004890 <__submore>:
 8004890:	000b      	movs	r3, r1
 8004892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004894:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004896:	3344      	adds	r3, #68	; 0x44
 8004898:	000c      	movs	r4, r1
 800489a:	429d      	cmp	r5, r3
 800489c:	d11c      	bne.n	80048d8 <__submore+0x48>
 800489e:	2680      	movs	r6, #128	; 0x80
 80048a0:	00f6      	lsls	r6, r6, #3
 80048a2:	0031      	movs	r1, r6
 80048a4:	f7fe fc6c 	bl	8003180 <_malloc_r>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d102      	bne.n	80048b2 <__submore+0x22>
 80048ac:	2001      	movs	r0, #1
 80048ae:	4240      	negs	r0, r0
 80048b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048b2:	0023      	movs	r3, r4
 80048b4:	6360      	str	r0, [r4, #52]	; 0x34
 80048b6:	63a6      	str	r6, [r4, #56]	; 0x38
 80048b8:	3346      	adds	r3, #70	; 0x46
 80048ba:	781a      	ldrb	r2, [r3, #0]
 80048bc:	4b10      	ldr	r3, [pc, #64]	; (8004900 <__submore+0x70>)
 80048be:	54c2      	strb	r2, [r0, r3]
 80048c0:	0023      	movs	r3, r4
 80048c2:	3345      	adds	r3, #69	; 0x45
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <__submore+0x74>)
 80048c8:	54c2      	strb	r2, [r0, r3]
 80048ca:	782a      	ldrb	r2, [r5, #0]
 80048cc:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <__submore+0x78>)
 80048ce:	54c2      	strb	r2, [r0, r3]
 80048d0:	18c0      	adds	r0, r0, r3
 80048d2:	6020      	str	r0, [r4, #0]
 80048d4:	2000      	movs	r0, #0
 80048d6:	e7eb      	b.n	80048b0 <__submore+0x20>
 80048d8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80048da:	0029      	movs	r1, r5
 80048dc:	0073      	lsls	r3, r6, #1
 80048de:	001a      	movs	r2, r3
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	f7ff fba1 	bl	8004028 <_realloc_r>
 80048e6:	1e05      	subs	r5, r0, #0
 80048e8:	d0e0      	beq.n	80048ac <__submore+0x1c>
 80048ea:	1987      	adds	r7, r0, r6
 80048ec:	0001      	movs	r1, r0
 80048ee:	0032      	movs	r2, r6
 80048f0:	0038      	movs	r0, r7
 80048f2:	f7ff fb7e 	bl	8003ff2 <memcpy>
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	6027      	str	r7, [r4, #0]
 80048fa:	6365      	str	r5, [r4, #52]	; 0x34
 80048fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80048fe:	e7e9      	b.n	80048d4 <__submore+0x44>
 8004900:	000003ff 	.word	0x000003ff
 8004904:	000003fe 	.word	0x000003fe
 8004908:	000003fd 	.word	0x000003fd

0800490c <__ascii_wctomb>:
 800490c:	1e0b      	subs	r3, r1, #0
 800490e:	d004      	beq.n	800491a <__ascii_wctomb+0xe>
 8004910:	2aff      	cmp	r2, #255	; 0xff
 8004912:	d904      	bls.n	800491e <__ascii_wctomb+0x12>
 8004914:	238a      	movs	r3, #138	; 0x8a
 8004916:	6003      	str	r3, [r0, #0]
 8004918:	3b8b      	subs	r3, #139	; 0x8b
 800491a:	0018      	movs	r0, r3
 800491c:	4770      	bx	lr
 800491e:	700a      	strb	r2, [r1, #0]
 8004920:	2301      	movs	r3, #1
 8004922:	e7fa      	b.n	800491a <__ascii_wctomb+0xe>

08004924 <_malloc_usable_size_r>:
 8004924:	1f0b      	subs	r3, r1, #4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	1f18      	subs	r0, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	da01      	bge.n	8004932 <_malloc_usable_size_r+0xe>
 800492e:	580b      	ldr	r3, [r1, r0]
 8004930:	18c0      	adds	r0, r0, r3
 8004932:	4770      	bx	lr

08004934 <_init>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr

08004940 <_fini>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr
