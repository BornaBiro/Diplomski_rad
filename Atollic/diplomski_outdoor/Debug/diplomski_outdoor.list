
diplomski_outdoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08007024  08007024  00017024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  080073f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000021c  20000228  0800761c  00020228  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000444  0800761c  00020444  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 10 .debug_info   000170a1  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000033b5  00000000  00000000  000372f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a442  00000000  00000000  0003a6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e30  00000000  00000000  00044ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001078  00000000  00000000  00045918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000889b  00000000  00000000  00046990  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000481c  00000000  00000000  0004f22b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00053a47  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003760  00000000  00000000  00053ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000228 	.word	0x20000228
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800700c 	.word	0x0800700c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000022c 	.word	0x2000022c
 8000104:	0800700c 	.word	0x0800700c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_uldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d111      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d10f      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_uldivmod+0xe>
 8000438:	2800      	cmp	r0, #0
 800043a:	d002      	beq.n	8000442 <__aeabi_uldivmod+0x16>
 800043c:	2100      	movs	r1, #0
 800043e:	43c9      	mvns	r1, r1
 8000440:	1c08      	adds	r0, r1, #0
 8000442:	b407      	push	{r0, r1, r2}
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <__aeabi_uldivmod+0x24>)
 8000446:	a102      	add	r1, pc, #8	; (adr r1, 8000450 <__aeabi_uldivmod+0x24>)
 8000448:	1840      	adds	r0, r0, r1
 800044a:	9002      	str	r0, [sp, #8]
 800044c:	bd03      	pop	{r0, r1, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	ffffffd9 	.word	0xffffffd9
 8000454:	b403      	push	{r0, r1}
 8000456:	4668      	mov	r0, sp
 8000458:	b501      	push	{r0, lr}
 800045a:	9802      	ldr	r0, [sp, #8]
 800045c:	f000 f824 	bl	80004a8 <__udivmoddi4>
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	469e      	mov	lr, r3
 8000464:	b002      	add	sp, #8
 8000466:	bc0c      	pop	{r2, r3}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f001 fe2b 	bl	80020d0 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fcf1 	bl	8001e68 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 f9d4 	bl	800183c <__aeabi_dsub>
 8000494:	f001 fce8 	bl	8001e68 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	b083      	sub	sp, #12
 80004b8:	000d      	movs	r5, r1
 80004ba:	4692      	mov	sl, r2
 80004bc:	4699      	mov	r9, r3
 80004be:	428b      	cmp	r3, r1
 80004c0:	d82f      	bhi.n	8000522 <__udivmoddi4+0x7a>
 80004c2:	d02c      	beq.n	800051e <__udivmoddi4+0x76>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f001 fe2a 	bl	8002120 <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f001 fe25 	bl	8002120 <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d500      	bpl.n	80004e2 <__udivmoddi4+0x3a>
 80004e0:	e074      	b.n	80005cc <__udivmoddi4+0x124>
 80004e2:	4653      	mov	r3, sl
 80004e4:	465a      	mov	r2, fp
 80004e6:	4093      	lsls	r3, r2
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4642      	mov	r2, r8
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d829      	bhi.n	800054a <__udivmoddi4+0xa2>
 80004f6:	d026      	beq.n	8000546 <__udivmoddi4+0x9e>
 80004f8:	465b      	mov	r3, fp
 80004fa:	1ba4      	subs	r4, r4, r6
 80004fc:	41bd      	sbcs	r5, r7
 80004fe:	2b00      	cmp	r3, #0
 8000500:	da00      	bge.n	8000504 <__udivmoddi4+0x5c>
 8000502:	e079      	b.n	80005f8 <__udivmoddi4+0x150>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2301      	movs	r3, #1
 800050e:	465a      	mov	r2, fp
 8000510:	4093      	lsls	r3, r2
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2301      	movs	r3, #1
 8000516:	4642      	mov	r2, r8
 8000518:	4093      	lsls	r3, r2
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	e019      	b.n	8000552 <__udivmoddi4+0xaa>
 800051e:	4282      	cmp	r2, r0
 8000520:	d9d0      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000522:	2200      	movs	r2, #0
 8000524:	2300      	movs	r3, #0
 8000526:	9200      	str	r2, [sp, #0]
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <__udivmoddi4+0x8c>
 8000530:	601c      	str	r4, [r3, #0]
 8000532:	605d      	str	r5, [r3, #4]
 8000534:	9800      	ldr	r0, [sp, #0]
 8000536:	9901      	ldr	r1, [sp, #4]
 8000538:	b003      	add	sp, #12
 800053a:	bc3c      	pop	{r2, r3, r4, r5}
 800053c:	4690      	mov	r8, r2
 800053e:	4699      	mov	r9, r3
 8000540:	46a2      	mov	sl, r4
 8000542:	46ab      	mov	fp, r5
 8000544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000546:	42a3      	cmp	r3, r4
 8000548:	d9d6      	bls.n	80004f8 <__udivmoddi4+0x50>
 800054a:	2200      	movs	r2, #0
 800054c:	2300      	movs	r3, #0
 800054e:	9200      	str	r2, [sp, #0]
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	4643      	mov	r3, r8
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0e8      	beq.n	800052a <__udivmoddi4+0x82>
 8000558:	07fb      	lsls	r3, r7, #31
 800055a:	0872      	lsrs	r2, r6, #1
 800055c:	431a      	orrs	r2, r3
 800055e:	4646      	mov	r6, r8
 8000560:	087b      	lsrs	r3, r7, #1
 8000562:	e00e      	b.n	8000582 <__udivmoddi4+0xda>
 8000564:	42ab      	cmp	r3, r5
 8000566:	d101      	bne.n	800056c <__udivmoddi4+0xc4>
 8000568:	42a2      	cmp	r2, r4
 800056a:	d80c      	bhi.n	8000586 <__udivmoddi4+0xde>
 800056c:	1aa4      	subs	r4, r4, r2
 800056e:	419d      	sbcs	r5, r3
 8000570:	2001      	movs	r0, #1
 8000572:	1924      	adds	r4, r4, r4
 8000574:	416d      	adcs	r5, r5
 8000576:	2100      	movs	r1, #0
 8000578:	3e01      	subs	r6, #1
 800057a:	1824      	adds	r4, r4, r0
 800057c:	414d      	adcs	r5, r1
 800057e:	2e00      	cmp	r6, #0
 8000580:	d006      	beq.n	8000590 <__udivmoddi4+0xe8>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d9ee      	bls.n	8000564 <__udivmoddi4+0xbc>
 8000586:	3e01      	subs	r6, #1
 8000588:	1924      	adds	r4, r4, r4
 800058a:	416d      	adcs	r5, r5
 800058c:	2e00      	cmp	r6, #0
 800058e:	d1f8      	bne.n	8000582 <__udivmoddi4+0xda>
 8000590:	465b      	mov	r3, fp
 8000592:	9800      	ldr	r0, [sp, #0]
 8000594:	9901      	ldr	r1, [sp, #4]
 8000596:	1900      	adds	r0, r0, r4
 8000598:	4169      	adcs	r1, r5
 800059a:	2b00      	cmp	r3, #0
 800059c:	db22      	blt.n	80005e4 <__udivmoddi4+0x13c>
 800059e:	002b      	movs	r3, r5
 80005a0:	465a      	mov	r2, fp
 80005a2:	40d3      	lsrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	4644      	mov	r4, r8
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db2c      	blt.n	800060e <__udivmoddi4+0x166>
 80005b4:	0026      	movs	r6, r4
 80005b6:	409e      	lsls	r6, r3
 80005b8:	0033      	movs	r3, r6
 80005ba:	0026      	movs	r6, r4
 80005bc:	4647      	mov	r7, r8
 80005be:	40be      	lsls	r6, r7
 80005c0:	0032      	movs	r2, r6
 80005c2:	1a80      	subs	r0, r0, r2
 80005c4:	4199      	sbcs	r1, r3
 80005c6:	9000      	str	r0, [sp, #0]
 80005c8:	9101      	str	r1, [sp, #4]
 80005ca:	e7ae      	b.n	800052a <__udivmoddi4+0x82>
 80005cc:	4642      	mov	r2, r8
 80005ce:	2320      	movs	r3, #32
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	4652      	mov	r2, sl
 80005d4:	40da      	lsrs	r2, r3
 80005d6:	4641      	mov	r1, r8
 80005d8:	0013      	movs	r3, r2
 80005da:	464a      	mov	r2, r9
 80005dc:	408a      	lsls	r2, r1
 80005de:	0017      	movs	r7, r2
 80005e0:	431f      	orrs	r7, r3
 80005e2:	e782      	b.n	80004ea <__udivmoddi4+0x42>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4313      	orrs	r3, r2
 80005f6:	e7d5      	b.n	80005a4 <__udivmoddi4+0xfc>
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	2100      	movs	r1, #0
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	2200      	movs	r2, #0
 8000602:	9100      	str	r1, [sp, #0]
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	2201      	movs	r2, #1
 8000608:	40da      	lsrs	r2, r3
 800060a:	9201      	str	r2, [sp, #4]
 800060c:	e782      	b.n	8000514 <__udivmoddi4+0x6c>
 800060e:	4642      	mov	r2, r8
 8000610:	2320      	movs	r3, #32
 8000612:	0026      	movs	r6, r4
 8000614:	1a9b      	subs	r3, r3, r2
 8000616:	40de      	lsrs	r6, r3
 8000618:	002f      	movs	r7, r5
 800061a:	46b4      	mov	ip, r6
 800061c:	4097      	lsls	r7, r2
 800061e:	4666      	mov	r6, ip
 8000620:	003b      	movs	r3, r7
 8000622:	4333      	orrs	r3, r6
 8000624:	e7c9      	b.n	80005ba <__udivmoddi4+0x112>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__aeabi_ui2f>:
 8000628:	b510      	push	{r4, lr}
 800062a:	1e04      	subs	r4, r0, #0
 800062c:	d027      	beq.n	800067e <__aeabi_ui2f+0x56>
 800062e:	f001 fd59 	bl	80020e4 <__clzsi2>
 8000632:	239e      	movs	r3, #158	; 0x9e
 8000634:	1a1b      	subs	r3, r3, r0
 8000636:	2b96      	cmp	r3, #150	; 0x96
 8000638:	dc0a      	bgt.n	8000650 <__aeabi_ui2f+0x28>
 800063a:	2296      	movs	r2, #150	; 0x96
 800063c:	1ad2      	subs	r2, r2, r3
 800063e:	4094      	lsls	r4, r2
 8000640:	0264      	lsls	r4, r4, #9
 8000642:	0a64      	lsrs	r4, r4, #9
 8000644:	b2db      	uxtb	r3, r3
 8000646:	0264      	lsls	r4, r4, #9
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	0a60      	lsrs	r0, r4, #9
 800064c:	4318      	orrs	r0, r3
 800064e:	bd10      	pop	{r4, pc}
 8000650:	2b99      	cmp	r3, #153	; 0x99
 8000652:	dc17      	bgt.n	8000684 <__aeabi_ui2f+0x5c>
 8000654:	2299      	movs	r2, #153	; 0x99
 8000656:	1ad2      	subs	r2, r2, r3
 8000658:	2a00      	cmp	r2, #0
 800065a:	dd27      	ble.n	80006ac <__aeabi_ui2f+0x84>
 800065c:	4094      	lsls	r4, r2
 800065e:	0022      	movs	r2, r4
 8000660:	4c13      	ldr	r4, [pc, #76]	; (80006b0 <__aeabi_ui2f+0x88>)
 8000662:	4014      	ands	r4, r2
 8000664:	0751      	lsls	r1, r2, #29
 8000666:	d004      	beq.n	8000672 <__aeabi_ui2f+0x4a>
 8000668:	210f      	movs	r1, #15
 800066a:	400a      	ands	r2, r1
 800066c:	2a04      	cmp	r2, #4
 800066e:	d000      	beq.n	8000672 <__aeabi_ui2f+0x4a>
 8000670:	3404      	adds	r4, #4
 8000672:	0162      	lsls	r2, r4, #5
 8000674:	d412      	bmi.n	800069c <__aeabi_ui2f+0x74>
 8000676:	01a4      	lsls	r4, r4, #6
 8000678:	0a64      	lsrs	r4, r4, #9
 800067a:	b2db      	uxtb	r3, r3
 800067c:	e7e3      	b.n	8000646 <__aeabi_ui2f+0x1e>
 800067e:	2300      	movs	r3, #0
 8000680:	2400      	movs	r4, #0
 8000682:	e7e0      	b.n	8000646 <__aeabi_ui2f+0x1e>
 8000684:	22b9      	movs	r2, #185	; 0xb9
 8000686:	0021      	movs	r1, r4
 8000688:	1ad2      	subs	r2, r2, r3
 800068a:	4091      	lsls	r1, r2
 800068c:	000a      	movs	r2, r1
 800068e:	1e51      	subs	r1, r2, #1
 8000690:	418a      	sbcs	r2, r1
 8000692:	2105      	movs	r1, #5
 8000694:	1a09      	subs	r1, r1, r0
 8000696:	40cc      	lsrs	r4, r1
 8000698:	4314      	orrs	r4, r2
 800069a:	e7db      	b.n	8000654 <__aeabi_ui2f+0x2c>
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <__aeabi_ui2f+0x88>)
 800069e:	401c      	ands	r4, r3
 80006a0:	239f      	movs	r3, #159	; 0x9f
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	1a1b      	subs	r3, r3, r0
 80006a6:	0a64      	lsrs	r4, r4, #9
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	e7cc      	b.n	8000646 <__aeabi_ui2f+0x1e>
 80006ac:	0022      	movs	r2, r4
 80006ae:	e7d7      	b.n	8000660 <__aeabi_ui2f+0x38>
 80006b0:	fbffffff 	.word	0xfbffffff

080006b4 <__aeabi_dadd>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	4645      	mov	r5, r8
 80006b8:	46de      	mov	lr, fp
 80006ba:	4657      	mov	r7, sl
 80006bc:	464e      	mov	r6, r9
 80006be:	030c      	lsls	r4, r1, #12
 80006c0:	b5e0      	push	{r5, r6, r7, lr}
 80006c2:	004e      	lsls	r6, r1, #1
 80006c4:	0fc9      	lsrs	r1, r1, #31
 80006c6:	4688      	mov	r8, r1
 80006c8:	000d      	movs	r5, r1
 80006ca:	0a61      	lsrs	r1, r4, #9
 80006cc:	0f44      	lsrs	r4, r0, #29
 80006ce:	430c      	orrs	r4, r1
 80006d0:	00c7      	lsls	r7, r0, #3
 80006d2:	0319      	lsls	r1, r3, #12
 80006d4:	0058      	lsls	r0, r3, #1
 80006d6:	0fdb      	lsrs	r3, r3, #31
 80006d8:	469b      	mov	fp, r3
 80006da:	0a4b      	lsrs	r3, r1, #9
 80006dc:	0f51      	lsrs	r1, r2, #29
 80006de:	430b      	orrs	r3, r1
 80006e0:	0d76      	lsrs	r6, r6, #21
 80006e2:	0d40      	lsrs	r0, r0, #21
 80006e4:	0019      	movs	r1, r3
 80006e6:	00d2      	lsls	r2, r2, #3
 80006e8:	45d8      	cmp	r8, fp
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x3a>
 80006ec:	e0ae      	b.n	800084c <__aeabi_dadd+0x198>
 80006ee:	1a35      	subs	r5, r6, r0
 80006f0:	2d00      	cmp	r5, #0
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_dadd+0x42>
 80006f4:	e0f6      	b.n	80008e4 <__aeabi_dadd+0x230>
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dadd+0x66>
 80006fa:	4313      	orrs	r3, r2
 80006fc:	d100      	bne.n	8000700 <__aeabi_dadd+0x4c>
 80006fe:	e0db      	b.n	80008b8 <__aeabi_dadd+0x204>
 8000700:	1e6b      	subs	r3, r5, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_dadd+0x54>
 8000706:	e137      	b.n	8000978 <__aeabi_dadd+0x2c4>
 8000708:	1aba      	subs	r2, r7, r2
 800070a:	4297      	cmp	r7, r2
 800070c:	41bf      	sbcs	r7, r7
 800070e:	1a64      	subs	r4, r4, r1
 8000710:	427f      	negs	r7, r7
 8000712:	1be4      	subs	r4, r4, r7
 8000714:	2601      	movs	r6, #1
 8000716:	0017      	movs	r7, r2
 8000718:	e024      	b.n	8000764 <__aeabi_dadd+0xb0>
 800071a:	4bc6      	ldr	r3, [pc, #792]	; (8000a34 <__aeabi_dadd+0x380>)
 800071c:	429e      	cmp	r6, r3
 800071e:	d04d      	beq.n	80007bc <__aeabi_dadd+0x108>
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	041b      	lsls	r3, r3, #16
 8000724:	4319      	orrs	r1, r3
 8000726:	2d38      	cmp	r5, #56	; 0x38
 8000728:	dd00      	ble.n	800072c <__aeabi_dadd+0x78>
 800072a:	e107      	b.n	800093c <__aeabi_dadd+0x288>
 800072c:	2d1f      	cmp	r5, #31
 800072e:	dd00      	ble.n	8000732 <__aeabi_dadd+0x7e>
 8000730:	e138      	b.n	80009a4 <__aeabi_dadd+0x2f0>
 8000732:	2020      	movs	r0, #32
 8000734:	1b43      	subs	r3, r0, r5
 8000736:	469a      	mov	sl, r3
 8000738:	000b      	movs	r3, r1
 800073a:	4650      	mov	r0, sl
 800073c:	4083      	lsls	r3, r0
 800073e:	4699      	mov	r9, r3
 8000740:	0013      	movs	r3, r2
 8000742:	4648      	mov	r0, r9
 8000744:	40eb      	lsrs	r3, r5
 8000746:	4318      	orrs	r0, r3
 8000748:	0003      	movs	r3, r0
 800074a:	4650      	mov	r0, sl
 800074c:	4082      	lsls	r2, r0
 800074e:	1e50      	subs	r0, r2, #1
 8000750:	4182      	sbcs	r2, r0
 8000752:	40e9      	lsrs	r1, r5
 8000754:	431a      	orrs	r2, r3
 8000756:	1aba      	subs	r2, r7, r2
 8000758:	1a61      	subs	r1, r4, r1
 800075a:	4297      	cmp	r7, r2
 800075c:	41a4      	sbcs	r4, r4
 800075e:	0017      	movs	r7, r2
 8000760:	4264      	negs	r4, r4
 8000762:	1b0c      	subs	r4, r1, r4
 8000764:	0223      	lsls	r3, r4, #8
 8000766:	d562      	bpl.n	800082e <__aeabi_dadd+0x17a>
 8000768:	0264      	lsls	r4, r4, #9
 800076a:	0a65      	lsrs	r5, r4, #9
 800076c:	2d00      	cmp	r5, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_dadd+0xbe>
 8000770:	e0df      	b.n	8000932 <__aeabi_dadd+0x27e>
 8000772:	0028      	movs	r0, r5
 8000774:	f001 fcb6 	bl	80020e4 <__clzsi2>
 8000778:	0003      	movs	r3, r0
 800077a:	3b08      	subs	r3, #8
 800077c:	2b1f      	cmp	r3, #31
 800077e:	dd00      	ble.n	8000782 <__aeabi_dadd+0xce>
 8000780:	e0d2      	b.n	8000928 <__aeabi_dadd+0x274>
 8000782:	2220      	movs	r2, #32
 8000784:	003c      	movs	r4, r7
 8000786:	1ad2      	subs	r2, r2, r3
 8000788:	409d      	lsls	r5, r3
 800078a:	40d4      	lsrs	r4, r2
 800078c:	409f      	lsls	r7, r3
 800078e:	4325      	orrs	r5, r4
 8000790:	429e      	cmp	r6, r3
 8000792:	dd00      	ble.n	8000796 <__aeabi_dadd+0xe2>
 8000794:	e0c4      	b.n	8000920 <__aeabi_dadd+0x26c>
 8000796:	1b9e      	subs	r6, r3, r6
 8000798:	1c73      	adds	r3, r6, #1
 800079a:	2b1f      	cmp	r3, #31
 800079c:	dd00      	ble.n	80007a0 <__aeabi_dadd+0xec>
 800079e:	e0f1      	b.n	8000984 <__aeabi_dadd+0x2d0>
 80007a0:	2220      	movs	r2, #32
 80007a2:	0038      	movs	r0, r7
 80007a4:	0029      	movs	r1, r5
 80007a6:	1ad2      	subs	r2, r2, r3
 80007a8:	40d8      	lsrs	r0, r3
 80007aa:	4091      	lsls	r1, r2
 80007ac:	4097      	lsls	r7, r2
 80007ae:	002c      	movs	r4, r5
 80007b0:	4301      	orrs	r1, r0
 80007b2:	1e78      	subs	r0, r7, #1
 80007b4:	4187      	sbcs	r7, r0
 80007b6:	40dc      	lsrs	r4, r3
 80007b8:	2600      	movs	r6, #0
 80007ba:	430f      	orrs	r7, r1
 80007bc:	077b      	lsls	r3, r7, #29
 80007be:	d009      	beq.n	80007d4 <__aeabi_dadd+0x120>
 80007c0:	230f      	movs	r3, #15
 80007c2:	403b      	ands	r3, r7
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d005      	beq.n	80007d4 <__aeabi_dadd+0x120>
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	42bb      	cmp	r3, r7
 80007cc:	41bf      	sbcs	r7, r7
 80007ce:	427f      	negs	r7, r7
 80007d0:	19e4      	adds	r4, r4, r7
 80007d2:	001f      	movs	r7, r3
 80007d4:	0223      	lsls	r3, r4, #8
 80007d6:	d52c      	bpl.n	8000832 <__aeabi_dadd+0x17e>
 80007d8:	4b96      	ldr	r3, [pc, #600]	; (8000a34 <__aeabi_dadd+0x380>)
 80007da:	3601      	adds	r6, #1
 80007dc:	429e      	cmp	r6, r3
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x12e>
 80007e0:	e09a      	b.n	8000918 <__aeabi_dadd+0x264>
 80007e2:	4645      	mov	r5, r8
 80007e4:	4b94      	ldr	r3, [pc, #592]	; (8000a38 <__aeabi_dadd+0x384>)
 80007e6:	08ff      	lsrs	r7, r7, #3
 80007e8:	401c      	ands	r4, r3
 80007ea:	0760      	lsls	r0, r4, #29
 80007ec:	0576      	lsls	r6, r6, #21
 80007ee:	0264      	lsls	r4, r4, #9
 80007f0:	4307      	orrs	r7, r0
 80007f2:	0b24      	lsrs	r4, r4, #12
 80007f4:	0d76      	lsrs	r6, r6, #21
 80007f6:	2100      	movs	r1, #0
 80007f8:	0324      	lsls	r4, r4, #12
 80007fa:	0b23      	lsrs	r3, r4, #12
 80007fc:	0d0c      	lsrs	r4, r1, #20
 80007fe:	4a8f      	ldr	r2, [pc, #572]	; (8000a3c <__aeabi_dadd+0x388>)
 8000800:	0524      	lsls	r4, r4, #20
 8000802:	431c      	orrs	r4, r3
 8000804:	4014      	ands	r4, r2
 8000806:	0533      	lsls	r3, r6, #20
 8000808:	4323      	orrs	r3, r4
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	07ed      	lsls	r5, r5, #31
 800080e:	085b      	lsrs	r3, r3, #1
 8000810:	432b      	orrs	r3, r5
 8000812:	0038      	movs	r0, r7
 8000814:	0019      	movs	r1, r3
 8000816:	bc3c      	pop	{r2, r3, r4, r5}
 8000818:	4690      	mov	r8, r2
 800081a:	4699      	mov	r9, r3
 800081c:	46a2      	mov	sl, r4
 800081e:	46ab      	mov	fp, r5
 8000820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000822:	4664      	mov	r4, ip
 8000824:	4304      	orrs	r4, r0
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x176>
 8000828:	e211      	b.n	8000c4e <__aeabi_dadd+0x59a>
 800082a:	0004      	movs	r4, r0
 800082c:	4667      	mov	r7, ip
 800082e:	077b      	lsls	r3, r7, #29
 8000830:	d1c6      	bne.n	80007c0 <__aeabi_dadd+0x10c>
 8000832:	4645      	mov	r5, r8
 8000834:	0760      	lsls	r0, r4, #29
 8000836:	08ff      	lsrs	r7, r7, #3
 8000838:	4307      	orrs	r7, r0
 800083a:	08e4      	lsrs	r4, r4, #3
 800083c:	4b7d      	ldr	r3, [pc, #500]	; (8000a34 <__aeabi_dadd+0x380>)
 800083e:	429e      	cmp	r6, r3
 8000840:	d030      	beq.n	80008a4 <__aeabi_dadd+0x1f0>
 8000842:	0324      	lsls	r4, r4, #12
 8000844:	0576      	lsls	r6, r6, #21
 8000846:	0b24      	lsrs	r4, r4, #12
 8000848:	0d76      	lsrs	r6, r6, #21
 800084a:	e7d4      	b.n	80007f6 <__aeabi_dadd+0x142>
 800084c:	1a33      	subs	r3, r6, r0
 800084e:	469a      	mov	sl, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	dd78      	ble.n	8000946 <__aeabi_dadd+0x292>
 8000854:	2800      	cmp	r0, #0
 8000856:	d031      	beq.n	80008bc <__aeabi_dadd+0x208>
 8000858:	4876      	ldr	r0, [pc, #472]	; (8000a34 <__aeabi_dadd+0x380>)
 800085a:	4286      	cmp	r6, r0
 800085c:	d0ae      	beq.n	80007bc <__aeabi_dadd+0x108>
 800085e:	2080      	movs	r0, #128	; 0x80
 8000860:	0400      	lsls	r0, r0, #16
 8000862:	4301      	orrs	r1, r0
 8000864:	4653      	mov	r3, sl
 8000866:	2b38      	cmp	r3, #56	; 0x38
 8000868:	dc00      	bgt.n	800086c <__aeabi_dadd+0x1b8>
 800086a:	e0e9      	b.n	8000a40 <__aeabi_dadd+0x38c>
 800086c:	430a      	orrs	r2, r1
 800086e:	1e51      	subs	r1, r2, #1
 8000870:	418a      	sbcs	r2, r1
 8000872:	2100      	movs	r1, #0
 8000874:	19d2      	adds	r2, r2, r7
 8000876:	42ba      	cmp	r2, r7
 8000878:	41bf      	sbcs	r7, r7
 800087a:	1909      	adds	r1, r1, r4
 800087c:	427c      	negs	r4, r7
 800087e:	0017      	movs	r7, r2
 8000880:	190c      	adds	r4, r1, r4
 8000882:	0223      	lsls	r3, r4, #8
 8000884:	d5d3      	bpl.n	800082e <__aeabi_dadd+0x17a>
 8000886:	4b6b      	ldr	r3, [pc, #428]	; (8000a34 <__aeabi_dadd+0x380>)
 8000888:	3601      	adds	r6, #1
 800088a:	429e      	cmp	r6, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x1dc>
 800088e:	e13a      	b.n	8000b06 <__aeabi_dadd+0x452>
 8000890:	2001      	movs	r0, #1
 8000892:	4b69      	ldr	r3, [pc, #420]	; (8000a38 <__aeabi_dadd+0x384>)
 8000894:	401c      	ands	r4, r3
 8000896:	087b      	lsrs	r3, r7, #1
 8000898:	4007      	ands	r7, r0
 800089a:	431f      	orrs	r7, r3
 800089c:	07e0      	lsls	r0, r4, #31
 800089e:	4307      	orrs	r7, r0
 80008a0:	0864      	lsrs	r4, r4, #1
 80008a2:	e78b      	b.n	80007bc <__aeabi_dadd+0x108>
 80008a4:	0023      	movs	r3, r4
 80008a6:	433b      	orrs	r3, r7
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x1f8>
 80008aa:	e1cb      	b.n	8000c44 <__aeabi_dadd+0x590>
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	0312      	lsls	r2, r2, #12
 80008b0:	4314      	orrs	r4, r2
 80008b2:	0324      	lsls	r4, r4, #12
 80008b4:	0b24      	lsrs	r4, r4, #12
 80008b6:	e79e      	b.n	80007f6 <__aeabi_dadd+0x142>
 80008b8:	002e      	movs	r6, r5
 80008ba:	e77f      	b.n	80007bc <__aeabi_dadd+0x108>
 80008bc:	0008      	movs	r0, r1
 80008be:	4310      	orrs	r0, r2
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x210>
 80008c2:	e0b4      	b.n	8000a2e <__aeabi_dadd+0x37a>
 80008c4:	1e58      	subs	r0, r3, #1
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x218>
 80008ca:	e0de      	b.n	8000a8a <__aeabi_dadd+0x3d6>
 80008cc:	18ba      	adds	r2, r7, r2
 80008ce:	42ba      	cmp	r2, r7
 80008d0:	419b      	sbcs	r3, r3
 80008d2:	1864      	adds	r4, r4, r1
 80008d4:	425b      	negs	r3, r3
 80008d6:	18e4      	adds	r4, r4, r3
 80008d8:	0017      	movs	r7, r2
 80008da:	2601      	movs	r6, #1
 80008dc:	0223      	lsls	r3, r4, #8
 80008de:	d5a6      	bpl.n	800082e <__aeabi_dadd+0x17a>
 80008e0:	2602      	movs	r6, #2
 80008e2:	e7d5      	b.n	8000890 <__aeabi_dadd+0x1dc>
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d16e      	bne.n	80009c6 <__aeabi_dadd+0x312>
 80008e8:	1c70      	adds	r0, r6, #1
 80008ea:	0540      	lsls	r0, r0, #21
 80008ec:	0d40      	lsrs	r0, r0, #21
 80008ee:	2801      	cmp	r0, #1
 80008f0:	dc00      	bgt.n	80008f4 <__aeabi_dadd+0x240>
 80008f2:	e0f9      	b.n	8000ae8 <__aeabi_dadd+0x434>
 80008f4:	1ab8      	subs	r0, r7, r2
 80008f6:	4684      	mov	ip, r0
 80008f8:	4287      	cmp	r7, r0
 80008fa:	4180      	sbcs	r0, r0
 80008fc:	1ae5      	subs	r5, r4, r3
 80008fe:	4240      	negs	r0, r0
 8000900:	1a2d      	subs	r5, r5, r0
 8000902:	0228      	lsls	r0, r5, #8
 8000904:	d400      	bmi.n	8000908 <__aeabi_dadd+0x254>
 8000906:	e089      	b.n	8000a1c <__aeabi_dadd+0x368>
 8000908:	1bd7      	subs	r7, r2, r7
 800090a:	42ba      	cmp	r2, r7
 800090c:	4192      	sbcs	r2, r2
 800090e:	1b1c      	subs	r4, r3, r4
 8000910:	4252      	negs	r2, r2
 8000912:	1aa5      	subs	r5, r4, r2
 8000914:	46d8      	mov	r8, fp
 8000916:	e729      	b.n	800076c <__aeabi_dadd+0xb8>
 8000918:	4645      	mov	r5, r8
 800091a:	2400      	movs	r4, #0
 800091c:	2700      	movs	r7, #0
 800091e:	e76a      	b.n	80007f6 <__aeabi_dadd+0x142>
 8000920:	4c45      	ldr	r4, [pc, #276]	; (8000a38 <__aeabi_dadd+0x384>)
 8000922:	1af6      	subs	r6, r6, r3
 8000924:	402c      	ands	r4, r5
 8000926:	e749      	b.n	80007bc <__aeabi_dadd+0x108>
 8000928:	003d      	movs	r5, r7
 800092a:	3828      	subs	r0, #40	; 0x28
 800092c:	4085      	lsls	r5, r0
 800092e:	2700      	movs	r7, #0
 8000930:	e72e      	b.n	8000790 <__aeabi_dadd+0xdc>
 8000932:	0038      	movs	r0, r7
 8000934:	f001 fbd6 	bl	80020e4 <__clzsi2>
 8000938:	3020      	adds	r0, #32
 800093a:	e71d      	b.n	8000778 <__aeabi_dadd+0xc4>
 800093c:	430a      	orrs	r2, r1
 800093e:	1e51      	subs	r1, r2, #1
 8000940:	418a      	sbcs	r2, r1
 8000942:	2100      	movs	r1, #0
 8000944:	e707      	b.n	8000756 <__aeabi_dadd+0xa2>
 8000946:	2b00      	cmp	r3, #0
 8000948:	d000      	beq.n	800094c <__aeabi_dadd+0x298>
 800094a:	e0f3      	b.n	8000b34 <__aeabi_dadd+0x480>
 800094c:	1c70      	adds	r0, r6, #1
 800094e:	0543      	lsls	r3, r0, #21
 8000950:	0d5b      	lsrs	r3, r3, #21
 8000952:	2b01      	cmp	r3, #1
 8000954:	dc00      	bgt.n	8000958 <__aeabi_dadd+0x2a4>
 8000956:	e0ad      	b.n	8000ab4 <__aeabi_dadd+0x400>
 8000958:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <__aeabi_dadd+0x380>)
 800095a:	4298      	cmp	r0, r3
 800095c:	d100      	bne.n	8000960 <__aeabi_dadd+0x2ac>
 800095e:	e0d1      	b.n	8000b04 <__aeabi_dadd+0x450>
 8000960:	18ba      	adds	r2, r7, r2
 8000962:	42ba      	cmp	r2, r7
 8000964:	41bf      	sbcs	r7, r7
 8000966:	1864      	adds	r4, r4, r1
 8000968:	427f      	negs	r7, r7
 800096a:	19e4      	adds	r4, r4, r7
 800096c:	07e7      	lsls	r7, r4, #31
 800096e:	0852      	lsrs	r2, r2, #1
 8000970:	4317      	orrs	r7, r2
 8000972:	0864      	lsrs	r4, r4, #1
 8000974:	0006      	movs	r6, r0
 8000976:	e721      	b.n	80007bc <__aeabi_dadd+0x108>
 8000978:	482e      	ldr	r0, [pc, #184]	; (8000a34 <__aeabi_dadd+0x380>)
 800097a:	4285      	cmp	r5, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2cc>
 800097e:	e093      	b.n	8000aa8 <__aeabi_dadd+0x3f4>
 8000980:	001d      	movs	r5, r3
 8000982:	e6d0      	b.n	8000726 <__aeabi_dadd+0x72>
 8000984:	0029      	movs	r1, r5
 8000986:	3e1f      	subs	r6, #31
 8000988:	40f1      	lsrs	r1, r6
 800098a:	2b20      	cmp	r3, #32
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x2dc>
 800098e:	e08d      	b.n	8000aac <__aeabi_dadd+0x3f8>
 8000990:	2240      	movs	r2, #64	; 0x40
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	409d      	lsls	r5, r3
 8000996:	432f      	orrs	r7, r5
 8000998:	1e7d      	subs	r5, r7, #1
 800099a:	41af      	sbcs	r7, r5
 800099c:	2400      	movs	r4, #0
 800099e:	430f      	orrs	r7, r1
 80009a0:	2600      	movs	r6, #0
 80009a2:	e744      	b.n	800082e <__aeabi_dadd+0x17a>
 80009a4:	002b      	movs	r3, r5
 80009a6:	0008      	movs	r0, r1
 80009a8:	3b20      	subs	r3, #32
 80009aa:	40d8      	lsrs	r0, r3
 80009ac:	0003      	movs	r3, r0
 80009ae:	2d20      	cmp	r5, #32
 80009b0:	d100      	bne.n	80009b4 <__aeabi_dadd+0x300>
 80009b2:	e07d      	b.n	8000ab0 <__aeabi_dadd+0x3fc>
 80009b4:	2040      	movs	r0, #64	; 0x40
 80009b6:	1b45      	subs	r5, r0, r5
 80009b8:	40a9      	lsls	r1, r5
 80009ba:	430a      	orrs	r2, r1
 80009bc:	1e51      	subs	r1, r2, #1
 80009be:	418a      	sbcs	r2, r1
 80009c0:	2100      	movs	r1, #0
 80009c2:	431a      	orrs	r2, r3
 80009c4:	e6c7      	b.n	8000756 <__aeabi_dadd+0xa2>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d050      	beq.n	8000a6c <__aeabi_dadd+0x3b8>
 80009ca:	4e1a      	ldr	r6, [pc, #104]	; (8000a34 <__aeabi_dadd+0x380>)
 80009cc:	42b0      	cmp	r0, r6
 80009ce:	d057      	beq.n	8000a80 <__aeabi_dadd+0x3cc>
 80009d0:	2680      	movs	r6, #128	; 0x80
 80009d2:	426b      	negs	r3, r5
 80009d4:	4699      	mov	r9, r3
 80009d6:	0436      	lsls	r6, r6, #16
 80009d8:	4334      	orrs	r4, r6
 80009da:	464b      	mov	r3, r9
 80009dc:	2b38      	cmp	r3, #56	; 0x38
 80009de:	dd00      	ble.n	80009e2 <__aeabi_dadd+0x32e>
 80009e0:	e0d6      	b.n	8000b90 <__aeabi_dadd+0x4dc>
 80009e2:	2b1f      	cmp	r3, #31
 80009e4:	dd00      	ble.n	80009e8 <__aeabi_dadd+0x334>
 80009e6:	e135      	b.n	8000c54 <__aeabi_dadd+0x5a0>
 80009e8:	2620      	movs	r6, #32
 80009ea:	1af5      	subs	r5, r6, r3
 80009ec:	0026      	movs	r6, r4
 80009ee:	40ae      	lsls	r6, r5
 80009f0:	46b2      	mov	sl, r6
 80009f2:	003e      	movs	r6, r7
 80009f4:	40de      	lsrs	r6, r3
 80009f6:	46ac      	mov	ip, r5
 80009f8:	0035      	movs	r5, r6
 80009fa:	4656      	mov	r6, sl
 80009fc:	432e      	orrs	r6, r5
 80009fe:	4665      	mov	r5, ip
 8000a00:	40af      	lsls	r7, r5
 8000a02:	1e7d      	subs	r5, r7, #1
 8000a04:	41af      	sbcs	r7, r5
 8000a06:	40dc      	lsrs	r4, r3
 8000a08:	4337      	orrs	r7, r6
 8000a0a:	1bd7      	subs	r7, r2, r7
 8000a0c:	42ba      	cmp	r2, r7
 8000a0e:	4192      	sbcs	r2, r2
 8000a10:	1b0c      	subs	r4, r1, r4
 8000a12:	4252      	negs	r2, r2
 8000a14:	1aa4      	subs	r4, r4, r2
 8000a16:	0006      	movs	r6, r0
 8000a18:	46d8      	mov	r8, fp
 8000a1a:	e6a3      	b.n	8000764 <__aeabi_dadd+0xb0>
 8000a1c:	4664      	mov	r4, ip
 8000a1e:	4667      	mov	r7, ip
 8000a20:	432c      	orrs	r4, r5
 8000a22:	d000      	beq.n	8000a26 <__aeabi_dadd+0x372>
 8000a24:	e6a2      	b.n	800076c <__aeabi_dadd+0xb8>
 8000a26:	2500      	movs	r5, #0
 8000a28:	2600      	movs	r6, #0
 8000a2a:	2700      	movs	r7, #0
 8000a2c:	e706      	b.n	800083c <__aeabi_dadd+0x188>
 8000a2e:	001e      	movs	r6, r3
 8000a30:	e6c4      	b.n	80007bc <__aeabi_dadd+0x108>
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	000007ff 	.word	0x000007ff
 8000a38:	ff7fffff 	.word	0xff7fffff
 8000a3c:	800fffff 	.word	0x800fffff
 8000a40:	2b1f      	cmp	r3, #31
 8000a42:	dc63      	bgt.n	8000b0c <__aeabi_dadd+0x458>
 8000a44:	2020      	movs	r0, #32
 8000a46:	1ac3      	subs	r3, r0, r3
 8000a48:	0008      	movs	r0, r1
 8000a4a:	4098      	lsls	r0, r3
 8000a4c:	469c      	mov	ip, r3
 8000a4e:	4683      	mov	fp, r0
 8000a50:	4653      	mov	r3, sl
 8000a52:	0010      	movs	r0, r2
 8000a54:	40d8      	lsrs	r0, r3
 8000a56:	0003      	movs	r3, r0
 8000a58:	4658      	mov	r0, fp
 8000a5a:	4318      	orrs	r0, r3
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	1e53      	subs	r3, r2, #1
 8000a62:	419a      	sbcs	r2, r3
 8000a64:	4653      	mov	r3, sl
 8000a66:	4302      	orrs	r2, r0
 8000a68:	40d9      	lsrs	r1, r3
 8000a6a:	e703      	b.n	8000874 <__aeabi_dadd+0x1c0>
 8000a6c:	0026      	movs	r6, r4
 8000a6e:	433e      	orrs	r6, r7
 8000a70:	d006      	beq.n	8000a80 <__aeabi_dadd+0x3cc>
 8000a72:	43eb      	mvns	r3, r5
 8000a74:	4699      	mov	r9, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0c7      	beq.n	8000a0a <__aeabi_dadd+0x356>
 8000a7a:	4e94      	ldr	r6, [pc, #592]	; (8000ccc <__aeabi_dadd+0x618>)
 8000a7c:	42b0      	cmp	r0, r6
 8000a7e:	d1ac      	bne.n	80009da <__aeabi_dadd+0x326>
 8000a80:	000c      	movs	r4, r1
 8000a82:	0017      	movs	r7, r2
 8000a84:	0006      	movs	r6, r0
 8000a86:	46d8      	mov	r8, fp
 8000a88:	e698      	b.n	80007bc <__aeabi_dadd+0x108>
 8000a8a:	4b90      	ldr	r3, [pc, #576]	; (8000ccc <__aeabi_dadd+0x618>)
 8000a8c:	459a      	cmp	sl, r3
 8000a8e:	d00b      	beq.n	8000aa8 <__aeabi_dadd+0x3f4>
 8000a90:	4682      	mov	sl, r0
 8000a92:	e6e7      	b.n	8000864 <__aeabi_dadd+0x1b0>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d000      	beq.n	8000a9a <__aeabi_dadd+0x3e6>
 8000a98:	e09e      	b.n	8000bd8 <__aeabi_dadd+0x524>
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	4310      	orrs	r0, r2
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dadd+0x3ee>
 8000aa0:	e0e9      	b.n	8000c76 <__aeabi_dadd+0x5c2>
 8000aa2:	001c      	movs	r4, r3
 8000aa4:	0017      	movs	r7, r2
 8000aa6:	46d8      	mov	r8, fp
 8000aa8:	4e88      	ldr	r6, [pc, #544]	; (8000ccc <__aeabi_dadd+0x618>)
 8000aaa:	e687      	b.n	80007bc <__aeabi_dadd+0x108>
 8000aac:	2500      	movs	r5, #0
 8000aae:	e772      	b.n	8000996 <__aeabi_dadd+0x2e2>
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	e782      	b.n	80009ba <__aeabi_dadd+0x306>
 8000ab4:	0023      	movs	r3, r4
 8000ab6:	433b      	orrs	r3, r7
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d000      	beq.n	8000abe <__aeabi_dadd+0x40a>
 8000abc:	e0ab      	b.n	8000c16 <__aeabi_dadd+0x562>
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x410>
 8000ac2:	e0e7      	b.n	8000c94 <__aeabi_dadd+0x5e0>
 8000ac4:	000b      	movs	r3, r1
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dadd+0x418>
 8000aca:	e677      	b.n	80007bc <__aeabi_dadd+0x108>
 8000acc:	18ba      	adds	r2, r7, r2
 8000ace:	42ba      	cmp	r2, r7
 8000ad0:	41bf      	sbcs	r7, r7
 8000ad2:	1864      	adds	r4, r4, r1
 8000ad4:	427f      	negs	r7, r7
 8000ad6:	19e4      	adds	r4, r4, r7
 8000ad8:	0223      	lsls	r3, r4, #8
 8000ada:	d400      	bmi.n	8000ade <__aeabi_dadd+0x42a>
 8000adc:	e0f2      	b.n	8000cc4 <__aeabi_dadd+0x610>
 8000ade:	4b7c      	ldr	r3, [pc, #496]	; (8000cd0 <__aeabi_dadd+0x61c>)
 8000ae0:	0017      	movs	r7, r2
 8000ae2:	401c      	ands	r4, r3
 8000ae4:	0006      	movs	r6, r0
 8000ae6:	e669      	b.n	80007bc <__aeabi_dadd+0x108>
 8000ae8:	0020      	movs	r0, r4
 8000aea:	4338      	orrs	r0, r7
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d1d1      	bne.n	8000a94 <__aeabi_dadd+0x3e0>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d15b      	bne.n	8000bac <__aeabi_dadd+0x4f8>
 8000af4:	001c      	movs	r4, r3
 8000af6:	4314      	orrs	r4, r2
 8000af8:	d100      	bne.n	8000afc <__aeabi_dadd+0x448>
 8000afa:	e0a8      	b.n	8000c4e <__aeabi_dadd+0x59a>
 8000afc:	001c      	movs	r4, r3
 8000afe:	0017      	movs	r7, r2
 8000b00:	46d8      	mov	r8, fp
 8000b02:	e65b      	b.n	80007bc <__aeabi_dadd+0x108>
 8000b04:	0006      	movs	r6, r0
 8000b06:	2400      	movs	r4, #0
 8000b08:	2700      	movs	r7, #0
 8000b0a:	e697      	b.n	800083c <__aeabi_dadd+0x188>
 8000b0c:	4650      	mov	r0, sl
 8000b0e:	000b      	movs	r3, r1
 8000b10:	3820      	subs	r0, #32
 8000b12:	40c3      	lsrs	r3, r0
 8000b14:	4699      	mov	r9, r3
 8000b16:	4653      	mov	r3, sl
 8000b18:	2b20      	cmp	r3, #32
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x46a>
 8000b1c:	e095      	b.n	8000c4a <__aeabi_dadd+0x596>
 8000b1e:	2340      	movs	r3, #64	; 0x40
 8000b20:	4650      	mov	r0, sl
 8000b22:	1a1b      	subs	r3, r3, r0
 8000b24:	4099      	lsls	r1, r3
 8000b26:	430a      	orrs	r2, r1
 8000b28:	1e51      	subs	r1, r2, #1
 8000b2a:	418a      	sbcs	r2, r1
 8000b2c:	464b      	mov	r3, r9
 8000b2e:	2100      	movs	r1, #0
 8000b30:	431a      	orrs	r2, r3
 8000b32:	e69f      	b.n	8000874 <__aeabi_dadd+0x1c0>
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d130      	bne.n	8000b9a <__aeabi_dadd+0x4e6>
 8000b38:	0026      	movs	r6, r4
 8000b3a:	433e      	orrs	r6, r7
 8000b3c:	d067      	beq.n	8000c0e <__aeabi_dadd+0x55a>
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	469a      	mov	sl, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d01c      	beq.n	8000b80 <__aeabi_dadd+0x4cc>
 8000b46:	4e61      	ldr	r6, [pc, #388]	; (8000ccc <__aeabi_dadd+0x618>)
 8000b48:	42b0      	cmp	r0, r6
 8000b4a:	d060      	beq.n	8000c0e <__aeabi_dadd+0x55a>
 8000b4c:	4653      	mov	r3, sl
 8000b4e:	2b38      	cmp	r3, #56	; 0x38
 8000b50:	dd00      	ble.n	8000b54 <__aeabi_dadd+0x4a0>
 8000b52:	e096      	b.n	8000c82 <__aeabi_dadd+0x5ce>
 8000b54:	2b1f      	cmp	r3, #31
 8000b56:	dd00      	ble.n	8000b5a <__aeabi_dadd+0x4a6>
 8000b58:	e09f      	b.n	8000c9a <__aeabi_dadd+0x5e6>
 8000b5a:	2620      	movs	r6, #32
 8000b5c:	1af3      	subs	r3, r6, r3
 8000b5e:	0026      	movs	r6, r4
 8000b60:	409e      	lsls	r6, r3
 8000b62:	469c      	mov	ip, r3
 8000b64:	46b3      	mov	fp, r6
 8000b66:	4653      	mov	r3, sl
 8000b68:	003e      	movs	r6, r7
 8000b6a:	40de      	lsrs	r6, r3
 8000b6c:	0033      	movs	r3, r6
 8000b6e:	465e      	mov	r6, fp
 8000b70:	431e      	orrs	r6, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	409f      	lsls	r7, r3
 8000b76:	1e7b      	subs	r3, r7, #1
 8000b78:	419f      	sbcs	r7, r3
 8000b7a:	4653      	mov	r3, sl
 8000b7c:	40dc      	lsrs	r4, r3
 8000b7e:	4337      	orrs	r7, r6
 8000b80:	18bf      	adds	r7, r7, r2
 8000b82:	4297      	cmp	r7, r2
 8000b84:	4192      	sbcs	r2, r2
 8000b86:	1864      	adds	r4, r4, r1
 8000b88:	4252      	negs	r2, r2
 8000b8a:	18a4      	adds	r4, r4, r2
 8000b8c:	0006      	movs	r6, r0
 8000b8e:	e678      	b.n	8000882 <__aeabi_dadd+0x1ce>
 8000b90:	4327      	orrs	r7, r4
 8000b92:	1e7c      	subs	r4, r7, #1
 8000b94:	41a7      	sbcs	r7, r4
 8000b96:	2400      	movs	r4, #0
 8000b98:	e737      	b.n	8000a0a <__aeabi_dadd+0x356>
 8000b9a:	4e4c      	ldr	r6, [pc, #304]	; (8000ccc <__aeabi_dadd+0x618>)
 8000b9c:	42b0      	cmp	r0, r6
 8000b9e:	d036      	beq.n	8000c0e <__aeabi_dadd+0x55a>
 8000ba0:	2680      	movs	r6, #128	; 0x80
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	0436      	lsls	r6, r6, #16
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	4334      	orrs	r4, r6
 8000baa:	e7cf      	b.n	8000b4c <__aeabi_dadd+0x498>
 8000bac:	0018      	movs	r0, r3
 8000bae:	4310      	orrs	r0, r2
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x500>
 8000bb2:	e603      	b.n	80007bc <__aeabi_dadd+0x108>
 8000bb4:	1ab8      	subs	r0, r7, r2
 8000bb6:	4684      	mov	ip, r0
 8000bb8:	4567      	cmp	r7, ip
 8000bba:	41ad      	sbcs	r5, r5
 8000bbc:	1ae0      	subs	r0, r4, r3
 8000bbe:	426d      	negs	r5, r5
 8000bc0:	1b40      	subs	r0, r0, r5
 8000bc2:	0205      	lsls	r5, r0, #8
 8000bc4:	d400      	bmi.n	8000bc8 <__aeabi_dadd+0x514>
 8000bc6:	e62c      	b.n	8000822 <__aeabi_dadd+0x16e>
 8000bc8:	1bd7      	subs	r7, r2, r7
 8000bca:	42ba      	cmp	r2, r7
 8000bcc:	4192      	sbcs	r2, r2
 8000bce:	1b1c      	subs	r4, r3, r4
 8000bd0:	4252      	negs	r2, r2
 8000bd2:	1aa4      	subs	r4, r4, r2
 8000bd4:	46d8      	mov	r8, fp
 8000bd6:	e5f1      	b.n	80007bc <__aeabi_dadd+0x108>
 8000bd8:	0018      	movs	r0, r3
 8000bda:	4310      	orrs	r0, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x52c>
 8000bde:	e763      	b.n	8000aa8 <__aeabi_dadd+0x3f4>
 8000be0:	08f8      	lsrs	r0, r7, #3
 8000be2:	0767      	lsls	r7, r4, #29
 8000be4:	4307      	orrs	r7, r0
 8000be6:	2080      	movs	r0, #128	; 0x80
 8000be8:	08e4      	lsrs	r4, r4, #3
 8000bea:	0300      	lsls	r0, r0, #12
 8000bec:	4204      	tst	r4, r0
 8000bee:	d008      	beq.n	8000c02 <__aeabi_dadd+0x54e>
 8000bf0:	08dd      	lsrs	r5, r3, #3
 8000bf2:	4205      	tst	r5, r0
 8000bf4:	d105      	bne.n	8000c02 <__aeabi_dadd+0x54e>
 8000bf6:	08d2      	lsrs	r2, r2, #3
 8000bf8:	0759      	lsls	r1, r3, #29
 8000bfa:	4311      	orrs	r1, r2
 8000bfc:	000f      	movs	r7, r1
 8000bfe:	002c      	movs	r4, r5
 8000c00:	46d8      	mov	r8, fp
 8000c02:	0f7b      	lsrs	r3, r7, #29
 8000c04:	00e4      	lsls	r4, r4, #3
 8000c06:	431c      	orrs	r4, r3
 8000c08:	00ff      	lsls	r7, r7, #3
 8000c0a:	4e30      	ldr	r6, [pc, #192]	; (8000ccc <__aeabi_dadd+0x618>)
 8000c0c:	e5d6      	b.n	80007bc <__aeabi_dadd+0x108>
 8000c0e:	000c      	movs	r4, r1
 8000c10:	0017      	movs	r7, r2
 8000c12:	0006      	movs	r6, r0
 8000c14:	e5d2      	b.n	80007bc <__aeabi_dadd+0x108>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d038      	beq.n	8000c8c <__aeabi_dadd+0x5d8>
 8000c1a:	000b      	movs	r3, r1
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x56e>
 8000c20:	e742      	b.n	8000aa8 <__aeabi_dadd+0x3f4>
 8000c22:	08f8      	lsrs	r0, r7, #3
 8000c24:	0767      	lsls	r7, r4, #29
 8000c26:	4307      	orrs	r7, r0
 8000c28:	2080      	movs	r0, #128	; 0x80
 8000c2a:	08e4      	lsrs	r4, r4, #3
 8000c2c:	0300      	lsls	r0, r0, #12
 8000c2e:	4204      	tst	r4, r0
 8000c30:	d0e7      	beq.n	8000c02 <__aeabi_dadd+0x54e>
 8000c32:	08cb      	lsrs	r3, r1, #3
 8000c34:	4203      	tst	r3, r0
 8000c36:	d1e4      	bne.n	8000c02 <__aeabi_dadd+0x54e>
 8000c38:	08d2      	lsrs	r2, r2, #3
 8000c3a:	0749      	lsls	r1, r1, #29
 8000c3c:	4311      	orrs	r1, r2
 8000c3e:	000f      	movs	r7, r1
 8000c40:	001c      	movs	r4, r3
 8000c42:	e7de      	b.n	8000c02 <__aeabi_dadd+0x54e>
 8000c44:	2700      	movs	r7, #0
 8000c46:	2400      	movs	r4, #0
 8000c48:	e5d5      	b.n	80007f6 <__aeabi_dadd+0x142>
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	e76b      	b.n	8000b26 <__aeabi_dadd+0x472>
 8000c4e:	2500      	movs	r5, #0
 8000c50:	2700      	movs	r7, #0
 8000c52:	e5f3      	b.n	800083c <__aeabi_dadd+0x188>
 8000c54:	464e      	mov	r6, r9
 8000c56:	0025      	movs	r5, r4
 8000c58:	3e20      	subs	r6, #32
 8000c5a:	40f5      	lsrs	r5, r6
 8000c5c:	464b      	mov	r3, r9
 8000c5e:	002e      	movs	r6, r5
 8000c60:	2b20      	cmp	r3, #32
 8000c62:	d02d      	beq.n	8000cc0 <__aeabi_dadd+0x60c>
 8000c64:	2540      	movs	r5, #64	; 0x40
 8000c66:	1aed      	subs	r5, r5, r3
 8000c68:	40ac      	lsls	r4, r5
 8000c6a:	4327      	orrs	r7, r4
 8000c6c:	1e7c      	subs	r4, r7, #1
 8000c6e:	41a7      	sbcs	r7, r4
 8000c70:	2400      	movs	r4, #0
 8000c72:	4337      	orrs	r7, r6
 8000c74:	e6c9      	b.n	8000a0a <__aeabi_dadd+0x356>
 8000c76:	2480      	movs	r4, #128	; 0x80
 8000c78:	2500      	movs	r5, #0
 8000c7a:	0324      	lsls	r4, r4, #12
 8000c7c:	4e13      	ldr	r6, [pc, #76]	; (8000ccc <__aeabi_dadd+0x618>)
 8000c7e:	2700      	movs	r7, #0
 8000c80:	e5dc      	b.n	800083c <__aeabi_dadd+0x188>
 8000c82:	4327      	orrs	r7, r4
 8000c84:	1e7c      	subs	r4, r7, #1
 8000c86:	41a7      	sbcs	r7, r4
 8000c88:	2400      	movs	r4, #0
 8000c8a:	e779      	b.n	8000b80 <__aeabi_dadd+0x4cc>
 8000c8c:	000c      	movs	r4, r1
 8000c8e:	0017      	movs	r7, r2
 8000c90:	4e0e      	ldr	r6, [pc, #56]	; (8000ccc <__aeabi_dadd+0x618>)
 8000c92:	e593      	b.n	80007bc <__aeabi_dadd+0x108>
 8000c94:	000c      	movs	r4, r1
 8000c96:	0017      	movs	r7, r2
 8000c98:	e590      	b.n	80007bc <__aeabi_dadd+0x108>
 8000c9a:	4656      	mov	r6, sl
 8000c9c:	0023      	movs	r3, r4
 8000c9e:	3e20      	subs	r6, #32
 8000ca0:	40f3      	lsrs	r3, r6
 8000ca2:	4699      	mov	r9, r3
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	2b20      	cmp	r3, #32
 8000ca8:	d00e      	beq.n	8000cc8 <__aeabi_dadd+0x614>
 8000caa:	2340      	movs	r3, #64	; 0x40
 8000cac:	4656      	mov	r6, sl
 8000cae:	1b9b      	subs	r3, r3, r6
 8000cb0:	409c      	lsls	r4, r3
 8000cb2:	4327      	orrs	r7, r4
 8000cb4:	1e7c      	subs	r4, r7, #1
 8000cb6:	41a7      	sbcs	r7, r4
 8000cb8:	464b      	mov	r3, r9
 8000cba:	2400      	movs	r4, #0
 8000cbc:	431f      	orrs	r7, r3
 8000cbe:	e75f      	b.n	8000b80 <__aeabi_dadd+0x4cc>
 8000cc0:	2400      	movs	r4, #0
 8000cc2:	e7d2      	b.n	8000c6a <__aeabi_dadd+0x5b6>
 8000cc4:	0017      	movs	r7, r2
 8000cc6:	e5b2      	b.n	800082e <__aeabi_dadd+0x17a>
 8000cc8:	2400      	movs	r4, #0
 8000cca:	e7f2      	b.n	8000cb2 <__aeabi_dadd+0x5fe>
 8000ccc:	000007ff 	.word	0x000007ff
 8000cd0:	ff7fffff 	.word	0xff7fffff

08000cd4 <__aeabi_ddiv>:
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	4657      	mov	r7, sl
 8000cd8:	4645      	mov	r5, r8
 8000cda:	46de      	mov	lr, fp
 8000cdc:	464e      	mov	r6, r9
 8000cde:	b5e0      	push	{r5, r6, r7, lr}
 8000ce0:	004c      	lsls	r4, r1, #1
 8000ce2:	030e      	lsls	r6, r1, #12
 8000ce4:	b087      	sub	sp, #28
 8000ce6:	4683      	mov	fp, r0
 8000ce8:	4692      	mov	sl, r2
 8000cea:	001d      	movs	r5, r3
 8000cec:	4680      	mov	r8, r0
 8000cee:	0b36      	lsrs	r6, r6, #12
 8000cf0:	0d64      	lsrs	r4, r4, #21
 8000cf2:	0fcf      	lsrs	r7, r1, #31
 8000cf4:	2c00      	cmp	r4, #0
 8000cf6:	d04f      	beq.n	8000d98 <__aeabi_ddiv+0xc4>
 8000cf8:	4b6f      	ldr	r3, [pc, #444]	; (8000eb8 <__aeabi_ddiv+0x1e4>)
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	d035      	beq.n	8000d6a <__aeabi_ddiv+0x96>
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	0f42      	lsrs	r2, r0, #29
 8000d02:	041b      	lsls	r3, r3, #16
 8000d04:	00f6      	lsls	r6, r6, #3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	4333      	orrs	r3, r6
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	00c3      	lsls	r3, r0, #3
 8000d0e:	4698      	mov	r8, r3
 8000d10:	4b6a      	ldr	r3, [pc, #424]	; (8000ebc <__aeabi_ddiv+0x1e8>)
 8000d12:	2600      	movs	r6, #0
 8000d14:	469c      	mov	ip, r3
 8000d16:	2300      	movs	r3, #0
 8000d18:	4464      	add	r4, ip
 8000d1a:	9303      	str	r3, [sp, #12]
 8000d1c:	032b      	lsls	r3, r5, #12
 8000d1e:	0b1b      	lsrs	r3, r3, #12
 8000d20:	469b      	mov	fp, r3
 8000d22:	006b      	lsls	r3, r5, #1
 8000d24:	0fed      	lsrs	r5, r5, #31
 8000d26:	4650      	mov	r0, sl
 8000d28:	0d5b      	lsrs	r3, r3, #21
 8000d2a:	9501      	str	r5, [sp, #4]
 8000d2c:	d05e      	beq.n	8000dec <__aeabi_ddiv+0x118>
 8000d2e:	4a62      	ldr	r2, [pc, #392]	; (8000eb8 <__aeabi_ddiv+0x1e4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d053      	beq.n	8000ddc <__aeabi_ddiv+0x108>
 8000d34:	465a      	mov	r2, fp
 8000d36:	00d1      	lsls	r1, r2, #3
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0f40      	lsrs	r0, r0, #29
 8000d3c:	0412      	lsls	r2, r2, #16
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	430a      	orrs	r2, r1
 8000d42:	4693      	mov	fp, r2
 8000d44:	4652      	mov	r2, sl
 8000d46:	00d1      	lsls	r1, r2, #3
 8000d48:	4a5c      	ldr	r2, [pc, #368]	; (8000ebc <__aeabi_ddiv+0x1e8>)
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4463      	add	r3, ip
 8000d50:	0038      	movs	r0, r7
 8000d52:	4068      	eors	r0, r5
 8000d54:	4684      	mov	ip, r0
 8000d56:	9002      	str	r0, [sp, #8]
 8000d58:	1ae4      	subs	r4, r4, r3
 8000d5a:	4316      	orrs	r6, r2
 8000d5c:	2e0f      	cmp	r6, #15
 8000d5e:	d900      	bls.n	8000d62 <__aeabi_ddiv+0x8e>
 8000d60:	e0b4      	b.n	8000ecc <__aeabi_ddiv+0x1f8>
 8000d62:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <__aeabi_ddiv+0x1ec>)
 8000d64:	00b6      	lsls	r6, r6, #2
 8000d66:	599b      	ldr	r3, [r3, r6]
 8000d68:	469f      	mov	pc, r3
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	4333      	orrs	r3, r6
 8000d6e:	4699      	mov	r9, r3
 8000d70:	d16c      	bne.n	8000e4c <__aeabi_ddiv+0x178>
 8000d72:	2300      	movs	r3, #0
 8000d74:	4698      	mov	r8, r3
 8000d76:	3302      	adds	r3, #2
 8000d78:	2608      	movs	r6, #8
 8000d7a:	9303      	str	r3, [sp, #12]
 8000d7c:	e7ce      	b.n	8000d1c <__aeabi_ddiv+0x48>
 8000d7e:	46cb      	mov	fp, r9
 8000d80:	4641      	mov	r1, r8
 8000d82:	9a03      	ldr	r2, [sp, #12]
 8000d84:	9701      	str	r7, [sp, #4]
 8000d86:	2a02      	cmp	r2, #2
 8000d88:	d165      	bne.n	8000e56 <__aeabi_ddiv+0x182>
 8000d8a:	9b01      	ldr	r3, [sp, #4]
 8000d8c:	4c4a      	ldr	r4, [pc, #296]	; (8000eb8 <__aeabi_ddiv+0x1e4>)
 8000d8e:	469c      	mov	ip, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	2200      	movs	r2, #0
 8000d94:	4698      	mov	r8, r3
 8000d96:	e06b      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	4333      	orrs	r3, r6
 8000d9c:	4699      	mov	r9, r3
 8000d9e:	d04e      	beq.n	8000e3e <__aeabi_ddiv+0x16a>
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d100      	bne.n	8000da6 <__aeabi_ddiv+0xd2>
 8000da4:	e1bc      	b.n	8001120 <__aeabi_ddiv+0x44c>
 8000da6:	0030      	movs	r0, r6
 8000da8:	f001 f99c 	bl	80020e4 <__clzsi2>
 8000dac:	0003      	movs	r3, r0
 8000dae:	3b0b      	subs	r3, #11
 8000db0:	2b1c      	cmp	r3, #28
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_ddiv+0xe2>
 8000db4:	e1ac      	b.n	8001110 <__aeabi_ddiv+0x43c>
 8000db6:	221d      	movs	r2, #29
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	465a      	mov	r2, fp
 8000dbc:	0001      	movs	r1, r0
 8000dbe:	40da      	lsrs	r2, r3
 8000dc0:	3908      	subs	r1, #8
 8000dc2:	408e      	lsls	r6, r1
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	4333      	orrs	r3, r6
 8000dc8:	4699      	mov	r9, r3
 8000dca:	465b      	mov	r3, fp
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	4698      	mov	r8, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	4c3c      	ldr	r4, [pc, #240]	; (8000ec4 <__aeabi_ddiv+0x1f0>)
 8000dd4:	2600      	movs	r6, #0
 8000dd6:	1a24      	subs	r4, r4, r0
 8000dd8:	9303      	str	r3, [sp, #12]
 8000dda:	e79f      	b.n	8000d1c <__aeabi_ddiv+0x48>
 8000ddc:	4651      	mov	r1, sl
 8000dde:	465a      	mov	r2, fp
 8000de0:	4311      	orrs	r1, r2
 8000de2:	d129      	bne.n	8000e38 <__aeabi_ddiv+0x164>
 8000de4:	2200      	movs	r2, #0
 8000de6:	4693      	mov	fp, r2
 8000de8:	3202      	adds	r2, #2
 8000dea:	e7b1      	b.n	8000d50 <__aeabi_ddiv+0x7c>
 8000dec:	4659      	mov	r1, fp
 8000dee:	4301      	orrs	r1, r0
 8000df0:	d01e      	beq.n	8000e30 <__aeabi_ddiv+0x15c>
 8000df2:	465b      	mov	r3, fp
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x126>
 8000df8:	e19e      	b.n	8001138 <__aeabi_ddiv+0x464>
 8000dfa:	4658      	mov	r0, fp
 8000dfc:	f001 f972 	bl	80020e4 <__clzsi2>
 8000e00:	0003      	movs	r3, r0
 8000e02:	3b0b      	subs	r3, #11
 8000e04:	2b1c      	cmp	r3, #28
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_ddiv+0x136>
 8000e08:	e18f      	b.n	800112a <__aeabi_ddiv+0x456>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	4659      	mov	r1, fp
 8000e0e:	3a08      	subs	r2, #8
 8000e10:	4091      	lsls	r1, r2
 8000e12:	468b      	mov	fp, r1
 8000e14:	211d      	movs	r1, #29
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	4651      	mov	r1, sl
 8000e1a:	40d9      	lsrs	r1, r3
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	4659      	mov	r1, fp
 8000e20:	430b      	orrs	r3, r1
 8000e22:	4651      	mov	r1, sl
 8000e24:	469b      	mov	fp, r3
 8000e26:	4091      	lsls	r1, r2
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <__aeabi_ddiv+0x1f0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	1a1b      	subs	r3, r3, r0
 8000e2e:	e78f      	b.n	8000d50 <__aeabi_ddiv+0x7c>
 8000e30:	2300      	movs	r3, #0
 8000e32:	2201      	movs	r2, #1
 8000e34:	469b      	mov	fp, r3
 8000e36:	e78b      	b.n	8000d50 <__aeabi_ddiv+0x7c>
 8000e38:	4651      	mov	r1, sl
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	e788      	b.n	8000d50 <__aeabi_ddiv+0x7c>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	4698      	mov	r8, r3
 8000e42:	3301      	adds	r3, #1
 8000e44:	2604      	movs	r6, #4
 8000e46:	2400      	movs	r4, #0
 8000e48:	9303      	str	r3, [sp, #12]
 8000e4a:	e767      	b.n	8000d1c <__aeabi_ddiv+0x48>
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	46b1      	mov	r9, r6
 8000e50:	9303      	str	r3, [sp, #12]
 8000e52:	260c      	movs	r6, #12
 8000e54:	e762      	b.n	8000d1c <__aeabi_ddiv+0x48>
 8000e56:	2a03      	cmp	r2, #3
 8000e58:	d100      	bne.n	8000e5c <__aeabi_ddiv+0x188>
 8000e5a:	e25c      	b.n	8001316 <__aeabi_ddiv+0x642>
 8000e5c:	9b01      	ldr	r3, [sp, #4]
 8000e5e:	2a01      	cmp	r2, #1
 8000e60:	d000      	beq.n	8000e64 <__aeabi_ddiv+0x190>
 8000e62:	e1e4      	b.n	800122e <__aeabi_ddiv+0x55a>
 8000e64:	4013      	ands	r3, r2
 8000e66:	469c      	mov	ip, r3
 8000e68:	2300      	movs	r3, #0
 8000e6a:	2400      	movs	r4, #0
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4698      	mov	r8, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	0312      	lsls	r2, r2, #12
 8000e74:	0b13      	lsrs	r3, r2, #12
 8000e76:	0d0a      	lsrs	r2, r1, #20
 8000e78:	0512      	lsls	r2, r2, #20
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	0523      	lsls	r3, r4, #20
 8000e7e:	4c12      	ldr	r4, [pc, #72]	; (8000ec8 <__aeabi_ddiv+0x1f4>)
 8000e80:	4640      	mov	r0, r8
 8000e82:	4022      	ands	r2, r4
 8000e84:	4313      	orrs	r3, r2
 8000e86:	4662      	mov	r2, ip
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	07d2      	lsls	r2, r2, #31
 8000e8c:	085b      	lsrs	r3, r3, #1
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	0019      	movs	r1, r3
 8000e92:	b007      	add	sp, #28
 8000e94:	bc3c      	pop	{r2, r3, r4, r5}
 8000e96:	4690      	mov	r8, r2
 8000e98:	4699      	mov	r9, r3
 8000e9a:	46a2      	mov	sl, r4
 8000e9c:	46ab      	mov	fp, r5
 8000e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	469c      	mov	ip, r3
 8000ea6:	0312      	lsls	r2, r2, #12
 8000ea8:	4698      	mov	r8, r3
 8000eaa:	4c03      	ldr	r4, [pc, #12]	; (8000eb8 <__aeabi_ddiv+0x1e4>)
 8000eac:	e7e0      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	4c01      	ldr	r4, [pc, #4]	; (8000eb8 <__aeabi_ddiv+0x1e4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4698      	mov	r8, r3
 8000eb6:	e7db      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 8000eb8:	000007ff 	.word	0x000007ff
 8000ebc:	fffffc01 	.word	0xfffffc01
 8000ec0:	08007030 	.word	0x08007030
 8000ec4:	fffffc0d 	.word	0xfffffc0d
 8000ec8:	800fffff 	.word	0x800fffff
 8000ecc:	45d9      	cmp	r9, fp
 8000ece:	d900      	bls.n	8000ed2 <__aeabi_ddiv+0x1fe>
 8000ed0:	e139      	b.n	8001146 <__aeabi_ddiv+0x472>
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_ddiv+0x202>
 8000ed4:	e134      	b.n	8001140 <__aeabi_ddiv+0x46c>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	4646      	mov	r6, r8
 8000eda:	464d      	mov	r5, r9
 8000edc:	469a      	mov	sl, r3
 8000ede:	3c01      	subs	r4, #1
 8000ee0:	465b      	mov	r3, fp
 8000ee2:	0e0a      	lsrs	r2, r1, #24
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	020b      	lsls	r3, r1, #8
 8000eea:	0c17      	lsrs	r7, r2, #16
 8000eec:	9303      	str	r3, [sp, #12]
 8000eee:	0413      	lsls	r3, r2, #16
 8000ef0:	0c1b      	lsrs	r3, r3, #16
 8000ef2:	0039      	movs	r1, r7
 8000ef4:	0028      	movs	r0, r5
 8000ef6:	4690      	mov	r8, r2
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	f7ff f921 	bl	8000140 <__udivsi3>
 8000efe:	0002      	movs	r2, r0
 8000f00:	9b01      	ldr	r3, [sp, #4]
 8000f02:	4683      	mov	fp, r0
 8000f04:	435a      	muls	r2, r3
 8000f06:	0028      	movs	r0, r5
 8000f08:	0039      	movs	r1, r7
 8000f0a:	4691      	mov	r9, r2
 8000f0c:	f7ff f99e 	bl	800024c <__aeabi_uidivmod>
 8000f10:	0c35      	lsrs	r5, r6, #16
 8000f12:	0409      	lsls	r1, r1, #16
 8000f14:	430d      	orrs	r5, r1
 8000f16:	45a9      	cmp	r9, r5
 8000f18:	d90d      	bls.n	8000f36 <__aeabi_ddiv+0x262>
 8000f1a:	465b      	mov	r3, fp
 8000f1c:	4445      	add	r5, r8
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	45a8      	cmp	r8, r5
 8000f22:	d900      	bls.n	8000f26 <__aeabi_ddiv+0x252>
 8000f24:	e13a      	b.n	800119c <__aeabi_ddiv+0x4c8>
 8000f26:	45a9      	cmp	r9, r5
 8000f28:	d800      	bhi.n	8000f2c <__aeabi_ddiv+0x258>
 8000f2a:	e137      	b.n	800119c <__aeabi_ddiv+0x4c8>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	425b      	negs	r3, r3
 8000f30:	469c      	mov	ip, r3
 8000f32:	4445      	add	r5, r8
 8000f34:	44e3      	add	fp, ip
 8000f36:	464b      	mov	r3, r9
 8000f38:	1aeb      	subs	r3, r5, r3
 8000f3a:	0039      	movs	r1, r7
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	9304      	str	r3, [sp, #16]
 8000f40:	f7ff f8fe 	bl	8000140 <__udivsi3>
 8000f44:	9b01      	ldr	r3, [sp, #4]
 8000f46:	0005      	movs	r5, r0
 8000f48:	4343      	muls	r3, r0
 8000f4a:	0039      	movs	r1, r7
 8000f4c:	9804      	ldr	r0, [sp, #16]
 8000f4e:	4699      	mov	r9, r3
 8000f50:	f7ff f97c 	bl	800024c <__aeabi_uidivmod>
 8000f54:	0433      	lsls	r3, r6, #16
 8000f56:	0409      	lsls	r1, r1, #16
 8000f58:	0c1b      	lsrs	r3, r3, #16
 8000f5a:	430b      	orrs	r3, r1
 8000f5c:	4599      	cmp	r9, r3
 8000f5e:	d909      	bls.n	8000f74 <__aeabi_ddiv+0x2a0>
 8000f60:	4443      	add	r3, r8
 8000f62:	1e6a      	subs	r2, r5, #1
 8000f64:	4598      	cmp	r8, r3
 8000f66:	d900      	bls.n	8000f6a <__aeabi_ddiv+0x296>
 8000f68:	e11a      	b.n	80011a0 <__aeabi_ddiv+0x4cc>
 8000f6a:	4599      	cmp	r9, r3
 8000f6c:	d800      	bhi.n	8000f70 <__aeabi_ddiv+0x29c>
 8000f6e:	e117      	b.n	80011a0 <__aeabi_ddiv+0x4cc>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4443      	add	r3, r8
 8000f74:	464a      	mov	r2, r9
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	465a      	mov	r2, fp
 8000f7a:	0412      	lsls	r2, r2, #16
 8000f7c:	432a      	orrs	r2, r5
 8000f7e:	9903      	ldr	r1, [sp, #12]
 8000f80:	4693      	mov	fp, r2
 8000f82:	0c10      	lsrs	r0, r2, #16
 8000f84:	0c0a      	lsrs	r2, r1, #16
 8000f86:	4691      	mov	r9, r2
 8000f88:	0409      	lsls	r1, r1, #16
 8000f8a:	465a      	mov	r2, fp
 8000f8c:	0c09      	lsrs	r1, r1, #16
 8000f8e:	464e      	mov	r6, r9
 8000f90:	000d      	movs	r5, r1
 8000f92:	0412      	lsls	r2, r2, #16
 8000f94:	0c12      	lsrs	r2, r2, #16
 8000f96:	4345      	muls	r5, r0
 8000f98:	9105      	str	r1, [sp, #20]
 8000f9a:	4351      	muls	r1, r2
 8000f9c:	4372      	muls	r2, r6
 8000f9e:	4370      	muls	r0, r6
 8000fa0:	1952      	adds	r2, r2, r5
 8000fa2:	0c0e      	lsrs	r6, r1, #16
 8000fa4:	18b2      	adds	r2, r6, r2
 8000fa6:	4295      	cmp	r5, r2
 8000fa8:	d903      	bls.n	8000fb2 <__aeabi_ddiv+0x2de>
 8000faa:	2580      	movs	r5, #128	; 0x80
 8000fac:	026d      	lsls	r5, r5, #9
 8000fae:	46ac      	mov	ip, r5
 8000fb0:	4460      	add	r0, ip
 8000fb2:	0c15      	lsrs	r5, r2, #16
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0412      	lsls	r2, r2, #16
 8000fb8:	0c09      	lsrs	r1, r1, #16
 8000fba:	1828      	adds	r0, r5, r0
 8000fbc:	1852      	adds	r2, r2, r1
 8000fbe:	4283      	cmp	r3, r0
 8000fc0:	d200      	bcs.n	8000fc4 <__aeabi_ddiv+0x2f0>
 8000fc2:	e0ce      	b.n	8001162 <__aeabi_ddiv+0x48e>
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_ddiv+0x2f4>
 8000fc6:	e0c8      	b.n	800115a <__aeabi_ddiv+0x486>
 8000fc8:	1a1d      	subs	r5, r3, r0
 8000fca:	4653      	mov	r3, sl
 8000fcc:	1a9e      	subs	r6, r3, r2
 8000fce:	45b2      	cmp	sl, r6
 8000fd0:	4192      	sbcs	r2, r2
 8000fd2:	4252      	negs	r2, r2
 8000fd4:	1aab      	subs	r3, r5, r2
 8000fd6:	469a      	mov	sl, r3
 8000fd8:	4598      	cmp	r8, r3
 8000fda:	d100      	bne.n	8000fde <__aeabi_ddiv+0x30a>
 8000fdc:	e117      	b.n	800120e <__aeabi_ddiv+0x53a>
 8000fde:	0039      	movs	r1, r7
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff f8ad 	bl	8000140 <__udivsi3>
 8000fe6:	9b01      	ldr	r3, [sp, #4]
 8000fe8:	0005      	movs	r5, r0
 8000fea:	4343      	muls	r3, r0
 8000fec:	0039      	movs	r1, r7
 8000fee:	4650      	mov	r0, sl
 8000ff0:	9304      	str	r3, [sp, #16]
 8000ff2:	f7ff f92b 	bl	800024c <__aeabi_uidivmod>
 8000ff6:	9804      	ldr	r0, [sp, #16]
 8000ff8:	040b      	lsls	r3, r1, #16
 8000ffa:	0c31      	lsrs	r1, r6, #16
 8000ffc:	4319      	orrs	r1, r3
 8000ffe:	4288      	cmp	r0, r1
 8001000:	d909      	bls.n	8001016 <__aeabi_ddiv+0x342>
 8001002:	4441      	add	r1, r8
 8001004:	1e6b      	subs	r3, r5, #1
 8001006:	4588      	cmp	r8, r1
 8001008:	d900      	bls.n	800100c <__aeabi_ddiv+0x338>
 800100a:	e107      	b.n	800121c <__aeabi_ddiv+0x548>
 800100c:	4288      	cmp	r0, r1
 800100e:	d800      	bhi.n	8001012 <__aeabi_ddiv+0x33e>
 8001010:	e104      	b.n	800121c <__aeabi_ddiv+0x548>
 8001012:	3d02      	subs	r5, #2
 8001014:	4441      	add	r1, r8
 8001016:	9b04      	ldr	r3, [sp, #16]
 8001018:	1acb      	subs	r3, r1, r3
 800101a:	0018      	movs	r0, r3
 800101c:	0039      	movs	r1, r7
 800101e:	9304      	str	r3, [sp, #16]
 8001020:	f7ff f88e 	bl	8000140 <__udivsi3>
 8001024:	9b01      	ldr	r3, [sp, #4]
 8001026:	4682      	mov	sl, r0
 8001028:	4343      	muls	r3, r0
 800102a:	0039      	movs	r1, r7
 800102c:	9804      	ldr	r0, [sp, #16]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	f7ff f90c 	bl	800024c <__aeabi_uidivmod>
 8001034:	9801      	ldr	r0, [sp, #4]
 8001036:	040b      	lsls	r3, r1, #16
 8001038:	0431      	lsls	r1, r6, #16
 800103a:	0c09      	lsrs	r1, r1, #16
 800103c:	4319      	orrs	r1, r3
 800103e:	4288      	cmp	r0, r1
 8001040:	d90d      	bls.n	800105e <__aeabi_ddiv+0x38a>
 8001042:	4653      	mov	r3, sl
 8001044:	4441      	add	r1, r8
 8001046:	3b01      	subs	r3, #1
 8001048:	4588      	cmp	r8, r1
 800104a:	d900      	bls.n	800104e <__aeabi_ddiv+0x37a>
 800104c:	e0e8      	b.n	8001220 <__aeabi_ddiv+0x54c>
 800104e:	4288      	cmp	r0, r1
 8001050:	d800      	bhi.n	8001054 <__aeabi_ddiv+0x380>
 8001052:	e0e5      	b.n	8001220 <__aeabi_ddiv+0x54c>
 8001054:	2302      	movs	r3, #2
 8001056:	425b      	negs	r3, r3
 8001058:	469c      	mov	ip, r3
 800105a:	4441      	add	r1, r8
 800105c:	44e2      	add	sl, ip
 800105e:	9b01      	ldr	r3, [sp, #4]
 8001060:	042d      	lsls	r5, r5, #16
 8001062:	1ace      	subs	r6, r1, r3
 8001064:	4651      	mov	r1, sl
 8001066:	4329      	orrs	r1, r5
 8001068:	9d05      	ldr	r5, [sp, #20]
 800106a:	464f      	mov	r7, r9
 800106c:	002a      	movs	r2, r5
 800106e:	040b      	lsls	r3, r1, #16
 8001070:	0c08      	lsrs	r0, r1, #16
 8001072:	0c1b      	lsrs	r3, r3, #16
 8001074:	435a      	muls	r2, r3
 8001076:	4345      	muls	r5, r0
 8001078:	437b      	muls	r3, r7
 800107a:	4378      	muls	r0, r7
 800107c:	195b      	adds	r3, r3, r5
 800107e:	0c17      	lsrs	r7, r2, #16
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	429d      	cmp	r5, r3
 8001084:	d903      	bls.n	800108e <__aeabi_ddiv+0x3ba>
 8001086:	2580      	movs	r5, #128	; 0x80
 8001088:	026d      	lsls	r5, r5, #9
 800108a:	46ac      	mov	ip, r5
 800108c:	4460      	add	r0, ip
 800108e:	0c1d      	lsrs	r5, r3, #16
 8001090:	0412      	lsls	r2, r2, #16
 8001092:	041b      	lsls	r3, r3, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	1828      	adds	r0, r5, r0
 8001098:	189b      	adds	r3, r3, r2
 800109a:	4286      	cmp	r6, r0
 800109c:	d200      	bcs.n	80010a0 <__aeabi_ddiv+0x3cc>
 800109e:	e093      	b.n	80011c8 <__aeabi_ddiv+0x4f4>
 80010a0:	d100      	bne.n	80010a4 <__aeabi_ddiv+0x3d0>
 80010a2:	e08e      	b.n	80011c2 <__aeabi_ddiv+0x4ee>
 80010a4:	2301      	movs	r3, #1
 80010a6:	4319      	orrs	r1, r3
 80010a8:	4ba0      	ldr	r3, [pc, #640]	; (800132c <__aeabi_ddiv+0x658>)
 80010aa:	18e3      	adds	r3, r4, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x3de>
 80010b0:	e099      	b.n	80011e6 <__aeabi_ddiv+0x512>
 80010b2:	074a      	lsls	r2, r1, #29
 80010b4:	d000      	beq.n	80010b8 <__aeabi_ddiv+0x3e4>
 80010b6:	e09e      	b.n	80011f6 <__aeabi_ddiv+0x522>
 80010b8:	465a      	mov	r2, fp
 80010ba:	01d2      	lsls	r2, r2, #7
 80010bc:	d506      	bpl.n	80010cc <__aeabi_ddiv+0x3f8>
 80010be:	465a      	mov	r2, fp
 80010c0:	4b9b      	ldr	r3, [pc, #620]	; (8001330 <__aeabi_ddiv+0x65c>)
 80010c2:	401a      	ands	r2, r3
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	4693      	mov	fp, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	18e3      	adds	r3, r4, r3
 80010cc:	4a99      	ldr	r2, [pc, #612]	; (8001334 <__aeabi_ddiv+0x660>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	dd68      	ble.n	80011a4 <__aeabi_ddiv+0x4d0>
 80010d2:	2301      	movs	r3, #1
 80010d4:	9a02      	ldr	r2, [sp, #8]
 80010d6:	4c98      	ldr	r4, [pc, #608]	; (8001338 <__aeabi_ddiv+0x664>)
 80010d8:	401a      	ands	r2, r3
 80010da:	2300      	movs	r3, #0
 80010dc:	4694      	mov	ip, r2
 80010de:	4698      	mov	r8, r3
 80010e0:	2200      	movs	r2, #0
 80010e2:	e6c5      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	464b      	mov	r3, r9
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	4213      	tst	r3, r2
 80010ec:	d00a      	beq.n	8001104 <__aeabi_ddiv+0x430>
 80010ee:	465b      	mov	r3, fp
 80010f0:	4213      	tst	r3, r2
 80010f2:	d106      	bne.n	8001102 <__aeabi_ddiv+0x42e>
 80010f4:	431a      	orrs	r2, r3
 80010f6:	0312      	lsls	r2, r2, #12
 80010f8:	0b12      	lsrs	r2, r2, #12
 80010fa:	46ac      	mov	ip, r5
 80010fc:	4688      	mov	r8, r1
 80010fe:	4c8e      	ldr	r4, [pc, #568]	; (8001338 <__aeabi_ddiv+0x664>)
 8001100:	e6b6      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 8001102:	464b      	mov	r3, r9
 8001104:	431a      	orrs	r2, r3
 8001106:	0312      	lsls	r2, r2, #12
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	46bc      	mov	ip, r7
 800110c:	4c8a      	ldr	r4, [pc, #552]	; (8001338 <__aeabi_ddiv+0x664>)
 800110e:	e6af      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 8001110:	0003      	movs	r3, r0
 8001112:	465a      	mov	r2, fp
 8001114:	3b28      	subs	r3, #40	; 0x28
 8001116:	409a      	lsls	r2, r3
 8001118:	2300      	movs	r3, #0
 800111a:	4691      	mov	r9, r2
 800111c:	4698      	mov	r8, r3
 800111e:	e657      	b.n	8000dd0 <__aeabi_ddiv+0xfc>
 8001120:	4658      	mov	r0, fp
 8001122:	f000 ffdf 	bl	80020e4 <__clzsi2>
 8001126:	3020      	adds	r0, #32
 8001128:	e640      	b.n	8000dac <__aeabi_ddiv+0xd8>
 800112a:	0003      	movs	r3, r0
 800112c:	4652      	mov	r2, sl
 800112e:	3b28      	subs	r3, #40	; 0x28
 8001130:	409a      	lsls	r2, r3
 8001132:	2100      	movs	r1, #0
 8001134:	4693      	mov	fp, r2
 8001136:	e677      	b.n	8000e28 <__aeabi_ddiv+0x154>
 8001138:	f000 ffd4 	bl	80020e4 <__clzsi2>
 800113c:	3020      	adds	r0, #32
 800113e:	e65f      	b.n	8000e00 <__aeabi_ddiv+0x12c>
 8001140:	4588      	cmp	r8, r1
 8001142:	d200      	bcs.n	8001146 <__aeabi_ddiv+0x472>
 8001144:	e6c7      	b.n	8000ed6 <__aeabi_ddiv+0x202>
 8001146:	464b      	mov	r3, r9
 8001148:	07de      	lsls	r6, r3, #31
 800114a:	085d      	lsrs	r5, r3, #1
 800114c:	4643      	mov	r3, r8
 800114e:	085b      	lsrs	r3, r3, #1
 8001150:	431e      	orrs	r6, r3
 8001152:	4643      	mov	r3, r8
 8001154:	07db      	lsls	r3, r3, #31
 8001156:	469a      	mov	sl, r3
 8001158:	e6c2      	b.n	8000ee0 <__aeabi_ddiv+0x20c>
 800115a:	2500      	movs	r5, #0
 800115c:	4592      	cmp	sl, r2
 800115e:	d300      	bcc.n	8001162 <__aeabi_ddiv+0x48e>
 8001160:	e733      	b.n	8000fca <__aeabi_ddiv+0x2f6>
 8001162:	9e03      	ldr	r6, [sp, #12]
 8001164:	4659      	mov	r1, fp
 8001166:	46b4      	mov	ip, r6
 8001168:	44e2      	add	sl, ip
 800116a:	45b2      	cmp	sl, r6
 800116c:	41ad      	sbcs	r5, r5
 800116e:	426d      	negs	r5, r5
 8001170:	4445      	add	r5, r8
 8001172:	18eb      	adds	r3, r5, r3
 8001174:	3901      	subs	r1, #1
 8001176:	4598      	cmp	r8, r3
 8001178:	d207      	bcs.n	800118a <__aeabi_ddiv+0x4b6>
 800117a:	4298      	cmp	r0, r3
 800117c:	d900      	bls.n	8001180 <__aeabi_ddiv+0x4ac>
 800117e:	e07f      	b.n	8001280 <__aeabi_ddiv+0x5ac>
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x4b0>
 8001182:	e0bc      	b.n	80012fe <__aeabi_ddiv+0x62a>
 8001184:	1a1d      	subs	r5, r3, r0
 8001186:	468b      	mov	fp, r1
 8001188:	e71f      	b.n	8000fca <__aeabi_ddiv+0x2f6>
 800118a:	4598      	cmp	r8, r3
 800118c:	d1fa      	bne.n	8001184 <__aeabi_ddiv+0x4b0>
 800118e:	9d03      	ldr	r5, [sp, #12]
 8001190:	4555      	cmp	r5, sl
 8001192:	d9f2      	bls.n	800117a <__aeabi_ddiv+0x4a6>
 8001194:	4643      	mov	r3, r8
 8001196:	468b      	mov	fp, r1
 8001198:	1a1d      	subs	r5, r3, r0
 800119a:	e716      	b.n	8000fca <__aeabi_ddiv+0x2f6>
 800119c:	469b      	mov	fp, r3
 800119e:	e6ca      	b.n	8000f36 <__aeabi_ddiv+0x262>
 80011a0:	0015      	movs	r5, r2
 80011a2:	e6e7      	b.n	8000f74 <__aeabi_ddiv+0x2a0>
 80011a4:	465a      	mov	r2, fp
 80011a6:	08c9      	lsrs	r1, r1, #3
 80011a8:	0752      	lsls	r2, r2, #29
 80011aa:	430a      	orrs	r2, r1
 80011ac:	055b      	lsls	r3, r3, #21
 80011ae:	4690      	mov	r8, r2
 80011b0:	0d5c      	lsrs	r4, r3, #21
 80011b2:	465a      	mov	r2, fp
 80011b4:	2301      	movs	r3, #1
 80011b6:	9902      	ldr	r1, [sp, #8]
 80011b8:	0252      	lsls	r2, r2, #9
 80011ba:	4019      	ands	r1, r3
 80011bc:	0b12      	lsrs	r2, r2, #12
 80011be:	468c      	mov	ip, r1
 80011c0:	e656      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_ddiv+0x4f4>
 80011c6:	e76f      	b.n	80010a8 <__aeabi_ddiv+0x3d4>
 80011c8:	4446      	add	r6, r8
 80011ca:	1e4a      	subs	r2, r1, #1
 80011cc:	45b0      	cmp	r8, r6
 80011ce:	d929      	bls.n	8001224 <__aeabi_ddiv+0x550>
 80011d0:	0011      	movs	r1, r2
 80011d2:	4286      	cmp	r6, r0
 80011d4:	d000      	beq.n	80011d8 <__aeabi_ddiv+0x504>
 80011d6:	e765      	b.n	80010a4 <__aeabi_ddiv+0x3d0>
 80011d8:	9a03      	ldr	r2, [sp, #12]
 80011da:	4293      	cmp	r3, r2
 80011dc:	d000      	beq.n	80011e0 <__aeabi_ddiv+0x50c>
 80011de:	e761      	b.n	80010a4 <__aeabi_ddiv+0x3d0>
 80011e0:	e762      	b.n	80010a8 <__aeabi_ddiv+0x3d4>
 80011e2:	2101      	movs	r1, #1
 80011e4:	4249      	negs	r1, r1
 80011e6:	2001      	movs	r0, #1
 80011e8:	1ac2      	subs	r2, r0, r3
 80011ea:	2a38      	cmp	r2, #56	; 0x38
 80011ec:	dd21      	ble.n	8001232 <__aeabi_ddiv+0x55e>
 80011ee:	9b02      	ldr	r3, [sp, #8]
 80011f0:	4003      	ands	r3, r0
 80011f2:	469c      	mov	ip, r3
 80011f4:	e638      	b.n	8000e68 <__aeabi_ddiv+0x194>
 80011f6:	220f      	movs	r2, #15
 80011f8:	400a      	ands	r2, r1
 80011fa:	2a04      	cmp	r2, #4
 80011fc:	d100      	bne.n	8001200 <__aeabi_ddiv+0x52c>
 80011fe:	e75b      	b.n	80010b8 <__aeabi_ddiv+0x3e4>
 8001200:	000a      	movs	r2, r1
 8001202:	1d11      	adds	r1, r2, #4
 8001204:	4291      	cmp	r1, r2
 8001206:	4192      	sbcs	r2, r2
 8001208:	4252      	negs	r2, r2
 800120a:	4493      	add	fp, r2
 800120c:	e754      	b.n	80010b8 <__aeabi_ddiv+0x3e4>
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <__aeabi_ddiv+0x658>)
 8001210:	18e3      	adds	r3, r4, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	dde5      	ble.n	80011e2 <__aeabi_ddiv+0x50e>
 8001216:	2201      	movs	r2, #1
 8001218:	4252      	negs	r2, r2
 800121a:	e7f2      	b.n	8001202 <__aeabi_ddiv+0x52e>
 800121c:	001d      	movs	r5, r3
 800121e:	e6fa      	b.n	8001016 <__aeabi_ddiv+0x342>
 8001220:	469a      	mov	sl, r3
 8001222:	e71c      	b.n	800105e <__aeabi_ddiv+0x38a>
 8001224:	42b0      	cmp	r0, r6
 8001226:	d839      	bhi.n	800129c <__aeabi_ddiv+0x5c8>
 8001228:	d06e      	beq.n	8001308 <__aeabi_ddiv+0x634>
 800122a:	0011      	movs	r1, r2
 800122c:	e73a      	b.n	80010a4 <__aeabi_ddiv+0x3d0>
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	e73a      	b.n	80010a8 <__aeabi_ddiv+0x3d4>
 8001232:	2a1f      	cmp	r2, #31
 8001234:	dc3c      	bgt.n	80012b0 <__aeabi_ddiv+0x5dc>
 8001236:	2320      	movs	r3, #32
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	000c      	movs	r4, r1
 800123c:	4658      	mov	r0, fp
 800123e:	4099      	lsls	r1, r3
 8001240:	4098      	lsls	r0, r3
 8001242:	1e4b      	subs	r3, r1, #1
 8001244:	4199      	sbcs	r1, r3
 8001246:	465b      	mov	r3, fp
 8001248:	40d4      	lsrs	r4, r2
 800124a:	40d3      	lsrs	r3, r2
 800124c:	4320      	orrs	r0, r4
 800124e:	4308      	orrs	r0, r1
 8001250:	001a      	movs	r2, r3
 8001252:	0743      	lsls	r3, r0, #29
 8001254:	d009      	beq.n	800126a <__aeabi_ddiv+0x596>
 8001256:	230f      	movs	r3, #15
 8001258:	4003      	ands	r3, r0
 800125a:	2b04      	cmp	r3, #4
 800125c:	d005      	beq.n	800126a <__aeabi_ddiv+0x596>
 800125e:	0001      	movs	r1, r0
 8001260:	1d08      	adds	r0, r1, #4
 8001262:	4288      	cmp	r0, r1
 8001264:	419b      	sbcs	r3, r3
 8001266:	425b      	negs	r3, r3
 8001268:	18d2      	adds	r2, r2, r3
 800126a:	0213      	lsls	r3, r2, #8
 800126c:	d53a      	bpl.n	80012e4 <__aeabi_ddiv+0x610>
 800126e:	2301      	movs	r3, #1
 8001270:	9a02      	ldr	r2, [sp, #8]
 8001272:	2401      	movs	r4, #1
 8001274:	401a      	ands	r2, r3
 8001276:	2300      	movs	r3, #0
 8001278:	4694      	mov	ip, r2
 800127a:	4698      	mov	r8, r3
 800127c:	2200      	movs	r2, #0
 800127e:	e5f7      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 8001280:	2102      	movs	r1, #2
 8001282:	4249      	negs	r1, r1
 8001284:	468c      	mov	ip, r1
 8001286:	9d03      	ldr	r5, [sp, #12]
 8001288:	44e3      	add	fp, ip
 800128a:	46ac      	mov	ip, r5
 800128c:	44e2      	add	sl, ip
 800128e:	45aa      	cmp	sl, r5
 8001290:	41ad      	sbcs	r5, r5
 8001292:	426d      	negs	r5, r5
 8001294:	4445      	add	r5, r8
 8001296:	18ed      	adds	r5, r5, r3
 8001298:	1a2d      	subs	r5, r5, r0
 800129a:	e696      	b.n	8000fca <__aeabi_ddiv+0x2f6>
 800129c:	1e8a      	subs	r2, r1, #2
 800129e:	9903      	ldr	r1, [sp, #12]
 80012a0:	004d      	lsls	r5, r1, #1
 80012a2:	428d      	cmp	r5, r1
 80012a4:	4189      	sbcs	r1, r1
 80012a6:	4249      	negs	r1, r1
 80012a8:	4441      	add	r1, r8
 80012aa:	1876      	adds	r6, r6, r1
 80012ac:	9503      	str	r5, [sp, #12]
 80012ae:	e78f      	b.n	80011d0 <__aeabi_ddiv+0x4fc>
 80012b0:	201f      	movs	r0, #31
 80012b2:	4240      	negs	r0, r0
 80012b4:	1ac3      	subs	r3, r0, r3
 80012b6:	4658      	mov	r0, fp
 80012b8:	40d8      	lsrs	r0, r3
 80012ba:	0003      	movs	r3, r0
 80012bc:	2a20      	cmp	r2, #32
 80012be:	d028      	beq.n	8001312 <__aeabi_ddiv+0x63e>
 80012c0:	2040      	movs	r0, #64	; 0x40
 80012c2:	465d      	mov	r5, fp
 80012c4:	1a82      	subs	r2, r0, r2
 80012c6:	4095      	lsls	r5, r2
 80012c8:	4329      	orrs	r1, r5
 80012ca:	1e4a      	subs	r2, r1, #1
 80012cc:	4191      	sbcs	r1, r2
 80012ce:	4319      	orrs	r1, r3
 80012d0:	2307      	movs	r3, #7
 80012d2:	2200      	movs	r2, #0
 80012d4:	400b      	ands	r3, r1
 80012d6:	d009      	beq.n	80012ec <__aeabi_ddiv+0x618>
 80012d8:	230f      	movs	r3, #15
 80012da:	2200      	movs	r2, #0
 80012dc:	400b      	ands	r3, r1
 80012de:	0008      	movs	r0, r1
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d1bd      	bne.n	8001260 <__aeabi_ddiv+0x58c>
 80012e4:	0001      	movs	r1, r0
 80012e6:	0753      	lsls	r3, r2, #29
 80012e8:	0252      	lsls	r2, r2, #9
 80012ea:	0b12      	lsrs	r2, r2, #12
 80012ec:	08c9      	lsrs	r1, r1, #3
 80012ee:	4319      	orrs	r1, r3
 80012f0:	2301      	movs	r3, #1
 80012f2:	4688      	mov	r8, r1
 80012f4:	9902      	ldr	r1, [sp, #8]
 80012f6:	2400      	movs	r4, #0
 80012f8:	4019      	ands	r1, r3
 80012fa:	468c      	mov	ip, r1
 80012fc:	e5b8      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 80012fe:	4552      	cmp	r2, sl
 8001300:	d8be      	bhi.n	8001280 <__aeabi_ddiv+0x5ac>
 8001302:	468b      	mov	fp, r1
 8001304:	2500      	movs	r5, #0
 8001306:	e660      	b.n	8000fca <__aeabi_ddiv+0x2f6>
 8001308:	9d03      	ldr	r5, [sp, #12]
 800130a:	429d      	cmp	r5, r3
 800130c:	d3c6      	bcc.n	800129c <__aeabi_ddiv+0x5c8>
 800130e:	0011      	movs	r1, r2
 8001310:	e762      	b.n	80011d8 <__aeabi_ddiv+0x504>
 8001312:	2500      	movs	r5, #0
 8001314:	e7d8      	b.n	80012c8 <__aeabi_ddiv+0x5f4>
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	465b      	mov	r3, fp
 800131a:	0312      	lsls	r2, r2, #12
 800131c:	431a      	orrs	r2, r3
 800131e:	9b01      	ldr	r3, [sp, #4]
 8001320:	0312      	lsls	r2, r2, #12
 8001322:	0b12      	lsrs	r2, r2, #12
 8001324:	469c      	mov	ip, r3
 8001326:	4688      	mov	r8, r1
 8001328:	4c03      	ldr	r4, [pc, #12]	; (8001338 <__aeabi_ddiv+0x664>)
 800132a:	e5a1      	b.n	8000e70 <__aeabi_ddiv+0x19c>
 800132c:	000003ff 	.word	0x000003ff
 8001330:	feffffff 	.word	0xfeffffff
 8001334:	000007fe 	.word	0x000007fe
 8001338:	000007ff 	.word	0x000007ff

0800133c <__aeabi_dmul>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	4657      	mov	r7, sl
 8001340:	4645      	mov	r5, r8
 8001342:	46de      	mov	lr, fp
 8001344:	464e      	mov	r6, r9
 8001346:	b5e0      	push	{r5, r6, r7, lr}
 8001348:	030c      	lsls	r4, r1, #12
 800134a:	4698      	mov	r8, r3
 800134c:	004e      	lsls	r6, r1, #1
 800134e:	0b23      	lsrs	r3, r4, #12
 8001350:	b087      	sub	sp, #28
 8001352:	0007      	movs	r7, r0
 8001354:	4692      	mov	sl, r2
 8001356:	469b      	mov	fp, r3
 8001358:	0d76      	lsrs	r6, r6, #21
 800135a:	0fcd      	lsrs	r5, r1, #31
 800135c:	2e00      	cmp	r6, #0
 800135e:	d06b      	beq.n	8001438 <__aeabi_dmul+0xfc>
 8001360:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <__aeabi_dmul+0x1dc>)
 8001362:	429e      	cmp	r6, r3
 8001364:	d035      	beq.n	80013d2 <__aeabi_dmul+0x96>
 8001366:	2480      	movs	r4, #128	; 0x80
 8001368:	465b      	mov	r3, fp
 800136a:	0f42      	lsrs	r2, r0, #29
 800136c:	0424      	lsls	r4, r4, #16
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4314      	orrs	r4, r2
 8001372:	431c      	orrs	r4, r3
 8001374:	00c3      	lsls	r3, r0, #3
 8001376:	4699      	mov	r9, r3
 8001378:	4b68      	ldr	r3, [pc, #416]	; (800151c <__aeabi_dmul+0x1e0>)
 800137a:	46a3      	mov	fp, r4
 800137c:	469c      	mov	ip, r3
 800137e:	2300      	movs	r3, #0
 8001380:	2700      	movs	r7, #0
 8001382:	4466      	add	r6, ip
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	4643      	mov	r3, r8
 8001388:	031c      	lsls	r4, r3, #12
 800138a:	005a      	lsls	r2, r3, #1
 800138c:	0fdb      	lsrs	r3, r3, #31
 800138e:	4650      	mov	r0, sl
 8001390:	0b24      	lsrs	r4, r4, #12
 8001392:	0d52      	lsrs	r2, r2, #21
 8001394:	4698      	mov	r8, r3
 8001396:	d100      	bne.n	800139a <__aeabi_dmul+0x5e>
 8001398:	e076      	b.n	8001488 <__aeabi_dmul+0x14c>
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <__aeabi_dmul+0x1dc>)
 800139c:	429a      	cmp	r2, r3
 800139e:	d06d      	beq.n	800147c <__aeabi_dmul+0x140>
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	0f41      	lsrs	r1, r0, #29
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	430b      	orrs	r3, r1
 80013a8:	495c      	ldr	r1, [pc, #368]	; (800151c <__aeabi_dmul+0x1e0>)
 80013aa:	00e4      	lsls	r4, r4, #3
 80013ac:	468c      	mov	ip, r1
 80013ae:	431c      	orrs	r4, r3
 80013b0:	00c3      	lsls	r3, r0, #3
 80013b2:	2000      	movs	r0, #0
 80013b4:	4462      	add	r2, ip
 80013b6:	4641      	mov	r1, r8
 80013b8:	18b6      	adds	r6, r6, r2
 80013ba:	4069      	eors	r1, r5
 80013bc:	1c72      	adds	r2, r6, #1
 80013be:	9101      	str	r1, [sp, #4]
 80013c0:	4694      	mov	ip, r2
 80013c2:	4307      	orrs	r7, r0
 80013c4:	2f0f      	cmp	r7, #15
 80013c6:	d900      	bls.n	80013ca <__aeabi_dmul+0x8e>
 80013c8:	e0b0      	b.n	800152c <__aeabi_dmul+0x1f0>
 80013ca:	4a55      	ldr	r2, [pc, #340]	; (8001520 <__aeabi_dmul+0x1e4>)
 80013cc:	00bf      	lsls	r7, r7, #2
 80013ce:	59d2      	ldr	r2, [r2, r7]
 80013d0:	4697      	mov	pc, r2
 80013d2:	465b      	mov	r3, fp
 80013d4:	4303      	orrs	r3, r0
 80013d6:	4699      	mov	r9, r3
 80013d8:	d000      	beq.n	80013dc <__aeabi_dmul+0xa0>
 80013da:	e087      	b.n	80014ec <__aeabi_dmul+0x1b0>
 80013dc:	2300      	movs	r3, #0
 80013de:	469b      	mov	fp, r3
 80013e0:	3302      	adds	r3, #2
 80013e2:	2708      	movs	r7, #8
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	e7ce      	b.n	8001386 <__aeabi_dmul+0x4a>
 80013e8:	4642      	mov	r2, r8
 80013ea:	9201      	str	r2, [sp, #4]
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d067      	beq.n	80014c0 <__aeabi_dmul+0x184>
 80013f0:	2803      	cmp	r0, #3
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0xba>
 80013f4:	e20e      	b.n	8001814 <__aeabi_dmul+0x4d8>
 80013f6:	2801      	cmp	r0, #1
 80013f8:	d000      	beq.n	80013fc <__aeabi_dmul+0xc0>
 80013fa:	e162      	b.n	80016c2 <__aeabi_dmul+0x386>
 80013fc:	2300      	movs	r3, #0
 80013fe:	2400      	movs	r4, #0
 8001400:	2200      	movs	r2, #0
 8001402:	4699      	mov	r9, r3
 8001404:	9901      	ldr	r1, [sp, #4]
 8001406:	4001      	ands	r1, r0
 8001408:	b2cd      	uxtb	r5, r1
 800140a:	2100      	movs	r1, #0
 800140c:	0312      	lsls	r2, r2, #12
 800140e:	0d0b      	lsrs	r3, r1, #20
 8001410:	0b12      	lsrs	r2, r2, #12
 8001412:	051b      	lsls	r3, r3, #20
 8001414:	4313      	orrs	r3, r2
 8001416:	4a43      	ldr	r2, [pc, #268]	; (8001524 <__aeabi_dmul+0x1e8>)
 8001418:	0524      	lsls	r4, r4, #20
 800141a:	4013      	ands	r3, r2
 800141c:	431c      	orrs	r4, r3
 800141e:	0064      	lsls	r4, r4, #1
 8001420:	07ed      	lsls	r5, r5, #31
 8001422:	0864      	lsrs	r4, r4, #1
 8001424:	432c      	orrs	r4, r5
 8001426:	4648      	mov	r0, r9
 8001428:	0021      	movs	r1, r4
 800142a:	b007      	add	sp, #28
 800142c:	bc3c      	pop	{r2, r3, r4, r5}
 800142e:	4690      	mov	r8, r2
 8001430:	4699      	mov	r9, r3
 8001432:	46a2      	mov	sl, r4
 8001434:	46ab      	mov	fp, r5
 8001436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001438:	4303      	orrs	r3, r0
 800143a:	4699      	mov	r9, r3
 800143c:	d04f      	beq.n	80014de <__aeabi_dmul+0x1a2>
 800143e:	465b      	mov	r3, fp
 8001440:	2b00      	cmp	r3, #0
 8001442:	d100      	bne.n	8001446 <__aeabi_dmul+0x10a>
 8001444:	e189      	b.n	800175a <__aeabi_dmul+0x41e>
 8001446:	4658      	mov	r0, fp
 8001448:	f000 fe4c 	bl	80020e4 <__clzsi2>
 800144c:	0003      	movs	r3, r0
 800144e:	3b0b      	subs	r3, #11
 8001450:	2b1c      	cmp	r3, #28
 8001452:	dd00      	ble.n	8001456 <__aeabi_dmul+0x11a>
 8001454:	e17a      	b.n	800174c <__aeabi_dmul+0x410>
 8001456:	221d      	movs	r2, #29
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	003a      	movs	r2, r7
 800145c:	0001      	movs	r1, r0
 800145e:	465c      	mov	r4, fp
 8001460:	40da      	lsrs	r2, r3
 8001462:	3908      	subs	r1, #8
 8001464:	408c      	lsls	r4, r1
 8001466:	0013      	movs	r3, r2
 8001468:	408f      	lsls	r7, r1
 800146a:	4323      	orrs	r3, r4
 800146c:	469b      	mov	fp, r3
 800146e:	46b9      	mov	r9, r7
 8001470:	2300      	movs	r3, #0
 8001472:	4e2d      	ldr	r6, [pc, #180]	; (8001528 <__aeabi_dmul+0x1ec>)
 8001474:	2700      	movs	r7, #0
 8001476:	1a36      	subs	r6, r6, r0
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	e784      	b.n	8001386 <__aeabi_dmul+0x4a>
 800147c:	4653      	mov	r3, sl
 800147e:	4323      	orrs	r3, r4
 8001480:	d12a      	bne.n	80014d8 <__aeabi_dmul+0x19c>
 8001482:	2400      	movs	r4, #0
 8001484:	2002      	movs	r0, #2
 8001486:	e796      	b.n	80013b6 <__aeabi_dmul+0x7a>
 8001488:	4653      	mov	r3, sl
 800148a:	4323      	orrs	r3, r4
 800148c:	d020      	beq.n	80014d0 <__aeabi_dmul+0x194>
 800148e:	2c00      	cmp	r4, #0
 8001490:	d100      	bne.n	8001494 <__aeabi_dmul+0x158>
 8001492:	e157      	b.n	8001744 <__aeabi_dmul+0x408>
 8001494:	0020      	movs	r0, r4
 8001496:	f000 fe25 	bl	80020e4 <__clzsi2>
 800149a:	0003      	movs	r3, r0
 800149c:	3b0b      	subs	r3, #11
 800149e:	2b1c      	cmp	r3, #28
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dmul+0x168>
 80014a2:	e149      	b.n	8001738 <__aeabi_dmul+0x3fc>
 80014a4:	211d      	movs	r1, #29
 80014a6:	1acb      	subs	r3, r1, r3
 80014a8:	4651      	mov	r1, sl
 80014aa:	0002      	movs	r2, r0
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	4653      	mov	r3, sl
 80014b0:	3a08      	subs	r2, #8
 80014b2:	4094      	lsls	r4, r2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	430c      	orrs	r4, r1
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <__aeabi_dmul+0x1ec>)
 80014ba:	1a12      	subs	r2, r2, r0
 80014bc:	2000      	movs	r0, #0
 80014be:	e77a      	b.n	80013b6 <__aeabi_dmul+0x7a>
 80014c0:	2501      	movs	r5, #1
 80014c2:	9b01      	ldr	r3, [sp, #4]
 80014c4:	4c14      	ldr	r4, [pc, #80]	; (8001518 <__aeabi_dmul+0x1dc>)
 80014c6:	401d      	ands	r5, r3
 80014c8:	2300      	movs	r3, #0
 80014ca:	2200      	movs	r2, #0
 80014cc:	4699      	mov	r9, r3
 80014ce:	e79c      	b.n	800140a <__aeabi_dmul+0xce>
 80014d0:	2400      	movs	r4, #0
 80014d2:	2200      	movs	r2, #0
 80014d4:	2001      	movs	r0, #1
 80014d6:	e76e      	b.n	80013b6 <__aeabi_dmul+0x7a>
 80014d8:	4653      	mov	r3, sl
 80014da:	2003      	movs	r0, #3
 80014dc:	e76b      	b.n	80013b6 <__aeabi_dmul+0x7a>
 80014de:	2300      	movs	r3, #0
 80014e0:	469b      	mov	fp, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	2704      	movs	r7, #4
 80014e6:	2600      	movs	r6, #0
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	e74c      	b.n	8001386 <__aeabi_dmul+0x4a>
 80014ec:	2303      	movs	r3, #3
 80014ee:	4681      	mov	r9, r0
 80014f0:	270c      	movs	r7, #12
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	e747      	b.n	8001386 <__aeabi_dmul+0x4a>
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	2300      	movs	r3, #0
 80014fa:	2500      	movs	r5, #0
 80014fc:	0312      	lsls	r2, r2, #12
 80014fe:	4699      	mov	r9, r3
 8001500:	4c05      	ldr	r4, [pc, #20]	; (8001518 <__aeabi_dmul+0x1dc>)
 8001502:	e782      	b.n	800140a <__aeabi_dmul+0xce>
 8001504:	465c      	mov	r4, fp
 8001506:	464b      	mov	r3, r9
 8001508:	9802      	ldr	r0, [sp, #8]
 800150a:	e76f      	b.n	80013ec <__aeabi_dmul+0xb0>
 800150c:	465c      	mov	r4, fp
 800150e:	464b      	mov	r3, r9
 8001510:	9501      	str	r5, [sp, #4]
 8001512:	9802      	ldr	r0, [sp, #8]
 8001514:	e76a      	b.n	80013ec <__aeabi_dmul+0xb0>
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	000007ff 	.word	0x000007ff
 800151c:	fffffc01 	.word	0xfffffc01
 8001520:	08007070 	.word	0x08007070
 8001524:	800fffff 	.word	0x800fffff
 8001528:	fffffc0d 	.word	0xfffffc0d
 800152c:	464a      	mov	r2, r9
 800152e:	4649      	mov	r1, r9
 8001530:	0c17      	lsrs	r7, r2, #16
 8001532:	0c1a      	lsrs	r2, r3, #16
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	0408      	lsls	r0, r1, #16
 800153a:	0019      	movs	r1, r3
 800153c:	0c00      	lsrs	r0, r0, #16
 800153e:	4341      	muls	r1, r0
 8001540:	0015      	movs	r5, r2
 8001542:	4688      	mov	r8, r1
 8001544:	0019      	movs	r1, r3
 8001546:	437d      	muls	r5, r7
 8001548:	4379      	muls	r1, r7
 800154a:	9503      	str	r5, [sp, #12]
 800154c:	4689      	mov	r9, r1
 800154e:	0029      	movs	r1, r5
 8001550:	0015      	movs	r5, r2
 8001552:	4345      	muls	r5, r0
 8001554:	444d      	add	r5, r9
 8001556:	9502      	str	r5, [sp, #8]
 8001558:	4645      	mov	r5, r8
 800155a:	0c2d      	lsrs	r5, r5, #16
 800155c:	46aa      	mov	sl, r5
 800155e:	9d02      	ldr	r5, [sp, #8]
 8001560:	4455      	add	r5, sl
 8001562:	45a9      	cmp	r9, r5
 8001564:	d906      	bls.n	8001574 <__aeabi_dmul+0x238>
 8001566:	468a      	mov	sl, r1
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0249      	lsls	r1, r1, #9
 800156c:	4689      	mov	r9, r1
 800156e:	44ca      	add	sl, r9
 8001570:	4651      	mov	r1, sl
 8001572:	9103      	str	r1, [sp, #12]
 8001574:	0c29      	lsrs	r1, r5, #16
 8001576:	9104      	str	r1, [sp, #16]
 8001578:	4641      	mov	r1, r8
 800157a:	0409      	lsls	r1, r1, #16
 800157c:	042d      	lsls	r5, r5, #16
 800157e:	0c09      	lsrs	r1, r1, #16
 8001580:	4688      	mov	r8, r1
 8001582:	0029      	movs	r1, r5
 8001584:	0c25      	lsrs	r5, r4, #16
 8001586:	0424      	lsls	r4, r4, #16
 8001588:	4441      	add	r1, r8
 800158a:	0c24      	lsrs	r4, r4, #16
 800158c:	9105      	str	r1, [sp, #20]
 800158e:	0021      	movs	r1, r4
 8001590:	4341      	muls	r1, r0
 8001592:	4688      	mov	r8, r1
 8001594:	0021      	movs	r1, r4
 8001596:	4379      	muls	r1, r7
 8001598:	468a      	mov	sl, r1
 800159a:	4368      	muls	r0, r5
 800159c:	4641      	mov	r1, r8
 800159e:	4450      	add	r0, sl
 80015a0:	4681      	mov	r9, r0
 80015a2:	0c08      	lsrs	r0, r1, #16
 80015a4:	4448      	add	r0, r9
 80015a6:	436f      	muls	r7, r5
 80015a8:	4582      	cmp	sl, r0
 80015aa:	d903      	bls.n	80015b4 <__aeabi_dmul+0x278>
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0249      	lsls	r1, r1, #9
 80015b0:	4689      	mov	r9, r1
 80015b2:	444f      	add	r7, r9
 80015b4:	0c01      	lsrs	r1, r0, #16
 80015b6:	4689      	mov	r9, r1
 80015b8:	0039      	movs	r1, r7
 80015ba:	4449      	add	r1, r9
 80015bc:	9102      	str	r1, [sp, #8]
 80015be:	4641      	mov	r1, r8
 80015c0:	040f      	lsls	r7, r1, #16
 80015c2:	9904      	ldr	r1, [sp, #16]
 80015c4:	0c3f      	lsrs	r7, r7, #16
 80015c6:	4688      	mov	r8, r1
 80015c8:	0400      	lsls	r0, r0, #16
 80015ca:	19c0      	adds	r0, r0, r7
 80015cc:	4480      	add	r8, r0
 80015ce:	4641      	mov	r1, r8
 80015d0:	9104      	str	r1, [sp, #16]
 80015d2:	4659      	mov	r1, fp
 80015d4:	0c0f      	lsrs	r7, r1, #16
 80015d6:	0409      	lsls	r1, r1, #16
 80015d8:	0c09      	lsrs	r1, r1, #16
 80015da:	4688      	mov	r8, r1
 80015dc:	4359      	muls	r1, r3
 80015de:	468a      	mov	sl, r1
 80015e0:	0039      	movs	r1, r7
 80015e2:	4351      	muls	r1, r2
 80015e4:	4689      	mov	r9, r1
 80015e6:	4641      	mov	r1, r8
 80015e8:	434a      	muls	r2, r1
 80015ea:	4651      	mov	r1, sl
 80015ec:	0c09      	lsrs	r1, r1, #16
 80015ee:	468b      	mov	fp, r1
 80015f0:	437b      	muls	r3, r7
 80015f2:	18d2      	adds	r2, r2, r3
 80015f4:	445a      	add	r2, fp
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d903      	bls.n	8001602 <__aeabi_dmul+0x2c6>
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	025b      	lsls	r3, r3, #9
 80015fe:	469b      	mov	fp, r3
 8001600:	44d9      	add	r9, fp
 8001602:	4651      	mov	r1, sl
 8001604:	0409      	lsls	r1, r1, #16
 8001606:	0c09      	lsrs	r1, r1, #16
 8001608:	468a      	mov	sl, r1
 800160a:	4641      	mov	r1, r8
 800160c:	4361      	muls	r1, r4
 800160e:	437c      	muls	r4, r7
 8001610:	0c13      	lsrs	r3, r2, #16
 8001612:	0412      	lsls	r2, r2, #16
 8001614:	444b      	add	r3, r9
 8001616:	4452      	add	r2, sl
 8001618:	46a1      	mov	r9, r4
 800161a:	468a      	mov	sl, r1
 800161c:	003c      	movs	r4, r7
 800161e:	4641      	mov	r1, r8
 8001620:	436c      	muls	r4, r5
 8001622:	434d      	muls	r5, r1
 8001624:	4651      	mov	r1, sl
 8001626:	444d      	add	r5, r9
 8001628:	0c0f      	lsrs	r7, r1, #16
 800162a:	197d      	adds	r5, r7, r5
 800162c:	45a9      	cmp	r9, r5
 800162e:	d903      	bls.n	8001638 <__aeabi_dmul+0x2fc>
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0249      	lsls	r1, r1, #9
 8001634:	4688      	mov	r8, r1
 8001636:	4444      	add	r4, r8
 8001638:	9f04      	ldr	r7, [sp, #16]
 800163a:	9903      	ldr	r1, [sp, #12]
 800163c:	46b8      	mov	r8, r7
 800163e:	4441      	add	r1, r8
 8001640:	468b      	mov	fp, r1
 8001642:	4583      	cmp	fp, r0
 8001644:	4180      	sbcs	r0, r0
 8001646:	4241      	negs	r1, r0
 8001648:	4688      	mov	r8, r1
 800164a:	4651      	mov	r1, sl
 800164c:	0408      	lsls	r0, r1, #16
 800164e:	042f      	lsls	r7, r5, #16
 8001650:	0c00      	lsrs	r0, r0, #16
 8001652:	183f      	adds	r7, r7, r0
 8001654:	4658      	mov	r0, fp
 8001656:	9902      	ldr	r1, [sp, #8]
 8001658:	1810      	adds	r0, r2, r0
 800165a:	4689      	mov	r9, r1
 800165c:	4290      	cmp	r0, r2
 800165e:	4192      	sbcs	r2, r2
 8001660:	444f      	add	r7, r9
 8001662:	46ba      	mov	sl, r7
 8001664:	4252      	negs	r2, r2
 8001666:	4699      	mov	r9, r3
 8001668:	4693      	mov	fp, r2
 800166a:	44c2      	add	sl, r8
 800166c:	44d1      	add	r9, sl
 800166e:	44cb      	add	fp, r9
 8001670:	428f      	cmp	r7, r1
 8001672:	41bf      	sbcs	r7, r7
 8001674:	45c2      	cmp	sl, r8
 8001676:	4189      	sbcs	r1, r1
 8001678:	4599      	cmp	r9, r3
 800167a:	419b      	sbcs	r3, r3
 800167c:	4593      	cmp	fp, r2
 800167e:	4192      	sbcs	r2, r2
 8001680:	427f      	negs	r7, r7
 8001682:	4249      	negs	r1, r1
 8001684:	0c2d      	lsrs	r5, r5, #16
 8001686:	4252      	negs	r2, r2
 8001688:	430f      	orrs	r7, r1
 800168a:	425b      	negs	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	197f      	adds	r7, r7, r5
 8001690:	18ff      	adds	r7, r7, r3
 8001692:	465b      	mov	r3, fp
 8001694:	193c      	adds	r4, r7, r4
 8001696:	0ddb      	lsrs	r3, r3, #23
 8001698:	9a05      	ldr	r2, [sp, #20]
 800169a:	0264      	lsls	r4, r4, #9
 800169c:	431c      	orrs	r4, r3
 800169e:	0243      	lsls	r3, r0, #9
 80016a0:	4313      	orrs	r3, r2
 80016a2:	1e5d      	subs	r5, r3, #1
 80016a4:	41ab      	sbcs	r3, r5
 80016a6:	465a      	mov	r2, fp
 80016a8:	0dc0      	lsrs	r0, r0, #23
 80016aa:	4303      	orrs	r3, r0
 80016ac:	0252      	lsls	r2, r2, #9
 80016ae:	4313      	orrs	r3, r2
 80016b0:	01e2      	lsls	r2, r4, #7
 80016b2:	d556      	bpl.n	8001762 <__aeabi_dmul+0x426>
 80016b4:	2001      	movs	r0, #1
 80016b6:	085a      	lsrs	r2, r3, #1
 80016b8:	4003      	ands	r3, r0
 80016ba:	4313      	orrs	r3, r2
 80016bc:	07e2      	lsls	r2, r4, #31
 80016be:	4313      	orrs	r3, r2
 80016c0:	0864      	lsrs	r4, r4, #1
 80016c2:	485a      	ldr	r0, [pc, #360]	; (800182c <__aeabi_dmul+0x4f0>)
 80016c4:	4460      	add	r0, ip
 80016c6:	2800      	cmp	r0, #0
 80016c8:	dd4d      	ble.n	8001766 <__aeabi_dmul+0x42a>
 80016ca:	075a      	lsls	r2, r3, #29
 80016cc:	d009      	beq.n	80016e2 <__aeabi_dmul+0x3a6>
 80016ce:	220f      	movs	r2, #15
 80016d0:	401a      	ands	r2, r3
 80016d2:	2a04      	cmp	r2, #4
 80016d4:	d005      	beq.n	80016e2 <__aeabi_dmul+0x3a6>
 80016d6:	1d1a      	adds	r2, r3, #4
 80016d8:	429a      	cmp	r2, r3
 80016da:	419b      	sbcs	r3, r3
 80016dc:	425b      	negs	r3, r3
 80016de:	18e4      	adds	r4, r4, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	01e2      	lsls	r2, r4, #7
 80016e4:	d504      	bpl.n	80016f0 <__aeabi_dmul+0x3b4>
 80016e6:	2080      	movs	r0, #128	; 0x80
 80016e8:	4a51      	ldr	r2, [pc, #324]	; (8001830 <__aeabi_dmul+0x4f4>)
 80016ea:	00c0      	lsls	r0, r0, #3
 80016ec:	4014      	ands	r4, r2
 80016ee:	4460      	add	r0, ip
 80016f0:	4a50      	ldr	r2, [pc, #320]	; (8001834 <__aeabi_dmul+0x4f8>)
 80016f2:	4290      	cmp	r0, r2
 80016f4:	dd00      	ble.n	80016f8 <__aeabi_dmul+0x3bc>
 80016f6:	e6e3      	b.n	80014c0 <__aeabi_dmul+0x184>
 80016f8:	2501      	movs	r5, #1
 80016fa:	08db      	lsrs	r3, r3, #3
 80016fc:	0762      	lsls	r2, r4, #29
 80016fe:	431a      	orrs	r2, r3
 8001700:	0264      	lsls	r4, r4, #9
 8001702:	9b01      	ldr	r3, [sp, #4]
 8001704:	4691      	mov	r9, r2
 8001706:	0b22      	lsrs	r2, r4, #12
 8001708:	0544      	lsls	r4, r0, #21
 800170a:	0d64      	lsrs	r4, r4, #21
 800170c:	401d      	ands	r5, r3
 800170e:	e67c      	b.n	800140a <__aeabi_dmul+0xce>
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	4659      	mov	r1, fp
 8001714:	0312      	lsls	r2, r2, #12
 8001716:	4211      	tst	r1, r2
 8001718:	d008      	beq.n	800172c <__aeabi_dmul+0x3f0>
 800171a:	4214      	tst	r4, r2
 800171c:	d106      	bne.n	800172c <__aeabi_dmul+0x3f0>
 800171e:	4322      	orrs	r2, r4
 8001720:	0312      	lsls	r2, r2, #12
 8001722:	0b12      	lsrs	r2, r2, #12
 8001724:	4645      	mov	r5, r8
 8001726:	4699      	mov	r9, r3
 8001728:	4c43      	ldr	r4, [pc, #268]	; (8001838 <__aeabi_dmul+0x4fc>)
 800172a:	e66e      	b.n	800140a <__aeabi_dmul+0xce>
 800172c:	465b      	mov	r3, fp
 800172e:	431a      	orrs	r2, r3
 8001730:	0312      	lsls	r2, r2, #12
 8001732:	0b12      	lsrs	r2, r2, #12
 8001734:	4c40      	ldr	r4, [pc, #256]	; (8001838 <__aeabi_dmul+0x4fc>)
 8001736:	e668      	b.n	800140a <__aeabi_dmul+0xce>
 8001738:	0003      	movs	r3, r0
 800173a:	4654      	mov	r4, sl
 800173c:	3b28      	subs	r3, #40	; 0x28
 800173e:	409c      	lsls	r4, r3
 8001740:	2300      	movs	r3, #0
 8001742:	e6b9      	b.n	80014b8 <__aeabi_dmul+0x17c>
 8001744:	f000 fcce 	bl	80020e4 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e6a6      	b.n	800149a <__aeabi_dmul+0x15e>
 800174c:	0003      	movs	r3, r0
 800174e:	3b28      	subs	r3, #40	; 0x28
 8001750:	409f      	lsls	r7, r3
 8001752:	2300      	movs	r3, #0
 8001754:	46bb      	mov	fp, r7
 8001756:	4699      	mov	r9, r3
 8001758:	e68a      	b.n	8001470 <__aeabi_dmul+0x134>
 800175a:	f000 fcc3 	bl	80020e4 <__clzsi2>
 800175e:	3020      	adds	r0, #32
 8001760:	e674      	b.n	800144c <__aeabi_dmul+0x110>
 8001762:	46b4      	mov	ip, r6
 8001764:	e7ad      	b.n	80016c2 <__aeabi_dmul+0x386>
 8001766:	2501      	movs	r5, #1
 8001768:	1a2a      	subs	r2, r5, r0
 800176a:	2a38      	cmp	r2, #56	; 0x38
 800176c:	dd06      	ble.n	800177c <__aeabi_dmul+0x440>
 800176e:	9b01      	ldr	r3, [sp, #4]
 8001770:	2400      	movs	r4, #0
 8001772:	401d      	ands	r5, r3
 8001774:	2300      	movs	r3, #0
 8001776:	2200      	movs	r2, #0
 8001778:	4699      	mov	r9, r3
 800177a:	e646      	b.n	800140a <__aeabi_dmul+0xce>
 800177c:	2a1f      	cmp	r2, #31
 800177e:	dc21      	bgt.n	80017c4 <__aeabi_dmul+0x488>
 8001780:	2520      	movs	r5, #32
 8001782:	0020      	movs	r0, r4
 8001784:	1aad      	subs	r5, r5, r2
 8001786:	001e      	movs	r6, r3
 8001788:	40ab      	lsls	r3, r5
 800178a:	40a8      	lsls	r0, r5
 800178c:	40d6      	lsrs	r6, r2
 800178e:	1e5d      	subs	r5, r3, #1
 8001790:	41ab      	sbcs	r3, r5
 8001792:	4330      	orrs	r0, r6
 8001794:	4318      	orrs	r0, r3
 8001796:	40d4      	lsrs	r4, r2
 8001798:	0743      	lsls	r3, r0, #29
 800179a:	d009      	beq.n	80017b0 <__aeabi_dmul+0x474>
 800179c:	230f      	movs	r3, #15
 800179e:	4003      	ands	r3, r0
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d005      	beq.n	80017b0 <__aeabi_dmul+0x474>
 80017a4:	0003      	movs	r3, r0
 80017a6:	1d18      	adds	r0, r3, #4
 80017a8:	4298      	cmp	r0, r3
 80017aa:	419b      	sbcs	r3, r3
 80017ac:	425b      	negs	r3, r3
 80017ae:	18e4      	adds	r4, r4, r3
 80017b0:	0223      	lsls	r3, r4, #8
 80017b2:	d521      	bpl.n	80017f8 <__aeabi_dmul+0x4bc>
 80017b4:	2501      	movs	r5, #1
 80017b6:	9b01      	ldr	r3, [sp, #4]
 80017b8:	2401      	movs	r4, #1
 80017ba:	401d      	ands	r5, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	2200      	movs	r2, #0
 80017c0:	4699      	mov	r9, r3
 80017c2:	e622      	b.n	800140a <__aeabi_dmul+0xce>
 80017c4:	251f      	movs	r5, #31
 80017c6:	0021      	movs	r1, r4
 80017c8:	426d      	negs	r5, r5
 80017ca:	1a28      	subs	r0, r5, r0
 80017cc:	40c1      	lsrs	r1, r0
 80017ce:	0008      	movs	r0, r1
 80017d0:	2a20      	cmp	r2, #32
 80017d2:	d01d      	beq.n	8001810 <__aeabi_dmul+0x4d4>
 80017d4:	355f      	adds	r5, #95	; 0x5f
 80017d6:	1aaa      	subs	r2, r5, r2
 80017d8:	4094      	lsls	r4, r2
 80017da:	4323      	orrs	r3, r4
 80017dc:	1e5c      	subs	r4, r3, #1
 80017de:	41a3      	sbcs	r3, r4
 80017e0:	2507      	movs	r5, #7
 80017e2:	4303      	orrs	r3, r0
 80017e4:	401d      	ands	r5, r3
 80017e6:	2200      	movs	r2, #0
 80017e8:	2d00      	cmp	r5, #0
 80017ea:	d009      	beq.n	8001800 <__aeabi_dmul+0x4c4>
 80017ec:	220f      	movs	r2, #15
 80017ee:	2400      	movs	r4, #0
 80017f0:	401a      	ands	r2, r3
 80017f2:	0018      	movs	r0, r3
 80017f4:	2a04      	cmp	r2, #4
 80017f6:	d1d6      	bne.n	80017a6 <__aeabi_dmul+0x46a>
 80017f8:	0003      	movs	r3, r0
 80017fa:	0765      	lsls	r5, r4, #29
 80017fc:	0264      	lsls	r4, r4, #9
 80017fe:	0b22      	lsrs	r2, r4, #12
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	432b      	orrs	r3, r5
 8001804:	2501      	movs	r5, #1
 8001806:	4699      	mov	r9, r3
 8001808:	9b01      	ldr	r3, [sp, #4]
 800180a:	2400      	movs	r4, #0
 800180c:	401d      	ands	r5, r3
 800180e:	e5fc      	b.n	800140a <__aeabi_dmul+0xce>
 8001810:	2400      	movs	r4, #0
 8001812:	e7e2      	b.n	80017da <__aeabi_dmul+0x49e>
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	2501      	movs	r5, #1
 8001818:	0312      	lsls	r2, r2, #12
 800181a:	4322      	orrs	r2, r4
 800181c:	9901      	ldr	r1, [sp, #4]
 800181e:	0312      	lsls	r2, r2, #12
 8001820:	0b12      	lsrs	r2, r2, #12
 8001822:	400d      	ands	r5, r1
 8001824:	4699      	mov	r9, r3
 8001826:	4c04      	ldr	r4, [pc, #16]	; (8001838 <__aeabi_dmul+0x4fc>)
 8001828:	e5ef      	b.n	800140a <__aeabi_dmul+0xce>
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	000003ff 	.word	0x000003ff
 8001830:	feffffff 	.word	0xfeffffff
 8001834:	000007fe 	.word	0x000007fe
 8001838:	000007ff 	.word	0x000007ff

0800183c <__aeabi_dsub>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4646      	mov	r6, r8
 8001840:	46d6      	mov	lr, sl
 8001842:	464f      	mov	r7, r9
 8001844:	030c      	lsls	r4, r1, #12
 8001846:	b5c0      	push	{r6, r7, lr}
 8001848:	0fcd      	lsrs	r5, r1, #31
 800184a:	004e      	lsls	r6, r1, #1
 800184c:	0a61      	lsrs	r1, r4, #9
 800184e:	0f44      	lsrs	r4, r0, #29
 8001850:	430c      	orrs	r4, r1
 8001852:	00c1      	lsls	r1, r0, #3
 8001854:	0058      	lsls	r0, r3, #1
 8001856:	0d40      	lsrs	r0, r0, #21
 8001858:	4684      	mov	ip, r0
 800185a:	468a      	mov	sl, r1
 800185c:	000f      	movs	r7, r1
 800185e:	0319      	lsls	r1, r3, #12
 8001860:	0f50      	lsrs	r0, r2, #29
 8001862:	0a49      	lsrs	r1, r1, #9
 8001864:	4301      	orrs	r1, r0
 8001866:	48c6      	ldr	r0, [pc, #792]	; (8001b80 <__aeabi_dsub+0x344>)
 8001868:	0d76      	lsrs	r6, r6, #21
 800186a:	46a8      	mov	r8, r5
 800186c:	0fdb      	lsrs	r3, r3, #31
 800186e:	00d2      	lsls	r2, r2, #3
 8001870:	4584      	cmp	ip, r0
 8001872:	d100      	bne.n	8001876 <__aeabi_dsub+0x3a>
 8001874:	e0d8      	b.n	8001a28 <__aeabi_dsub+0x1ec>
 8001876:	2001      	movs	r0, #1
 8001878:	4043      	eors	r3, r0
 800187a:	42ab      	cmp	r3, r5
 800187c:	d100      	bne.n	8001880 <__aeabi_dsub+0x44>
 800187e:	e0a6      	b.n	80019ce <__aeabi_dsub+0x192>
 8001880:	4660      	mov	r0, ip
 8001882:	1a35      	subs	r5, r6, r0
 8001884:	2d00      	cmp	r5, #0
 8001886:	dc00      	bgt.n	800188a <__aeabi_dsub+0x4e>
 8001888:	e105      	b.n	8001a96 <__aeabi_dsub+0x25a>
 800188a:	2800      	cmp	r0, #0
 800188c:	d110      	bne.n	80018b0 <__aeabi_dsub+0x74>
 800188e:	000b      	movs	r3, r1
 8001890:	4313      	orrs	r3, r2
 8001892:	d100      	bne.n	8001896 <__aeabi_dsub+0x5a>
 8001894:	e0d7      	b.n	8001a46 <__aeabi_dsub+0x20a>
 8001896:	1e6b      	subs	r3, r5, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d000      	beq.n	800189e <__aeabi_dsub+0x62>
 800189c:	e14b      	b.n	8001b36 <__aeabi_dsub+0x2fa>
 800189e:	4653      	mov	r3, sl
 80018a0:	1a9f      	subs	r7, r3, r2
 80018a2:	45ba      	cmp	sl, r7
 80018a4:	4180      	sbcs	r0, r0
 80018a6:	1a64      	subs	r4, r4, r1
 80018a8:	4240      	negs	r0, r0
 80018aa:	1a24      	subs	r4, r4, r0
 80018ac:	2601      	movs	r6, #1
 80018ae:	e01e      	b.n	80018ee <__aeabi_dsub+0xb2>
 80018b0:	4bb3      	ldr	r3, [pc, #716]	; (8001b80 <__aeabi_dsub+0x344>)
 80018b2:	429e      	cmp	r6, r3
 80018b4:	d048      	beq.n	8001948 <__aeabi_dsub+0x10c>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	041b      	lsls	r3, r3, #16
 80018ba:	4319      	orrs	r1, r3
 80018bc:	2d38      	cmp	r5, #56	; 0x38
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dsub+0x86>
 80018c0:	e119      	b.n	8001af6 <__aeabi_dsub+0x2ba>
 80018c2:	2d1f      	cmp	r5, #31
 80018c4:	dd00      	ble.n	80018c8 <__aeabi_dsub+0x8c>
 80018c6:	e14c      	b.n	8001b62 <__aeabi_dsub+0x326>
 80018c8:	2320      	movs	r3, #32
 80018ca:	000f      	movs	r7, r1
 80018cc:	1b5b      	subs	r3, r3, r5
 80018ce:	0010      	movs	r0, r2
 80018d0:	409a      	lsls	r2, r3
 80018d2:	409f      	lsls	r7, r3
 80018d4:	40e8      	lsrs	r0, r5
 80018d6:	1e53      	subs	r3, r2, #1
 80018d8:	419a      	sbcs	r2, r3
 80018da:	40e9      	lsrs	r1, r5
 80018dc:	4307      	orrs	r7, r0
 80018de:	4317      	orrs	r7, r2
 80018e0:	4653      	mov	r3, sl
 80018e2:	1bdf      	subs	r7, r3, r7
 80018e4:	1a61      	subs	r1, r4, r1
 80018e6:	45ba      	cmp	sl, r7
 80018e8:	41a4      	sbcs	r4, r4
 80018ea:	4264      	negs	r4, r4
 80018ec:	1b0c      	subs	r4, r1, r4
 80018ee:	0223      	lsls	r3, r4, #8
 80018f0:	d400      	bmi.n	80018f4 <__aeabi_dsub+0xb8>
 80018f2:	e0c5      	b.n	8001a80 <__aeabi_dsub+0x244>
 80018f4:	0264      	lsls	r4, r4, #9
 80018f6:	0a65      	lsrs	r5, r4, #9
 80018f8:	2d00      	cmp	r5, #0
 80018fa:	d100      	bne.n	80018fe <__aeabi_dsub+0xc2>
 80018fc:	e0f6      	b.n	8001aec <__aeabi_dsub+0x2b0>
 80018fe:	0028      	movs	r0, r5
 8001900:	f000 fbf0 	bl	80020e4 <__clzsi2>
 8001904:	0003      	movs	r3, r0
 8001906:	3b08      	subs	r3, #8
 8001908:	2b1f      	cmp	r3, #31
 800190a:	dd00      	ble.n	800190e <__aeabi_dsub+0xd2>
 800190c:	e0e9      	b.n	8001ae2 <__aeabi_dsub+0x2a6>
 800190e:	2220      	movs	r2, #32
 8001910:	003c      	movs	r4, r7
 8001912:	1ad2      	subs	r2, r2, r3
 8001914:	409d      	lsls	r5, r3
 8001916:	40d4      	lsrs	r4, r2
 8001918:	409f      	lsls	r7, r3
 800191a:	4325      	orrs	r5, r4
 800191c:	429e      	cmp	r6, r3
 800191e:	dd00      	ble.n	8001922 <__aeabi_dsub+0xe6>
 8001920:	e0db      	b.n	8001ada <__aeabi_dsub+0x29e>
 8001922:	1b9e      	subs	r6, r3, r6
 8001924:	1c73      	adds	r3, r6, #1
 8001926:	2b1f      	cmp	r3, #31
 8001928:	dd00      	ble.n	800192c <__aeabi_dsub+0xf0>
 800192a:	e10a      	b.n	8001b42 <__aeabi_dsub+0x306>
 800192c:	2220      	movs	r2, #32
 800192e:	0038      	movs	r0, r7
 8001930:	1ad2      	subs	r2, r2, r3
 8001932:	0029      	movs	r1, r5
 8001934:	4097      	lsls	r7, r2
 8001936:	002c      	movs	r4, r5
 8001938:	4091      	lsls	r1, r2
 800193a:	40d8      	lsrs	r0, r3
 800193c:	1e7a      	subs	r2, r7, #1
 800193e:	4197      	sbcs	r7, r2
 8001940:	40dc      	lsrs	r4, r3
 8001942:	2600      	movs	r6, #0
 8001944:	4301      	orrs	r1, r0
 8001946:	430f      	orrs	r7, r1
 8001948:	077b      	lsls	r3, r7, #29
 800194a:	d009      	beq.n	8001960 <__aeabi_dsub+0x124>
 800194c:	230f      	movs	r3, #15
 800194e:	403b      	ands	r3, r7
 8001950:	2b04      	cmp	r3, #4
 8001952:	d005      	beq.n	8001960 <__aeabi_dsub+0x124>
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	42bb      	cmp	r3, r7
 8001958:	41bf      	sbcs	r7, r7
 800195a:	427f      	negs	r7, r7
 800195c:	19e4      	adds	r4, r4, r7
 800195e:	001f      	movs	r7, r3
 8001960:	0223      	lsls	r3, r4, #8
 8001962:	d525      	bpl.n	80019b0 <__aeabi_dsub+0x174>
 8001964:	4b86      	ldr	r3, [pc, #536]	; (8001b80 <__aeabi_dsub+0x344>)
 8001966:	3601      	adds	r6, #1
 8001968:	429e      	cmp	r6, r3
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x132>
 800196c:	e0af      	b.n	8001ace <__aeabi_dsub+0x292>
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <__aeabi_dsub+0x348>)
 8001970:	2501      	movs	r5, #1
 8001972:	401c      	ands	r4, r3
 8001974:	4643      	mov	r3, r8
 8001976:	0762      	lsls	r2, r4, #29
 8001978:	08ff      	lsrs	r7, r7, #3
 800197a:	0264      	lsls	r4, r4, #9
 800197c:	0576      	lsls	r6, r6, #21
 800197e:	4317      	orrs	r7, r2
 8001980:	0b24      	lsrs	r4, r4, #12
 8001982:	0d76      	lsrs	r6, r6, #21
 8001984:	401d      	ands	r5, r3
 8001986:	2100      	movs	r1, #0
 8001988:	0324      	lsls	r4, r4, #12
 800198a:	0b23      	lsrs	r3, r4, #12
 800198c:	0d0c      	lsrs	r4, r1, #20
 800198e:	4a7e      	ldr	r2, [pc, #504]	; (8001b88 <__aeabi_dsub+0x34c>)
 8001990:	0524      	lsls	r4, r4, #20
 8001992:	431c      	orrs	r4, r3
 8001994:	4014      	ands	r4, r2
 8001996:	0533      	lsls	r3, r6, #20
 8001998:	4323      	orrs	r3, r4
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	07ed      	lsls	r5, r5, #31
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	432b      	orrs	r3, r5
 80019a2:	0038      	movs	r0, r7
 80019a4:	0019      	movs	r1, r3
 80019a6:	bc1c      	pop	{r2, r3, r4}
 80019a8:	4690      	mov	r8, r2
 80019aa:	4699      	mov	r9, r3
 80019ac:	46a2      	mov	sl, r4
 80019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b0:	2501      	movs	r5, #1
 80019b2:	4643      	mov	r3, r8
 80019b4:	0762      	lsls	r2, r4, #29
 80019b6:	08ff      	lsrs	r7, r7, #3
 80019b8:	4317      	orrs	r7, r2
 80019ba:	08e4      	lsrs	r4, r4, #3
 80019bc:	401d      	ands	r5, r3
 80019be:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <__aeabi_dsub+0x344>)
 80019c0:	429e      	cmp	r6, r3
 80019c2:	d036      	beq.n	8001a32 <__aeabi_dsub+0x1f6>
 80019c4:	0324      	lsls	r4, r4, #12
 80019c6:	0576      	lsls	r6, r6, #21
 80019c8:	0b24      	lsrs	r4, r4, #12
 80019ca:	0d76      	lsrs	r6, r6, #21
 80019cc:	e7db      	b.n	8001986 <__aeabi_dsub+0x14a>
 80019ce:	4663      	mov	r3, ip
 80019d0:	1af3      	subs	r3, r6, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_dsub+0x19c>
 80019d6:	e094      	b.n	8001b02 <__aeabi_dsub+0x2c6>
 80019d8:	4660      	mov	r0, ip
 80019da:	2800      	cmp	r0, #0
 80019dc:	d035      	beq.n	8001a4a <__aeabi_dsub+0x20e>
 80019de:	4868      	ldr	r0, [pc, #416]	; (8001b80 <__aeabi_dsub+0x344>)
 80019e0:	4286      	cmp	r6, r0
 80019e2:	d0b1      	beq.n	8001948 <__aeabi_dsub+0x10c>
 80019e4:	2780      	movs	r7, #128	; 0x80
 80019e6:	043f      	lsls	r7, r7, #16
 80019e8:	4339      	orrs	r1, r7
 80019ea:	2b38      	cmp	r3, #56	; 0x38
 80019ec:	dc00      	bgt.n	80019f0 <__aeabi_dsub+0x1b4>
 80019ee:	e0fd      	b.n	8001bec <__aeabi_dsub+0x3b0>
 80019f0:	430a      	orrs	r2, r1
 80019f2:	0017      	movs	r7, r2
 80019f4:	2100      	movs	r1, #0
 80019f6:	1e7a      	subs	r2, r7, #1
 80019f8:	4197      	sbcs	r7, r2
 80019fa:	4457      	add	r7, sl
 80019fc:	4557      	cmp	r7, sl
 80019fe:	4180      	sbcs	r0, r0
 8001a00:	1909      	adds	r1, r1, r4
 8001a02:	4244      	negs	r4, r0
 8001a04:	190c      	adds	r4, r1, r4
 8001a06:	0223      	lsls	r3, r4, #8
 8001a08:	d53a      	bpl.n	8001a80 <__aeabi_dsub+0x244>
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <__aeabi_dsub+0x344>)
 8001a0c:	3601      	adds	r6, #1
 8001a0e:	429e      	cmp	r6, r3
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x1d8>
 8001a12:	e14b      	b.n	8001cac <__aeabi_dsub+0x470>
 8001a14:	2201      	movs	r2, #1
 8001a16:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <__aeabi_dsub+0x348>)
 8001a18:	401c      	ands	r4, r3
 8001a1a:	087b      	lsrs	r3, r7, #1
 8001a1c:	4017      	ands	r7, r2
 8001a1e:	431f      	orrs	r7, r3
 8001a20:	07e2      	lsls	r2, r4, #31
 8001a22:	4317      	orrs	r7, r2
 8001a24:	0864      	lsrs	r4, r4, #1
 8001a26:	e78f      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001a28:	0008      	movs	r0, r1
 8001a2a:	4310      	orrs	r0, r2
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_dsub+0x1f4>
 8001a2e:	e724      	b.n	800187a <__aeabi_dsub+0x3e>
 8001a30:	e721      	b.n	8001876 <__aeabi_dsub+0x3a>
 8001a32:	0023      	movs	r3, r4
 8001a34:	433b      	orrs	r3, r7
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dsub+0x1fe>
 8001a38:	e1b9      	b.n	8001dae <__aeabi_dsub+0x572>
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	0312      	lsls	r2, r2, #12
 8001a3e:	4314      	orrs	r4, r2
 8001a40:	0324      	lsls	r4, r4, #12
 8001a42:	0b24      	lsrs	r4, r4, #12
 8001a44:	e79f      	b.n	8001986 <__aeabi_dsub+0x14a>
 8001a46:	002e      	movs	r6, r5
 8001a48:	e77e      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001a4a:	0008      	movs	r0, r1
 8001a4c:	4310      	orrs	r0, r2
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dsub+0x216>
 8001a50:	e0ca      	b.n	8001be8 <__aeabi_dsub+0x3ac>
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	4684      	mov	ip, r0
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d000      	beq.n	8001a5c <__aeabi_dsub+0x220>
 8001a5a:	e0e7      	b.n	8001c2c <__aeabi_dsub+0x3f0>
 8001a5c:	4452      	add	r2, sl
 8001a5e:	4552      	cmp	r2, sl
 8001a60:	4180      	sbcs	r0, r0
 8001a62:	1864      	adds	r4, r4, r1
 8001a64:	4240      	negs	r0, r0
 8001a66:	1824      	adds	r4, r4, r0
 8001a68:	0017      	movs	r7, r2
 8001a6a:	2601      	movs	r6, #1
 8001a6c:	0223      	lsls	r3, r4, #8
 8001a6e:	d507      	bpl.n	8001a80 <__aeabi_dsub+0x244>
 8001a70:	2602      	movs	r6, #2
 8001a72:	e7cf      	b.n	8001a14 <__aeabi_dsub+0x1d8>
 8001a74:	4664      	mov	r4, ip
 8001a76:	432c      	orrs	r4, r5
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x240>
 8001a7a:	e1b3      	b.n	8001de4 <__aeabi_dsub+0x5a8>
 8001a7c:	002c      	movs	r4, r5
 8001a7e:	4667      	mov	r7, ip
 8001a80:	077b      	lsls	r3, r7, #29
 8001a82:	d000      	beq.n	8001a86 <__aeabi_dsub+0x24a>
 8001a84:	e762      	b.n	800194c <__aeabi_dsub+0x110>
 8001a86:	0763      	lsls	r3, r4, #29
 8001a88:	08ff      	lsrs	r7, r7, #3
 8001a8a:	431f      	orrs	r7, r3
 8001a8c:	2501      	movs	r5, #1
 8001a8e:	4643      	mov	r3, r8
 8001a90:	08e4      	lsrs	r4, r4, #3
 8001a92:	401d      	ands	r5, r3
 8001a94:	e793      	b.n	80019be <__aeabi_dsub+0x182>
 8001a96:	2d00      	cmp	r5, #0
 8001a98:	d178      	bne.n	8001b8c <__aeabi_dsub+0x350>
 8001a9a:	1c75      	adds	r5, r6, #1
 8001a9c:	056d      	lsls	r5, r5, #21
 8001a9e:	0d6d      	lsrs	r5, r5, #21
 8001aa0:	2d01      	cmp	r5, #1
 8001aa2:	dc00      	bgt.n	8001aa6 <__aeabi_dsub+0x26a>
 8001aa4:	e0f2      	b.n	8001c8c <__aeabi_dsub+0x450>
 8001aa6:	4650      	mov	r0, sl
 8001aa8:	1a80      	subs	r0, r0, r2
 8001aaa:	4582      	cmp	sl, r0
 8001aac:	41bf      	sbcs	r7, r7
 8001aae:	1a65      	subs	r5, r4, r1
 8001ab0:	427f      	negs	r7, r7
 8001ab2:	1bed      	subs	r5, r5, r7
 8001ab4:	4684      	mov	ip, r0
 8001ab6:	0228      	lsls	r0, r5, #8
 8001ab8:	d400      	bmi.n	8001abc <__aeabi_dsub+0x280>
 8001aba:	e08c      	b.n	8001bd6 <__aeabi_dsub+0x39a>
 8001abc:	4650      	mov	r0, sl
 8001abe:	1a17      	subs	r7, r2, r0
 8001ac0:	42ba      	cmp	r2, r7
 8001ac2:	4192      	sbcs	r2, r2
 8001ac4:	1b0c      	subs	r4, r1, r4
 8001ac6:	4255      	negs	r5, r2
 8001ac8:	1b65      	subs	r5, r4, r5
 8001aca:	4698      	mov	r8, r3
 8001acc:	e714      	b.n	80018f8 <__aeabi_dsub+0xbc>
 8001ace:	2501      	movs	r5, #1
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	2400      	movs	r4, #0
 8001ad4:	401d      	ands	r5, r3
 8001ad6:	2700      	movs	r7, #0
 8001ad8:	e755      	b.n	8001986 <__aeabi_dsub+0x14a>
 8001ada:	4c2a      	ldr	r4, [pc, #168]	; (8001b84 <__aeabi_dsub+0x348>)
 8001adc:	1af6      	subs	r6, r6, r3
 8001ade:	402c      	ands	r4, r5
 8001ae0:	e732      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001ae2:	003d      	movs	r5, r7
 8001ae4:	3828      	subs	r0, #40	; 0x28
 8001ae6:	4085      	lsls	r5, r0
 8001ae8:	2700      	movs	r7, #0
 8001aea:	e717      	b.n	800191c <__aeabi_dsub+0xe0>
 8001aec:	0038      	movs	r0, r7
 8001aee:	f000 faf9 	bl	80020e4 <__clzsi2>
 8001af2:	3020      	adds	r0, #32
 8001af4:	e706      	b.n	8001904 <__aeabi_dsub+0xc8>
 8001af6:	430a      	orrs	r2, r1
 8001af8:	0017      	movs	r7, r2
 8001afa:	2100      	movs	r1, #0
 8001afc:	1e7a      	subs	r2, r7, #1
 8001afe:	4197      	sbcs	r7, r2
 8001b00:	e6ee      	b.n	80018e0 <__aeabi_dsub+0xa4>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dsub+0x2cc>
 8001b06:	e0e5      	b.n	8001cd4 <__aeabi_dsub+0x498>
 8001b08:	1c73      	adds	r3, r6, #1
 8001b0a:	469c      	mov	ip, r3
 8001b0c:	055b      	lsls	r3, r3, #21
 8001b0e:	0d5b      	lsrs	r3, r3, #21
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	dc00      	bgt.n	8001b16 <__aeabi_dsub+0x2da>
 8001b14:	e09f      	b.n	8001c56 <__aeabi_dsub+0x41a>
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <__aeabi_dsub+0x344>)
 8001b18:	459c      	cmp	ip, r3
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x2e2>
 8001b1c:	e0c5      	b.n	8001caa <__aeabi_dsub+0x46e>
 8001b1e:	4452      	add	r2, sl
 8001b20:	4552      	cmp	r2, sl
 8001b22:	4180      	sbcs	r0, r0
 8001b24:	1864      	adds	r4, r4, r1
 8001b26:	4240      	negs	r0, r0
 8001b28:	1824      	adds	r4, r4, r0
 8001b2a:	07e7      	lsls	r7, r4, #31
 8001b2c:	0852      	lsrs	r2, r2, #1
 8001b2e:	4317      	orrs	r7, r2
 8001b30:	0864      	lsrs	r4, r4, #1
 8001b32:	4666      	mov	r6, ip
 8001b34:	e708      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001b36:	4812      	ldr	r0, [pc, #72]	; (8001b80 <__aeabi_dsub+0x344>)
 8001b38:	4285      	cmp	r5, r0
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0x302>
 8001b3c:	e085      	b.n	8001c4a <__aeabi_dsub+0x40e>
 8001b3e:	001d      	movs	r5, r3
 8001b40:	e6bc      	b.n	80018bc <__aeabi_dsub+0x80>
 8001b42:	0029      	movs	r1, r5
 8001b44:	3e1f      	subs	r6, #31
 8001b46:	40f1      	lsrs	r1, r6
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x312>
 8001b4c:	e07f      	b.n	8001c4e <__aeabi_dsub+0x412>
 8001b4e:	2240      	movs	r2, #64	; 0x40
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	409d      	lsls	r5, r3
 8001b54:	432f      	orrs	r7, r5
 8001b56:	1e7d      	subs	r5, r7, #1
 8001b58:	41af      	sbcs	r7, r5
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	430f      	orrs	r7, r1
 8001b5e:	2600      	movs	r6, #0
 8001b60:	e78e      	b.n	8001a80 <__aeabi_dsub+0x244>
 8001b62:	002b      	movs	r3, r5
 8001b64:	000f      	movs	r7, r1
 8001b66:	3b20      	subs	r3, #32
 8001b68:	40df      	lsrs	r7, r3
 8001b6a:	2d20      	cmp	r5, #32
 8001b6c:	d071      	beq.n	8001c52 <__aeabi_dsub+0x416>
 8001b6e:	2340      	movs	r3, #64	; 0x40
 8001b70:	1b5d      	subs	r5, r3, r5
 8001b72:	40a9      	lsls	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	1e51      	subs	r1, r2, #1
 8001b78:	418a      	sbcs	r2, r1
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4317      	orrs	r7, r2
 8001b7e:	e6af      	b.n	80018e0 <__aeabi_dsub+0xa4>
 8001b80:	000007ff 	.word	0x000007ff
 8001b84:	ff7fffff 	.word	0xff7fffff
 8001b88:	800fffff 	.word	0x800fffff
 8001b8c:	2e00      	cmp	r6, #0
 8001b8e:	d03e      	beq.n	8001c0e <__aeabi_dsub+0x3d2>
 8001b90:	4eb3      	ldr	r6, [pc, #716]	; (8001e60 <__aeabi_dsub+0x624>)
 8001b92:	45b4      	cmp	ip, r6
 8001b94:	d045      	beq.n	8001c22 <__aeabi_dsub+0x3e6>
 8001b96:	2680      	movs	r6, #128	; 0x80
 8001b98:	0436      	lsls	r6, r6, #16
 8001b9a:	426d      	negs	r5, r5
 8001b9c:	4334      	orrs	r4, r6
 8001b9e:	2d38      	cmp	r5, #56	; 0x38
 8001ba0:	dd00      	ble.n	8001ba4 <__aeabi_dsub+0x368>
 8001ba2:	e0a8      	b.n	8001cf6 <__aeabi_dsub+0x4ba>
 8001ba4:	2d1f      	cmp	r5, #31
 8001ba6:	dd00      	ble.n	8001baa <__aeabi_dsub+0x36e>
 8001ba8:	e11f      	b.n	8001dea <__aeabi_dsub+0x5ae>
 8001baa:	2620      	movs	r6, #32
 8001bac:	0027      	movs	r7, r4
 8001bae:	4650      	mov	r0, sl
 8001bb0:	1b76      	subs	r6, r6, r5
 8001bb2:	40b7      	lsls	r7, r6
 8001bb4:	40e8      	lsrs	r0, r5
 8001bb6:	4307      	orrs	r7, r0
 8001bb8:	4650      	mov	r0, sl
 8001bba:	40b0      	lsls	r0, r6
 8001bbc:	1e46      	subs	r6, r0, #1
 8001bbe:	41b0      	sbcs	r0, r6
 8001bc0:	40ec      	lsrs	r4, r5
 8001bc2:	4338      	orrs	r0, r7
 8001bc4:	1a17      	subs	r7, r2, r0
 8001bc6:	42ba      	cmp	r2, r7
 8001bc8:	4192      	sbcs	r2, r2
 8001bca:	1b0c      	subs	r4, r1, r4
 8001bcc:	4252      	negs	r2, r2
 8001bce:	1aa4      	subs	r4, r4, r2
 8001bd0:	4666      	mov	r6, ip
 8001bd2:	4698      	mov	r8, r3
 8001bd4:	e68b      	b.n	80018ee <__aeabi_dsub+0xb2>
 8001bd6:	4664      	mov	r4, ip
 8001bd8:	4667      	mov	r7, ip
 8001bda:	432c      	orrs	r4, r5
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_dsub+0x3a4>
 8001bde:	e68b      	b.n	80018f8 <__aeabi_dsub+0xbc>
 8001be0:	2500      	movs	r5, #0
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	e6ea      	b.n	80019be <__aeabi_dsub+0x182>
 8001be8:	001e      	movs	r6, r3
 8001bea:	e6ad      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001bec:	2b1f      	cmp	r3, #31
 8001bee:	dc60      	bgt.n	8001cb2 <__aeabi_dsub+0x476>
 8001bf0:	2720      	movs	r7, #32
 8001bf2:	1af8      	subs	r0, r7, r3
 8001bf4:	000f      	movs	r7, r1
 8001bf6:	4684      	mov	ip, r0
 8001bf8:	4087      	lsls	r7, r0
 8001bfa:	0010      	movs	r0, r2
 8001bfc:	40d8      	lsrs	r0, r3
 8001bfe:	4307      	orrs	r7, r0
 8001c00:	4660      	mov	r0, ip
 8001c02:	4082      	lsls	r2, r0
 8001c04:	1e50      	subs	r0, r2, #1
 8001c06:	4182      	sbcs	r2, r0
 8001c08:	40d9      	lsrs	r1, r3
 8001c0a:	4317      	orrs	r7, r2
 8001c0c:	e6f5      	b.n	80019fa <__aeabi_dsub+0x1be>
 8001c0e:	0026      	movs	r6, r4
 8001c10:	4650      	mov	r0, sl
 8001c12:	4306      	orrs	r6, r0
 8001c14:	d005      	beq.n	8001c22 <__aeabi_dsub+0x3e6>
 8001c16:	43ed      	mvns	r5, r5
 8001c18:	2d00      	cmp	r5, #0
 8001c1a:	d0d3      	beq.n	8001bc4 <__aeabi_dsub+0x388>
 8001c1c:	4e90      	ldr	r6, [pc, #576]	; (8001e60 <__aeabi_dsub+0x624>)
 8001c1e:	45b4      	cmp	ip, r6
 8001c20:	d1bd      	bne.n	8001b9e <__aeabi_dsub+0x362>
 8001c22:	000c      	movs	r4, r1
 8001c24:	0017      	movs	r7, r2
 8001c26:	4666      	mov	r6, ip
 8001c28:	4698      	mov	r8, r3
 8001c2a:	e68d      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001c2c:	488c      	ldr	r0, [pc, #560]	; (8001e60 <__aeabi_dsub+0x624>)
 8001c2e:	4283      	cmp	r3, r0
 8001c30:	d00b      	beq.n	8001c4a <__aeabi_dsub+0x40e>
 8001c32:	4663      	mov	r3, ip
 8001c34:	e6d9      	b.n	80019ea <__aeabi_dsub+0x1ae>
 8001c36:	2d00      	cmp	r5, #0
 8001c38:	d000      	beq.n	8001c3c <__aeabi_dsub+0x400>
 8001c3a:	e096      	b.n	8001d6a <__aeabi_dsub+0x52e>
 8001c3c:	0008      	movs	r0, r1
 8001c3e:	4310      	orrs	r0, r2
 8001c40:	d100      	bne.n	8001c44 <__aeabi_dsub+0x408>
 8001c42:	e0e2      	b.n	8001e0a <__aeabi_dsub+0x5ce>
 8001c44:	000c      	movs	r4, r1
 8001c46:	0017      	movs	r7, r2
 8001c48:	4698      	mov	r8, r3
 8001c4a:	4e85      	ldr	r6, [pc, #532]	; (8001e60 <__aeabi_dsub+0x624>)
 8001c4c:	e67c      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001c4e:	2500      	movs	r5, #0
 8001c50:	e780      	b.n	8001b54 <__aeabi_dsub+0x318>
 8001c52:	2100      	movs	r1, #0
 8001c54:	e78e      	b.n	8001b74 <__aeabi_dsub+0x338>
 8001c56:	0023      	movs	r3, r4
 8001c58:	4650      	mov	r0, sl
 8001c5a:	4303      	orrs	r3, r0
 8001c5c:	2e00      	cmp	r6, #0
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x426>
 8001c60:	e0a8      	b.n	8001db4 <__aeabi_dsub+0x578>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x42c>
 8001c66:	e0de      	b.n	8001e26 <__aeabi_dsub+0x5ea>
 8001c68:	000b      	movs	r3, r1
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x434>
 8001c6e:	e66b      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001c70:	4452      	add	r2, sl
 8001c72:	4552      	cmp	r2, sl
 8001c74:	4180      	sbcs	r0, r0
 8001c76:	1864      	adds	r4, r4, r1
 8001c78:	4240      	negs	r0, r0
 8001c7a:	1824      	adds	r4, r4, r0
 8001c7c:	0017      	movs	r7, r2
 8001c7e:	0223      	lsls	r3, r4, #8
 8001c80:	d400      	bmi.n	8001c84 <__aeabi_dsub+0x448>
 8001c82:	e6fd      	b.n	8001a80 <__aeabi_dsub+0x244>
 8001c84:	4b77      	ldr	r3, [pc, #476]	; (8001e64 <__aeabi_dsub+0x628>)
 8001c86:	4666      	mov	r6, ip
 8001c88:	401c      	ands	r4, r3
 8001c8a:	e65d      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001c8c:	0025      	movs	r5, r4
 8001c8e:	4650      	mov	r0, sl
 8001c90:	4305      	orrs	r5, r0
 8001c92:	2e00      	cmp	r6, #0
 8001c94:	d1cf      	bne.n	8001c36 <__aeabi_dsub+0x3fa>
 8001c96:	2d00      	cmp	r5, #0
 8001c98:	d14f      	bne.n	8001d3a <__aeabi_dsub+0x4fe>
 8001c9a:	000c      	movs	r4, r1
 8001c9c:	4314      	orrs	r4, r2
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x466>
 8001ca0:	e0a0      	b.n	8001de4 <__aeabi_dsub+0x5a8>
 8001ca2:	000c      	movs	r4, r1
 8001ca4:	0017      	movs	r7, r2
 8001ca6:	4698      	mov	r8, r3
 8001ca8:	e64e      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001caa:	4666      	mov	r6, ip
 8001cac:	2400      	movs	r4, #0
 8001cae:	2700      	movs	r7, #0
 8001cb0:	e685      	b.n	80019be <__aeabi_dsub+0x182>
 8001cb2:	001f      	movs	r7, r3
 8001cb4:	0008      	movs	r0, r1
 8001cb6:	3f20      	subs	r7, #32
 8001cb8:	40f8      	lsrs	r0, r7
 8001cba:	0007      	movs	r7, r0
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x486>
 8001cc0:	e08e      	b.n	8001de0 <__aeabi_dsub+0x5a4>
 8001cc2:	2040      	movs	r0, #64	; 0x40
 8001cc4:	1ac3      	subs	r3, r0, r3
 8001cc6:	4099      	lsls	r1, r3
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	1e51      	subs	r1, r2, #1
 8001ccc:	418a      	sbcs	r2, r1
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4317      	orrs	r7, r2
 8001cd2:	e692      	b.n	80019fa <__aeabi_dsub+0x1be>
 8001cd4:	2e00      	cmp	r6, #0
 8001cd6:	d114      	bne.n	8001d02 <__aeabi_dsub+0x4c6>
 8001cd8:	0026      	movs	r6, r4
 8001cda:	4650      	mov	r0, sl
 8001cdc:	4306      	orrs	r6, r0
 8001cde:	d062      	beq.n	8001da6 <__aeabi_dsub+0x56a>
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d15c      	bne.n	8001da0 <__aeabi_dsub+0x564>
 8001ce6:	1887      	adds	r7, r0, r2
 8001ce8:	4297      	cmp	r7, r2
 8001cea:	4192      	sbcs	r2, r2
 8001cec:	1864      	adds	r4, r4, r1
 8001cee:	4252      	negs	r2, r2
 8001cf0:	18a4      	adds	r4, r4, r2
 8001cf2:	4666      	mov	r6, ip
 8001cf4:	e687      	b.n	8001a06 <__aeabi_dsub+0x1ca>
 8001cf6:	4650      	mov	r0, sl
 8001cf8:	4320      	orrs	r0, r4
 8001cfa:	1e44      	subs	r4, r0, #1
 8001cfc:	41a0      	sbcs	r0, r4
 8001cfe:	2400      	movs	r4, #0
 8001d00:	e760      	b.n	8001bc4 <__aeabi_dsub+0x388>
 8001d02:	4e57      	ldr	r6, [pc, #348]	; (8001e60 <__aeabi_dsub+0x624>)
 8001d04:	45b4      	cmp	ip, r6
 8001d06:	d04e      	beq.n	8001da6 <__aeabi_dsub+0x56a>
 8001d08:	2680      	movs	r6, #128	; 0x80
 8001d0a:	0436      	lsls	r6, r6, #16
 8001d0c:	425b      	negs	r3, r3
 8001d0e:	4334      	orrs	r4, r6
 8001d10:	2b38      	cmp	r3, #56	; 0x38
 8001d12:	dd00      	ble.n	8001d16 <__aeabi_dsub+0x4da>
 8001d14:	e07f      	b.n	8001e16 <__aeabi_dsub+0x5da>
 8001d16:	2b1f      	cmp	r3, #31
 8001d18:	dd00      	ble.n	8001d1c <__aeabi_dsub+0x4e0>
 8001d1a:	e08b      	b.n	8001e34 <__aeabi_dsub+0x5f8>
 8001d1c:	2620      	movs	r6, #32
 8001d1e:	0027      	movs	r7, r4
 8001d20:	4650      	mov	r0, sl
 8001d22:	1af6      	subs	r6, r6, r3
 8001d24:	40b7      	lsls	r7, r6
 8001d26:	40d8      	lsrs	r0, r3
 8001d28:	4307      	orrs	r7, r0
 8001d2a:	4650      	mov	r0, sl
 8001d2c:	40b0      	lsls	r0, r6
 8001d2e:	1e46      	subs	r6, r0, #1
 8001d30:	41b0      	sbcs	r0, r6
 8001d32:	4307      	orrs	r7, r0
 8001d34:	40dc      	lsrs	r4, r3
 8001d36:	18bf      	adds	r7, r7, r2
 8001d38:	e7d6      	b.n	8001ce8 <__aeabi_dsub+0x4ac>
 8001d3a:	000d      	movs	r5, r1
 8001d3c:	4315      	orrs	r5, r2
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x506>
 8001d40:	e602      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001d42:	4650      	mov	r0, sl
 8001d44:	1a80      	subs	r0, r0, r2
 8001d46:	4582      	cmp	sl, r0
 8001d48:	41bf      	sbcs	r7, r7
 8001d4a:	1a65      	subs	r5, r4, r1
 8001d4c:	427f      	negs	r7, r7
 8001d4e:	1bed      	subs	r5, r5, r7
 8001d50:	4684      	mov	ip, r0
 8001d52:	0228      	lsls	r0, r5, #8
 8001d54:	d400      	bmi.n	8001d58 <__aeabi_dsub+0x51c>
 8001d56:	e68d      	b.n	8001a74 <__aeabi_dsub+0x238>
 8001d58:	4650      	mov	r0, sl
 8001d5a:	1a17      	subs	r7, r2, r0
 8001d5c:	42ba      	cmp	r2, r7
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	1b0c      	subs	r4, r1, r4
 8001d62:	4252      	negs	r2, r2
 8001d64:	1aa4      	subs	r4, r4, r2
 8001d66:	4698      	mov	r8, r3
 8001d68:	e5ee      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001d6a:	000d      	movs	r5, r1
 8001d6c:	4315      	orrs	r5, r2
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x536>
 8001d70:	e76b      	b.n	8001c4a <__aeabi_dsub+0x40e>
 8001d72:	4650      	mov	r0, sl
 8001d74:	0767      	lsls	r7, r4, #29
 8001d76:	08c0      	lsrs	r0, r0, #3
 8001d78:	4307      	orrs	r7, r0
 8001d7a:	2080      	movs	r0, #128	; 0x80
 8001d7c:	08e4      	lsrs	r4, r4, #3
 8001d7e:	0300      	lsls	r0, r0, #12
 8001d80:	4204      	tst	r4, r0
 8001d82:	d007      	beq.n	8001d94 <__aeabi_dsub+0x558>
 8001d84:	08cd      	lsrs	r5, r1, #3
 8001d86:	4205      	tst	r5, r0
 8001d88:	d104      	bne.n	8001d94 <__aeabi_dsub+0x558>
 8001d8a:	002c      	movs	r4, r5
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	08d7      	lsrs	r7, r2, #3
 8001d90:	0749      	lsls	r1, r1, #29
 8001d92:	430f      	orrs	r7, r1
 8001d94:	0f7b      	lsrs	r3, r7, #29
 8001d96:	00e4      	lsls	r4, r4, #3
 8001d98:	431c      	orrs	r4, r3
 8001d9a:	00ff      	lsls	r7, r7, #3
 8001d9c:	4e30      	ldr	r6, [pc, #192]	; (8001e60 <__aeabi_dsub+0x624>)
 8001d9e:	e5d3      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001da0:	4e2f      	ldr	r6, [pc, #188]	; (8001e60 <__aeabi_dsub+0x624>)
 8001da2:	45b4      	cmp	ip, r6
 8001da4:	d1b4      	bne.n	8001d10 <__aeabi_dsub+0x4d4>
 8001da6:	000c      	movs	r4, r1
 8001da8:	0017      	movs	r7, r2
 8001daa:	4666      	mov	r6, ip
 8001dac:	e5cc      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001dae:	2700      	movs	r7, #0
 8001db0:	2400      	movs	r4, #0
 8001db2:	e5e8      	b.n	8001986 <__aeabi_dsub+0x14a>
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d039      	beq.n	8001e2c <__aeabi_dsub+0x5f0>
 8001db8:	000b      	movs	r3, r1
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x584>
 8001dbe:	e744      	b.n	8001c4a <__aeabi_dsub+0x40e>
 8001dc0:	08c0      	lsrs	r0, r0, #3
 8001dc2:	0767      	lsls	r7, r4, #29
 8001dc4:	4307      	orrs	r7, r0
 8001dc6:	2080      	movs	r0, #128	; 0x80
 8001dc8:	08e4      	lsrs	r4, r4, #3
 8001dca:	0300      	lsls	r0, r0, #12
 8001dcc:	4204      	tst	r4, r0
 8001dce:	d0e1      	beq.n	8001d94 <__aeabi_dsub+0x558>
 8001dd0:	08cb      	lsrs	r3, r1, #3
 8001dd2:	4203      	tst	r3, r0
 8001dd4:	d1de      	bne.n	8001d94 <__aeabi_dsub+0x558>
 8001dd6:	08d7      	lsrs	r7, r2, #3
 8001dd8:	0749      	lsls	r1, r1, #29
 8001dda:	430f      	orrs	r7, r1
 8001ddc:	001c      	movs	r4, r3
 8001dde:	e7d9      	b.n	8001d94 <__aeabi_dsub+0x558>
 8001de0:	2100      	movs	r1, #0
 8001de2:	e771      	b.n	8001cc8 <__aeabi_dsub+0x48c>
 8001de4:	2500      	movs	r5, #0
 8001de6:	2700      	movs	r7, #0
 8001de8:	e5e9      	b.n	80019be <__aeabi_dsub+0x182>
 8001dea:	002e      	movs	r6, r5
 8001dec:	0027      	movs	r7, r4
 8001dee:	3e20      	subs	r6, #32
 8001df0:	40f7      	lsrs	r7, r6
 8001df2:	2d20      	cmp	r5, #32
 8001df4:	d02f      	beq.n	8001e56 <__aeabi_dsub+0x61a>
 8001df6:	2640      	movs	r6, #64	; 0x40
 8001df8:	1b75      	subs	r5, r6, r5
 8001dfa:	40ac      	lsls	r4, r5
 8001dfc:	4650      	mov	r0, sl
 8001dfe:	4320      	orrs	r0, r4
 8001e00:	1e44      	subs	r4, r0, #1
 8001e02:	41a0      	sbcs	r0, r4
 8001e04:	2400      	movs	r4, #0
 8001e06:	4338      	orrs	r0, r7
 8001e08:	e6dc      	b.n	8001bc4 <__aeabi_dsub+0x388>
 8001e0a:	2480      	movs	r4, #128	; 0x80
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	0324      	lsls	r4, r4, #12
 8001e10:	4e13      	ldr	r6, [pc, #76]	; (8001e60 <__aeabi_dsub+0x624>)
 8001e12:	2700      	movs	r7, #0
 8001e14:	e5d3      	b.n	80019be <__aeabi_dsub+0x182>
 8001e16:	4650      	mov	r0, sl
 8001e18:	4320      	orrs	r0, r4
 8001e1a:	0007      	movs	r7, r0
 8001e1c:	1e78      	subs	r0, r7, #1
 8001e1e:	4187      	sbcs	r7, r0
 8001e20:	2400      	movs	r4, #0
 8001e22:	18bf      	adds	r7, r7, r2
 8001e24:	e760      	b.n	8001ce8 <__aeabi_dsub+0x4ac>
 8001e26:	000c      	movs	r4, r1
 8001e28:	0017      	movs	r7, r2
 8001e2a:	e58d      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001e2c:	000c      	movs	r4, r1
 8001e2e:	0017      	movs	r7, r2
 8001e30:	4e0b      	ldr	r6, [pc, #44]	; (8001e60 <__aeabi_dsub+0x624>)
 8001e32:	e589      	b.n	8001948 <__aeabi_dsub+0x10c>
 8001e34:	001e      	movs	r6, r3
 8001e36:	0027      	movs	r7, r4
 8001e38:	3e20      	subs	r6, #32
 8001e3a:	40f7      	lsrs	r7, r6
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d00c      	beq.n	8001e5a <__aeabi_dsub+0x61e>
 8001e40:	2640      	movs	r6, #64	; 0x40
 8001e42:	1af3      	subs	r3, r6, r3
 8001e44:	409c      	lsls	r4, r3
 8001e46:	4650      	mov	r0, sl
 8001e48:	4320      	orrs	r0, r4
 8001e4a:	1e44      	subs	r4, r0, #1
 8001e4c:	41a0      	sbcs	r0, r4
 8001e4e:	4307      	orrs	r7, r0
 8001e50:	2400      	movs	r4, #0
 8001e52:	18bf      	adds	r7, r7, r2
 8001e54:	e748      	b.n	8001ce8 <__aeabi_dsub+0x4ac>
 8001e56:	2400      	movs	r4, #0
 8001e58:	e7d0      	b.n	8001dfc <__aeabi_dsub+0x5c0>
 8001e5a:	2400      	movs	r4, #0
 8001e5c:	e7f3      	b.n	8001e46 <__aeabi_dsub+0x60a>
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	000007ff 	.word	0x000007ff
 8001e64:	ff7fffff 	.word	0xff7fffff

08001e68 <__aeabi_d2iz>:
 8001e68:	b530      	push	{r4, r5, lr}
 8001e6a:	4d13      	ldr	r5, [pc, #76]	; (8001eb8 <__aeabi_d2iz+0x50>)
 8001e6c:	030a      	lsls	r2, r1, #12
 8001e6e:	004b      	lsls	r3, r1, #1
 8001e70:	0b12      	lsrs	r2, r2, #12
 8001e72:	0d5b      	lsrs	r3, r3, #21
 8001e74:	0fc9      	lsrs	r1, r1, #31
 8001e76:	2400      	movs	r4, #0
 8001e78:	42ab      	cmp	r3, r5
 8001e7a:	dd10      	ble.n	8001e9e <__aeabi_d2iz+0x36>
 8001e7c:	4c0f      	ldr	r4, [pc, #60]	; (8001ebc <__aeabi_d2iz+0x54>)
 8001e7e:	42a3      	cmp	r3, r4
 8001e80:	dc0f      	bgt.n	8001ea2 <__aeabi_d2iz+0x3a>
 8001e82:	2480      	movs	r4, #128	; 0x80
 8001e84:	4d0e      	ldr	r5, [pc, #56]	; (8001ec0 <__aeabi_d2iz+0x58>)
 8001e86:	0364      	lsls	r4, r4, #13
 8001e88:	4322      	orrs	r2, r4
 8001e8a:	1aed      	subs	r5, r5, r3
 8001e8c:	2d1f      	cmp	r5, #31
 8001e8e:	dd0b      	ble.n	8001ea8 <__aeabi_d2iz+0x40>
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <__aeabi_d2iz+0x5c>)
 8001e92:	1ac3      	subs	r3, r0, r3
 8001e94:	40da      	lsrs	r2, r3
 8001e96:	4254      	negs	r4, r2
 8001e98:	2900      	cmp	r1, #0
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_d2iz+0x36>
 8001e9c:	0014      	movs	r4, r2
 8001e9e:	0020      	movs	r0, r4
 8001ea0:	bd30      	pop	{r4, r5, pc}
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <__aeabi_d2iz+0x60>)
 8001ea4:	18cc      	adds	r4, r1, r3
 8001ea6:	e7fa      	b.n	8001e9e <__aeabi_d2iz+0x36>
 8001ea8:	4c08      	ldr	r4, [pc, #32]	; (8001ecc <__aeabi_d2iz+0x64>)
 8001eaa:	40e8      	lsrs	r0, r5
 8001eac:	46a4      	mov	ip, r4
 8001eae:	4463      	add	r3, ip
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	4302      	orrs	r2, r0
 8001eb4:	e7ef      	b.n	8001e96 <__aeabi_d2iz+0x2e>
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	000003fe 	.word	0x000003fe
 8001ebc:	0000041d 	.word	0x0000041d
 8001ec0:	00000433 	.word	0x00000433
 8001ec4:	00000413 	.word	0x00000413
 8001ec8:	7fffffff 	.word	0x7fffffff
 8001ecc:	fffffbed 	.word	0xfffffbed

08001ed0 <__aeabi_i2d>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d030      	beq.n	8001f38 <__aeabi_i2d+0x68>
 8001ed6:	17c3      	asrs	r3, r0, #31
 8001ed8:	18c4      	adds	r4, r0, r3
 8001eda:	405c      	eors	r4, r3
 8001edc:	0fc5      	lsrs	r5, r0, #31
 8001ede:	0020      	movs	r0, r4
 8001ee0:	f000 f900 	bl	80020e4 <__clzsi2>
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <__aeabi_i2d+0x74>)
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <__aeabi_i2d+0x78>)
 8001ee8:	1a1b      	subs	r3, r3, r0
 8001eea:	1ad2      	subs	r2, r2, r3
 8001eec:	2a1f      	cmp	r2, #31
 8001eee:	dd18      	ble.n	8001f22 <__aeabi_i2d+0x52>
 8001ef0:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <__aeabi_i2d+0x7c>)
 8001ef2:	1ad2      	subs	r2, r2, r3
 8001ef4:	4094      	lsls	r4, r2
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	0324      	lsls	r4, r4, #12
 8001efa:	055b      	lsls	r3, r3, #21
 8001efc:	0b24      	lsrs	r4, r4, #12
 8001efe:	0d5b      	lsrs	r3, r3, #21
 8001f00:	2100      	movs	r1, #0
 8001f02:	0010      	movs	r0, r2
 8001f04:	0324      	lsls	r4, r4, #12
 8001f06:	0d0a      	lsrs	r2, r1, #20
 8001f08:	0b24      	lsrs	r4, r4, #12
 8001f0a:	0512      	lsls	r2, r2, #20
 8001f0c:	4322      	orrs	r2, r4
 8001f0e:	4c10      	ldr	r4, [pc, #64]	; (8001f50 <__aeabi_i2d+0x80>)
 8001f10:	051b      	lsls	r3, r3, #20
 8001f12:	4022      	ands	r2, r4
 8001f14:	4313      	orrs	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	07ed      	lsls	r5, r5, #31
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	432b      	orrs	r3, r5
 8001f1e:	0019      	movs	r1, r3
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
 8001f22:	0021      	movs	r1, r4
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	210b      	movs	r1, #11
 8001f2a:	1a08      	subs	r0, r1, r0
 8001f2c:	40c4      	lsrs	r4, r0
 8001f2e:	055b      	lsls	r3, r3, #21
 8001f30:	0324      	lsls	r4, r4, #12
 8001f32:	0b24      	lsrs	r4, r4, #12
 8001f34:	0d5b      	lsrs	r3, r3, #21
 8001f36:	e7e3      	b.n	8001f00 <__aeabi_i2d+0x30>
 8001f38:	2500      	movs	r5, #0
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2400      	movs	r4, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e7de      	b.n	8001f00 <__aeabi_i2d+0x30>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	0000041e 	.word	0x0000041e
 8001f48:	00000433 	.word	0x00000433
 8001f4c:	00000413 	.word	0x00000413
 8001f50:	800fffff 	.word	0x800fffff

08001f54 <__aeabi_ui2d>:
 8001f54:	b510      	push	{r4, lr}
 8001f56:	1e04      	subs	r4, r0, #0
 8001f58:	d028      	beq.n	8001fac <__aeabi_ui2d+0x58>
 8001f5a:	f000 f8c3 	bl	80020e4 <__clzsi2>
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <__aeabi_ui2d+0x60>)
 8001f60:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <__aeabi_ui2d+0x64>)
 8001f62:	1a1b      	subs	r3, r3, r0
 8001f64:	1ad2      	subs	r2, r2, r3
 8001f66:	2a1f      	cmp	r2, #31
 8001f68:	dd15      	ble.n	8001f96 <__aeabi_ui2d+0x42>
 8001f6a:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <__aeabi_ui2d+0x68>)
 8001f6c:	1ad2      	subs	r2, r2, r3
 8001f6e:	4094      	lsls	r4, r2
 8001f70:	2200      	movs	r2, #0
 8001f72:	0324      	lsls	r4, r4, #12
 8001f74:	055b      	lsls	r3, r3, #21
 8001f76:	0b24      	lsrs	r4, r4, #12
 8001f78:	0d5b      	lsrs	r3, r3, #21
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	0d0a      	lsrs	r2, r1, #20
 8001f82:	0b24      	lsrs	r4, r4, #12
 8001f84:	0512      	lsls	r2, r2, #20
 8001f86:	4322      	orrs	r2, r4
 8001f88:	4c0d      	ldr	r4, [pc, #52]	; (8001fc0 <__aeabi_ui2d+0x6c>)
 8001f8a:	051b      	lsls	r3, r3, #20
 8001f8c:	4022      	ands	r2, r4
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	0859      	lsrs	r1, r3, #1
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	0021      	movs	r1, r4
 8001f98:	4091      	lsls	r1, r2
 8001f9a:	000a      	movs	r2, r1
 8001f9c:	210b      	movs	r1, #11
 8001f9e:	1a08      	subs	r0, r1, r0
 8001fa0:	40c4      	lsrs	r4, r0
 8001fa2:	055b      	lsls	r3, r3, #21
 8001fa4:	0324      	lsls	r4, r4, #12
 8001fa6:	0b24      	lsrs	r4, r4, #12
 8001fa8:	0d5b      	lsrs	r3, r3, #21
 8001faa:	e7e6      	b.n	8001f7a <__aeabi_ui2d+0x26>
 8001fac:	2300      	movs	r3, #0
 8001fae:	2400      	movs	r4, #0
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	e7e2      	b.n	8001f7a <__aeabi_ui2d+0x26>
 8001fb4:	0000041e 	.word	0x0000041e
 8001fb8:	00000433 	.word	0x00000433
 8001fbc:	00000413 	.word	0x00000413
 8001fc0:	800fffff 	.word	0x800fffff

08001fc4 <__aeabi_f2d>:
 8001fc4:	0041      	lsls	r1, r0, #1
 8001fc6:	0e09      	lsrs	r1, r1, #24
 8001fc8:	1c4b      	adds	r3, r1, #1
 8001fca:	b570      	push	{r4, r5, r6, lr}
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	0246      	lsls	r6, r0, #9
 8001fd0:	0a75      	lsrs	r5, r6, #9
 8001fd2:	0fc4      	lsrs	r4, r0, #31
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	dd14      	ble.n	8002002 <__aeabi_f2d+0x3e>
 8001fd8:	23e0      	movs	r3, #224	; 0xe0
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	076d      	lsls	r5, r5, #29
 8001fde:	0b36      	lsrs	r6, r6, #12
 8001fe0:	18cb      	adds	r3, r1, r3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	0d0a      	lsrs	r2, r1, #20
 8001fe6:	0028      	movs	r0, r5
 8001fe8:	0512      	lsls	r2, r2, #20
 8001fea:	4d1c      	ldr	r5, [pc, #112]	; (800205c <__aeabi_f2d+0x98>)
 8001fec:	4332      	orrs	r2, r6
 8001fee:	055b      	lsls	r3, r3, #21
 8001ff0:	402a      	ands	r2, r5
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	07e4      	lsls	r4, r4, #31
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	4323      	orrs	r3, r4
 8001ffe:	0019      	movs	r1, r3
 8002000:	bd70      	pop	{r4, r5, r6, pc}
 8002002:	2900      	cmp	r1, #0
 8002004:	d114      	bne.n	8002030 <__aeabi_f2d+0x6c>
 8002006:	2d00      	cmp	r5, #0
 8002008:	d01e      	beq.n	8002048 <__aeabi_f2d+0x84>
 800200a:	0028      	movs	r0, r5
 800200c:	f000 f86a 	bl	80020e4 <__clzsi2>
 8002010:	280a      	cmp	r0, #10
 8002012:	dc1c      	bgt.n	800204e <__aeabi_f2d+0x8a>
 8002014:	230b      	movs	r3, #11
 8002016:	002a      	movs	r2, r5
 8002018:	1a1b      	subs	r3, r3, r0
 800201a:	40da      	lsrs	r2, r3
 800201c:	0003      	movs	r3, r0
 800201e:	3315      	adds	r3, #21
 8002020:	409d      	lsls	r5, r3
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <__aeabi_f2d+0x9c>)
 8002024:	0312      	lsls	r2, r2, #12
 8002026:	1a1b      	subs	r3, r3, r0
 8002028:	055b      	lsls	r3, r3, #21
 800202a:	0b16      	lsrs	r6, r2, #12
 800202c:	0d5b      	lsrs	r3, r3, #21
 800202e:	e7d8      	b.n	8001fe2 <__aeabi_f2d+0x1e>
 8002030:	2d00      	cmp	r5, #0
 8002032:	d006      	beq.n	8002042 <__aeabi_f2d+0x7e>
 8002034:	0b32      	lsrs	r2, r6, #12
 8002036:	2680      	movs	r6, #128	; 0x80
 8002038:	0336      	lsls	r6, r6, #12
 800203a:	076d      	lsls	r5, r5, #29
 800203c:	4316      	orrs	r6, r2
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <__aeabi_f2d+0xa0>)
 8002040:	e7cf      	b.n	8001fe2 <__aeabi_f2d+0x1e>
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <__aeabi_f2d+0xa0>)
 8002044:	2600      	movs	r6, #0
 8002046:	e7cc      	b.n	8001fe2 <__aeabi_f2d+0x1e>
 8002048:	2300      	movs	r3, #0
 800204a:	2600      	movs	r6, #0
 800204c:	e7c9      	b.n	8001fe2 <__aeabi_f2d+0x1e>
 800204e:	0003      	movs	r3, r0
 8002050:	002a      	movs	r2, r5
 8002052:	3b0b      	subs	r3, #11
 8002054:	409a      	lsls	r2, r3
 8002056:	2500      	movs	r5, #0
 8002058:	e7e3      	b.n	8002022 <__aeabi_f2d+0x5e>
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	800fffff 	.word	0x800fffff
 8002060:	00000389 	.word	0x00000389
 8002064:	000007ff 	.word	0x000007ff

08002068 <__aeabi_cdrcmple>:
 8002068:	4684      	mov	ip, r0
 800206a:	1c10      	adds	r0, r2, #0
 800206c:	4662      	mov	r2, ip
 800206e:	468c      	mov	ip, r1
 8002070:	1c19      	adds	r1, r3, #0
 8002072:	4663      	mov	r3, ip
 8002074:	e000      	b.n	8002078 <__aeabi_cdcmpeq>
 8002076:	46c0      	nop			; (mov r8, r8)

08002078 <__aeabi_cdcmpeq>:
 8002078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800207a:	f000 f8fb 	bl	8002274 <__ledf2>
 800207e:	2800      	cmp	r0, #0
 8002080:	d401      	bmi.n	8002086 <__aeabi_cdcmpeq+0xe>
 8002082:	2100      	movs	r1, #0
 8002084:	42c8      	cmn	r0, r1
 8002086:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002088 <__aeabi_dcmpeq>:
 8002088:	b510      	push	{r4, lr}
 800208a:	f000 f855 	bl	8002138 <__eqdf2>
 800208e:	4240      	negs	r0, r0
 8002090:	3001      	adds	r0, #1
 8002092:	bd10      	pop	{r4, pc}

08002094 <__aeabi_dcmplt>:
 8002094:	b510      	push	{r4, lr}
 8002096:	f000 f8ed 	bl	8002274 <__ledf2>
 800209a:	2800      	cmp	r0, #0
 800209c:	db01      	blt.n	80020a2 <__aeabi_dcmplt+0xe>
 800209e:	2000      	movs	r0, #0
 80020a0:	bd10      	pop	{r4, pc}
 80020a2:	2001      	movs	r0, #1
 80020a4:	bd10      	pop	{r4, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)

080020a8 <__aeabi_dcmple>:
 80020a8:	b510      	push	{r4, lr}
 80020aa:	f000 f8e3 	bl	8002274 <__ledf2>
 80020ae:	2800      	cmp	r0, #0
 80020b0:	dd01      	ble.n	80020b6 <__aeabi_dcmple+0xe>
 80020b2:	2000      	movs	r0, #0
 80020b4:	bd10      	pop	{r4, pc}
 80020b6:	2001      	movs	r0, #1
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)

080020bc <__aeabi_dcmpgt>:
 80020bc:	b510      	push	{r4, lr}
 80020be:	f000 f875 	bl	80021ac <__gedf2>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	dc01      	bgt.n	80020ca <__aeabi_dcmpgt+0xe>
 80020c6:	2000      	movs	r0, #0
 80020c8:	bd10      	pop	{r4, pc}
 80020ca:	2001      	movs	r0, #1
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)

080020d0 <__aeabi_dcmpge>:
 80020d0:	b510      	push	{r4, lr}
 80020d2:	f000 f86b 	bl	80021ac <__gedf2>
 80020d6:	2800      	cmp	r0, #0
 80020d8:	da01      	bge.n	80020de <__aeabi_dcmpge+0xe>
 80020da:	2000      	movs	r0, #0
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	2001      	movs	r0, #1
 80020e0:	bd10      	pop	{r4, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)

080020e4 <__clzsi2>:
 80020e4:	211c      	movs	r1, #28
 80020e6:	2301      	movs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	4298      	cmp	r0, r3
 80020ec:	d301      	bcc.n	80020f2 <__clzsi2+0xe>
 80020ee:	0c00      	lsrs	r0, r0, #16
 80020f0:	3910      	subs	r1, #16
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	4298      	cmp	r0, r3
 80020f6:	d301      	bcc.n	80020fc <__clzsi2+0x18>
 80020f8:	0a00      	lsrs	r0, r0, #8
 80020fa:	3908      	subs	r1, #8
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	4298      	cmp	r0, r3
 8002100:	d301      	bcc.n	8002106 <__clzsi2+0x22>
 8002102:	0900      	lsrs	r0, r0, #4
 8002104:	3904      	subs	r1, #4
 8002106:	a202      	add	r2, pc, #8	; (adr r2, 8002110 <__clzsi2+0x2c>)
 8002108:	5c10      	ldrb	r0, [r2, r0]
 800210a:	1840      	adds	r0, r0, r1
 800210c:	4770      	bx	lr
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	02020304 	.word	0x02020304
 8002114:	01010101 	.word	0x01010101
	...

08002120 <__clzdi2>:
 8002120:	b510      	push	{r4, lr}
 8002122:	2900      	cmp	r1, #0
 8002124:	d103      	bne.n	800212e <__clzdi2+0xe>
 8002126:	f7ff ffdd 	bl	80020e4 <__clzsi2>
 800212a:	3020      	adds	r0, #32
 800212c:	e002      	b.n	8002134 <__clzdi2+0x14>
 800212e:	1c08      	adds	r0, r1, #0
 8002130:	f7ff ffd8 	bl	80020e4 <__clzsi2>
 8002134:	bd10      	pop	{r4, pc}
 8002136:	46c0      	nop			; (mov r8, r8)

08002138 <__eqdf2>:
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	464f      	mov	r7, r9
 800213c:	4646      	mov	r6, r8
 800213e:	46d6      	mov	lr, sl
 8002140:	005c      	lsls	r4, r3, #1
 8002142:	b5c0      	push	{r6, r7, lr}
 8002144:	031f      	lsls	r7, r3, #12
 8002146:	0fdb      	lsrs	r3, r3, #31
 8002148:	469a      	mov	sl, r3
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <__eqdf2+0x70>)
 800214c:	030e      	lsls	r6, r1, #12
 800214e:	004d      	lsls	r5, r1, #1
 8002150:	4684      	mov	ip, r0
 8002152:	4680      	mov	r8, r0
 8002154:	0b36      	lsrs	r6, r6, #12
 8002156:	0d6d      	lsrs	r5, r5, #21
 8002158:	0fc9      	lsrs	r1, r1, #31
 800215a:	4691      	mov	r9, r2
 800215c:	0b3f      	lsrs	r7, r7, #12
 800215e:	0d64      	lsrs	r4, r4, #21
 8002160:	2001      	movs	r0, #1
 8002162:	429d      	cmp	r5, r3
 8002164:	d008      	beq.n	8002178 <__eqdf2+0x40>
 8002166:	429c      	cmp	r4, r3
 8002168:	d001      	beq.n	800216e <__eqdf2+0x36>
 800216a:	42a5      	cmp	r5, r4
 800216c:	d00b      	beq.n	8002186 <__eqdf2+0x4e>
 800216e:	bc1c      	pop	{r2, r3, r4}
 8002170:	4690      	mov	r8, r2
 8002172:	4699      	mov	r9, r3
 8002174:	46a2      	mov	sl, r4
 8002176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002178:	4663      	mov	r3, ip
 800217a:	4333      	orrs	r3, r6
 800217c:	d1f7      	bne.n	800216e <__eqdf2+0x36>
 800217e:	42ac      	cmp	r4, r5
 8002180:	d1f5      	bne.n	800216e <__eqdf2+0x36>
 8002182:	433a      	orrs	r2, r7
 8002184:	d1f3      	bne.n	800216e <__eqdf2+0x36>
 8002186:	2001      	movs	r0, #1
 8002188:	42be      	cmp	r6, r7
 800218a:	d1f0      	bne.n	800216e <__eqdf2+0x36>
 800218c:	45c8      	cmp	r8, r9
 800218e:	d1ee      	bne.n	800216e <__eqdf2+0x36>
 8002190:	4551      	cmp	r1, sl
 8002192:	d007      	beq.n	80021a4 <__eqdf2+0x6c>
 8002194:	2d00      	cmp	r5, #0
 8002196:	d1ea      	bne.n	800216e <__eqdf2+0x36>
 8002198:	4663      	mov	r3, ip
 800219a:	431e      	orrs	r6, r3
 800219c:	0030      	movs	r0, r6
 800219e:	1e46      	subs	r6, r0, #1
 80021a0:	41b0      	sbcs	r0, r6
 80021a2:	e7e4      	b.n	800216e <__eqdf2+0x36>
 80021a4:	2000      	movs	r0, #0
 80021a6:	e7e2      	b.n	800216e <__eqdf2+0x36>
 80021a8:	000007ff 	.word	0x000007ff

080021ac <__gedf2>:
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	4645      	mov	r5, r8
 80021b0:	46de      	mov	lr, fp
 80021b2:	4657      	mov	r7, sl
 80021b4:	464e      	mov	r6, r9
 80021b6:	b5e0      	push	{r5, r6, r7, lr}
 80021b8:	031f      	lsls	r7, r3, #12
 80021ba:	0b3d      	lsrs	r5, r7, #12
 80021bc:	4f2c      	ldr	r7, [pc, #176]	; (8002270 <__gedf2+0xc4>)
 80021be:	030e      	lsls	r6, r1, #12
 80021c0:	004c      	lsls	r4, r1, #1
 80021c2:	46ab      	mov	fp, r5
 80021c4:	005d      	lsls	r5, r3, #1
 80021c6:	4684      	mov	ip, r0
 80021c8:	0b36      	lsrs	r6, r6, #12
 80021ca:	0d64      	lsrs	r4, r4, #21
 80021cc:	0fc9      	lsrs	r1, r1, #31
 80021ce:	4690      	mov	r8, r2
 80021d0:	0d6d      	lsrs	r5, r5, #21
 80021d2:	0fdb      	lsrs	r3, r3, #31
 80021d4:	42bc      	cmp	r4, r7
 80021d6:	d02a      	beq.n	800222e <__gedf2+0x82>
 80021d8:	4f25      	ldr	r7, [pc, #148]	; (8002270 <__gedf2+0xc4>)
 80021da:	42bd      	cmp	r5, r7
 80021dc:	d02d      	beq.n	800223a <__gedf2+0x8e>
 80021de:	2c00      	cmp	r4, #0
 80021e0:	d10f      	bne.n	8002202 <__gedf2+0x56>
 80021e2:	4330      	orrs	r0, r6
 80021e4:	0007      	movs	r7, r0
 80021e6:	4681      	mov	r9, r0
 80021e8:	4278      	negs	r0, r7
 80021ea:	4178      	adcs	r0, r7
 80021ec:	b2c0      	uxtb	r0, r0
 80021ee:	2d00      	cmp	r5, #0
 80021f0:	d117      	bne.n	8002222 <__gedf2+0x76>
 80021f2:	465f      	mov	r7, fp
 80021f4:	433a      	orrs	r2, r7
 80021f6:	d114      	bne.n	8002222 <__gedf2+0x76>
 80021f8:	464b      	mov	r3, r9
 80021fa:	2000      	movs	r0, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <__gedf2+0x6a>
 8002200:	e006      	b.n	8002210 <__gedf2+0x64>
 8002202:	2d00      	cmp	r5, #0
 8002204:	d102      	bne.n	800220c <__gedf2+0x60>
 8002206:	4658      	mov	r0, fp
 8002208:	4302      	orrs	r2, r0
 800220a:	d001      	beq.n	8002210 <__gedf2+0x64>
 800220c:	4299      	cmp	r1, r3
 800220e:	d018      	beq.n	8002242 <__gedf2+0x96>
 8002210:	4248      	negs	r0, r1
 8002212:	2101      	movs	r1, #1
 8002214:	4308      	orrs	r0, r1
 8002216:	bc3c      	pop	{r2, r3, r4, r5}
 8002218:	4690      	mov	r8, r2
 800221a:	4699      	mov	r9, r3
 800221c:	46a2      	mov	sl, r4
 800221e:	46ab      	mov	fp, r5
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002222:	2800      	cmp	r0, #0
 8002224:	d0f2      	beq.n	800220c <__gedf2+0x60>
 8002226:	2001      	movs	r0, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	4318      	orrs	r0, r3
 800222c:	e7f3      	b.n	8002216 <__gedf2+0x6a>
 800222e:	0037      	movs	r7, r6
 8002230:	4307      	orrs	r7, r0
 8002232:	d0d1      	beq.n	80021d8 <__gedf2+0x2c>
 8002234:	2002      	movs	r0, #2
 8002236:	4240      	negs	r0, r0
 8002238:	e7ed      	b.n	8002216 <__gedf2+0x6a>
 800223a:	465f      	mov	r7, fp
 800223c:	4317      	orrs	r7, r2
 800223e:	d0ce      	beq.n	80021de <__gedf2+0x32>
 8002240:	e7f8      	b.n	8002234 <__gedf2+0x88>
 8002242:	42ac      	cmp	r4, r5
 8002244:	dce4      	bgt.n	8002210 <__gedf2+0x64>
 8002246:	da03      	bge.n	8002250 <__gedf2+0xa4>
 8002248:	1e48      	subs	r0, r1, #1
 800224a:	2101      	movs	r1, #1
 800224c:	4308      	orrs	r0, r1
 800224e:	e7e2      	b.n	8002216 <__gedf2+0x6a>
 8002250:	455e      	cmp	r6, fp
 8002252:	d8dd      	bhi.n	8002210 <__gedf2+0x64>
 8002254:	d006      	beq.n	8002264 <__gedf2+0xb8>
 8002256:	2000      	movs	r0, #0
 8002258:	455e      	cmp	r6, fp
 800225a:	d2dc      	bcs.n	8002216 <__gedf2+0x6a>
 800225c:	2301      	movs	r3, #1
 800225e:	1e48      	subs	r0, r1, #1
 8002260:	4318      	orrs	r0, r3
 8002262:	e7d8      	b.n	8002216 <__gedf2+0x6a>
 8002264:	45c4      	cmp	ip, r8
 8002266:	d8d3      	bhi.n	8002210 <__gedf2+0x64>
 8002268:	2000      	movs	r0, #0
 800226a:	45c4      	cmp	ip, r8
 800226c:	d3f6      	bcc.n	800225c <__gedf2+0xb0>
 800226e:	e7d2      	b.n	8002216 <__gedf2+0x6a>
 8002270:	000007ff 	.word	0x000007ff

08002274 <__ledf2>:
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	464e      	mov	r6, r9
 8002278:	4645      	mov	r5, r8
 800227a:	46de      	mov	lr, fp
 800227c:	4657      	mov	r7, sl
 800227e:	005c      	lsls	r4, r3, #1
 8002280:	b5e0      	push	{r5, r6, r7, lr}
 8002282:	031f      	lsls	r7, r3, #12
 8002284:	0fdb      	lsrs	r3, r3, #31
 8002286:	4699      	mov	r9, r3
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <__ledf2+0xc0>)
 800228a:	030e      	lsls	r6, r1, #12
 800228c:	004d      	lsls	r5, r1, #1
 800228e:	0fc9      	lsrs	r1, r1, #31
 8002290:	4684      	mov	ip, r0
 8002292:	0b36      	lsrs	r6, r6, #12
 8002294:	0d6d      	lsrs	r5, r5, #21
 8002296:	468b      	mov	fp, r1
 8002298:	4690      	mov	r8, r2
 800229a:	0b3f      	lsrs	r7, r7, #12
 800229c:	0d64      	lsrs	r4, r4, #21
 800229e:	429d      	cmp	r5, r3
 80022a0:	d020      	beq.n	80022e4 <__ledf2+0x70>
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <__ledf2+0xc0>)
 80022a4:	429c      	cmp	r4, r3
 80022a6:	d022      	beq.n	80022ee <__ledf2+0x7a>
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	d112      	bne.n	80022d2 <__ledf2+0x5e>
 80022ac:	4330      	orrs	r0, r6
 80022ae:	4243      	negs	r3, r0
 80022b0:	4143      	adcs	r3, r0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2c00      	cmp	r4, #0
 80022b6:	d01f      	beq.n	80022f8 <__ledf2+0x84>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00c      	beq.n	80022d6 <__ledf2+0x62>
 80022bc:	464b      	mov	r3, r9
 80022be:	2001      	movs	r0, #1
 80022c0:	3b01      	subs	r3, #1
 80022c2:	4303      	orrs	r3, r0
 80022c4:	0018      	movs	r0, r3
 80022c6:	bc3c      	pop	{r2, r3, r4, r5}
 80022c8:	4690      	mov	r8, r2
 80022ca:	4699      	mov	r9, r3
 80022cc:	46a2      	mov	sl, r4
 80022ce:	46ab      	mov	fp, r5
 80022d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d2:	2c00      	cmp	r4, #0
 80022d4:	d016      	beq.n	8002304 <__ledf2+0x90>
 80022d6:	45cb      	cmp	fp, r9
 80022d8:	d017      	beq.n	800230a <__ledf2+0x96>
 80022da:	465b      	mov	r3, fp
 80022dc:	4259      	negs	r1, r3
 80022de:	2301      	movs	r3, #1
 80022e0:	430b      	orrs	r3, r1
 80022e2:	e7ef      	b.n	80022c4 <__ledf2+0x50>
 80022e4:	0031      	movs	r1, r6
 80022e6:	2302      	movs	r3, #2
 80022e8:	4301      	orrs	r1, r0
 80022ea:	d1eb      	bne.n	80022c4 <__ledf2+0x50>
 80022ec:	e7d9      	b.n	80022a2 <__ledf2+0x2e>
 80022ee:	0039      	movs	r1, r7
 80022f0:	2302      	movs	r3, #2
 80022f2:	4311      	orrs	r1, r2
 80022f4:	d1e6      	bne.n	80022c4 <__ledf2+0x50>
 80022f6:	e7d7      	b.n	80022a8 <__ledf2+0x34>
 80022f8:	433a      	orrs	r2, r7
 80022fa:	d1dd      	bne.n	80022b8 <__ledf2+0x44>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2800      	cmp	r0, #0
 8002300:	d0e0      	beq.n	80022c4 <__ledf2+0x50>
 8002302:	e7ea      	b.n	80022da <__ledf2+0x66>
 8002304:	433a      	orrs	r2, r7
 8002306:	d1e6      	bne.n	80022d6 <__ledf2+0x62>
 8002308:	e7e7      	b.n	80022da <__ledf2+0x66>
 800230a:	42a5      	cmp	r5, r4
 800230c:	dce5      	bgt.n	80022da <__ledf2+0x66>
 800230e:	db05      	blt.n	800231c <__ledf2+0xa8>
 8002310:	42be      	cmp	r6, r7
 8002312:	d8e2      	bhi.n	80022da <__ledf2+0x66>
 8002314:	d007      	beq.n	8002326 <__ledf2+0xb2>
 8002316:	2300      	movs	r3, #0
 8002318:	42be      	cmp	r6, r7
 800231a:	d2d3      	bcs.n	80022c4 <__ledf2+0x50>
 800231c:	4659      	mov	r1, fp
 800231e:	2301      	movs	r3, #1
 8002320:	3901      	subs	r1, #1
 8002322:	430b      	orrs	r3, r1
 8002324:	e7ce      	b.n	80022c4 <__ledf2+0x50>
 8002326:	45c4      	cmp	ip, r8
 8002328:	d8d7      	bhi.n	80022da <__ledf2+0x66>
 800232a:	2300      	movs	r3, #0
 800232c:	45c4      	cmp	ip, r8
 800232e:	d3f5      	bcc.n	800231c <__ledf2+0xa8>
 8002330:	e7c8      	b.n	80022c4 <__ledf2+0x50>
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	000007ff 	.word	0x000007ff

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800233c:	20fa      	movs	r0, #250	; 0xfa
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_InitTick+0x3c>)
 8002340:	0080      	lsls	r0, r0, #2
 8002342:	7819      	ldrb	r1, [r3, #0]
 8002344:	f7fd fefc 	bl	8000140 <__udivsi3>
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_InitTick+0x40>)
 800234a:	0001      	movs	r1, r0
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	f7fd fef7 	bl	8000140 <__udivsi3>
 8002352:	f000 f897 	bl	8002484 <HAL_SYSTICK_Config>
 8002356:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002358:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235a:	2c00      	cmp	r4, #0
 800235c:	d109      	bne.n	8002372 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235e:	2d03      	cmp	r5, #3
 8002360:	d807      	bhi.n	8002372 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002362:	3802      	subs	r0, #2
 8002364:	0022      	movs	r2, r4
 8002366:	0029      	movs	r1, r5
 8002368:	f000 f852 	bl	8002410 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800236c:	0020      	movs	r0, r4
 800236e:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_InitTick+0x44>)
 8002370:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	20000000 	.word	0x20000000
 8002378:	2000000c 	.word	0x2000000c
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002380:	2340      	movs	r3, #64	; 0x40
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_Init+0x24>)
{
 8002384:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002386:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002388:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800238a:	430b      	orrs	r3, r1
 800238c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800238e:	f7ff ffd3 	bl	8002338 <HAL_InitTick>
 8002392:	1e04      	subs	r4, r0, #0
 8002394:	d103      	bne.n	800239e <HAL_Init+0x1e>
    HAL_MspInit();
 8002396:	f002 f8e5 	bl	8004564 <HAL_MspInit>
}
 800239a:	0020      	movs	r0, r4
 800239c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800239e:	2401      	movs	r4, #1
 80023a0:	e7fb      	b.n	800239a <HAL_Init+0x1a>
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40022000 	.word	0x40022000

080023a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023a8:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <HAL_IncTick+0x10>)
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_IncTick+0x14>)
 80023ac:	6811      	ldr	r1, [r2, #0]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	185b      	adds	r3, r3, r1
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	4770      	bx	lr
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	200002f4 	.word	0x200002f4
 80023bc:	20000000 	.word	0x20000000

080023c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023c0:	4b01      	ldr	r3, [pc, #4]	; (80023c8 <HAL_GetTick+0x8>)
 80023c2:	6818      	ldr	r0, [r3, #0]
}
 80023c4:	4770      	bx	lr
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	200002f4 	.word	0x200002f4

080023cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff fff6 	bl	80023c0 <HAL_GetTick>
 80023d4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	1c63      	adds	r3, r4, #1
 80023d8:	d002      	beq.n	80023e0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_Delay+0x20>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023e0:	f7ff ffee 	bl	80023c0 <HAL_GetTick>
 80023e4:	1b40      	subs	r0, r0, r5
 80023e6:	4284      	cmp	r4, r0
 80023e8:	d8fa      	bhi.n	80023e0 <HAL_Delay+0x14>
  {
  }
}
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
 80023ec:	20000000 	.word	0x20000000

080023f0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80023f0:	2102      	movs	r1, #2
 80023f2:	4a02      	ldr	r2, [pc, #8]	; (80023fc <HAL_SuspendTick+0xc>)
 80023f4:	6813      	ldr	r3, [r2, #0]
 80023f6:	438b      	bics	r3, r1
 80023f8:	6013      	str	r3, [r2, #0]
}
 80023fa:	4770      	bx	lr
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002400:	2302      	movs	r3, #2
 8002402:	4a02      	ldr	r2, [pc, #8]	; (800240c <HAL_ResumeTick+0xc>)
 8002404:	6811      	ldr	r1, [r2, #0]
 8002406:	430b      	orrs	r3, r1
 8002408:	6013      	str	r3, [r2, #0]
}
 800240a:	4770      	bx	lr
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002414:	2800      	cmp	r0, #0
 8002416:	da14      	bge.n	8002442 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002418:	230f      	movs	r3, #15
 800241a:	b2c0      	uxtb	r0, r0
 800241c:	4003      	ands	r3, r0
 800241e:	3b08      	subs	r3, #8
 8002420:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_NVIC_SetPriority+0x58>)
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	189b      	adds	r3, r3, r2
 8002428:	2203      	movs	r2, #3
 800242a:	4010      	ands	r0, r2
 800242c:	4090      	lsls	r0, r2
 800242e:	32fc      	adds	r2, #252	; 0xfc
 8002430:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002432:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002434:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002436:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002438:	69dc      	ldr	r4, [r3, #28]
 800243a:	43ac      	bics	r4, r5
 800243c:	4321      	orrs	r1, r4
 800243e:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002440:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002442:	2503      	movs	r5, #3
 8002444:	0883      	lsrs	r3, r0, #2
 8002446:	4028      	ands	r0, r5
 8002448:	40a8      	lsls	r0, r5
 800244a:	35fc      	adds	r5, #252	; 0xfc
 800244c:	002e      	movs	r6, r5
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_NVIC_SetPriority+0x5c>)
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	189b      	adds	r3, r3, r2
 8002454:	22c0      	movs	r2, #192	; 0xc0
 8002456:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002458:	4029      	ands	r1, r5
 800245a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800245c:	0092      	lsls	r2, r2, #2
 800245e:	589c      	ldr	r4, [r3, r2]
 8002460:	43b4      	bics	r4, r6
 8002462:	4321      	orrs	r1, r4
 8002464:	5099      	str	r1, [r3, r2]
 8002466:	e7eb      	b.n	8002440 <HAL_NVIC_SetPriority+0x30>
 8002468:	e000ed00 	.word	0xe000ed00
 800246c:	e000e100 	.word	0xe000e100

08002470 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002470:	231f      	movs	r3, #31
 8002472:	4018      	ands	r0, r3
 8002474:	3b1e      	subs	r3, #30
 8002476:	4083      	lsls	r3, r0
 8002478:	4a01      	ldr	r2, [pc, #4]	; (8002480 <HAL_NVIC_EnableIRQ+0x10>)
 800247a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800247c:	4770      	bx	lr
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	e000e100 	.word	0xe000e100

08002484 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_SYSTICK_Config+0x28>)
 8002486:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002488:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248a:	4293      	cmp	r3, r2
 800248c:	d80d      	bhi.n	80024aa <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800248e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002492:	4808      	ldr	r0, [pc, #32]	; (80024b4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002494:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002496:	6a03      	ldr	r3, [r0, #32]
 8002498:	0609      	lsls	r1, r1, #24
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	430b      	orrs	r3, r1
 80024a0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024aa:	4770      	bx	lr
 80024ac:	00ffffff 	.word	0x00ffffff
 80024b0:	e000e010 	.word	0xe000e010
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80024ba:	4a57      	ldr	r2, [pc, #348]	; (8002618 <HAL_GPIO_Init+0x160>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80024bc:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80024be:	1882      	adds	r2, r0, r2
 80024c0:	1e54      	subs	r4, r2, #1
 80024c2:	41a2      	sbcs	r2, r4
{
 80024c4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 80024c6:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 80024c8:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80024ca:	3205      	adds	r2, #5
{
 80024cc:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80024ce:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80024d0:	9a04      	ldr	r2, [sp, #16]
 80024d2:	40da      	lsrs	r2, r3
 80024d4:	d101      	bne.n	80024da <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80024d6:	b007      	add	sp, #28
 80024d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80024da:	2601      	movs	r6, #1
 80024dc:	0037      	movs	r7, r6
 80024de:	409f      	lsls	r7, r3
 80024e0:	9a04      	ldr	r2, [sp, #16]
 80024e2:	403a      	ands	r2, r7
 80024e4:	9202      	str	r2, [sp, #8]
    if (iocurrent)
 80024e6:	d100      	bne.n	80024ea <HAL_GPIO_Init+0x32>
 80024e8:	e093      	b.n	8002612 <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ea:	9a03      	ldr	r2, [sp, #12]
 80024ec:	6852      	ldr	r2, [r2, #4]
 80024ee:	9201      	str	r2, [sp, #4]
 80024f0:	2210      	movs	r2, #16
 80024f2:	9d01      	ldr	r5, [sp, #4]
 80024f4:	4395      	bics	r5, r2
 80024f6:	1e6a      	subs	r2, r5, #1
 80024f8:	42b2      	cmp	r2, r6
 80024fa:	d813      	bhi.n	8002524 <HAL_GPIO_Init+0x6c>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80024fc:	2403      	movs	r4, #3
 80024fe:	0059      	lsls	r1, r3, #1
 8002500:	408c      	lsls	r4, r1
 8002502:	468c      	mov	ip, r1
        temp = GPIOx->OSPEEDR;
 8002504:	6882      	ldr	r2, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002506:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002508:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250a:	68cc      	ldr	r4, [r1, #12]
 800250c:	4661      	mov	r1, ip
 800250e:	408c      	lsls	r4, r1
 8002510:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8002512:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002514:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OTYPER;
 8002516:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002518:	0912      	lsrs	r2, r2, #4
 800251a:	4032      	ands	r2, r6
 800251c:	409a      	lsls	r2, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800251e:	43bc      	bics	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002520:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002522:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002524:	2203      	movs	r2, #3
 8002526:	005f      	lsls	r7, r3, #1
 8002528:	40ba      	lsls	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252a:	9903      	ldr	r1, [sp, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800252c:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252e:	688c      	ldr	r4, [r1, #8]
      temp = GPIOx->PUPDR;
 8002530:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002532:	40bc      	lsls	r4, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002534:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002536:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8002538:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253a:	2d02      	cmp	r5, #2
 800253c:	d10e      	bne.n	800255c <HAL_GPIO_Init+0xa4>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800253e:	210f      	movs	r1, #15
 8002540:	3505      	adds	r5, #5
 8002542:	401d      	ands	r5, r3
 8002544:	00ad      	lsls	r5, r5, #2
 8002546:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8002548:	08dc      	lsrs	r4, r3, #3
 800254a:	00a4      	lsls	r4, r4, #2
 800254c:	1904      	adds	r4, r0, r4
 800254e:	6a26      	ldr	r6, [r4, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8002550:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002552:	9903      	ldr	r1, [sp, #12]
 8002554:	6909      	ldr	r1, [r1, #16]
 8002556:	40a9      	lsls	r1, r5
 8002558:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 800255a:	6226      	str	r6, [r4, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800255c:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 800255e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002560:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002562:	9c01      	ldr	r4, [sp, #4]
 8002564:	4034      	ands	r4, r6
 8002566:	40bc      	lsls	r4, r7
 8002568:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800256a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800256c:	9a01      	ldr	r2, [sp, #4]
 800256e:	00d2      	lsls	r2, r2, #3
 8002570:	d54f      	bpl.n	8002612 <HAL_GPIO_Init+0x15a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2701      	movs	r7, #1
 8002574:	4c29      	ldr	r4, [pc, #164]	; (800261c <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002576:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002578:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800257a:	4035      	ands	r5, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257c:	433a      	orrs	r2, r7
 800257e:	6362      	str	r2, [r4, #52]	; 0x34
 8002580:	4a27      	ldr	r2, [pc, #156]	; (8002620 <HAL_GPIO_Init+0x168>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8002582:	089c      	lsrs	r4, r3, #2
 8002584:	00a4      	lsls	r4, r4, #2
 8002586:	18a4      	adds	r4, r4, r2
 8002588:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800258a:	00ad      	lsls	r5, r5, #2
        temp = SYSCFG->EXTICR[position >> 2U];
 800258c:	4694      	mov	ip, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800258e:	220f      	movs	r2, #15
 8002590:	4661      	mov	r1, ip
 8002592:	40aa      	lsls	r2, r5
 8002594:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002596:	22a0      	movs	r2, #160	; 0xa0
 8002598:	05d2      	lsls	r2, r2, #23
 800259a:	4694      	mov	ip, r2
 800259c:	2200      	movs	r2, #0
 800259e:	4560      	cmp	r0, ip
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x106>
 80025a2:	4a20      	ldr	r2, [pc, #128]	; (8002624 <HAL_GPIO_Init+0x16c>)
 80025a4:	4694      	mov	ip, r2
 80025a6:	003a      	movs	r2, r7
 80025a8:	4560      	cmp	r0, ip
 80025aa:	d008      	beq.n	80025be <HAL_GPIO_Init+0x106>
 80025ac:	4f1e      	ldr	r7, [pc, #120]	; (8002628 <HAL_GPIO_Init+0x170>)
 80025ae:	1892      	adds	r2, r2, r2
 80025b0:	42b8      	cmp	r0, r7
 80025b2:	d004      	beq.n	80025be <HAL_GPIO_Init+0x106>
 80025b4:	4f1d      	ldr	r7, [pc, #116]	; (800262c <HAL_GPIO_Init+0x174>)
 80025b6:	0032      	movs	r2, r6
 80025b8:	42b8      	cmp	r0, r7
 80025ba:	d000      	beq.n	80025be <HAL_GPIO_Init+0x106>
 80025bc:	9a05      	ldr	r2, [sp, #20]
 80025be:	40aa      	lsls	r2, r5
 80025c0:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80025c2:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c4:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 80025c6:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 80025c8:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_GPIO_Init+0x178>)
        temp &= ~((uint32_t)iocurrent);
 80025ca:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 80025cc:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ce:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80025d0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d2:	03c9      	lsls	r1, r1, #15
 80025d4:	d401      	bmi.n	80025da <HAL_GPIO_Init+0x122>
        temp &= ~((uint32_t)iocurrent);
 80025d6:	0035      	movs	r5, r6
 80025d8:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80025da:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80025dc:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80025de:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e0:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80025e2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e4:	0389      	lsls	r1, r1, #14
 80025e6:	d401      	bmi.n	80025ec <HAL_GPIO_Init+0x134>
        temp &= ~((uint32_t)iocurrent);
 80025e8:	0035      	movs	r5, r6
 80025ea:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80025ec:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80025ee:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80025f0:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f2:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80025f4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f6:	02c9      	lsls	r1, r1, #11
 80025f8:	d401      	bmi.n	80025fe <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 80025fa:	0035      	movs	r5, r6
 80025fc:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80025fe:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002600:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8002602:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002604:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8002606:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002608:	0289      	lsls	r1, r1, #10
 800260a:	d401      	bmi.n	8002610 <HAL_GPIO_Init+0x158>
        temp &= ~((uint32_t)iocurrent);
 800260c:	4025      	ands	r5, r4
 800260e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002610:	60d6      	str	r6, [r2, #12]
    position++;
 8002612:	3301      	adds	r3, #1
 8002614:	e75c      	b.n	80024d0 <HAL_GPIO_Init+0x18>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	afffe400 	.word	0xafffe400
 800261c:	40021000 	.word	0x40021000
 8002620:	40010000 	.word	0x40010000
 8002624:	50000400 	.word	0x50000400
 8002628:	50000800 	.word	0x50000800
 800262c:	50000c00 	.word	0x50000c00
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_GPIO_DeInit>:
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002634:	4a34      	ldr	r2, [pc, #208]	; (8002708 <HAL_GPIO_DeInit+0xd4>)
{
 8002636:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002638:	1882      	adds	r2, r0, r2
 800263a:	1e54      	subs	r4, r2, #1
 800263c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800263e:	2300      	movs	r3, #0
{
 8002640:	b085      	sub	sp, #20
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002642:	3205      	adds	r2, #5
 8002644:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0)
 8002646:	000a      	movs	r2, r1
 8002648:	40da      	lsrs	r2, r3
 800264a:	d101      	bne.n	8002650 <HAL_GPIO_DeInit+0x1c>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 800264c:	b005      	add	sp, #20
 800264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8002650:	2201      	movs	r2, #1
 8002652:	409a      	lsls	r2, r3
 8002654:	0016      	movs	r6, r2
 8002656:	9200      	str	r2, [sp, #0]
 8002658:	400e      	ands	r6, r1
    if (iocurrent)
 800265a:	d053      	beq.n	8002704 <HAL_GPIO_DeInit+0xd0>
 800265c:	4c2b      	ldr	r4, [pc, #172]	; (800270c <HAL_GPIO_DeInit+0xd8>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 800265e:	089a      	lsrs	r2, r3, #2
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	1912      	adds	r2, r2, r4
 8002664:	6894      	ldr	r4, [r2, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002666:	2503      	movs	r5, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002668:	0027      	movs	r7, r4
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800266a:	240f      	movs	r4, #15
 800266c:	401d      	ands	r5, r3
 800266e:	00ad      	lsls	r5, r5, #2
 8002670:	40ac      	lsls	r4, r5
 8002672:	9401      	str	r4, [sp, #4]
 8002674:	403c      	ands	r4, r7
 8002676:	9402      	str	r4, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002678:	24a0      	movs	r4, #160	; 0xa0
 800267a:	05e4      	lsls	r4, r4, #23
 800267c:	46a4      	mov	ip, r4
 800267e:	2400      	movs	r4, #0
 8002680:	4560      	cmp	r0, ip
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_DeInit+0x6c>
 8002684:	4c22      	ldr	r4, [pc, #136]	; (8002710 <HAL_GPIO_DeInit+0xdc>)
 8002686:	46a4      	mov	ip, r4
 8002688:	2401      	movs	r4, #1
 800268a:	4560      	cmp	r0, ip
 800268c:	d008      	beq.n	80026a0 <HAL_GPIO_DeInit+0x6c>
 800268e:	4f21      	ldr	r7, [pc, #132]	; (8002714 <HAL_GPIO_DeInit+0xe0>)
 8002690:	1924      	adds	r4, r4, r4
 8002692:	42b8      	cmp	r0, r7
 8002694:	d004      	beq.n	80026a0 <HAL_GPIO_DeInit+0x6c>
 8002696:	4f20      	ldr	r7, [pc, #128]	; (8002718 <HAL_GPIO_DeInit+0xe4>)
 8002698:	3401      	adds	r4, #1
 800269a:	42b8      	cmp	r0, r7
 800269c:	d000      	beq.n	80026a0 <HAL_GPIO_DeInit+0x6c>
 800269e:	9c03      	ldr	r4, [sp, #12]
 80026a0:	40ac      	lsls	r4, r5
 80026a2:	9d02      	ldr	r5, [sp, #8]
 80026a4:	42a5      	cmp	r5, r4
 80026a6:	d111      	bne.n	80026cc <HAL_GPIO_DeInit+0x98>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80026a8:	43f6      	mvns	r6, r6
 80026aa:	4c1c      	ldr	r4, [pc, #112]	; (800271c <HAL_GPIO_DeInit+0xe8>)
 80026ac:	6825      	ldr	r5, [r4, #0]
 80026ae:	4035      	ands	r5, r6
 80026b0:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80026b2:	6865      	ldr	r5, [r4, #4]
 80026b4:	4035      	ands	r5, r6
 80026b6:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80026b8:	68a5      	ldr	r5, [r4, #8]
 80026ba:	4035      	ands	r5, r6
 80026bc:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80026be:	68e5      	ldr	r5, [r4, #12]
 80026c0:	402e      	ands	r6, r5
 80026c2:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80026c4:	6894      	ldr	r4, [r2, #8]
 80026c6:	9d01      	ldr	r5, [sp, #4]
 80026c8:	43ac      	bics	r4, r5
 80026ca:	6094      	str	r4, [r2, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80026cc:	2203      	movs	r2, #3
 80026ce:	005d      	lsls	r5, r3, #1
 80026d0:	40aa      	lsls	r2, r5
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80026d2:	2507      	movs	r5, #7
 80026d4:	270f      	movs	r7, #15
 80026d6:	401d      	ands	r5, r3
 80026d8:	00ad      	lsls	r5, r5, #2
 80026da:	40af      	lsls	r7, r5
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026dc:	43d5      	mvns	r5, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80026de:	6804      	ldr	r4, [r0, #0]
 80026e0:	4314      	orrs	r4, r2
 80026e2:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80026e4:	08dc      	lsrs	r4, r3, #3
 80026e6:	00a4      	lsls	r4, r4, #2
 80026e8:	1904      	adds	r4, r0, r4
 80026ea:	6a26      	ldr	r6, [r4, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80026ec:	9a00      	ldr	r2, [sp, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80026ee:	43be      	bics	r6, r7
 80026f0:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f2:	68c4      	ldr	r4, [r0, #12]
 80026f4:	402c      	ands	r4, r5
 80026f6:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80026f8:	6844      	ldr	r4, [r0, #4]
 80026fa:	4394      	bics	r4, r2
 80026fc:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80026fe:	6882      	ldr	r2, [r0, #8]
 8002700:	402a      	ands	r2, r5
 8002702:	6082      	str	r2, [r0, #8]
    position++;
 8002704:	3301      	adds	r3, #1
 8002706:	e79e      	b.n	8002646 <HAL_GPIO_DeInit+0x12>
 8002708:	afffe400 	.word	0xafffe400
 800270c:	40010000 	.word	0x40010000
 8002710:	50000400 	.word	0x50000400
 8002714:	50000800 	.word	0x50000800
 8002718:	50000c00 	.word	0x50000c00
 800271c:	40010400 	.word	0x40010400

08002720 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002720:	4770      	bx	lr
	...

08002724 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8002726:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	4210      	tst	r0, r2
 800272c:	d002      	beq.n	8002734 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800272e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002730:	f7ff fff6 	bl	8002720 <HAL_GPIO_EXTI_Callback>
}
 8002734:	bd10      	pop	{r4, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40010400 	.word	0x40010400

0800273c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800273c:	6803      	ldr	r3, [r0, #0]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	0792      	lsls	r2, r2, #30
 8002742:	d501      	bpl.n	8002748 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002744:	2200      	movs	r2, #0
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002748:	2201      	movs	r2, #1
 800274a:	6999      	ldr	r1, [r3, #24]
 800274c:	4211      	tst	r1, r2
 800274e:	d102      	bne.n	8002756 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002750:	6999      	ldr	r1, [r3, #24]
 8002752:	430a      	orrs	r2, r1
 8002754:	619a      	str	r2, [r3, #24]
  }
}
 8002756:	4770      	bx	lr

08002758 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800275c:	0589      	lsls	r1, r1, #22
 800275e:	4333      	orrs	r3, r6
 8002760:	0d89      	lsrs	r1, r1, #22
 8002762:	4319      	orrs	r1, r3
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	6804      	ldr	r4, [r0, #0]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	0d70      	lsrs	r0, r6, #21
 800276c:	4018      	ands	r0, r3
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <I2C_TransferConfig+0x28>)
 8002770:	6865      	ldr	r5, [r4, #4]
 8002772:	0412      	lsls	r2, r2, #16
 8002774:	4318      	orrs	r0, r3
 8002776:	4385      	bics	r5, r0
 8002778:	4311      	orrs	r1, r2
 800277a:	4329      	orrs	r1, r5
 800277c:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	03ff63ff 	.word	0x03ff63ff

08002784 <I2C_WaitOnFlagUntilTimeout>:
{
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	0004      	movs	r4, r0
 8002788:	000e      	movs	r6, r1
 800278a:	0017      	movs	r7, r2
 800278c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800278e:	6822      	ldr	r2, [r4, #0]
 8002790:	6993      	ldr	r3, [r2, #24]
 8002792:	4033      	ands	r3, r6
 8002794:	1b9b      	subs	r3, r3, r6
 8002796:	4259      	negs	r1, r3
 8002798:	414b      	adcs	r3, r1
 800279a:	42bb      	cmp	r3, r7
 800279c:	d001      	beq.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800279e:	2000      	movs	r0, #0
 80027a0:	e017      	b.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	1c6b      	adds	r3, r5, #1
 80027a4:	d0f4      	beq.n	8002790 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7ff fe0b 	bl	80023c0 <HAL_GetTick>
 80027aa:	9b06      	ldr	r3, [sp, #24]
 80027ac:	1ac0      	subs	r0, r0, r3
 80027ae:	4285      	cmp	r5, r0
 80027b0:	d301      	bcc.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x32>
 80027b2:	2d00      	cmp	r5, #0
 80027b4:	d1eb      	bne.n	800278e <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b6:	2220      	movs	r2, #32
 80027b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80027ba:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	4313      	orrs	r3, r2
 80027be:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	0023      	movs	r3, r4
 80027c2:	3341      	adds	r3, #65	; 0x41
 80027c4:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	0022      	movs	r2, r4
 80027c8:	2300      	movs	r3, #0
 80027ca:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80027cc:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80027d0:	7023      	strb	r3, [r4, #0]
}
 80027d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027d4 <I2C_IsAcknowledgeFailed>:
{
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d6:	6803      	ldr	r3, [r0, #0]
{
 80027d8:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027da:	6998      	ldr	r0, [r3, #24]
 80027dc:	2310      	movs	r3, #16
{
 80027de:	000e      	movs	r6, r1
 80027e0:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e2:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e4:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d118      	bne.n	800281c <I2C_IsAcknowledgeFailed+0x48>
}
 80027ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80027ec:	1c72      	adds	r2, r6, #1
 80027ee:	d016      	beq.n	800281e <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f0:	f7ff fde6 	bl	80023c0 <HAL_GetTick>
 80027f4:	1bc0      	subs	r0, r0, r7
 80027f6:	4286      	cmp	r6, r0
 80027f8:	d301      	bcc.n	80027fe <I2C_IsAcknowledgeFailed+0x2a>
 80027fa:	2e00      	cmp	r6, #0
 80027fc:	d10e      	bne.n	800281c <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027fe:	2220      	movs	r2, #32
 8002800:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002802:	4313      	orrs	r3, r2
 8002804:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002806:	0023      	movs	r3, r4
 8002808:	3341      	adds	r3, #65	; 0x41
 800280a:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	0022      	movs	r2, r4
 800280e:	2300      	movs	r3, #0
 8002810:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8002812:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8002818:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 800281a:	e7e6      	b.n	80027ea <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	422a      	tst	r2, r5
 8002822:	d0e3      	beq.n	80027ec <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002824:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8002826:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002828:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800282c:	f7ff ff86 	bl	800273c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	4906      	ldr	r1, [pc, #24]	; (800284c <I2C_IsAcknowledgeFailed+0x78>)
 8002834:	6853      	ldr	r3, [r2, #4]
 8002836:	400b      	ands	r3, r1
 8002838:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800283a:	2304      	movs	r3, #4
 800283c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800283e:	4313      	orrs	r3, r2
 8002840:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002842:	0023      	movs	r3, r4
 8002844:	3341      	adds	r3, #65	; 0x41
 8002846:	701d      	strb	r5, [r3, #0]
 8002848:	e7e0      	b.n	800280c <I2C_IsAcknowledgeFailed+0x38>
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	fe00e800 	.word	0xfe00e800

08002850 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	0004      	movs	r4, r0
 8002854:	000d      	movs	r5, r1
 8002856:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002858:	2702      	movs	r7, #2
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	423b      	tst	r3, r7
 8002860:	d001      	beq.n	8002866 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002862:	2000      	movs	r0, #0
}
 8002864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002866:	0032      	movs	r2, r6
 8002868:	0029      	movs	r1, r5
 800286a:	0020      	movs	r0, r4
 800286c:	f7ff ffb2 	bl	80027d4 <I2C_IsAcknowledgeFailed>
 8002870:	2800      	cmp	r0, #0
 8002872:	d115      	bne.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002874:	1c6b      	adds	r3, r5, #1
 8002876:	d0f0      	beq.n	800285a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002878:	f7ff fda2 	bl	80023c0 <HAL_GetTick>
 800287c:	1b80      	subs	r0, r0, r6
 800287e:	4285      	cmp	r5, r0
 8002880:	d301      	bcc.n	8002886 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8002882:	2d00      	cmp	r5, #0
 8002884:	d1e9      	bne.n	800285a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002886:	2220      	movs	r2, #32
 8002888:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800288a:	4313      	orrs	r3, r2
 800288c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800288e:	0023      	movs	r3, r4
 8002890:	3341      	adds	r3, #65	; 0x41
 8002892:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	0022      	movs	r2, r4
 8002896:	2300      	movs	r3, #0
 8002898:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800289a:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800289e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
 80028a2:	e7df      	b.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080028a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	0004      	movs	r4, r0
 80028a8:	000d      	movs	r5, r1
 80028aa:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ac:	2720      	movs	r7, #32
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	423b      	tst	r3, r7
 80028b4:	d001      	beq.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80028b6:	2000      	movs	r0, #0
}
 80028b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ba:	0032      	movs	r2, r6
 80028bc:	0029      	movs	r1, r5
 80028be:	0020      	movs	r0, r4
 80028c0:	f7ff ff88 	bl	80027d4 <I2C_IsAcknowledgeFailed>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	d113      	bne.n	80028f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c8:	f7ff fd7a 	bl	80023c0 <HAL_GetTick>
 80028cc:	1b80      	subs	r0, r0, r6
 80028ce:	4285      	cmp	r5, r0
 80028d0:	d301      	bcc.n	80028d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80028d2:	2d00      	cmp	r5, #0
 80028d4:	d1eb      	bne.n	80028ae <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d6:	2220      	movs	r2, #32
 80028d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028da:	4313      	orrs	r3, r2
 80028dc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028de:	0023      	movs	r3, r4
 80028e0:	3341      	adds	r3, #65	; 0x41
 80028e2:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	0022      	movs	r2, r4
 80028e6:	2300      	movs	r3, #0
 80028e8:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80028ea:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80028ee:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80028f0:	2001      	movs	r0, #1
 80028f2:	e7e1      	b.n	80028b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080028f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	0004      	movs	r4, r0
 80028f8:	000d      	movs	r5, r1
 80028fa:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028fc:	2604      	movs	r6, #4
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	4233      	tst	r3, r6
 8002904:	d111      	bne.n	800292a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	003a      	movs	r2, r7
 8002908:	0029      	movs	r1, r5
 800290a:	0020      	movs	r0, r4
 800290c:	f7ff ff62 	bl	80027d4 <I2C_IsAcknowledgeFailed>
 8002910:	2800      	cmp	r0, #0
 8002912:	d11a      	bne.n	800294a <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002914:	2120      	movs	r1, #32
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	420a      	tst	r2, r1
 800291c:	d017      	beq.n	800294e <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	4232      	tst	r2, r6
 8002922:	d004      	beq.n	800292e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8002924:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002926:	2a00      	cmp	r2, #0
 8002928:	d001      	beq.n	800292e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 800292a:	2000      	movs	r0, #0
}
 800292c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292e:	2120      	movs	r1, #32
 8002930:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	480e      	ldr	r0, [pc, #56]	; (8002970 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8002936:	4002      	ands	r2, r0
 8002938:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800293a:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293c:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800293e:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002942:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8002944:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002946:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8002948:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800294a:	2001      	movs	r0, #1
 800294c:	e7ee      	b.n	800292c <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7ff fd37 	bl	80023c0 <HAL_GetTick>
 8002952:	1bc0      	subs	r0, r0, r7
 8002954:	4285      	cmp	r5, r0
 8002956:	d301      	bcc.n	800295c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8002958:	2d00      	cmp	r5, #0
 800295a:	d1d0      	bne.n	80028fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	2220      	movs	r2, #32
 800295e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002960:	4313      	orrs	r3, r2
 8002962:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002964:	0023      	movs	r3, r4
 8002966:	3341      	adds	r3, #65	; 0x41
 8002968:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800296a:	3440      	adds	r4, #64	; 0x40
 800296c:	2300      	movs	r3, #0
 800296e:	e7eb      	b.n	8002948 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002970:	fe00e800 	.word	0xfe00e800

08002974 <HAL_I2C_Init>:
{
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002978:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800297a:	2c00      	cmp	r4, #0
 800297c:	d03f      	beq.n	80029fe <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800297e:	0025      	movs	r5, r4
 8002980:	3541      	adds	r5, #65	; 0x41
 8002982:	782b      	ldrb	r3, [r5, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800298a:	0022      	movs	r2, r4
 800298c:	3240      	adds	r2, #64	; 0x40
 800298e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8002990:	0020      	movs	r0, r4
 8002992:	f001 fdf5 	bl	8004580 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002996:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002998:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800299a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800299c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800299e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68a6      	ldr	r6, [r4, #8]
 80029a4:	438a      	bics	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029a8:	6861      	ldr	r1, [r4, #4]
 80029aa:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_I2C_Init+0xa0>)
 80029ac:	400a      	ands	r2, r1
 80029ae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <HAL_I2C_Init+0xa4>)
 80029b4:	4011      	ands	r1, r2
 80029b6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b8:	2801      	cmp	r0, #1
 80029ba:	d121      	bne.n	8002a00 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	0209      	lsls	r1, r1, #8
 80029c0:	4331      	orrs	r1, r6
 80029c2:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029c4:	6858      	ldr	r0, [r3, #4]
 80029c6:	4915      	ldr	r1, [pc, #84]	; (8002a1c <HAL_I2C_Init+0xa8>)
 80029c8:	4301      	orrs	r1, r0
 80029ca:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029cc:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ce:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029d0:	400a      	ands	r2, r1
 80029d2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029d4:	6961      	ldr	r1, [r4, #20]
 80029d6:	6922      	ldr	r2, [r4, #16]
 80029d8:	430a      	orrs	r2, r1
 80029da:	69a1      	ldr	r1, [r4, #24]
 80029dc:	0209      	lsls	r1, r1, #8
 80029de:	430a      	orrs	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029e2:	6a21      	ldr	r1, [r4, #32]
 80029e4:	69e2      	ldr	r2, [r4, #28]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80029ea:	2201      	movs	r2, #1
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fa:	3442      	adds	r4, #66	; 0x42
 80029fc:	7020      	strb	r0, [r4, #0]
}
 80029fe:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a00:	2184      	movs	r1, #132	; 0x84
 8002a02:	0209      	lsls	r1, r1, #8
 8002a04:	4331      	orrs	r1, r6
 8002a06:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a08:	2802      	cmp	r0, #2
 8002a0a:	d1db      	bne.n	80029c4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0109      	lsls	r1, r1, #4
 8002a10:	6059      	str	r1, [r3, #4]
 8002a12:	e7d7      	b.n	80029c4 <HAL_I2C_Init+0x50>
 8002a14:	f0ffffff 	.word	0xf0ffffff
 8002a18:	ffff7fff 	.word	0xffff7fff
 8002a1c:	02008000 	.word	0x02008000

08002a20 <HAL_I2C_DeInit>:
{
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002a24:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d013      	beq.n	8002a52 <HAL_I2C_DeInit+0x32>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2a:	0025      	movs	r5, r4
 8002a2c:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002a2e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	3541      	adds	r5, #65	; 0x41
 8002a32:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002a34:	6813      	ldr	r3, [r2, #0]
 8002a36:	4383      	bics	r3, r0
 8002a38:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002a3a:	0020      	movs	r0, r4
 8002a3c:	f001 fdd0 	bl	80045e0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a40:	2000      	movs	r0, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	0023      	movs	r3, r4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a44:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a46:	3342      	adds	r3, #66	; 0x42
  hi2c->State = HAL_I2C_STATE_RESET;
 8002a48:	7028      	strb	r0, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	6320      	str	r0, [r4, #48]	; 0x30
  __HAL_UNLOCK(hi2c);
 8002a4c:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4e:	7018      	strb	r0, [r3, #0]
  __HAL_UNLOCK(hi2c);
 8002a50:	7020      	strb	r0, [r4, #0]
}
 8002a52:	bd70      	pop	{r4, r5, r6, pc}

08002a54 <HAL_I2C_Master_Transmit>:
{
 8002a54:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	0005      	movs	r5, r0
{
 8002a58:	b087      	sub	sp, #28
 8002a5a:	9103      	str	r1, [sp, #12]
 8002a5c:	9204      	str	r2, [sp, #16]
 8002a5e:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a60:	3541      	adds	r5, #65	; 0x41
 8002a62:	782b      	ldrb	r3, [r5, #0]
{
 8002a64:	0004      	movs	r4, r0
    return HAL_BUSY;
 8002a66:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d114      	bne.n	8002a96 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8002a6c:	0023      	movs	r3, r4
 8002a6e:	3340      	adds	r3, #64	; 0x40
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	2a01      	cmp	r2, #1
 8002a74:	d00f      	beq.n	8002a96 <HAL_I2C_Master_Transmit+0x42>
 8002a76:	2601      	movs	r6, #1
 8002a78:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8002a7a:	f7ff fca1 	bl	80023c0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a7e:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002a80:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a82:	9000      	str	r0, [sp, #0]
 8002a84:	2319      	movs	r3, #25
 8002a86:	0032      	movs	r2, r6
 8002a88:	0209      	lsls	r1, r1, #8
 8002a8a:	0020      	movs	r0, r4
 8002a8c:	f7ff fe7a 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
}
 8002a96:	b007      	add	sp, #28
 8002a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a9a:	2321      	movs	r3, #33	; 0x21
 8002a9c:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a9e:	0025      	movs	r5, r4
 8002aa0:	3b11      	subs	r3, #17
 8002aa2:	3542      	adds	r5, #66	; 0x42
 8002aa4:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8002aa6:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002aaa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aac:	466b      	mov	r3, sp
 8002aae:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8002ab0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002ab2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ab6:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_I2C_Master_Transmit+0x124>)
 8002ab8:	2aff      	cmp	r2, #255	; 0xff
 8002aba:	d921      	bls.n	8002b00 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002abc:	22ff      	movs	r2, #255	; 0xff
 8002abe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	045b      	lsls	r3, r3, #17
 8002ac6:	9903      	ldr	r1, [sp, #12]
 8002ac8:	0020      	movs	r0, r4
 8002aca:	f7ff fe45 	bl	8002758 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ace:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8002ad0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad2:	003a      	movs	r2, r7
 8002ad4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ad6:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d119      	bne.n	8002b10 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002adc:	f7ff fee2 	bl	80028a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d1d7      	bne.n	8002a94 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae4:	2120      	movs	r1, #32
 8002ae6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002ae8:	4e24      	ldr	r6, [pc, #144]	; (8002b7c <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	4032      	ands	r2, r6
 8002af0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002af4:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	3341      	adds	r3, #65	; 0x41
 8002af8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002afa:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002afc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002afe:	e7ca      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8002b00:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b02:	b292      	uxth	r2, r2
 8002b04:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	049b      	lsls	r3, r3, #18
 8002b0e:	e7da      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b10:	f7ff fe9e 	bl	8002850 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d1bd      	bne.n	8002a94 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002b1e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b20:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b22:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b26:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b2e:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b32:	b292      	uxth	r2, r2
 8002b34:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ca      	beq.n	8002ad0 <HAL_I2C_Master_Transmit+0x7c>
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d1c8      	bne.n	8002ad0 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b3e:	9700      	str	r7, [sp, #0]
 8002b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	0020      	movs	r0, r4
 8002b46:	f7ff fe1d 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d1a2      	bne.n	8002a94 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b50:	2bff      	cmp	r3, #255	; 0xff
 8002b52:	d909      	bls.n	8002b68 <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b58:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b5a:	045b      	lsls	r3, r3, #17
 8002b5c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b5e:	9903      	ldr	r1, [sp, #12]
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7ff fdf9 	bl	8002758 <I2C_TransferConfig>
 8002b66:	e7b3      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x7c>
 8002b68:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002b6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b6c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002b6e:	b292      	uxth	r2, r2
 8002b70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	9000      	str	r0, [sp, #0]
 8002b76:	e7f2      	b.n	8002b5e <HAL_I2C_Master_Transmit+0x10a>
 8002b78:	80002000 	.word	0x80002000
 8002b7c:	fe00e800 	.word	0xfe00e800

08002b80 <HAL_I2C_Master_Receive>:
{
 8002b80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b82:	0005      	movs	r5, r0
{
 8002b84:	b087      	sub	sp, #28
 8002b86:	9103      	str	r1, [sp, #12]
 8002b88:	9204      	str	r2, [sp, #16]
 8002b8a:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8c:	3541      	adds	r5, #65	; 0x41
 8002b8e:	782b      	ldrb	r3, [r5, #0]
{
 8002b90:	0004      	movs	r4, r0
    return HAL_BUSY;
 8002b92:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d114      	bne.n	8002bc2 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8002b98:	0023      	movs	r3, r4
 8002b9a:	3340      	adds	r3, #64	; 0x40
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	2a01      	cmp	r2, #1
 8002ba0:	d00f      	beq.n	8002bc2 <HAL_I2C_Master_Receive+0x42>
 8002ba2:	2601      	movs	r6, #1
 8002ba4:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8002ba6:	f7ff fc0b 	bl	80023c0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002baa:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002bac:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bae:	9000      	str	r0, [sp, #0]
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	0032      	movs	r2, r6
 8002bb4:	0209      	lsls	r1, r1, #8
 8002bb6:	0020      	movs	r0, r4
 8002bb8:	f7ff fde4 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8002bc0:	2001      	movs	r0, #1
}
 8002bc2:	b007      	add	sp, #28
 8002bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bc6:	2322      	movs	r3, #34	; 0x22
 8002bc8:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bca:	0025      	movs	r5, r4
 8002bcc:	3b12      	subs	r3, #18
 8002bce:	3542      	adds	r5, #66	; 0x42
 8002bd0:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8002bd2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002bd6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bd8:	466b      	mov	r3, sp
 8002bda:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8002bdc:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002bde:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002be2:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <HAL_I2C_Master_Receive+0x128>)
 8002be4:	2aff      	cmp	r2, #255	; 0xff
 8002be6:	d921      	bls.n	8002c2c <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002be8:	22ff      	movs	r2, #255	; 0xff
 8002bea:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	045b      	lsls	r3, r3, #17
 8002bf2:	9903      	ldr	r1, [sp, #12]
 8002bf4:	0020      	movs	r0, r4
 8002bf6:	f7ff fdaf 	bl	8002758 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bfa:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8002bfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfe:	003a      	movs	r2, r7
 8002c00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c02:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d119      	bne.n	8002c3c <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c08:	f7ff fe4c 	bl	80028a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d1d7      	bne.n	8002bc0 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c10:	2120      	movs	r1, #32
 8002c12:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002c14:	4e25      	ldr	r6, [pc, #148]	; (8002cac <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c16:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	4032      	ands	r2, r6
 8002c1c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002c20:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	3341      	adds	r3, #65	; 0x41
 8002c24:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c26:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002c28:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002c2a:	e7ca      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8002c2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	049b      	lsls	r3, r3, #18
 8002c3a:	e7da      	b.n	8002bf2 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3c:	f7ff fe5a 	bl	80028f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d1bd      	bne.n	8002bc0 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002c4e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002c50:	3301      	adds	r3, #1
 8002c52:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002c54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002c56:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002c60:	b292      	uxth	r2, r2
 8002c62:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0c9      	beq.n	8002bfc <HAL_I2C_Master_Receive+0x7c>
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	d1c7      	bne.n	8002bfc <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c6c:	9700      	str	r7, [sp, #0]
 8002c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	0020      	movs	r0, r4
 8002c74:	f7ff fd86 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d1a1      	bne.n	8002bc0 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c7e:	2bff      	cmp	r3, #255	; 0xff
 8002c80:	d909      	bls.n	8002c96 <HAL_I2C_Master_Receive+0x116>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c86:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c88:	045b      	lsls	r3, r3, #17
 8002c8a:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c8c:	9903      	ldr	r1, [sp, #12]
 8002c8e:	0020      	movs	r0, r4
 8002c90:	f7ff fd62 	bl	8002758 <I2C_TransferConfig>
 8002c94:	e7b2      	b.n	8002bfc <HAL_I2C_Master_Receive+0x7c>
 8002c96:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002c98:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c9a:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002c9c:	b292      	uxth	r2, r2
 8002c9e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	9000      	str	r0, [sp, #0]
 8002ca4:	e7f2      	b.n	8002c8c <HAL_I2C_Master_Receive+0x10c>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	80002400 	.word	0x80002400
 8002cac:	fe00e800 	.word	0xfe00e800

08002cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb2:	0004      	movs	r4, r0
 8002cb4:	3441      	adds	r4, #65	; 0x41
 8002cb6:	7822      	ldrb	r2, [r4, #0]
{
 8002cb8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cba:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	2a20      	cmp	r2, #32
 8002cc0:	d118      	bne.n	8002cf4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8002cc2:	001d      	movs	r5, r3
 8002cc4:	3540      	adds	r5, #64	; 0x40
 8002cc6:	782e      	ldrb	r6, [r5, #0]
 8002cc8:	2e01      	cmp	r6, #1
 8002cca:	d013      	beq.n	8002cf4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8002ccc:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cce:	3022      	adds	r0, #34	; 0x22
 8002cd0:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002cd2:	681e      	ldr	r6, [r3, #0]
 8002cd4:	3823      	subs	r0, #35	; 0x23
 8002cd6:	4386      	bics	r6, r0
 8002cd8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cda:	681e      	ldr	r6, [r3, #0]
 8002cdc:	4f06      	ldr	r7, [pc, #24]	; (8002cf8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8002cde:	403e      	ands	r6, r7
 8002ce0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ce2:	681e      	ldr	r6, [r3, #0]
 8002ce4:	4331      	orrs	r1, r6
 8002ce6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	4308      	orrs	r0, r1
 8002cec:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002cee:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002cf2:	7028      	strb	r0, [r5, #0]
  }
}
 8002cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	ffffefff 	.word	0xffffefff

08002cfc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfe:	0005      	movs	r5, r0
 8002d00:	3541      	adds	r5, #65	; 0x41
 8002d02:	782a      	ldrb	r2, [r5, #0]
{
 8002d04:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d06:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0a:	2a20      	cmp	r2, #32
 8002d0c:	d117      	bne.n	8002d3e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002d0e:	001c      	movs	r4, r3
 8002d10:	3440      	adds	r4, #64	; 0x40
 8002d12:	7826      	ldrb	r6, [r4, #0]
 8002d14:	2e01      	cmp	r6, #1
 8002d16:	d012      	beq.n	8002d3e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8002d18:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1a:	3022      	adds	r0, #34	; 0x22
 8002d1c:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002d1e:	681e      	ldr	r6, [r3, #0]
 8002d20:	3823      	subs	r0, #35	; 0x23
 8002d22:	4386      	bics	r6, r0
 8002d24:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002d26:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002d28:	4f05      	ldr	r7, [pc, #20]	; (8002d40 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8002d2a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002d2c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002d2e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002d30:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	4308      	orrs	r0, r1
 8002d36:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002d38:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002d3c:	7020      	strb	r0, [r4, #0]
  }
}
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d40:	fffff0ff 	.word	0xfffff0ff

08002d44 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	4a03      	ldr	r2, [pc, #12]	; (8002d54 <HAL_PWR_EnableBkUpAccess+0x10>)
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	6811      	ldr	r1, [r2, #0]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	4770      	bx	lr
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	40007000 	.word	0x40007000

08002d58 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8002d58:	2110      	movs	r1, #16
 8002d5a:	4a02      	ldr	r2, [pc, #8]	; (8002d64 <HAL_PWR_DisablePVD+0xc>)
 8002d5c:	6813      	ldr	r3, [r2, #0]
 8002d5e:	438b      	bics	r3, r1
 8002d60:	6013      	str	r3, [r2, #0]
}
 8002d62:	4770      	bx	lr
 8002d64:	40007000 	.word	0x40007000

08002d68 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002d68:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002d6a:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <HAL_PWR_EnterSTOPMode+0x30>)
 8002d6e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002d70:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002d72:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8002d74:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002d76:	2204      	movs	r2, #4
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_PWR_EnterSTOPMode+0x34>)
 8002d7a:	6918      	ldr	r0, [r3, #16]
 8002d7c:	4302      	orrs	r2, r0
 8002d7e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002d80:	2901      	cmp	r1, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_PWR_EnterSTOPMode+0x28>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8002d84:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002d86:	2104      	movs	r1, #4
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	611a      	str	r2, [r3, #16]

}
 8002d8e:	bd10      	pop	{r4, pc}
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8002d90:	bf40      	sev
  __ASM volatile ("wfe");
 8002d92:	bf20      	wfe
 8002d94:	bf20      	wfe
 8002d96:	e7f6      	b.n	8002d86 <HAL_PWR_EnterSTOPMode+0x1e>
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	4a03      	ldr	r2, [pc, #12]	; (8002db0 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	6811      	ldr	r1, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	4770      	bx	lr
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	40007000 	.word	0x40007000

08002db4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002db4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002db8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8002dba:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	2a08      	cmp	r2, #8
 8002dc0:	d026      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x5c>
 8002dc2:	2a0c      	cmp	r2, #12
 8002dc4:	d006      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x20>
 8002dc6:	2a04      	cmp	r2, #4
 8002dc8:	d11a      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	06db      	lsls	r3, r3, #27
 8002dce:	d421      	bmi.n	8002e14 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8002dd0:	4812      	ldr	r0, [pc, #72]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002dd2:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dd4:	028a      	lsls	r2, r1, #10
 8002dd6:	4812      	ldr	r0, [pc, #72]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002dd8:	0f12      	lsrs	r2, r2, #28
 8002dda:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ddc:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dde:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002de0:	0f89      	lsrs	r1, r1, #30
 8002de2:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de4:	03c0      	lsls	r0, r0, #15
 8002de6:	d504      	bpl.n	8002df2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8002de8:	480e      	ldr	r0, [pc, #56]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002dea:	4350      	muls	r0, r2
 8002dec:	f7fd f9a8 	bl	8000140 <__udivsi3>
 8002df0:	e7ef      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	06db      	lsls	r3, r3, #27
 8002df6:	d501      	bpl.n	8002dfc <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002df8:	480b      	ldr	r0, [pc, #44]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x74>)
 8002dfa:	e7f6      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8002dfc:	4807      	ldr	r0, [pc, #28]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x68>)
 8002dfe:	e7f4      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e00:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e02:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e04:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	4098      	lsls	r0, r3
 8002e0e:	e7e0      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x70>)
 8002e12:	e7de      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e14:	4804      	ldr	r0, [pc, #16]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8002e16:	e7dc      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1e>
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	080070fa 	.word	0x080070fa
 8002e24:	007a1200 	.word	0x007a1200
 8002e28:	003d0900 	.word	0x003d0900

08002e2c <HAL_RCC_OscConfig>:
{
 8002e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2e:	0005      	movs	r5, r0
 8002e30:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002e36:	2001      	movs	r0, #1
}
 8002e38:	b007      	add	sp, #28
 8002e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	4cbe      	ldr	r4, [pc, #760]	; (8003138 <HAL_RCC_OscConfig+0x30c>)
 8002e40:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e42:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e44:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	025b      	lsls	r3, r3, #9
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4e:	6802      	ldr	r2, [r0, #0]
 8002e50:	07d2      	lsls	r2, r2, #31
 8002e52:	d441      	bmi.n	8002ed8 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	079b      	lsls	r3, r3, #30
 8002e58:	d500      	bpl.n	8002e5c <HAL_RCC_OscConfig+0x30>
 8002e5a:	e087      	b.n	8002f6c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	06db      	lsls	r3, r3, #27
 8002e60:	d528      	bpl.n	8002eb4 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002e62:	2e00      	cmp	r6, #0
 8002e64:	d000      	beq.n	8002e68 <HAL_RCC_OscConfig+0x3c>
 8002e66:	e0d9      	b.n	800301c <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	059b      	lsls	r3, r3, #22
 8002e6c:	d502      	bpl.n	8002e74 <HAL_RCC_OscConfig+0x48>
 8002e6e:	69eb      	ldr	r3, [r5, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0e0      	beq.n	8002e36 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e74:	6862      	ldr	r2, [r4, #4]
 8002e76:	49b1      	ldr	r1, [pc, #708]	; (800313c <HAL_RCC_OscConfig+0x310>)
 8002e78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e80:	6861      	ldr	r1, [r4, #4]
 8002e82:	6a2a      	ldr	r2, [r5, #32]
 8002e84:	0209      	lsls	r1, r1, #8
 8002e86:	0a09      	lsrs	r1, r1, #8
 8002e88:	0612      	lsls	r2, r2, #24
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e8e:	2280      	movs	r2, #128	; 0x80
 8002e90:	0b5b      	lsrs	r3, r3, #13
 8002e92:	3301      	adds	r3, #1
 8002e94:	0212      	lsls	r2, r2, #8
 8002e96:	409a      	lsls	r2, r3
 8002e98:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e9a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002e9c:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e9e:	060a      	lsls	r2, r1, #24
 8002ea0:	49a7      	ldr	r1, [pc, #668]	; (8003140 <HAL_RCC_OscConfig+0x314>)
 8002ea2:	0f12      	lsrs	r2, r2, #28
 8002ea4:	5c8a      	ldrb	r2, [r1, r2]
 8002ea6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ea8:	4aa6      	ldr	r2, [pc, #664]	; (8003144 <HAL_RCC_OscConfig+0x318>)
 8002eaa:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002eac:	f7ff fa44 	bl	8002338 <HAL_InitTick>
        if(status != HAL_OK)
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d1c1      	bne.n	8002e38 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb4:	682b      	ldr	r3, [r5, #0]
 8002eb6:	071b      	lsls	r3, r3, #28
 8002eb8:	d500      	bpl.n	8002ebc <HAL_RCC_OscConfig+0x90>
 8002eba:	e0e6      	b.n	800308a <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	075b      	lsls	r3, r3, #29
 8002ec0:	d500      	bpl.n	8002ec4 <HAL_RCC_OscConfig+0x98>
 8002ec2:	e108      	b.n	80030d6 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	069b      	lsls	r3, r3, #26
 8002ec8:	d500      	bpl.n	8002ecc <HAL_RCC_OscConfig+0xa0>
 8002eca:	e18d      	b.n	80031e8 <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ecc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d000      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xa8>
 8002ed2:	e1bc      	b.n	800324e <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	e7af      	b.n	8002e38 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed8:	2e08      	cmp	r6, #8
 8002eda:	d004      	beq.n	8002ee6 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002edc:	2e0c      	cmp	r6, #12
 8002ede:	d109      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xc8>
 8002ee0:	9a01      	ldr	r2, [sp, #4]
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	d006      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	039b      	lsls	r3, r3, #14
 8002eea:	d5b3      	bpl.n	8002e54 <HAL_RCC_OscConfig+0x28>
 8002eec:	686b      	ldr	r3, [r5, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1b0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x28>
 8002ef2:	e7a0      	b.n	8002e36 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef4:	686a      	ldr	r2, [r5, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d111      	bne.n	8002f1e <HAL_RCC_OscConfig+0xf2>
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f00:	f7ff fa5e 	bl	80023c0 <HAL_GetTick>
 8002f04:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	0292      	lsls	r2, r2, #10
 8002f0c:	4213      	tst	r3, r2
 8002f0e:	d1a1      	bne.n	8002e54 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7ff fa56 	bl	80023c0 <HAL_GetTick>
 8002f14:	1bc0      	subs	r0, r0, r7
 8002f16:	2864      	cmp	r0, #100	; 0x64
 8002f18:	d9f5      	bls.n	8002f06 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	e78c      	b.n	8002e38 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1e:	21a0      	movs	r1, #160	; 0xa0
 8002f20:	02c9      	lsls	r1, r1, #11
 8002f22:	428a      	cmp	r2, r1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x106>
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	6821      	ldr	r1, [r4, #0]
 8002f2a:	02d2      	lsls	r2, r2, #11
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	6022      	str	r2, [r4, #0]
 8002f30:	e7e3      	b.n	8002efa <HAL_RCC_OscConfig+0xce>
 8002f32:	6821      	ldr	r1, [r4, #0]
 8002f34:	4884      	ldr	r0, [pc, #528]	; (8003148 <HAL_RCC_OscConfig+0x31c>)
 8002f36:	4001      	ands	r1, r0
 8002f38:	6021      	str	r1, [r4, #0]
 8002f3a:	6821      	ldr	r1, [r4, #0]
 8002f3c:	400b      	ands	r3, r1
 8002f3e:	9305      	str	r3, [sp, #20]
 8002f40:	9b05      	ldr	r3, [sp, #20]
 8002f42:	4982      	ldr	r1, [pc, #520]	; (800314c <HAL_RCC_OscConfig+0x320>)
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	400b      	ands	r3, r1
 8002f48:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	d1d8      	bne.n	8002f00 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8002f4e:	f7ff fa37 	bl	80023c0 <HAL_GetTick>
 8002f52:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	0292      	lsls	r2, r2, #10
 8002f5a:	4213      	tst	r3, r2
 8002f5c:	d100      	bne.n	8002f60 <HAL_RCC_OscConfig+0x134>
 8002f5e:	e779      	b.n	8002e54 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f60:	f7ff fa2e 	bl	80023c0 <HAL_GetTick>
 8002f64:	1bc0      	subs	r0, r0, r7
 8002f66:	2864      	cmp	r0, #100	; 0x64
 8002f68:	d9f4      	bls.n	8002f54 <HAL_RCC_OscConfig+0x128>
 8002f6a:	e7d6      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8002f6c:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f6e:	2e04      	cmp	r6, #4
 8002f70:	d004      	beq.n	8002f7c <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f72:	2e0c      	cmp	r6, #12
 8002f74:	d125      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x196>
 8002f76:	9b01      	ldr	r3, [sp, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d122      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	075b      	lsls	r3, r3, #29
 8002f80:	d502      	bpl.n	8002f88 <HAL_RCC_OscConfig+0x15c>
 8002f82:	2a00      	cmp	r2, #0
 8002f84:	d100      	bne.n	8002f88 <HAL_RCC_OscConfig+0x15c>
 8002f86:	e756      	b.n	8002e36 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	6861      	ldr	r1, [r4, #4]
 8002f8a:	692b      	ldr	r3, [r5, #16]
 8002f8c:	4870      	ldr	r0, [pc, #448]	; (8003150 <HAL_RCC_OscConfig+0x324>)
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	4001      	ands	r1, r0
 8002f92:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f94:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f96:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	438b      	bics	r3, r1
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fa0:	f7ff ff08 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002fa4:	68e3      	ldr	r3, [r4, #12]
 8002fa6:	4a66      	ldr	r2, [pc, #408]	; (8003140 <HAL_RCC_OscConfig+0x314>)
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	0f1b      	lsrs	r3, r3, #28
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	40d8      	lsrs	r0, r3
 8002fb0:	4b64      	ldr	r3, [pc, #400]	; (8003144 <HAL_RCC_OscConfig+0x318>)
 8002fb2:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7ff f9bf 	bl	8002338 <HAL_InitTick>
      if(status != HAL_OK)
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d100      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x194>
 8002fbe:	e74d      	b.n	8002e5c <HAL_RCC_OscConfig+0x30>
 8002fc0:	e73a      	b.n	8002e38 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fc2:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8002fc4:	2a00      	cmp	r2, #0
 8002fc6:	d018      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fc8:	2109      	movs	r1, #9
 8002fca:	438b      	bics	r3, r1
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fd0:	f7ff f9f6 	bl	80023c0 <HAL_GetTick>
 8002fd4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	4213      	tst	r3, r2
 8002fdc:	d007      	beq.n	8002fee <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fde:	6862      	ldr	r2, [r4, #4]
 8002fe0:	692b      	ldr	r3, [r5, #16]
 8002fe2:	495b      	ldr	r1, [pc, #364]	; (8003150 <HAL_RCC_OscConfig+0x324>)
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	e736      	b.n	8002e5c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fee:	f7ff f9e7 	bl	80023c0 <HAL_GetTick>
 8002ff2:	1bc0      	subs	r0, r0, r7
 8002ff4:	2802      	cmp	r0, #2
 8002ff6:	d9ee      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x1aa>
 8002ff8:	e78f      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003000:	f7ff f9de 	bl	80023c0 <HAL_GetTick>
 8003004:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003006:	2204      	movs	r2, #4
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	4213      	tst	r3, r2
 800300c:	d100      	bne.n	8003010 <HAL_RCC_OscConfig+0x1e4>
 800300e:	e725      	b.n	8002e5c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7ff f9d6 	bl	80023c0 <HAL_GetTick>
 8003014:	1bc0      	subs	r0, r0, r7
 8003016:	2802      	cmp	r0, #2
 8003018:	d9f5      	bls.n	8003006 <HAL_RCC_OscConfig+0x1da>
 800301a:	e77e      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800301c:	69eb      	ldr	r3, [r5, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d020      	beq.n	8003064 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	6822      	ldr	r2, [r4, #0]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4313      	orrs	r3, r2
 800302a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800302c:	f7ff f9c8 	bl	80023c0 <HAL_GetTick>
 8003030:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4213      	tst	r3, r2
 800303a:	d00d      	beq.n	8003058 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303c:	6863      	ldr	r3, [r4, #4]
 800303e:	4a3f      	ldr	r2, [pc, #252]	; (800313c <HAL_RCC_OscConfig+0x310>)
 8003040:	4013      	ands	r3, r2
 8003042:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003044:	4313      	orrs	r3, r2
 8003046:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003048:	6862      	ldr	r2, [r4, #4]
 800304a:	6a2b      	ldr	r3, [r5, #32]
 800304c:	0212      	lsls	r2, r2, #8
 800304e:	061b      	lsls	r3, r3, #24
 8003050:	0a12      	lsrs	r2, r2, #8
 8003052:	4313      	orrs	r3, r2
 8003054:	6063      	str	r3, [r4, #4]
 8003056:	e72d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003058:	f7ff f9b2 	bl	80023c0 <HAL_GetTick>
 800305c:	1bc0      	subs	r0, r0, r7
 800305e:	2802      	cmp	r0, #2
 8003060:	d9e7      	bls.n	8003032 <HAL_RCC_OscConfig+0x206>
 8003062:	e75a      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	4a3b      	ldr	r2, [pc, #236]	; (8003154 <HAL_RCC_OscConfig+0x328>)
 8003068:	4013      	ands	r3, r2
 800306a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800306c:	f7ff f9a8 	bl	80023c0 <HAL_GetTick>
 8003070:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003072:	2280      	movs	r2, #128	; 0x80
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	4213      	tst	r3, r2
 800307a:	d100      	bne.n	800307e <HAL_RCC_OscConfig+0x252>
 800307c:	e71a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800307e:	f7ff f99f 	bl	80023c0 <HAL_GetTick>
 8003082:	1bc0      	subs	r0, r0, r7
 8003084:	2802      	cmp	r0, #2
 8003086:	d9f4      	bls.n	8003072 <HAL_RCC_OscConfig+0x246>
 8003088:	e747      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800308a:	696a      	ldr	r2, [r5, #20]
 800308c:	2301      	movs	r3, #1
 800308e:	2a00      	cmp	r2, #0
 8003090:	d010      	beq.n	80030b4 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8003092:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003094:	4313      	orrs	r3, r2
 8003096:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003098:	f7ff f992 	bl	80023c0 <HAL_GetTick>
 800309c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800309e:	2202      	movs	r2, #2
 80030a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030a2:	4213      	tst	r3, r2
 80030a4:	d000      	beq.n	80030a8 <HAL_RCC_OscConfig+0x27c>
 80030a6:	e709      	b.n	8002ebc <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a8:	f7ff f98a 	bl	80023c0 <HAL_GetTick>
 80030ac:	1bc0      	subs	r0, r0, r7
 80030ae:	2802      	cmp	r0, #2
 80030b0:	d9f5      	bls.n	800309e <HAL_RCC_OscConfig+0x272>
 80030b2:	e732      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 80030b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80030b6:	439a      	bics	r2, r3
 80030b8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80030ba:	f7ff f981 	bl	80023c0 <HAL_GetTick>
 80030be:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030c0:	2202      	movs	r2, #2
 80030c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030c4:	4213      	tst	r3, r2
 80030c6:	d100      	bne.n	80030ca <HAL_RCC_OscConfig+0x29e>
 80030c8:	e6f8      	b.n	8002ebc <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ca:	f7ff f979 	bl	80023c0 <HAL_GetTick>
 80030ce:	1bc0      	subs	r0, r0, r7
 80030d0:	2802      	cmp	r0, #2
 80030d2:	d9f5      	bls.n	80030c0 <HAL_RCC_OscConfig+0x294>
 80030d4:	e721      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80030d8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80030dc:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80030de:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e0:	421a      	tst	r2, r3
 80030e2:	d104      	bne.n	80030ee <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80030e6:	4313      	orrs	r3, r2
 80030e8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	4f19      	ldr	r7, [pc, #100]	; (8003158 <HAL_RCC_OscConfig+0x32c>)
 80030f2:	0052      	lsls	r2, r2, #1
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4213      	tst	r3, r2
 80030f8:	d008      	beq.n	800310c <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	68ab      	ldr	r3, [r5, #8]
 80030fe:	0052      	lsls	r2, r2, #1
 8003100:	4293      	cmp	r3, r2
 8003102:	d12b      	bne.n	800315c <HAL_RCC_OscConfig+0x330>
 8003104:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003106:	4313      	orrs	r3, r2
 8003108:	6523      	str	r3, [r4, #80]	; 0x50
 800310a:	e04c      	b.n	80031a6 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	0052      	lsls	r2, r2, #1
 8003112:	4313      	orrs	r3, r2
 8003114:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003116:	f7ff f953 	bl	80023c0 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800311e:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	9303      	str	r3, [sp, #12]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9a03      	ldr	r2, [sp, #12]
 8003126:	4213      	tst	r3, r2
 8003128:	d1e7      	bne.n	80030fa <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312a:	f7ff f949 	bl	80023c0 <HAL_GetTick>
 800312e:	9b02      	ldr	r3, [sp, #8]
 8003130:	1ac0      	subs	r0, r0, r3
 8003132:	2864      	cmp	r0, #100	; 0x64
 8003134:	d9f5      	bls.n	8003122 <HAL_RCC_OscConfig+0x2f6>
 8003136:	e6f0      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
 8003138:	40021000 	.word	0x40021000
 800313c:	ffff1fff 	.word	0xffff1fff
 8003140:	080070e2 	.word	0x080070e2
 8003144:	2000000c 	.word	0x2000000c
 8003148:	fffeffff 	.word	0xfffeffff
 800314c:	fffbffff 	.word	0xfffbffff
 8003150:	ffffe0ff 	.word	0xffffe0ff
 8003154:	fffffeff 	.word	0xfffffeff
 8003158:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	2b00      	cmp	r3, #0
 800315e:	d116      	bne.n	800318e <HAL_RCC_OscConfig+0x362>
 8003160:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003162:	4a6c      	ldr	r2, [pc, #432]	; (8003314 <HAL_RCC_OscConfig+0x4e8>)
 8003164:	4013      	ands	r3, r2
 8003166:	6523      	str	r3, [r4, #80]	; 0x50
 8003168:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800316a:	4a6b      	ldr	r2, [pc, #428]	; (8003318 <HAL_RCC_OscConfig+0x4ec>)
 800316c:	4013      	ands	r3, r2
 800316e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003170:	f7ff f926 	bl	80023c0 <HAL_GetTick>
 8003174:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003176:	2280      	movs	r2, #128	; 0x80
 8003178:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	4213      	tst	r3, r2
 800317e:	d02a      	beq.n	80031d6 <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7ff f91e 	bl	80023c0 <HAL_GetTick>
 8003184:	4b65      	ldr	r3, [pc, #404]	; (800331c <HAL_RCC_OscConfig+0x4f0>)
 8003186:	1bc0      	subs	r0, r0, r7
 8003188:	4298      	cmp	r0, r3
 800318a:	d9f4      	bls.n	8003176 <HAL_RCC_OscConfig+0x34a>
 800318c:	e6c5      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318e:	21a0      	movs	r1, #160	; 0xa0
 8003190:	00c9      	lsls	r1, r1, #3
 8003192:	428b      	cmp	r3, r1
 8003194:	d10b      	bne.n	80031ae <HAL_RCC_OscConfig+0x382>
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	430b      	orrs	r3, r1
 800319e:	6523      	str	r3, [r4, #80]	; 0x50
 80031a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031a2:	431a      	orrs	r2, r3
 80031a4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80031a6:	f7ff f90b 	bl	80023c0 <HAL_GetTick>
 80031aa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ac:	e00e      	b.n	80031cc <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	6523      	str	r3, [r4, #80]	; 0x50
 80031b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031b8:	4a57      	ldr	r2, [pc, #348]	; (8003318 <HAL_RCC_OscConfig+0x4ec>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	e7a4      	b.n	8003108 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7ff f8ff 	bl	80023c0 <HAL_GetTick>
 80031c2:	4b56      	ldr	r3, [pc, #344]	; (800331c <HAL_RCC_OscConfig+0x4f0>)
 80031c4:	1bc0      	subs	r0, r0, r7
 80031c6:	4298      	cmp	r0, r3
 80031c8:	d900      	bls.n	80031cc <HAL_RCC_OscConfig+0x3a0>
 80031ca:	e6a6      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4213      	tst	r3, r2
 80031d4:	d0f3      	beq.n	80031be <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80031d6:	9b01      	ldr	r3, [sp, #4]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d000      	beq.n	80031de <HAL_RCC_OscConfig+0x3b2>
 80031dc:	e672      	b.n	8002ec4 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031e0:	4a4f      	ldr	r2, [pc, #316]	; (8003320 <HAL_RCC_OscConfig+0x4f4>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80031e6:	e66d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031e8:	69a9      	ldr	r1, [r5, #24]
 80031ea:	2301      	movs	r3, #1
 80031ec:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_RCC_OscConfig+0x4f8>)
 80031ee:	2900      	cmp	r1, #0
 80031f0:	d018      	beq.n	8003224 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 80031f2:	68a1      	ldr	r1, [r4, #8]
 80031f4:	4319      	orrs	r1, r3
 80031f6:	60a1      	str	r1, [r4, #8]
 80031f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031fa:	430b      	orrs	r3, r1
 80031fc:	6363      	str	r3, [r4, #52]	; 0x34
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	6a11      	ldr	r1, [r2, #32]
 8003202:	019b      	lsls	r3, r3, #6
 8003204:	430b      	orrs	r3, r1
 8003206:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003208:	f7ff f8da 	bl	80023c0 <HAL_GetTick>
 800320c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800320e:	2202      	movs	r2, #2
 8003210:	68a3      	ldr	r3, [r4, #8]
 8003212:	4213      	tst	r3, r2
 8003214:	d000      	beq.n	8003218 <HAL_RCC_OscConfig+0x3ec>
 8003216:	e659      	b.n	8002ecc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003218:	f7ff f8d2 	bl	80023c0 <HAL_GetTick>
 800321c:	1bc0      	subs	r0, r0, r7
 800321e:	2802      	cmp	r0, #2
 8003220:	d9f5      	bls.n	800320e <HAL_RCC_OscConfig+0x3e2>
 8003222:	e67a      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8003224:	68a1      	ldr	r1, [r4, #8]
 8003226:	4399      	bics	r1, r3
 8003228:	60a1      	str	r1, [r4, #8]
 800322a:	6a13      	ldr	r3, [r2, #32]
 800322c:	493e      	ldr	r1, [pc, #248]	; (8003328 <HAL_RCC_OscConfig+0x4fc>)
 800322e:	400b      	ands	r3, r1
 8003230:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003232:	f7ff f8c5 	bl	80023c0 <HAL_GetTick>
 8003236:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003238:	2202      	movs	r2, #2
 800323a:	68a3      	ldr	r3, [r4, #8]
 800323c:	4213      	tst	r3, r2
 800323e:	d100      	bne.n	8003242 <HAL_RCC_OscConfig+0x416>
 8003240:	e644      	b.n	8002ecc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003242:	f7ff f8bd 	bl	80023c0 <HAL_GetTick>
 8003246:	1bc0      	subs	r0, r0, r7
 8003248:	2802      	cmp	r0, #2
 800324a:	d9f5      	bls.n	8003238 <HAL_RCC_OscConfig+0x40c>
 800324c:	e665      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324e:	2e0c      	cmp	r6, #12
 8003250:	d043      	beq.n	80032da <HAL_RCC_OscConfig+0x4ae>
 8003252:	4a36      	ldr	r2, [pc, #216]	; (800332c <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003254:	2b02      	cmp	r3, #2
 8003256:	d12e      	bne.n	80032b6 <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 8003258:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800325a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800325c:	4013      	ands	r3, r2
 800325e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003260:	f7ff f8ae 	bl	80023c0 <HAL_GetTick>
 8003264:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003266:	04b6      	lsls	r6, r6, #18
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	4233      	tst	r3, r6
 800326c:	d11d      	bne.n	80032aa <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003270:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003272:	68e2      	ldr	r2, [r4, #12]
 8003274:	430b      	orrs	r3, r1
 8003276:	492e      	ldr	r1, [pc, #184]	; (8003330 <HAL_RCC_OscConfig+0x504>)
 8003278:	400a      	ands	r2, r1
 800327a:	4313      	orrs	r3, r2
 800327c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800327e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003280:	4313      	orrs	r3, r2
 8003282:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	045b      	lsls	r3, r3, #17
 800328a:	4313      	orrs	r3, r2
 800328c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800328e:	f7ff f897 	bl	80023c0 <HAL_GetTick>
 8003292:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003294:	04ad      	lsls	r5, r5, #18
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	422b      	tst	r3, r5
 800329a:	d000      	beq.n	800329e <HAL_RCC_OscConfig+0x472>
 800329c:	e61a      	b.n	8002ed4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329e:	f7ff f88f 	bl	80023c0 <HAL_GetTick>
 80032a2:	1b80      	subs	r0, r0, r6
 80032a4:	2802      	cmp	r0, #2
 80032a6:	d9f6      	bls.n	8003296 <HAL_RCC_OscConfig+0x46a>
 80032a8:	e637      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032aa:	f7ff f889 	bl	80023c0 <HAL_GetTick>
 80032ae:	1bc0      	subs	r0, r0, r7
 80032b0:	2802      	cmp	r0, #2
 80032b2:	d9d9      	bls.n	8003268 <HAL_RCC_OscConfig+0x43c>
 80032b4:	e631      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 80032b6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032b8:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80032ba:	4013      	ands	r3, r2
 80032bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032be:	f7ff f87f 	bl	80023c0 <HAL_GetTick>
 80032c2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032c4:	04ad      	lsls	r5, r5, #18
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	422b      	tst	r3, r5
 80032ca:	d100      	bne.n	80032ce <HAL_RCC_OscConfig+0x4a2>
 80032cc:	e602      	b.n	8002ed4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7ff f877 	bl	80023c0 <HAL_GetTick>
 80032d2:	1b80      	subs	r0, r0, r6
 80032d4:	2802      	cmp	r0, #2
 80032d6:	d9f6      	bls.n	80032c6 <HAL_RCC_OscConfig+0x49a>
 80032d8:	e61f      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 80032da:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d100      	bne.n	80032e2 <HAL_RCC_OscConfig+0x4b6>
 80032e0:	e5aa      	b.n	8002e38 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80032e4:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80032e8:	0252      	lsls	r2, r2, #9
 80032ea:	401a      	ands	r2, r3
        return HAL_ERROR;
 80032ec:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	428a      	cmp	r2, r1
 80032f0:	d000      	beq.n	80032f4 <HAL_RCC_OscConfig+0x4c8>
 80032f2:	e5a1      	b.n	8002e38 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032f4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032f8:	0392      	lsls	r2, r2, #14
 80032fa:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fc:	428a      	cmp	r2, r1
 80032fe:	d000      	beq.n	8003302 <HAL_RCC_OscConfig+0x4d6>
 8003300:	e59a      	b.n	8002e38 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003302:	20c0      	movs	r0, #192	; 0xc0
 8003304:	0400      	lsls	r0, r0, #16
 8003306:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003308:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800330a:	1a18      	subs	r0, r3, r0
 800330c:	1e43      	subs	r3, r0, #1
 800330e:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003310:	b2c0      	uxtb	r0, r0
 8003312:	e591      	b.n	8002e38 <HAL_RCC_OscConfig+0xc>
 8003314:	fffffeff 	.word	0xfffffeff
 8003318:	fffffbff 	.word	0xfffffbff
 800331c:	00001388 	.word	0x00001388
 8003320:	efffffff 	.word	0xefffffff
 8003324:	40010000 	.word	0x40010000
 8003328:	ffffdfff 	.word	0xffffdfff
 800332c:	feffffff 	.word	0xfeffffff
 8003330:	ff02ffff 	.word	0xff02ffff

08003334 <HAL_RCC_ClockConfig>:
{
 8003334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003336:	1e06      	subs	r6, r0, #0
 8003338:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800333c:	2001      	movs	r0, #1
}
 800333e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	2201      	movs	r2, #1
 8003342:	4c51      	ldr	r4, [pc, #324]	; (8003488 <HAL_RCC_ClockConfig+0x154>)
 8003344:	9901      	ldr	r1, [sp, #4]
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	4013      	ands	r3, r2
 800334a:	428b      	cmp	r3, r1
 800334c:	d327      	bcc.n	800339e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334e:	6832      	ldr	r2, [r6, #0]
 8003350:	0793      	lsls	r3, r2, #30
 8003352:	d42f      	bmi.n	80033b4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003354:	07d3      	lsls	r3, r2, #31
 8003356:	d435      	bmi.n	80033c4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	2301      	movs	r3, #1
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	9901      	ldr	r1, [sp, #4]
 800335e:	401a      	ands	r2, r3
 8003360:	4291      	cmp	r1, r2
 8003362:	d200      	bcs.n	8003366 <HAL_RCC_ClockConfig+0x32>
 8003364:	e081      	b.n	800346a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003366:	6832      	ldr	r2, [r6, #0]
 8003368:	4c48      	ldr	r4, [pc, #288]	; (800348c <HAL_RCC_ClockConfig+0x158>)
 800336a:	0753      	lsls	r3, r2, #29
 800336c:	d500      	bpl.n	8003370 <HAL_RCC_ClockConfig+0x3c>
 800336e:	e084      	b.n	800347a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	0713      	lsls	r3, r2, #28
 8003372:	d506      	bpl.n	8003382 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003374:	68e2      	ldr	r2, [r4, #12]
 8003376:	6933      	ldr	r3, [r6, #16]
 8003378:	4945      	ldr	r1, [pc, #276]	; (8003490 <HAL_RCC_ClockConfig+0x15c>)
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	400a      	ands	r2, r1
 800337e:	4313      	orrs	r3, r2
 8003380:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003382:	f7ff fd17 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8003386:	68e3      	ldr	r3, [r4, #12]
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_RCC_ClockConfig+0x160>)
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	0f1b      	lsrs	r3, r3, #28
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	40d8      	lsrs	r0, r3
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_ClockConfig+0x164>)
 8003394:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003396:	2000      	movs	r0, #0
 8003398:	f7fe ffce 	bl	8002338 <HAL_InitTick>
 800339c:	e7cf      	b.n	800333e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	9901      	ldr	r1, [sp, #4]
 80033a2:	4393      	bics	r3, r2
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	4013      	ands	r3, r2
 80033ac:	9a01      	ldr	r2, [sp, #4]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d1c4      	bne.n	800333c <HAL_RCC_ClockConfig+0x8>
 80033b2:	e7cc      	b.n	800334e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	20f0      	movs	r0, #240	; 0xf0
 80033b6:	4935      	ldr	r1, [pc, #212]	; (800348c <HAL_RCC_ClockConfig+0x158>)
 80033b8:	68cb      	ldr	r3, [r1, #12]
 80033ba:	4383      	bics	r3, r0
 80033bc:	68b0      	ldr	r0, [r6, #8]
 80033be:	4303      	orrs	r3, r0
 80033c0:	60cb      	str	r3, [r1, #12]
 80033c2:	e7c7      	b.n	8003354 <HAL_RCC_ClockConfig+0x20>
 80033c4:	4d31      	ldr	r5, [pc, #196]	; (800348c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033c8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ca:	2a02      	cmp	r2, #2
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ce:	039b      	lsls	r3, r3, #14
 80033d0:	d5b4      	bpl.n	800333c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	2103      	movs	r1, #3
 80033d4:	68eb      	ldr	r3, [r5, #12]
 80033d6:	438b      	bics	r3, r1
 80033d8:	4313      	orrs	r3, r2
 80033da:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80033dc:	f7fe fff0 	bl	80023c0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80033e2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d119      	bne.n	800341c <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e8:	220c      	movs	r2, #12
 80033ea:	68eb      	ldr	r3, [r5, #12]
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d0b2      	beq.n	8003358 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7fe ffe5 	bl	80023c0 <HAL_GetTick>
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_RCC_ClockConfig+0x168>)
 80033f8:	1bc0      	subs	r0, r0, r7
 80033fa:	4298      	cmp	r0, r3
 80033fc:	d9f4      	bls.n	80033e8 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80033fe:	2003      	movs	r0, #3
 8003400:	e79d      	b.n	800333e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003402:	2a03      	cmp	r2, #3
 8003404:	d102      	bne.n	800340c <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003406:	019b      	lsls	r3, r3, #6
 8003408:	d4e3      	bmi.n	80033d2 <HAL_RCC_ClockConfig+0x9e>
 800340a:	e797      	b.n	800333c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800340c:	2a01      	cmp	r2, #1
 800340e:	d102      	bne.n	8003416 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003410:	075b      	lsls	r3, r3, #29
 8003412:	d4de      	bmi.n	80033d2 <HAL_RCC_ClockConfig+0x9e>
 8003414:	e792      	b.n	800333c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003416:	059b      	lsls	r3, r3, #22
 8003418:	d4db      	bmi.n	80033d2 <HAL_RCC_ClockConfig+0x9e>
 800341a:	e78f      	b.n	800333c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341c:	2b03      	cmp	r3, #3
 800341e:	d10b      	bne.n	8003438 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003420:	220c      	movs	r2, #12
 8003422:	68eb      	ldr	r3, [r5, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	4293      	cmp	r3, r2
 8003428:	d096      	beq.n	8003358 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342a:	f7fe ffc9 	bl	80023c0 <HAL_GetTick>
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_ClockConfig+0x168>)
 8003430:	1bc0      	subs	r0, r0, r7
 8003432:	4298      	cmp	r0, r3
 8003434:	d9f4      	bls.n	8003420 <HAL_RCC_ClockConfig+0xec>
 8003436:	e7e2      	b.n	80033fe <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003438:	2b01      	cmp	r3, #1
 800343a:	d010      	beq.n	800345e <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800343c:	220c      	movs	r2, #12
 800343e:	68eb      	ldr	r3, [r5, #12]
 8003440:	4213      	tst	r3, r2
 8003442:	d089      	beq.n	8003358 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003444:	f7fe ffbc 	bl	80023c0 <HAL_GetTick>
 8003448:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_RCC_ClockConfig+0x168>)
 800344a:	1bc0      	subs	r0, r0, r7
 800344c:	4298      	cmp	r0, r3
 800344e:	d9f5      	bls.n	800343c <HAL_RCC_ClockConfig+0x108>
 8003450:	e7d5      	b.n	80033fe <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003452:	f7fe ffb5 	bl	80023c0 <HAL_GetTick>
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_RCC_ClockConfig+0x168>)
 8003458:	1bc0      	subs	r0, r0, r7
 800345a:	4298      	cmp	r0, r3
 800345c:	d8cf      	bhi.n	80033fe <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800345e:	220c      	movs	r2, #12
 8003460:	68eb      	ldr	r3, [r5, #12]
 8003462:	4013      	ands	r3, r2
 8003464:	2b04      	cmp	r3, #4
 8003466:	d1f4      	bne.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003468:	e776      	b.n	8003358 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	6822      	ldr	r2, [r4, #0]
 800346c:	439a      	bics	r2, r3
 800346e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003470:	6822      	ldr	r2, [r4, #0]
 8003472:	421a      	tst	r2, r3
 8003474:	d000      	beq.n	8003478 <HAL_RCC_ClockConfig+0x144>
 8003476:	e761      	b.n	800333c <HAL_RCC_ClockConfig+0x8>
 8003478:	e775      	b.n	8003366 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347a:	68e3      	ldr	r3, [r4, #12]
 800347c:	4908      	ldr	r1, [pc, #32]	; (80034a0 <HAL_RCC_ClockConfig+0x16c>)
 800347e:	400b      	ands	r3, r1
 8003480:	68f1      	ldr	r1, [r6, #12]
 8003482:	430b      	orrs	r3, r1
 8003484:	60e3      	str	r3, [r4, #12]
 8003486:	e773      	b.n	8003370 <HAL_RCC_ClockConfig+0x3c>
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	ffffc7ff 	.word	0xffffc7ff
 8003494:	080070e2 	.word	0x080070e2
 8003498:	2000000c 	.word	0x2000000c
 800349c:	00001388 	.word	0x00001388
 80034a0:	fffff8ff 	.word	0xfffff8ff

080034a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	055b      	lsls	r3, r3, #21
 80034ac:	0f5b      	lsrs	r3, r3, #29
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	4a03      	ldr	r2, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80034b2:	6810      	ldr	r0, [r2, #0]
 80034b4:	40d8      	lsrs	r0, r3
}
 80034b6:	4770      	bx	lr
 80034b8:	40021000 	.word	0x40021000
 80034bc:	080070f2 	.word	0x080070f2
 80034c0:	2000000c 	.word	0x2000000c

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80034c6:	4a05      	ldr	r2, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	049b      	lsls	r3, r3, #18
 80034cc:	0f5b      	lsrs	r3, r3, #29
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	4a03      	ldr	r2, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80034d2:	6810      	ldr	r0, [r2, #0]
 80034d4:	40d8      	lsrs	r0, r3
}
 80034d6:	4770      	bx	lr
 80034d8:	40021000 	.word	0x40021000
 80034dc:	080070f2 	.word	0x080070f2
 80034e0:	2000000c 	.word	0x2000000c

080034e4 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80034e4:	2382      	movs	r3, #130	; 0x82
{
 80034e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034e8:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80034ea:	011b      	lsls	r3, r3, #4
{
 80034ec:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ee:	421a      	tst	r2, r3
 80034f0:	d047      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80034f4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4c5f      	ldr	r4, [pc, #380]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80034f8:	055b      	lsls	r3, r3, #21
 80034fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80034fc:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fe:	421a      	tst	r2, r3
 8003500:	d104      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003504:	4313      	orrs	r3, r2
 8003506:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003508:	2301      	movs	r3, #1
 800350a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	2780      	movs	r7, #128	; 0x80
 800350e:	4e5a      	ldr	r6, [pc, #360]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003510:	007f      	lsls	r7, r7, #1
 8003512:	6833      	ldr	r3, [r6, #0]
 8003514:	423b      	tst	r3, r7
 8003516:	d06d      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003518:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800351a:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800351c:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	0392      	lsls	r2, r2, #14
 8003522:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003524:	4010      	ands	r0, r2
 8003526:	4283      	cmp	r3, r0
 8003528:	d103      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800352a:	68a8      	ldr	r0, [r5, #8]
 800352c:	4002      	ands	r2, r0
 800352e:	4293      	cmp	r3, r2
 8003530:	d009      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003532:	23c0      	movs	r3, #192	; 0xc0
 8003534:	000a      	movs	r2, r1
 8003536:	029b      	lsls	r3, r3, #10
 8003538:	401a      	ands	r2, r3
 800353a:	429a      	cmp	r2, r3
 800353c:	d103      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800353e:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003540:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003542:	039b      	lsls	r3, r3, #14
 8003544:	d466      	bmi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003546:	22c0      	movs	r2, #192	; 0xc0
 8003548:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800354a:	0292      	lsls	r2, r2, #10
 800354c:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800354e:	d162      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003550:	6869      	ldr	r1, [r5, #4]
 8003552:	23c0      	movs	r3, #192	; 0xc0
 8003554:	000a      	movs	r2, r1
 8003556:	029b      	lsls	r3, r3, #10
 8003558:	401a      	ands	r2, r3
 800355a:	429a      	cmp	r2, r3
 800355c:	d107      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	4846      	ldr	r0, [pc, #280]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003562:	4003      	ands	r3, r0
 8003564:	20c0      	movs	r0, #192	; 0xc0
 8003566:	0380      	lsls	r0, r0, #14
 8003568:	4001      	ands	r1, r0
 800356a:	430b      	orrs	r3, r1
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003570:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003572:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003574:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8003576:	2b01      	cmp	r3, #1
 8003578:	d103      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800357c:	4a40      	ldr	r2, [pc, #256]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800357e:	4013      	ands	r3, r2
 8003580:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003582:	682b      	ldr	r3, [r5, #0]
 8003584:	07da      	lsls	r2, r3, #31
 8003586:	d506      	bpl.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003588:	2003      	movs	r0, #3
 800358a:	493a      	ldr	r1, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800358c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800358e:	4382      	bics	r2, r0
 8003590:	68e8      	ldr	r0, [r5, #12]
 8003592:	4302      	orrs	r2, r0
 8003594:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003596:	079a      	lsls	r2, r3, #30
 8003598:	d506      	bpl.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800359a:	200c      	movs	r0, #12
 800359c:	4935      	ldr	r1, [pc, #212]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800359e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80035a0:	4382      	bics	r2, r0
 80035a2:	6928      	ldr	r0, [r5, #16]
 80035a4:	4302      	orrs	r2, r0
 80035a6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035a8:	075a      	lsls	r2, r3, #29
 80035aa:	d506      	bpl.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035ac:	4931      	ldr	r1, [pc, #196]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80035ae:	4835      	ldr	r0, [pc, #212]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80035b0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80035b2:	4002      	ands	r2, r0
 80035b4:	6968      	ldr	r0, [r5, #20]
 80035b6:	4302      	orrs	r2, r0
 80035b8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ba:	071a      	lsls	r2, r3, #28
 80035bc:	d506      	bpl.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035be:	492d      	ldr	r1, [pc, #180]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80035c0:	4831      	ldr	r0, [pc, #196]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035c2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80035c4:	4002      	ands	r2, r0
 80035c6:	69a8      	ldr	r0, [r5, #24]
 80035c8:	4302      	orrs	r2, r0
 80035ca:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035cc:	065a      	lsls	r2, r3, #25
 80035ce:	d506      	bpl.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d0:	4928      	ldr	r1, [pc, #160]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80035d2:	482e      	ldr	r0, [pc, #184]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035d4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80035d6:	4002      	ands	r2, r0
 80035d8:	6a28      	ldr	r0, [r5, #32]
 80035da:	4302      	orrs	r2, r0
 80035dc:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80035de:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	d517      	bpl.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80035e4:	4a23      	ldr	r2, [pc, #140]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80035e6:	492a      	ldr	r1, [pc, #168]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80035ea:	400b      	ands	r3, r1
 80035ec:	69e9      	ldr	r1, [r5, #28]
 80035ee:	430b      	orrs	r3, r1
 80035f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035f2:	e00f      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f4:	6833      	ldr	r3, [r6, #0]
 80035f6:	433b      	orrs	r3, r7
 80035f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80035fa:	f7fe fee1 	bl	80023c0 <HAL_GetTick>
 80035fe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	6833      	ldr	r3, [r6, #0]
 8003602:	423b      	tst	r3, r7
 8003604:	d188      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fe fedb 	bl	80023c0 <HAL_GetTick>
 800360a:	9b01      	ldr	r3, [sp, #4]
 800360c:	1ac0      	subs	r0, r0, r3
 800360e:	2864      	cmp	r0, #100	; 0x64
 8003610:	d9f6      	bls.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 8003612:	2003      	movs	r0, #3
}
 8003614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003616:	4011      	ands	r1, r2
 8003618:	428b      	cmp	r3, r1
 800361a:	d002      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800361c:	6829      	ldr	r1, [r5, #0]
 800361e:	0689      	lsls	r1, r1, #26
 8003620:	d408      	bmi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003622:	68a9      	ldr	r1, [r5, #8]
 8003624:	400a      	ands	r2, r1
 8003626:	4293      	cmp	r3, r2
 8003628:	d100      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800362a:	e791      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	051b      	lsls	r3, r3, #20
 8003630:	d400      	bmi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003632:	e78d      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003634:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003636:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8003638:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800363a:	0312      	lsls	r2, r2, #12
 800363c:	4302      	orrs	r2, r0
 800363e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003640:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003644:	4814      	ldr	r0, [pc, #80]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003646:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003648:	4002      	ands	r2, r0
 800364a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800364c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800364e:	05cb      	lsls	r3, r1, #23
 8003650:	d400      	bmi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8003652:	e77d      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8003654:	f7fe feb4 	bl	80023c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003658:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800365a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800365c:	00bf      	lsls	r7, r7, #2
 800365e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003660:	423b      	tst	r3, r7
 8003662:	d000      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003664:	e774      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7fe feab 	bl	80023c0 <HAL_GetTick>
 800366a:	4b0c      	ldr	r3, [pc, #48]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800366c:	1b80      	subs	r0, r0, r6
 800366e:	4298      	cmp	r0, r3
 8003670:	d9f5      	bls.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003672:	e7ce      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8003674:	40021000 	.word	0x40021000
 8003678:	40007000 	.word	0x40007000
 800367c:	ffcfffff 	.word	0xffcfffff
 8003680:	efffffff 	.word	0xefffffff
 8003684:	fffff3ff 	.word	0xfffff3ff
 8003688:	ffffcfff 	.word	0xffffcfff
 800368c:	fbffffff 	.word	0xfbffffff
 8003690:	fff3ffff 	.word	0xfff3ffff
 8003694:	fffcffff 	.word	0xfffcffff
 8003698:	fff7ffff 	.word	0xfff7ffff
 800369c:	00001388 	.word	0x00001388

080036a0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80036a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036a2:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036a4:	1c45      	adds	r5, r0, #1
 80036a6:	7feb      	ldrb	r3, [r5, #31]
{
 80036a8:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80036aa:	0038      	movs	r0, r7
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d024      	beq.n	80036fa <HAL_RTC_DeactivateAlarm+0x5a>
 80036b0:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036b2:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 80036b4:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036b6:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036b8:	19e6      	adds	r6, r4, r7
 80036ba:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
 80036be:	3a77      	subs	r2, #119	; 0x77
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80036c2:	32ad      	adds	r2, #173	; 0xad
 80036c4:	4291      	cmp	r1, r2
 80036c6:	d128      	bne.n	800371a <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	4921      	ldr	r1, [pc, #132]	; (8003750 <HAL_RTC_DeactivateAlarm+0xb0>)
 80036cc:	400a      	ands	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	4920      	ldr	r1, [pc, #128]	; (8003754 <HAL_RTC_DeactivateAlarm+0xb4>)
 80036d4:	400a      	ands	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80036d8:	f7fe fe72 	bl	80023c0 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80036dc:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 80036de:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	68df      	ldr	r7, [r3, #12]
 80036e6:	9b01      	ldr	r3, [sp, #4]
 80036e8:	401f      	ands	r7, r3
 80036ea:	d007      	beq.n	80036fc <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ec:	22ff      	movs	r2, #255	; 0xff
 80036ee:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036f0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 80036f8:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 80036fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80036fc:	f7fe fe60 	bl	80023c0 <HAL_GetTick>
 8003700:	9b00      	ldr	r3, [sp, #0]
 8003702:	1ac0      	subs	r0, r0, r3
 8003704:	23fa      	movs	r3, #250	; 0xfa
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4298      	cmp	r0, r3
 800370a:	d9ea      	bls.n	80036e2 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800370c:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800370e:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003714:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8003716:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 8003718:	e7ef      	b.n	80036fa <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	490e      	ldr	r1, [pc, #56]	; (8003758 <HAL_RTC_DeactivateAlarm+0xb8>)
 800371e:	400a      	ands	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	490d      	ldr	r1, [pc, #52]	; (800375c <HAL_RTC_DeactivateAlarm+0xbc>)
 8003726:	400a      	ands	r2, r1
 8003728:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800372a:	f7fe fe49 	bl	80023c0 <HAL_GetTick>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800372e:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 8003730:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	68df      	ldr	r7, [r3, #12]
 8003736:	9b01      	ldr	r3, [sp, #4]
 8003738:	401f      	ands	r7, r3
 800373a:	d1d7      	bne.n	80036ec <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800373c:	f7fe fe40 	bl	80023c0 <HAL_GetTick>
 8003740:	9b00      	ldr	r3, [sp, #0]
 8003742:	1ac0      	subs	r0, r0, r3
 8003744:	23fa      	movs	r3, #250	; 0xfa
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4298      	cmp	r0, r3
 800374a:	d9f2      	bls.n	8003732 <HAL_RTC_DeactivateAlarm+0x92>
 800374c:	e7de      	b.n	800370c <HAL_RTC_DeactivateAlarm+0x6c>
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	fffffeff 	.word	0xfffffeff
 8003754:	ffffefff 	.word	0xffffefff
 8003758:	fffffdff 	.word	0xfffffdff
 800375c:	ffffdfff 	.word	0xffffdfff

08003760 <HAL_RTC_AlarmAEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003760:	4770      	bx	lr
	...

08003764 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003764:	6803      	ldr	r3, [r0, #0]
{
 8003766:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003768:	689a      	ldr	r2, [r3, #8]
{
 800376a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800376c:	04d2      	lsls	r2, r2, #19
 800376e:	d50a      	bpl.n	8003786 <HAL_RTC_AlarmIRQHandler+0x22>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	05db      	lsls	r3, r3, #23
 8003774:	d507      	bpl.n	8003786 <HAL_RTC_AlarmIRQHandler+0x22>
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003776:	f7ff fff3 	bl	8003760 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800377a:	6821      	ldr	r1, [r4, #0]
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <HAL_RTC_AlarmIRQHandler+0x54>)
 800377e:	68ca      	ldr	r2, [r1, #12]
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	4313      	orrs	r3, r2
 8003784:	60cb      	str	r3, [r1, #12]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	0492      	lsls	r2, r2, #18
 800378c:	d50b      	bpl.n	80037a6 <HAL_RTC_AlarmIRQHandler+0x42>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	059b      	lsls	r3, r3, #22
 8003792:	d508      	bpl.n	80037a6 <HAL_RTC_AlarmIRQHandler+0x42>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003794:	0020      	movs	r0, r4
 8003796:	f000 fabb 	bl	8003d10 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800379a:	6821      	ldr	r1, [r4, #0]
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_RTC_AlarmIRQHandler+0x58>)
 800379e:	68ca      	ldr	r2, [r1, #12]
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80037a6:	2280      	movs	r2, #128	; 0x80
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80037aa:	0292      	lsls	r2, r2, #10
 80037ac:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 80037ae:	2301      	movs	r3, #1
 80037b0:	3402      	adds	r4, #2
 80037b2:	77e3      	strb	r3, [r4, #31]
}
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	fffffe7f 	.word	0xfffffe7f
 80037bc:	fffffd7f 	.word	0xfffffd7f
 80037c0:	40010400 	.word	0x40010400

080037c4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037c4:	21a0      	movs	r1, #160	; 0xa0
 80037c6:	6802      	ldr	r2, [r0, #0]
{
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037ca:	68d3      	ldr	r3, [r2, #12]
{
 80037cc:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037ce:	438b      	bics	r3, r1
 80037d0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80037d2:	f7fe fdf5 	bl	80023c0 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037d6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80037d8:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037da:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037dc:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	422b      	tst	r3, r5
 80037e4:	d001      	beq.n	80037ea <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80037e6:	2000      	movs	r0, #0
}
 80037e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037ea:	f7fe fde9 	bl	80023c0 <HAL_GetTick>
 80037ee:	1b80      	subs	r0, r0, r6
 80037f0:	42b8      	cmp	r0, r7
 80037f2:	d9f4      	bls.n	80037de <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80037f4:	2003      	movs	r0, #3
 80037f6:	e7f7      	b.n	80037e8 <HAL_RTC_WaitForSynchro+0x24>

080037f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80037fa:	2440      	movs	r4, #64	; 0x40
 80037fc:	6803      	ldr	r3, [r0, #0]
{
 80037fe:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	4222      	tst	r2, r4
 8003804:	d001      	beq.n	800380a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003806:	2000      	movs	r0, #0
}
 8003808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800380a:	2201      	movs	r2, #1
 800380c:	4252      	negs	r2, r2
 800380e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003810:	f7fe fdd6 	bl	80023c0 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003814:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8003816:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003818:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	4223      	tst	r3, r4
 8003820:	d1f1      	bne.n	8003806 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003822:	f7fe fdcd 	bl	80023c0 <HAL_GetTick>
 8003826:	1b80      	subs	r0, r0, r6
 8003828:	42b8      	cmp	r0, r7
 800382a:	d9f6      	bls.n	800381a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800382c:	2003      	movs	r0, #3
 800382e:	e7eb      	b.n	8003808 <RTC_EnterInitMode+0x10>

08003830 <HAL_RTC_Init>:
{
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003834:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8003836:	2800      	cmp	r0, #0
 8003838:	d01a      	beq.n	8003870 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800383a:	1c86      	adds	r6, r0, #2
 800383c:	7ff3      	ldrb	r3, [r6, #31]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8003844:	1942      	adds	r2, r0, r5
 8003846:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8003848:	f000 fee2 	bl	8004610 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800384c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800384e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003850:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003852:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003854:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
 8003858:	3a77      	subs	r2, #119	; 0x77
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800385c:	f7ff ffcc 	bl	80037f8 <RTC_EnterInitMode>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	1e05      	subs	r5, r0, #0
 8003864:	d006      	beq.n	8003874 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003866:	22ff      	movs	r2, #255	; 0xff
 8003868:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800386a:	2304      	movs	r3, #4
 800386c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800386e:	2501      	movs	r5, #1
}
 8003870:	0028      	movs	r0, r5
 8003872:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	491b      	ldr	r1, [pc, #108]	; (80038e4 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003878:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800387a:	400a      	ands	r2, r1
 800387c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800387e:	6862      	ldr	r2, [r4, #4]
 8003880:	6899      	ldr	r1, [r3, #8]
 8003882:	4302      	orrs	r2, r0
 8003884:	69a0      	ldr	r0, [r4, #24]
 8003886:	4302      	orrs	r2, r0
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800388c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800388e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003890:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003892:	68a2      	ldr	r2, [r4, #8]
 8003894:	6919      	ldr	r1, [r3, #16]
 8003896:	0412      	lsls	r2, r2, #16
 8003898:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800389a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800389c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	438a      	bics	r2, r1
 80038a2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80038a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038a6:	397d      	subs	r1, #125	; 0x7d
 80038a8:	438a      	bics	r2, r1
 80038aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038ac:	69e2      	ldr	r2, [r4, #28]
 80038ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038b0:	4302      	orrs	r2, r0
 80038b2:	430a      	orrs	r2, r1
 80038b4:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	069b      	lsls	r3, r3, #26
 80038ba:	d40c      	bmi.n	80038d6 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038bc:	0020      	movs	r0, r4
 80038be:	f7ff ff81 	bl	80037c4 <HAL_RTC_WaitForSynchro>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80038ca:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038ce:	2304      	movs	r3, #4
 80038d0:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80038d2:	77e5      	strb	r5, [r4, #31]
 80038d4:	e7cb      	b.n	800386e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d6:	22ff      	movs	r2, #255	; 0xff
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80038dc:	2301      	movs	r3, #1
 80038de:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80038e0:	e7c6      	b.n	8003870 <HAL_RTC_Init+0x40>
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	ff8fffbf 	.word	0xff8fffbf

080038e8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80038e8:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80038ea:	2809      	cmp	r0, #9
 80038ec:	d803      	bhi.n	80038f6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	4318      	orrs	r0, r3
 80038f2:	b2c0      	uxtb	r0, r0
}
 80038f4:	4770      	bx	lr
    Param -= 10U;
 80038f6:	380a      	subs	r0, #10
    bcdhigh++;
 80038f8:	3301      	adds	r3, #1
    Param -= 10U;
 80038fa:	b2c0      	uxtb	r0, r0
 80038fc:	e7f5      	b.n	80038ea <RTC_ByteToBcd2+0x2>
	...

08003900 <HAL_RTC_SetTime>:
{
 8003900:	2302      	movs	r3, #2
 8003902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003904:	1c47      	adds	r7, r0, #1
{
 8003906:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8003908:	7ff9      	ldrb	r1, [r7, #31]
{
 800390a:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 800390c:	001e      	movs	r6, r3
 800390e:	2901      	cmp	r1, #1
 8003910:	d036      	beq.n	8003980 <HAL_RTC_SetTime+0x80>
 8003912:	2101      	movs	r1, #1
 8003914:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003916:	18c1      	adds	r1, r0, r3
 8003918:	77cb      	strb	r3, [r1, #31]
 800391a:	9100      	str	r1, [sp, #0]
 800391c:	2140      	movs	r1, #64	; 0x40
 800391e:	6803      	ldr	r3, [r0, #0]
 8003920:	7866      	ldrb	r6, [r4, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	7820      	ldrb	r0, [r4, #0]
 8003926:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8003928:	2a00      	cmp	r2, #0
 800392a:	d12b      	bne.n	8003984 <HAL_RTC_SetTime+0x84>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800392c:	2b00      	cmp	r3, #0
 800392e:	d100      	bne.n	8003932 <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 8003930:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003932:	f7ff ffd9 	bl	80038e8 <RTC_ByteToBcd2>
 8003936:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003938:	0030      	movs	r0, r6
 800393a:	f7ff ffd5 	bl	80038e8 <RTC_ByteToBcd2>
 800393e:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003940:	78a0      	ldrb	r0, [r4, #2]
 8003942:	f7ff ffd1 	bl	80038e8 <RTC_ByteToBcd2>
 8003946:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003948:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800394a:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800394c:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800394e:	4318      	orrs	r0, r3
 8003950:	9b01      	ldr	r3, [sp, #4]
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	4318      	orrs	r0, r3
 8003956:	4330      	orrs	r0, r6
 8003958:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800395a:	22ca      	movs	r2, #202	; 0xca
 800395c:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800395e:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003960:	625a      	str	r2, [r3, #36]	; 0x24
 8003962:	3a77      	subs	r2, #119	; 0x77
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003966:	f7ff ff47 	bl	80037f8 <RTC_EnterInitMode>
 800396a:	682b      	ldr	r3, [r5, #0]
 800396c:	1e06      	subs	r6, r0, #0
 800396e:	d016      	beq.n	800399e <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003974:	2304      	movs	r3, #4
 8003976:	9a00      	ldr	r2, [sp, #0]
 8003978:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800397a:	2300      	movs	r3, #0
 800397c:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800397e:	2601      	movs	r6, #1
}
 8003980:	0030      	movs	r0, r6
 8003982:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003984:	2b00      	cmp	r3, #0
 8003986:	d100      	bne.n	800398a <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 8003988:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800398a:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800398c:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800398e:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 8003990:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003992:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003994:	78e0      	ldrb	r0, [r4, #3]
 8003996:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003998:	4306      	orrs	r6, r0
 800399a:	9601      	str	r6, [sp, #4]
 800399c:	e7dd      	b.n	800395a <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800399e:	4815      	ldr	r0, [pc, #84]	; (80039f4 <HAL_RTC_SetTime+0xf4>)
 80039a0:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80039a2:	4915      	ldr	r1, [pc, #84]	; (80039f8 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80039a4:	4002      	ands	r2, r0
 80039a6:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80039a8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039aa:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80039ac:	400a      	ands	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039b0:	68e2      	ldr	r2, [r4, #12]
 80039b2:	6899      	ldr	r1, [r3, #8]
 80039b4:	4302      	orrs	r2, r0
 80039b6:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039b8:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039ba:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	438a      	bics	r2, r1
 80039c0:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	069b      	lsls	r3, r3, #26
 80039c6:	d40c      	bmi.n	80039e2 <HAL_RTC_SetTime+0xe2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039c8:	0028      	movs	r0, r5
 80039ca:	f7ff fefb 	bl	80037c4 <HAL_RTC_WaitForSynchro>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d2:	22ff      	movs	r2, #255	; 0xff
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80039d8:	2304      	movs	r3, #4
 80039da:	9a00      	ldr	r2, [sp, #0]
 80039dc:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80039de:	77fe      	strb	r6, [r7, #31]
 80039e0:	e7cd      	b.n	800397e <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80039e8:	2301      	movs	r3, #1
 80039ea:	9a00      	ldr	r2, [sp, #0]
 80039ec:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80039ee:	2300      	movs	r3, #0
 80039f0:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80039f2:	e7c5      	b.n	8003980 <HAL_RTC_SetTime+0x80>
 80039f4:	007f7f7f 	.word	0x007f7f7f
 80039f8:	fffbffff 	.word	0xfffbffff

080039fc <HAL_RTC_SetDate>:
{
 80039fc:	2302      	movs	r3, #2
 80039fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003a00:	1c47      	adds	r7, r0, #1
{
 8003a02:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8003a04:	7ff9      	ldrb	r1, [r7, #31]
{
 8003a06:	b085      	sub	sp, #20
 8003a08:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8003a0a:	001e      	movs	r6, r3
 8003a0c:	2901      	cmp	r1, #1
 8003a0e:	d035      	beq.n	8003a7c <HAL_RTC_SetDate+0x80>
 8003a10:	2101      	movs	r1, #1
 8003a12:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a14:	18c1      	adds	r1, r0, r3
 8003a16:	9101      	str	r1, [sp, #4]
 8003a18:	77cb      	strb	r3, [r1, #31]
 8003a1a:	786b      	ldrb	r3, [r5, #1]
 8003a1c:	78e8      	ldrb	r0, [r5, #3]
 8003a1e:	78ae      	ldrb	r6, [r5, #2]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a20:	2a00      	cmp	r2, #0
 8003a22:	d14e      	bne.n	8003ac2 <HAL_RTC_SetDate+0xc6>
 8003a24:	3210      	adds	r2, #16
 8003a26:	4213      	tst	r3, r2
 8003a28:	d002      	beq.n	8003a30 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a2a:	4393      	bics	r3, r2
 8003a2c:	330a      	adds	r3, #10
 8003a2e:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a30:	f7ff ff5a 	bl	80038e8 <RTC_ByteToBcd2>
 8003a34:	9002      	str	r0, [sp, #8]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a36:	7868      	ldrb	r0, [r5, #1]
 8003a38:	f7ff ff56 	bl	80038e8 <RTC_ByteToBcd2>
 8003a3c:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a3e:	0030      	movs	r0, r6
 8003a40:	f7ff ff52 	bl	80038e8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a44:	9b02      	ldr	r3, [sp, #8]
                  ((uint32_t)sDate->WeekDay << 13U));
 8003a46:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a48:	041e      	lsls	r6, r3, #16
                  ((uint32_t)sDate->WeekDay << 13U));
 8003a4a:	036d      	lsls	r5, r5, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a4c:	9b03      	ldr	r3, [sp, #12]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a4e:	4305      	orrs	r5, r0
 8003a50:	4335      	orrs	r5, r6
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a52:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a54:	22ca      	movs	r2, #202	; 0xca
 8003a56:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a58:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
 8003a5c:	3a77      	subs	r2, #119	; 0x77
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a60:	f7ff feca 	bl	80037f8 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a64:	4335      	orrs	r5, r6
 8003a66:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a68:	1e06      	subs	r6, r0, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a6c:	22ff      	movs	r2, #255	; 0xff
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a70:	2304      	movs	r3, #4
 8003a72:	9a01      	ldr	r2, [sp, #4]
 8003a74:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8003a76:	2300      	movs	r3, #0
 8003a78:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8003a7a:	2601      	movs	r6, #1
}
 8003a7c:	0030      	movs	r0, r6
 8003a7e:	b005      	add	sp, #20
 8003a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003a82:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a84:	4812      	ldr	r0, [pc, #72]	; (8003ad0 <HAL_RTC_SetDate+0xd4>)
 8003a86:	4005      	ands	r5, r0
 8003a88:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	438a      	bics	r2, r1
 8003a8e:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	069b      	lsls	r3, r3, #26
 8003a94:	d40c      	bmi.n	8003ab0 <HAL_RTC_SetDate+0xb4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a96:	0020      	movs	r0, r4
 8003a98:	f7ff fe94 	bl	80037c4 <HAL_RTC_WaitForSynchro>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aa0:	22ff      	movs	r2, #255	; 0xff
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	9a01      	ldr	r2, [sp, #4]
 8003aaa:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8003aac:	77fe      	strb	r6, [r7, #31]
 8003aae:	e7e4      	b.n	8003a7a <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ab0:	22ff      	movs	r2, #255	; 0xff
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	9a01      	ldr	r2, [sp, #4]
 8003aba:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8003ac0:	e7dc      	b.n	8003a7c <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003ac2:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003ac4:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003ac6:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003ac8:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8003aca:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003acc:	036d      	lsls	r5, r5, #13
 8003ace:	e7c1      	b.n	8003a54 <HAL_RTC_SetDate+0x58>
 8003ad0:	00ffff3f 	.word	0x00ffff3f

08003ad4 <HAL_RTC_SetAlarm_IT>:
{
 8003ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	9300      	str	r3, [sp, #0]
{
 8003ada:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8003adc:	7fd9      	ldrb	r1, [r3, #31]
 8003ade:	2302      	movs	r3, #2
{
 8003ae0:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	2901      	cmp	r1, #1
 8003ae6:	d100      	bne.n	8003aea <HAL_RTC_SetAlarm_IT+0x16>
 8003ae8:	e08d      	b.n	8003c06 <HAL_RTC_SetAlarm_IT+0x132>
 8003aea:	2101      	movs	r1, #1
 8003aec:	1860      	adds	r0, r4, r1
 8003aee:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003af0:	18e1      	adds	r1, r4, r3
 8003af2:	77cb      	strb	r3, [r1, #31]
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	7828      	ldrb	r0, [r5, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	786e      	ldrb	r6, [r5, #1]
 8003afe:	78af      	ldrb	r7, [r5, #2]
 8003b00:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8003b02:	2a00      	cmp	r2, #0
 8003b04:	d15d      	bne.n	8003bc2 <HAL_RTC_SetAlarm_IT+0xee>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d100      	bne.n	8003b0c <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b0a:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b0c:	f7ff feec 	bl	80038e8 <RTC_ByteToBcd2>
 8003b10:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003b12:	0030      	movs	r0, r6
 8003b14:	f7ff fee8 	bl	80038e8 <RTC_ByteToBcd2>
 8003b18:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003b1a:	0038      	movs	r0, r7
 8003b1c:	f7ff fee4 	bl	80038e8 <RTC_ByteToBcd2>
 8003b20:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b22:	1c6b      	adds	r3, r5, #1
 8003b24:	7fd8      	ldrb	r0, [r3, #31]
 8003b26:	f7ff fedf 	bl	80038e8 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b2a:	696a      	ldr	r2, [r5, #20]
 8003b2c:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003b2e:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b30:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b32:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b34:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b36:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	431f      	orrs	r7, r3
 8003b3c:	9b01      	ldr	r3, [sp, #4]
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	431f      	orrs	r7, r3
 8003b42:	4337      	orrs	r7, r6
 8003b44:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b46:	69aa      	ldr	r2, [r5, #24]
 8003b48:	686b      	ldr	r3, [r5, #4]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003b4a:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b4c:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b4e:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b50:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24
 8003b56:	3a77      	subs	r2, #119	; 0x77
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003b5a:	32ad      	adds	r2, #173	; 0xad
 8003b5c:	4291      	cmp	r1, r2
 8003b5e:	d153      	bne.n	8003c08 <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	493c      	ldr	r1, [pc, #240]	; (8003c54 <HAL_RTC_SetAlarm_IT+0x180>)
 8003b64:	400a      	ands	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003b68:	68d9      	ldr	r1, [r3, #12]
 8003b6a:	4a3b      	ldr	r2, [pc, #236]	; (8003c58 <HAL_RTC_SetAlarm_IT+0x184>)
 8003b6c:	b2c9      	uxtb	r1, r1
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003b72:	f7fe fc25 	bl	80023c0 <HAL_GetTick>
 8003b76:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	68dd      	ldr	r5, [r3, #12]
 8003b7e:	4015      	ands	r5, r2
 8003b80:	d032      	beq.n	8003be8 <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003b82:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003b84:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	6899      	ldr	r1, [r3, #8]
 8003b8c:	0052      	lsls	r2, r2, #1
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	6899      	ldr	r1, [r3, #8]
 8003b96:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_RTC_SetAlarm_IT+0x188>)
 8003ba0:	0292      	lsls	r2, r2, #10
 8003ba2:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8003ba4:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003ba6:	4311      	orrs	r1, r2
 8003ba8:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003baa:	6899      	ldr	r1, [r3, #8]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb0:	22ff      	movs	r2, #255	; 0xff
 8003bb2:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY;
 8003bb4:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 8003bbc:	9b00      	ldr	r3, [sp, #0]
 8003bbe:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 8003bc0:	e021      	b.n	8003c06 <HAL_RTC_SetAlarm_IT+0x132>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d100      	bne.n	8003bc8 <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003bc6:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003bc8:	69eb      	ldr	r3, [r5, #28]
 8003bca:	696a      	ldr	r2, [r5, #20]
 8003bcc:	0400      	lsls	r0, r0, #16
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003bd2:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003bd4:	4307      	orrs	r7, r0
 8003bd6:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003bd8:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003bda:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003bdc:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003bde:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003be0:	7fde      	ldrb	r6, [r3, #31]
 8003be2:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003be4:	4337      	orrs	r7, r6
 8003be6:	e7ae      	b.n	8003b46 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003be8:	f7fe fbea 	bl	80023c0 <HAL_GetTick>
 8003bec:	23fa      	movs	r3, #250	; 0xfa
 8003bee:	1b80      	subs	r0, r0, r6
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4298      	cmp	r0, r3
 8003bf4:	d9c0      	bls.n	8003b78 <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bf6:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bf8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bfa:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bfc:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8003c00:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c02:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 8003c04:	77dd      	strb	r5, [r3, #31]
}
 8003c06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	4915      	ldr	r1, [pc, #84]	; (8003c60 <HAL_RTC_SetAlarm_IT+0x18c>)
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003c10:	68d9      	ldr	r1, [r3, #12]
 8003c12:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <HAL_RTC_SetAlarm_IT+0x190>)
 8003c14:	b2c9      	uxtb	r1, r1
 8003c16:	430a      	orrs	r2, r1
 8003c18:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003c1a:	f7fe fbd1 	bl	80023c0 <HAL_GetTick>
 8003c1e:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c20:	2202      	movs	r2, #2
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	68dd      	ldr	r5, [r3, #12]
 8003c26:	4015      	ands	r5, r2
 8003c28:	d00b      	beq.n	8003c42 <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003c2a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003c2c:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003c2e:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	6899      	ldr	r1, [r3, #8]
 8003c34:	0092      	lsls	r2, r2, #2
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	6899      	ldr	r1, [r3, #8]
 8003c3e:	0192      	lsls	r2, r2, #6
 8003c40:	e7aa      	b.n	8003b98 <HAL_RTC_SetAlarm_IT+0xc4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c42:	f7fe fbbd 	bl	80023c0 <HAL_GetTick>
 8003c46:	23fa      	movs	r3, #250	; 0xfa
 8003c48:	1b80      	subs	r0, r0, r6
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4298      	cmp	r0, r3
 8003c4e:	d9e7      	bls.n	8003c20 <HAL_RTC_SetAlarm_IT+0x14c>
 8003c50:	e7d1      	b.n	8003bf6 <HAL_RTC_SetAlarm_IT+0x122>
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	fffffeff 	.word	0xfffffeff
 8003c58:	fffffe7f 	.word	0xfffffe7f
 8003c5c:	40010400 	.word	0x40010400
 8003c60:	fffffdff 	.word	0xfffffdff
 8003c64:	fffffd7f 	.word	0xfffffd7f

08003c68 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003c68:	230a      	movs	r3, #10
 8003c6a:	0902      	lsrs	r2, r0, #4
 8003c6c:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003c6e:	220f      	movs	r2, #15
 8003c70:	4010      	ands	r0, r2
 8003c72:	1818      	adds	r0, r3, r0
 8003c74:	b2c0      	uxtb	r0, r0
}
 8003c76:	4770      	bx	lr

08003c78 <HAL_RTC_GetTime>:
{
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003c7c:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c7e:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003c80:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c82:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003c84:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c86:	690b      	ldr	r3, [r1, #16]
 8003c88:	045b      	lsls	r3, r3, #17
 8003c8a:	0c5b      	lsrs	r3, r3, #17
 8003c8c:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003c8e:	680b      	ldr	r3, [r1, #0]
 8003c90:	490d      	ldr	r1, [pc, #52]	; (8003cc8 <HAL_RTC_GetTime+0x50>)
 8003c92:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003c94:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003c96:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003c98:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003c9a:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003c9c:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003c9e:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003ca0:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003ca2:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003ca4:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003ca6:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003ca8:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003cae:	f7ff ffdb 	bl	8003c68 <RTC_Bcd2ToByte>
 8003cb2:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003cb4:	0030      	movs	r0, r6
 8003cb6:	f7ff ffd7 	bl	8003c68 <RTC_Bcd2ToByte>
 8003cba:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003cbc:	0028      	movs	r0, r5
 8003cbe:	f7ff ffd3 	bl	8003c68 <RTC_Bcd2ToByte>
 8003cc2:	70a0      	strb	r0, [r4, #2]
}
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	007f7f7f 	.word	0x007f7f7f

08003ccc <HAL_RTC_GetDate>:
{
 8003ccc:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003cce:	253f      	movs	r5, #63	; 0x3f
{
 8003cd0:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003cd2:	6803      	ldr	r3, [r0, #0]
 8003cd4:	490d      	ldr	r1, [pc, #52]	; (8003d0c <HAL_RTC_GetDate+0x40>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003cda:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003cdc:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003cde:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003ce0:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003ce2:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003ce4:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003ce6:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003ce8:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003cea:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003cec:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8003cee:	2a00      	cmp	r2, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003cf2:	f7ff ffb9 	bl	8003c68 <RTC_Bcd2ToByte>
 8003cf6:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003cf8:	0030      	movs	r0, r6
 8003cfa:	f7ff ffb5 	bl	8003c68 <RTC_Bcd2ToByte>
 8003cfe:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d00:	0028      	movs	r0, r5
 8003d02:	f7ff ffb1 	bl	8003c68 <RTC_Bcd2ToByte>
 8003d06:	70a0      	strb	r0, [r4, #2]
}
 8003d08:	2000      	movs	r0, #0
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	00ffff3f 	.word	0x00ffff3f

08003d10 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8003d18:	2001      	movs	r0, #1
  if (hspi == NULL)
 8003d1a:	2c00      	cmp	r4, #0
 8003d1c:	d037      	beq.n	8003d8e <HAL_SPI_Init+0x7a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d1e:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d20:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d22:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d24:	3551      	adds	r5, #81	; 0x51
 8003d26:	782b      	ldrb	r3, [r5, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d2e:	0022      	movs	r2, r4
 8003d30:	3250      	adds	r2, #80	; 0x50
 8003d32:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d34:	0020      	movs	r0, r4
 8003d36:	f000 fc83 	bl	8004640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d3a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d3c:	2240      	movs	r2, #64	; 0x40
 8003d3e:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d40:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003d42:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d44:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003d46:	4393      	bics	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d4a:	6863      	ldr	r3, [r4, #4]
 8003d4c:	69a2      	ldr	r2, [r4, #24]
 8003d4e:	4303      	orrs	r3, r0
 8003d50:	68e0      	ldr	r0, [r4, #12]
 8003d52:	4303      	orrs	r3, r0
 8003d54:	6920      	ldr	r0, [r4, #16]
 8003d56:	4303      	orrs	r3, r0
 8003d58:	6960      	ldr	r0, [r4, #20]
 8003d5a:	4303      	orrs	r3, r0
 8003d5c:	69e0      	ldr	r0, [r4, #28]
 8003d5e:	4303      	orrs	r3, r0
 8003d60:	6a20      	ldr	r0, [r4, #32]
 8003d62:	4303      	orrs	r3, r0
 8003d64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003d66:	4303      	orrs	r3, r0
 8003d68:	2080      	movs	r0, #128	; 0x80
 8003d6a:	0080      	lsls	r0, r0, #2
 8003d6c:	4010      	ands	r0, r2
 8003d6e:	4303      	orrs	r3, r0
 8003d70:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d72:	2304      	movs	r3, #4
 8003d74:	0c12      	lsrs	r2, r2, #16
 8003d76:	401a      	ands	r2, r3
 8003d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d7a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d80:	69cb      	ldr	r3, [r1, #28]
 8003d82:	4a03      	ldr	r2, [pc, #12]	; (8003d90 <HAL_SPI_Init+0x7c>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003d88:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d8a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d8c:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	fffff7ff 	.word	0xfffff7ff

08003d94 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
  if (hspi == NULL)
 8003d9a:	2c00      	cmp	r4, #0
 8003d9c:	d010      	beq.n	8003dc0 <HAL_SPI_DeInit+0x2c>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d9e:	0025      	movs	r5, r4
 8003da0:	2302      	movs	r3, #2

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003da6:	3551      	adds	r5, #81	; 0x51
 8003da8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003daa:	6813      	ldr	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003dac:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 8003dae:	438b      	bics	r3, r1
 8003db0:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003db2:	f000 fc71 	bl	8004698 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003db6:	2000      	movs	r0, #0
  hspi->State = HAL_SPI_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003db8:	3450      	adds	r4, #80	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dba:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 8003dbc:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8003dbe:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003dc0:	bd70      	pop	{r4, r5, r6, pc}

08003dc2 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003dc2:	b570      	push	{r4, r5, r6, lr}
 8003dc4:	0005      	movs	r5, r0
  /* Check the UART handle allocation */
  if (huart == NULL)
  {
    return HAL_ERROR;
 8003dc6:	2001      	movs	r0, #1
  if (huart == NULL)
 8003dc8:	2d00      	cmp	r5, #0
 8003dca:	d012      	beq.n	8003df2 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8003dcc:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 8003dce:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	676b      	str	r3, [r5, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003dd2:	682b      	ldr	r3, [r5, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4382      	bics	r2, r0
 8003dd8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003dda:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 8003ddc:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003dde:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003de0:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8003de2:	f000 fc9d 	bl	8004720 <HAL_UART_MspDeInit>
  huart->RxState = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8003de6:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	67ec      	str	r4, [r5, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8003dea:	676c      	str	r4, [r5, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8003dec:	67ac      	str	r4, [r5, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003dee:	3570      	adds	r5, #112	; 0x70
 8003df0:	702c      	strb	r4, [r5, #0]
}
 8003df2:	bd70      	pop	{r4, r5, r6, pc}

08003df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df8:	6925      	ldr	r5, [r4, #16]
 8003dfa:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dfc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dfe:	432a      	orrs	r2, r5
 8003e00:	6965      	ldr	r5, [r4, #20]
 8003e02:	69c1      	ldr	r1, [r0, #28]
 8003e04:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	4d79      	ldr	r5, [pc, #484]	; (8003ff0 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e0a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e0c:	4028      	ands	r0, r5
 8003e0e:	4302      	orrs	r2, r0
 8003e10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	4877      	ldr	r0, [pc, #476]	; (8003ff4 <UART_SetConfig+0x200>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e16:	4d78      	ldr	r5, [pc, #480]	; (8003ff8 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e18:	4002      	ands	r2, r0
 8003e1a:	68e0      	ldr	r0, [r4, #12]
 8003e1c:	4302      	orrs	r2, r0
 8003e1e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e20:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e22:	42ab      	cmp	r3, r5
 8003e24:	d001      	beq.n	8003e2a <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e26:	6a22      	ldr	r2, [r4, #32]
 8003e28:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	4e73      	ldr	r6, [pc, #460]	; (8003ffc <UART_SetConfig+0x208>)
 8003e2e:	4032      	ands	r2, r6
 8003e30:	4302      	orrs	r2, r0
 8003e32:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e34:	4a72      	ldr	r2, [pc, #456]	; (8004000 <UART_SetConfig+0x20c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d113      	bne.n	8003e62 <UART_SetConfig+0x6e>
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	4b71      	ldr	r3, [pc, #452]	; (8004004 <UART_SetConfig+0x210>)
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	4013      	ands	r3, r2
 8003e42:	4a71      	ldr	r2, [pc, #452]	; (8004008 <UART_SetConfig+0x214>)
 8003e44:	5cd0      	ldrb	r0, [r2, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	d000      	beq.n	8003e50 <UART_SetConfig+0x5c>
 8003e4e:	e092      	b.n	8003f76 <UART_SetConfig+0x182>
  {
    switch (clocksource)
 8003e50:	2808      	cmp	r0, #8
 8003e52:	d81e      	bhi.n	8003e92 <UART_SetConfig+0x9e>
 8003e54:	f7fc f96a 	bl	800012c <__gnu_thumb1_case_uqi>
 8003e58:	1d636058 	.word	0x1d636058
 8003e5c:	1d1d1d84 	.word	0x1d1d1d84
 8003e60:	87          	.byte	0x87
 8003e61:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e62:	4a6a      	ldr	r2, [pc, #424]	; (800400c <UART_SetConfig+0x218>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d105      	bne.n	8003e74 <UART_SetConfig+0x80>
 8003e68:	220c      	movs	r2, #12
 8003e6a:	4b66      	ldr	r3, [pc, #408]	; (8004004 <UART_SetConfig+0x210>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	4013      	ands	r3, r2
 8003e70:	4a67      	ldr	r2, [pc, #412]	; (8004010 <UART_SetConfig+0x21c>)
 8003e72:	e7e7      	b.n	8003e44 <UART_SetConfig+0x50>
 8003e74:	42ab      	cmp	r3, r5
 8003e76:	d000      	beq.n	8003e7a <UART_SetConfig+0x86>
 8003e78:	e0b3      	b.n	8003fe2 <UART_SetConfig+0x1ee>
 8003e7a:	21c0      	movs	r1, #192	; 0xc0
 8003e7c:	2080      	movs	r0, #128	; 0x80
 8003e7e:	4a61      	ldr	r2, [pc, #388]	; (8004004 <UART_SetConfig+0x210>)
 8003e80:	0109      	lsls	r1, r1, #4
 8003e82:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003e84:	00c0      	lsls	r0, r0, #3
 8003e86:	400b      	ands	r3, r1
 8003e88:	4283      	cmp	r3, r0
 8003e8a:	d038      	beq.n	8003efe <UART_SetConfig+0x10a>
 8003e8c:	d803      	bhi.n	8003e96 <UART_SetConfig+0xa2>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_SetConfig+0xb4>
        ret = HAL_ERROR;
 8003e92:	2501      	movs	r5, #1
 8003e94:	e00d      	b.n	8003eb2 <UART_SetConfig+0xbe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e96:	2080      	movs	r0, #128	; 0x80
 8003e98:	0100      	lsls	r0, r0, #4
 8003e9a:	4283      	cmp	r3, r0
 8003e9c:	d00e      	beq.n	8003ebc <UART_SetConfig+0xc8>
 8003e9e:	428b      	cmp	r3, r1
 8003ea0:	d1f7      	bne.n	8003e92 <UART_SetConfig+0x9e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003ea2:	2080      	movs	r0, #128	; 0x80
 8003ea4:	0200      	lsls	r0, r0, #8
 8003ea6:	e00d      	b.n	8003ec4 <UART_SetConfig+0xd0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f7ff fafc 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8003eac:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8003eae:	42a8      	cmp	r0, r5
 8003eb0:	d108      	bne.n	8003ec4 <UART_SetConfig+0xd0>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb2:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8003eb4:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8003eb6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003eb8:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ebc:	6813      	ldr	r3, [r2, #0]
 8003ebe:	06db      	lsls	r3, r3, #27
 8003ec0:	d520      	bpl.n	8003f04 <UART_SetConfig+0x110>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8003ec2:	4854      	ldr	r0, [pc, #336]	; (8004014 <UART_SetConfig+0x220>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	6863      	ldr	r3, [r4, #4]
 8003ec8:	435a      	muls	r2, r3
 8003eca:	4282      	cmp	r2, r0
 8003ecc:	d8e1      	bhi.n	8003e92 <UART_SetConfig+0x9e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ece:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ed0:	4282      	cmp	r2, r0
 8003ed2:	d3de      	bcc.n	8003e92 <UART_SetConfig+0x9e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003ed4:	2700      	movs	r7, #0
 8003ed6:	0e02      	lsrs	r2, r0, #24
 8003ed8:	0201      	lsls	r1, r0, #8
 8003eda:	085e      	lsrs	r6, r3, #1
 8003edc:	1989      	adds	r1, r1, r6
 8003ede:	417a      	adcs	r2, r7
 8003ee0:	0008      	movs	r0, r1
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	003b      	movs	r3, r7
 8003ee8:	f7fc faa0 	bl	800042c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eec:	4b4a      	ldr	r3, [pc, #296]	; (8004018 <UART_SetConfig+0x224>)
 8003eee:	18c2      	adds	r2, r0, r3
 8003ef0:	4b4a      	ldr	r3, [pc, #296]	; (800401c <UART_SetConfig+0x228>)
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d8cd      	bhi.n	8003e92 <UART_SetConfig+0x9e>
          huart->Instance->BRR = usartdiv;
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	003d      	movs	r5, r7
 8003efa:	60d8      	str	r0, [r3, #12]
 8003efc:	e7d9      	b.n	8003eb2 <UART_SetConfig+0xbe>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fe ff59 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
        break;
 8003f02:	e7d3      	b.n	8003eac <UART_SetConfig+0xb8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003f04:	4846      	ldr	r0, [pc, #280]	; (8004020 <UART_SetConfig+0x22c>)
 8003f06:	e7dd      	b.n	8003ec4 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f08:	f7ff facc 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f0c:	6863      	ldr	r3, [r4, #4]
 8003f0e:	0040      	lsls	r0, r0, #1
 8003f10:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f12:	18c0      	adds	r0, r0, r3
 8003f14:	6861      	ldr	r1, [r4, #4]
 8003f16:	e00b      	b.n	8003f30 <UART_SetConfig+0x13c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f18:	f7ff fad4 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	e7f6      	b.n	8003f0c <UART_SetConfig+0x118>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f1e:	2510      	movs	r5, #16
 8003f20:	4b38      	ldr	r3, [pc, #224]	; (8004004 <UART_SetConfig+0x210>)
 8003f22:	6861      	ldr	r1, [r4, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003f26:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f28:	4015      	ands	r5, r2
 8003f2a:	d006      	beq.n	8003f3a <UART_SetConfig+0x146>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003f2c:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <UART_SetConfig+0x230>)
 8003f2e:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f30:	f7fc f906 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f34:	2500      	movs	r5, #0
 8003f36:	b283      	uxth	r3, r0
        break;
 8003f38:	e004      	b.n	8003f44 <UART_SetConfig+0x150>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f3a:	4b3b      	ldr	r3, [pc, #236]	; (8004028 <UART_SetConfig+0x234>)
 8003f3c:	18c0      	adds	r0, r0, r3
 8003f3e:	f7fc f8ff 	bl	8000140 <__udivsi3>
 8003f42:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f44:	0019      	movs	r1, r3
 8003f46:	4839      	ldr	r0, [pc, #228]	; (800402c <UART_SetConfig+0x238>)
 8003f48:	3910      	subs	r1, #16
 8003f4a:	4281      	cmp	r1, r0
 8003f4c:	d8a1      	bhi.n	8003e92 <UART_SetConfig+0x9e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f4e:	210f      	movs	r1, #15
 8003f50:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f52:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f54:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f56:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8003f58:	6821      	ldr	r1, [r4, #0]
 8003f5a:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8003f5c:	60cb      	str	r3, [r1, #12]
 8003f5e:	e7a8      	b.n	8003eb2 <UART_SetConfig+0xbe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f60:	f7fe ff28 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8003f64:	e7d2      	b.n	8003f0c <UART_SetConfig+0x118>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f66:	6863      	ldr	r3, [r4, #4]
 8003f68:	0858      	lsrs	r0, r3, #1
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	025b      	lsls	r3, r3, #9
 8003f6e:	e7d0      	b.n	8003f12 <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8003f70:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e7e6      	b.n	8003f44 <UART_SetConfig+0x150>
    switch (clocksource)
 8003f76:	2808      	cmp	r0, #8
 8003f78:	d837      	bhi.n	8003fea <UART_SetConfig+0x1f6>
 8003f7a:	f7fc f8d7 	bl	800012c <__gnu_thumb1_case_uqi>
 8003f7e:	0c05      	.short	0x0c05
 8003f80:	362a360f 	.word	0x362a360f
 8003f84:	3636      	.short	0x3636
 8003f86:	2d          	.byte	0x2d
 8003f87:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f88:	f7ff fa8c 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f90:	18c0      	adds	r0, r0, r3
 8003f92:	6861      	ldr	r1, [r4, #4]
 8003f94:	e00b      	b.n	8003fae <UART_SetConfig+0x1ba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f96:	f7ff fa95 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8003f9a:	e7f7      	b.n	8003f8c <UART_SetConfig+0x198>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f9c:	2510      	movs	r5, #16
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <UART_SetConfig+0x210>)
 8003fa0:	6861      	ldr	r1, [r4, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003fa4:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fa6:	4015      	ands	r5, r2
 8003fa8:	d00d      	beq.n	8003fc6 <UART_SetConfig+0x1d2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003faa:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <UART_SetConfig+0x220>)
 8003fac:	18c0      	adds	r0, r0, r3
 8003fae:	f7fc f8c7 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	481c      	ldr	r0, [pc, #112]	; (800402c <UART_SetConfig+0x238>)
 8003fba:	3910      	subs	r1, #16
 8003fbc:	4281      	cmp	r1, r0
 8003fbe:	d900      	bls.n	8003fc2 <UART_SetConfig+0x1ce>
 8003fc0:	e767      	b.n	8003e92 <UART_SetConfig+0x9e>
      huart->Instance->BRR = usartdiv;
 8003fc2:	6821      	ldr	r1, [r4, #0]
 8003fc4:	e7ca      	b.n	8003f5c <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <UART_SetConfig+0x22c>)
 8003fc8:	18c0      	adds	r0, r0, r3
 8003fca:	f7fc f8b9 	bl	8000140 <__udivsi3>
 8003fce:	b283      	uxth	r3, r0
 8003fd0:	e7f1      	b.n	8003fb6 <UART_SetConfig+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003fd2:	f7fe feef 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8003fd6:	e7d9      	b.n	8003f8c <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	0858      	lsrs	r0, r3, #1
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	e7d6      	b.n	8003f90 <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	4299      	cmp	r1, r3
 8003fe8:	d0c2      	beq.n	8003f70 <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 8003fea:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e7e2      	b.n	8003fb6 <UART_SetConfig+0x1c2>
 8003ff0:	efff69f3 	.word	0xefff69f3
 8003ff4:	ffffcfff 	.word	0xffffcfff
 8003ff8:	40004800 	.word	0x40004800
 8003ffc:	fffff4ff 	.word	0xfffff4ff
 8004000:	40013800 	.word	0x40013800
 8004004:	40021000 	.word	0x40021000
 8004008:	080070b0 	.word	0x080070b0
 800400c:	40004400 	.word	0x40004400
 8004010:	080070b4 	.word	0x080070b4
 8004014:	003d0900 	.word	0x003d0900
 8004018:	fffffd00 	.word	0xfffffd00
 800401c:	000ffcff 	.word	0x000ffcff
 8004020:	00f42400 	.word	0x00f42400
 8004024:	007a1200 	.word	0x007a1200
 8004028:	01e84800 	.word	0x01e84800
 800402c:	0000ffef 	.word	0x0000ffef

08004030 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004030:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004032:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004034:	07da      	lsls	r2, r3, #31
 8004036:	d506      	bpl.n	8004046 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004038:	6801      	ldr	r1, [r0, #0]
 800403a:	4c28      	ldr	r4, [pc, #160]	; (80040dc <UART_AdvFeatureConfig+0xac>)
 800403c:	684a      	ldr	r2, [r1, #4]
 800403e:	4022      	ands	r2, r4
 8004040:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004042:	4322      	orrs	r2, r4
 8004044:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004046:	079a      	lsls	r2, r3, #30
 8004048:	d506      	bpl.n	8004058 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800404a:	6801      	ldr	r1, [r0, #0]
 800404c:	4c24      	ldr	r4, [pc, #144]	; (80040e0 <UART_AdvFeatureConfig+0xb0>)
 800404e:	684a      	ldr	r2, [r1, #4]
 8004050:	4022      	ands	r2, r4
 8004052:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004054:	4322      	orrs	r2, r4
 8004056:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004058:	075a      	lsls	r2, r3, #29
 800405a:	d506      	bpl.n	800406a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800405c:	6801      	ldr	r1, [r0, #0]
 800405e:	4c21      	ldr	r4, [pc, #132]	; (80040e4 <UART_AdvFeatureConfig+0xb4>)
 8004060:	684a      	ldr	r2, [r1, #4]
 8004062:	4022      	ands	r2, r4
 8004064:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004066:	4322      	orrs	r2, r4
 8004068:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800406a:	071a      	lsls	r2, r3, #28
 800406c:	d506      	bpl.n	800407c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800406e:	6801      	ldr	r1, [r0, #0]
 8004070:	4c1d      	ldr	r4, [pc, #116]	; (80040e8 <UART_AdvFeatureConfig+0xb8>)
 8004072:	684a      	ldr	r2, [r1, #4]
 8004074:	4022      	ands	r2, r4
 8004076:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004078:	4322      	orrs	r2, r4
 800407a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800407c:	06da      	lsls	r2, r3, #27
 800407e:	d506      	bpl.n	800408e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004080:	6801      	ldr	r1, [r0, #0]
 8004082:	4c1a      	ldr	r4, [pc, #104]	; (80040ec <UART_AdvFeatureConfig+0xbc>)
 8004084:	688a      	ldr	r2, [r1, #8]
 8004086:	4022      	ands	r2, r4
 8004088:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800408a:	4322      	orrs	r2, r4
 800408c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408e:	069a      	lsls	r2, r3, #26
 8004090:	d506      	bpl.n	80040a0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004092:	6801      	ldr	r1, [r0, #0]
 8004094:	4c16      	ldr	r4, [pc, #88]	; (80040f0 <UART_AdvFeatureConfig+0xc0>)
 8004096:	688a      	ldr	r2, [r1, #8]
 8004098:	4022      	ands	r2, r4
 800409a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800409c:	4322      	orrs	r2, r4
 800409e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040a0:	065a      	lsls	r2, r3, #25
 80040a2:	d510      	bpl.n	80040c6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040a4:	6801      	ldr	r1, [r0, #0]
 80040a6:	4d13      	ldr	r5, [pc, #76]	; (80040f4 <UART_AdvFeatureConfig+0xc4>)
 80040a8:	684a      	ldr	r2, [r1, #4]
 80040aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80040ac:	402a      	ands	r2, r5
 80040ae:	4322      	orrs	r2, r4
 80040b0:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	0352      	lsls	r2, r2, #13
 80040b6:	4294      	cmp	r4, r2
 80040b8:	d105      	bne.n	80040c6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040ba:	684a      	ldr	r2, [r1, #4]
 80040bc:	4c0e      	ldr	r4, [pc, #56]	; (80040f8 <UART_AdvFeatureConfig+0xc8>)
 80040be:	4022      	ands	r2, r4
 80040c0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80040c2:	4322      	orrs	r2, r4
 80040c4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040c6:	061b      	lsls	r3, r3, #24
 80040c8:	d506      	bpl.n	80040d8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ca:	6802      	ldr	r2, [r0, #0]
 80040cc:	490b      	ldr	r1, [pc, #44]	; (80040fc <UART_AdvFeatureConfig+0xcc>)
 80040ce:	6853      	ldr	r3, [r2, #4]
 80040d0:	400b      	ands	r3, r1
 80040d2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6053      	str	r3, [r2, #4]
  }
}
 80040d8:	bd30      	pop	{r4, r5, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	fffdffff 	.word	0xfffdffff
 80040e0:	fffeffff 	.word	0xfffeffff
 80040e4:	fffbffff 	.word	0xfffbffff
 80040e8:	ffff7fff 	.word	0xffff7fff
 80040ec:	ffffefff 	.word	0xffffefff
 80040f0:	ffffdfff 	.word	0xffffdfff
 80040f4:	ffefffff 	.word	0xffefffff
 80040f8:	ff9fffff 	.word	0xff9fffff
 80040fc:	fff7ffff 	.word	0xfff7ffff

08004100 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	0004      	movs	r4, r0
 8004104:	000e      	movs	r6, r1
 8004106:	0015      	movs	r5, r2
 8004108:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	69d3      	ldr	r3, [r2, #28]
 800410e:	4033      	ands	r3, r6
 8004110:	1b9b      	subs	r3, r3, r6
 8004112:	4259      	negs	r1, r3
 8004114:	414b      	adcs	r3, r1
 8004116:	42ab      	cmp	r3, r5
 8004118:	d001      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800411a:	2000      	movs	r0, #0
 800411c:	e01b      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800411e:	9b06      	ldr	r3, [sp, #24]
 8004120:	3301      	adds	r3, #1
 8004122:	d0f3      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004124:	f7fe f94c 	bl	80023c0 <HAL_GetTick>
 8004128:	9b06      	ldr	r3, [sp, #24]
 800412a:	1bc0      	subs	r0, r0, r7
 800412c:	4283      	cmp	r3, r0
 800412e:	d301      	bcc.n	8004134 <UART_WaitOnFlagUntilTimeout+0x34>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ea      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	4908      	ldr	r1, [pc, #32]	; (8004158 <UART_WaitOnFlagUntilTimeout+0x58>)
 8004138:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800413a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413c:	400a      	ands	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	31a3      	adds	r1, #163	; 0xa3
 8004144:	31ff      	adds	r1, #255	; 0xff
 8004146:	438a      	bics	r2, r1
 8004148:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800414a:	2320      	movs	r3, #32
 800414c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800414e:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8004150:	2300      	movs	r3, #0
 8004152:	3470      	adds	r4, #112	; 0x70
 8004154:	7023      	strb	r3, [r4, #0]
}
 8004156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004158:	fffffe5f 	.word	0xfffffe5f

0800415c <UART_CheckIdleState>:
{
 800415c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415e:	2600      	movs	r6, #0
{
 8004160:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004162:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004164:	f7fe f92c 	bl	80023c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004168:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800416a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	071b      	lsls	r3, r3, #28
 8004170:	d415      	bmi.n	800419e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	075b      	lsls	r3, r3, #29
 8004178:	d50a      	bpl.n	8004190 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <UART_CheckIdleState+0x5c>)
 800417e:	2200      	movs	r2, #0
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	03c9      	lsls	r1, r1, #15
 8004184:	002b      	movs	r3, r5
 8004186:	0020      	movs	r0, r4
 8004188:	f7ff ffba 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 800418c:	2800      	cmp	r0, #0
 800418e:	d111      	bne.n	80041b4 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8004190:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004192:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004194:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004196:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004198:	3470      	adds	r4, #112	; 0x70
 800419a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800419c:	e00b      	b.n	80041b6 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800419e:	2180      	movs	r1, #128	; 0x80
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <UART_CheckIdleState+0x5c>)
 80041a2:	0032      	movs	r2, r6
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	0389      	lsls	r1, r1, #14
 80041a8:	0003      	movs	r3, r0
 80041aa:	0020      	movs	r0, r4
 80041ac:	f7ff ffa8 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d0de      	beq.n	8004172 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80041b4:	2003      	movs	r0, #3
}
 80041b6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80041b8:	01ffffff 	.word	0x01ffffff

080041bc <HAL_UART_Init>:
{
 80041bc:	b510      	push	{r4, lr}
 80041be:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80041c0:	d101      	bne.n	80041c6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80041c2:	2001      	movs	r0, #1
}
 80041c4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80041c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80041cc:	0002      	movs	r2, r0
 80041ce:	3270      	adds	r2, #112	; 0x70
 80041d0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80041d2:	f000 fa77 	bl	80046c4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80041d6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80041d8:	2101      	movs	r1, #1
 80041da:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80041dc:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80041de:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041e0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80041e2:	438b      	bics	r3, r1
 80041e4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041e6:	f7ff fe05 	bl	8003df4 <UART_SetConfig>
 80041ea:	2801      	cmp	r0, #1
 80041ec:	d0e9      	beq.n	80041c2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80041f4:	0020      	movs	r0, r4
 80041f6:	f7ff ff1b 	bl	8004030 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	4907      	ldr	r1, [pc, #28]	; (800421c <HAL_UART_Init+0x60>)
 80041fe:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004200:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004202:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004204:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	438a      	bics	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800420e:	2201      	movs	r2, #1
 8004210:	6819      	ldr	r1, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004216:	f7ff ffa1 	bl	800415c <UART_CheckIdleState>
 800421a:	e7d3      	b.n	80041c4 <HAL_UART_Init+0x8>
 800421c:	ffffb7ff 	.word	0xffffb7ff

08004220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004220:	b530      	push	{r4, r5, lr}
 8004222:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004224:	2238      	movs	r2, #56	; 0x38
 8004226:	2100      	movs	r1, #0
 8004228:	a80e      	add	r0, sp, #56	; 0x38
 800422a:	f001 f86d 	bl	8005308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800422e:	2214      	movs	r2, #20
 8004230:	2100      	movs	r1, #0
 8004232:	4668      	mov	r0, sp
 8004234:	f001 f868 	bl	8005308 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004238:	2224      	movs	r2, #36	; 0x24
 800423a:	2100      	movs	r1, #0
 800423c:	a805      	add	r0, sp, #20
 800423e:	f001 f863 	bl	8005308 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	4917      	ldr	r1, [pc, #92]	; (80042a4 <SystemClock_Config+0x84>)
 8004246:	4c18      	ldr	r4, [pc, #96]	; (80042a8 <SystemClock_Config+0x88>)
 8004248:	680a      	ldr	r2, [r1, #0]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	4022      	ands	r2, r4
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8004252:	f7fe fd77 	bl	8002d44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004256:	4a15      	ldr	r2, [pc, #84]	; (80042ac <SystemClock_Config+0x8c>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004258:	2501      	movs	r5, #1
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800425a:	6d13      	ldr	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800425c:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800425e:	4023      	ands	r3, r4
 8004260:	6513      	str	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004262:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004264:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004266:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004268:	33fa      	adds	r3, #250	; 0xfa
 800426a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800426c:	3bf0      	subs	r3, #240	; 0xf0
 800426e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004270:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004272:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004274:	f7fe fdda 	bl	8002e2c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004278:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800427a:	0021      	movs	r1, r4
 800427c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800427e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004280:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004282:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004284:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004286:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004288:	f7ff f854 	bl	8003334 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800428c:	232a      	movs	r3, #42	; 0x2a
 800428e:	9305      	str	r3, [sp, #20]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004290:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004292:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004294:	025b      	lsls	r3, r3, #9
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004296:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004298:	940b      	str	r4, [sp, #44]	; 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800429a:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800429c:	f7ff f922 	bl	80034e4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80042a0:	b01d      	add	sp, #116	; 0x74
 80042a2:	bd30      	pop	{r4, r5, pc}
 80042a4:	40007000 	.word	0x40007000
 80042a8:	ffffe7ff 	.word	0xffffe7ff
 80042ac:	40021000 	.word	0x40021000

080042b0 <main>:
{
 80042b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042b2:	b099      	sub	sp, #100	; 0x64
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	af0e      	add	r7, sp, #56	; 0x38
  HAL_Init();
 80042b6:	f7fe f863 	bl	8002380 <HAL_Init>
  SystemClock_Config();
 80042ba:	f7ff ffb1 	bl	8004220 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042be:	2214      	movs	r2, #20
 80042c0:	2100      	movs	r1, #0
 80042c2:	0038      	movs	r0, r7
 80042c4:	f001 f820 	bl	8005308 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c8:	2004      	movs	r0, #4
 80042ca:	4b97      	ldr	r3, [pc, #604]	; (8004528 <main+0x278>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042cc:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  hi2c1.Init.OwnAddress1 = 0;
 80042d0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d2:	4301      	orrs	r1, r0
 80042d4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80042d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d8:	4002      	ands	r2, r0
 80042da:	9205      	str	r2, [sp, #20]
 80042dc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042e0:	307c      	adds	r0, #124	; 0x7c
 80042e2:	4301      	orrs	r1, r0
 80042e4:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e6:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	4002      	ands	r2, r0
 80042ec:	9206      	str	r2, [sp, #24]
 80042ee:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80042f2:	488e      	ldr	r0, [pc, #568]	; (800452c <main+0x27c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f4:	4332      	orrs	r2, r6
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80042f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fa:	4032      	ands	r2, r6
 80042fc:	9207      	str	r2, [sp, #28]
 80042fe:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	430a      	orrs	r2, r1
 8004304:	62da      	str	r2, [r3, #44]	; 0x2c
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004308:	60be      	str	r6, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800430a:	400b      	ands	r3, r1
 800430c:	9308      	str	r3, [sp, #32]
 800430e:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Pin = B1_Pin;
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	019b      	lsls	r3, r3, #6
 8004314:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004316:	4b86      	ldr	r3, [pc, #536]	; (8004530 <main+0x280>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004318:	0039      	movs	r1, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800431a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800431c:	f7fe f8cc 	bl	80024b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004320:	2200      	movs	r2, #0
 8004322:	2007      	movs	r0, #7
 8004324:	0011      	movs	r1, r2
 8004326:	f7fe f873 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800432a:	2007      	movs	r0, #7
 800432c:	f7fe f8a0 	bl	8002470 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8004330:	4d80      	ldr	r5, [pc, #512]	; (8004534 <main+0x284>)
 8004332:	4b81      	ldr	r3, [pc, #516]	; (8004538 <main+0x288>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004334:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8004336:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8004338:	4b80      	ldr	r3, [pc, #512]	; (800453c <main+0x28c>)
  hi2c1.Init.OwnAddress1 = 0;
 800433a:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x00303D5B;
 800433c:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800433e:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004340:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004342:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004344:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004346:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004348:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800434a:	f7fe fb13 	bl	8002974 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800434e:	0021      	movs	r1, r4
 8004350:	0028      	movs	r0, r5
 8004352:	f7fe fcad 	bl	8002cb0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004356:	0021      	movs	r1, r4
 8004358:	0028      	movs	r0, r5
 800435a:	f7fe fccf 	bl	8002cfc <HAL_I2CEx_ConfigDigitalFilter>
  RTC_TimeTypeDef sTime = {0};
 800435e:	2214      	movs	r2, #20
 8004360:	0021      	movs	r1, r4
 8004362:	a809      	add	r0, sp, #36	; 0x24
 8004364:	f000 ffd0 	bl	8005308 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8004368:	2228      	movs	r2, #40	; 0x28
 800436a:	0021      	movs	r1, r4
 800436c:	0038      	movs	r0, r7
  RTC_DateTypeDef sDate = {0};
 800436e:	9404      	str	r4, [sp, #16]
  RTC_AlarmTypeDef sAlarm = {0};
 8004370:	f000 ffca 	bl	8005308 <memset>
  hrtc.Instance = RTC;
 8004374:	4d72      	ldr	r5, [pc, #456]	; (8004540 <main+0x290>)
 8004376:	4b73      	ldr	r3, [pc, #460]	; (8004544 <main+0x294>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004378:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 800437a:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = 127;
 800437c:	237f      	movs	r3, #127	; 0x7f
 800437e:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 8004380:	3380      	adds	r3, #128	; 0x80
 8004382:	60eb      	str	r3, [r5, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004384:	606c      	str	r4, [r5, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004386:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004388:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800438a:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800438c:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800438e:	f7ff fa4f 	bl	8003830 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8004392:	ab02      	add	r3, sp, #8
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004394:	0032      	movs	r2, r6
 8004396:	a909      	add	r1, sp, #36	; 0x24
 8004398:	0028      	movs	r0, r5
  sTime.Hours = 0x0;
 800439a:	771c      	strb	r4, [r3, #28]
  sTime.Minutes = 0x0;
 800439c:	775c      	strb	r4, [r3, #29]
  sTime.Seconds = 0x0;
 800439e:	779c      	strb	r4, [r3, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043a0:	940c      	str	r4, [sp, #48]	; 0x30
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043a2:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80043a4:	f7ff faac 	bl	8003900 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80043a8:	ab02      	add	r3, sp, #8
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80043aa:	0032      	movs	r2, r6
 80043ac:	a904      	add	r1, sp, #16
 80043ae:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80043b0:	721e      	strb	r6, [r3, #8]
  sDate.Month = RTC_MONTH_JANUARY;
 80043b2:	725e      	strb	r6, [r3, #9]
  sDate.Date = 0x1;
 80043b4:	729e      	strb	r6, [r3, #10]
  sDate.Year = 0x0;
 80043b6:	72dc      	strb	r4, [r3, #11]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80043b8:	f7ff fb20 	bl	80039fc <HAL_RTC_SetDate>
  sAlarm.AlarmDateWeekDay = 0x1;
 80043bc:	2331      	movs	r3, #49	; 0x31
 80043be:	aa02      	add	r2, sp, #8
 80043c0:	189b      	adds	r3, r3, r2
 80043c2:	77de      	strb	r6, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 80043c4:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80043c6:	0032      	movs	r2, r6
 80043c8:	0039      	movs	r1, r7
  sAlarm.Alarm = RTC_ALARM_A;
 80043ca:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80043cc:	0028      	movs	r0, r5
  sAlarm.Alarm = RTC_ALARM_A;
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.Hours = 0x0;
 80043d0:	703c      	strb	r4, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80043d2:	707c      	strb	r4, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80043d4:	70bc      	strb	r4, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80043d6:	607c      	str	r4, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043d8:	60fc      	str	r4, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043da:	613c      	str	r4, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80043dc:	617c      	str	r4, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80043de:	61bc      	str	r4, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80043e0:	61fc      	str	r4, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80043e2:	f7ff fb77 	bl	8003ad4 <HAL_RTC_SetAlarm_IT>
  hspi1.Instance = SPI1;
 80043e6:	4858      	ldr	r0, [pc, #352]	; (8004548 <main+0x298>)
 80043e8:	4b58      	ldr	r3, [pc, #352]	; (800454c <main+0x29c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80043ea:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 80043ec:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80043ee:	2382      	movs	r3, #130	; 0x82
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	6043      	str	r3, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043f4:	33fc      	adds	r3, #252	; 0xfc
 80043f6:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80043f8:	3bfa      	subs	r3, #250	; 0xfa
 80043fa:	3bff      	subs	r3, #255	; 0xff
 80043fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80043fe:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004400:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004402:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004404:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004406:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004408:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800440a:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800440c:	f7ff fc82 	bl	8003d14 <HAL_SPI_Init>
  huart2.Instance = USART2;
 8004410:	484f      	ldr	r0, [pc, #316]	; (8004550 <main+0x2a0>)
 8004412:	4b50      	ldr	r3, [pc, #320]	; (8004554 <main+0x2a4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004414:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 8004416:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004418:	23e1      	movs	r3, #225	; 0xe1
 800441a:	025b      	lsls	r3, r3, #9
 800441c:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800441e:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004420:	60c4      	str	r4, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004422:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004424:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004426:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004428:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800442a:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800442c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800442e:	f7ff fec5 	bl	80041bc <HAL_UART_Init>
  glassLCD_Begin();
 8004432:	f000 fd43 	bl	8004ebc <glassLCD_Begin>
  BMP180_Init();
 8004436:	f000 f9e7 	bl	8004808 <BMP180_Init>
  RTC_SetTime(TIME_HOURS(), TIME_MINUTES(), TIME_SECONDS());
 800443a:	2236      	movs	r2, #54	; 0x36
 800443c:	2139      	movs	r1, #57	; 0x39
 800443e:	2016      	movs	r0, #22
 8004440:	f000 fd46 	bl	8004ed0 <RTC_SetTime>
  glassLCD_WriteData(lcdTest);
 8004444:	4844      	ldr	r0, [pc, #272]	; (8004558 <main+0x2a8>)
 8004446:	f000 fc9f 	bl	8004d88 <glassLCD_WriteData>
  glassLCD_SetDot(0b11111111);
 800444a:	20ff      	movs	r0, #255	; 0xff
 800444c:	f000 fd04 	bl	8004e58 <glassLCD_SetDot>
  glassLCD_WriteArrow(0b11111111);
 8004450:	20ff      	movs	r0, #255	; 0xff
 8004452:	f000 fd07 	bl	8004e64 <glassLCD_WriteArrow>
  glassLCD_Update();
 8004456:	f000 fcaf 	bl	8004db8 <glassLCD_Update>
  HAL_Delay(2000);
 800445a:	20fa      	movs	r0, #250	; 0xfa
 800445c:	00c0      	lsls	r0, r0, #3
 800445e:	f7fd ffb5 	bl	80023cc <HAL_Delay>
	  if (k % 2)
 8004462:	9602      	str	r6, [sp, #8]
	  glassLCD_Clear();
 8004464:	f000 fcea 	bl	8004e3c <glassLCD_Clear>
	  if (k % 2)
 8004468:	9b02      	ldr	r3, [sp, #8]
 800446a:	421c      	tst	r4, r3
 800446c:	d027      	beq.n	80044be <main+0x20e>
		  uint16_t _p = BMP180_ReadPressure();
 800446e:	f000 fb3d 	bl	8004aec <BMP180_ReadPressure>
		  sprintf(text, "%4d%1d", _p / 10, abs(_p % 10));
 8004472:	210a      	movs	r1, #10
		  uint16_t _p = BMP180_ReadPressure();
 8004474:	0006      	movs	r6, r0
		  sprintf(text, "%4d%1d", _p / 10, abs(_p % 10));
 8004476:	f7fb fee9 	bl	800024c <__aeabi_uidivmod>
 800447a:	0030      	movs	r0, r6
 800447c:	b28d      	uxth	r5, r1
 800447e:	210a      	movs	r1, #10
 8004480:	f7fb fe5e 	bl	8000140 <__udivsi3>
 8004484:	002b      	movs	r3, r5
 8004486:	b282      	uxth	r2, r0
 8004488:	4934      	ldr	r1, [pc, #208]	; (800455c <main+0x2ac>)
 800448a:	0038      	movs	r0, r7
 800448c:	f001 fa54 	bl	8005938 <siprintf>
		  glassLCD_SetDot(0b00010000);
 8004490:	2010      	movs	r0, #16
 8004492:	f000 fce1 	bl	8004e58 <glassLCD_SetDot>
		  glassLCD_WriteArrow(0b01000000);
 8004496:	2040      	movs	r0, #64	; 0x40
		  glassLCD_WriteArrow(0b10000000);
 8004498:	f000 fce4 	bl	8004e64 <glassLCD_WriteArrow>
	  glassLCD_WriteData(text);
 800449c:	0038      	movs	r0, r7
 800449e:	f000 fc73 	bl	8004d88 <glassLCD_WriteData>
	  glassLCD_Update();
 80044a2:	f000 fc89 	bl	8004db8 <glassLCD_Update>
	  RTC_SetAlarmEpoch(RTC_GetEpoch() + 60, RTC_ALARMMASK_DATEWEEKDAY);
 80044a6:	f000 fd67 	bl	8004f78 <RTC_GetEpoch>
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	303c      	adds	r0, #60	; 0x3c
 80044ae:	0609      	lsls	r1, r1, #24
	  k++;
 80044b0:	3401      	adds	r4, #1
 80044b2:	b2e4      	uxtb	r4, r4
	  RTC_SetAlarmEpoch(RTC_GetEpoch() + 60, RTC_ALARMMASK_DATEWEEKDAY);
 80044b4:	f000 fd88 	bl	8004fc8 <RTC_SetAlarmEpoch>
	  Sleep_LightSleep();
 80044b8:	f000 fdc2 	bl	8005040 <Sleep_LightSleep>
  {
 80044bc:	e7d2      	b.n	8004464 <main+0x1b4>
		  int16_t _hum = SHT21_ReadHumidity();
 80044be:	f000 fc1b 	bl	8004cf8 <SHT21_ReadHumidity>
 80044c2:	0005      	movs	r5, r0
		  int16_t _t = SHT21_ReadTemperature();
 80044c4:	f000 fc3a 	bl	8004d3c <SHT21_ReadTemperature>
		  sprintf(text, "%2d%01dC %2d%01d", _t / 100, abs(_t / 10 % 10), _hum / 100, abs(_hum / 10 % 10));
 80044c8:	210a      	movs	r1, #10
		  int16_t _t = SHT21_ReadTemperature();
 80044ca:	0006      	movs	r6, r0
		  sprintf(text, "%2d%01dC %2d%01d", _t / 100, abs(_t / 10 % 10), _hum / 100, abs(_hum / 10 % 10));
 80044cc:	f7fb fec2 	bl	8000254 <__divsi3>
 80044d0:	210a      	movs	r1, #10
 80044d2:	b200      	sxth	r0, r0
 80044d4:	f7fb ffa4 	bl	8000420 <__aeabi_idivmod>
 80044d8:	b20b      	sxth	r3, r1
 80044da:	17da      	asrs	r2, r3, #31
 80044dc:	189b      	adds	r3, r3, r2
 80044de:	4053      	eors	r3, r2
 80044e0:	2164      	movs	r1, #100	; 0x64
 80044e2:	0030      	movs	r0, r6
 80044e4:	9303      	str	r3, [sp, #12]
 80044e6:	f7fb feb5 	bl	8000254 <__divsi3>
 80044ea:	210a      	movs	r1, #10
 80044ec:	b206      	sxth	r6, r0
 80044ee:	0028      	movs	r0, r5
 80044f0:	f7fb feb0 	bl	8000254 <__divsi3>
 80044f4:	210a      	movs	r1, #10
 80044f6:	b200      	sxth	r0, r0
 80044f8:	f7fb ff92 	bl	8000420 <__aeabi_idivmod>
 80044fc:	b209      	sxth	r1, r1
 80044fe:	17cb      	asrs	r3, r1, #31
 8004500:	18c9      	adds	r1, r1, r3
 8004502:	4059      	eors	r1, r3
 8004504:	9101      	str	r1, [sp, #4]
 8004506:	0028      	movs	r0, r5
 8004508:	2164      	movs	r1, #100	; 0x64
 800450a:	f7fb fea3 	bl	8000254 <__divsi3>
 800450e:	b200      	sxth	r0, r0
 8004510:	9000      	str	r0, [sp, #0]
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	0032      	movs	r2, r6
 8004516:	4912      	ldr	r1, [pc, #72]	; (8004560 <main+0x2b0>)
 8004518:	0038      	movs	r0, r7
 800451a:	f001 fa0d 	bl	8005938 <siprintf>
		  glassLCD_SetDot(0b01000010);
 800451e:	2042      	movs	r0, #66	; 0x42
 8004520:	f000 fc9a 	bl	8004e58 <glassLCD_SetDot>
		  glassLCD_WriteArrow(0b10000000);
 8004524:	2080      	movs	r0, #128	; 0x80
 8004526:	e7b7      	b.n	8004498 <main+0x1e8>
 8004528:	40021000 	.word	0x40021000
 800452c:	50000800 	.word	0x50000800
 8004530:	10210000 	.word	0x10210000
 8004534:	200002f8 	.word	0x200002f8
 8004538:	40005400 	.word	0x40005400
 800453c:	00303d5b 	.word	0x00303d5b
 8004540:	20000344 	.word	0x20000344
 8004544:	40002800 	.word	0x40002800
 8004548:	20000368 	.word	0x20000368
 800454c:	40013000 	.word	0x40013000
 8004550:	200003c0 	.word	0x200003c0
 8004554:	40004400 	.word	0x40004400
 8004558:	080070c1 	.word	0x080070c1
 800455c:	080070ca 	.word	0x080070ca
 8004560:	080070d1 	.word	0x080070d1

08004564 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004564:	2201      	movs	r2, #1
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_MspInit+0x18>)
 8004568:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800456a:	430a      	orrs	r2, r1
 800456c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004572:	0552      	lsls	r2, r2, #21
 8004574:	430a      	orrs	r2, r1
 8004576:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004578:	4770      	bx	lr
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	40021000 	.word	0x40021000

08004580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004580:	b510      	push	{r4, lr}
 8004582:	0004      	movs	r4, r0
 8004584:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004586:	2214      	movs	r2, #20
 8004588:	2100      	movs	r1, #0
 800458a:	a801      	add	r0, sp, #4
 800458c:	f000 febc 	bl	8005308 <memset>
  if(hi2c->Instance==I2C1)
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <HAL_I2C_MspInit+0x54>)
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d11a      	bne.n	80045ce <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004598:	2102      	movs	r1, #2
 800459a:	4c0f      	ldr	r4, [pc, #60]	; (80045d8 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459c:	480f      	ldr	r0, [pc, #60]	; (80045dc <HAL_I2C_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800459e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80045a0:	430a      	orrs	r2, r1
 80045a2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80045a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045a6:	400b      	ands	r3, r1
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045ac:	23c0      	movs	r3, #192	; 0xc0
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045b2:	2312      	movs	r3, #18
 80045b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b6:	3b0f      	subs	r3, #15
 80045b8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ba:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045bc:	3301      	adds	r3, #1
 80045be:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c0:	f7fd ff7a 	bl	80024b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045c8:	039b      	lsls	r3, r3, #14
 80045ca:	4313      	orrs	r3, r2
 80045cc:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80045ce:	b006      	add	sp, #24
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	40005400 	.word	0x40005400
 80045d8:	40021000 	.word	0x40021000
 80045dc:	50000400 	.word	0x50000400

080045e0 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <HAL_I2C_MspDeInit+0x20>)
 80045e2:	6802      	ldr	r2, [r0, #0]
{
 80045e4:	b510      	push	{r4, lr}
  if(hi2c->Instance==I2C1)
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d109      	bne.n	80045fe <HAL_I2C_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80045ea:	4a06      	ldr	r2, [pc, #24]	; (8004604 <HAL_I2C_MspDeInit+0x24>)
 80045ec:	4906      	ldr	r1, [pc, #24]	; (8004608 <HAL_I2C_MspDeInit+0x28>)
 80045ee:	6b93      	ldr	r3, [r2, #56]	; 0x38
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80045f0:	4806      	ldr	r0, [pc, #24]	; (800460c <HAL_I2C_MspDeInit+0x2c>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 80045f2:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80045f4:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_I2C1_CLK_DISABLE();
 80045f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80045f8:	0089      	lsls	r1, r1, #2
 80045fa:	f7fe f81b 	bl	8002634 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80045fe:	bd10      	pop	{r4, pc}
 8004600:	40005400 	.word	0x40005400
 8004604:	40021000 	.word	0x40021000
 8004608:	ffdfffff 	.word	0xffdfffff
 800460c:	50000400 	.word	0x50000400

08004610 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_RTC_MspInit+0x28>)
 8004612:	6802      	ldr	r2, [r0, #0]
{
 8004614:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8004616:	429a      	cmp	r2, r3
 8004618:	d10d      	bne.n	8004636 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	4a07      	ldr	r2, [pc, #28]	; (800463c <HAL_RTC_MspInit+0x2c>)
 800461e:	02db      	lsls	r3, r3, #11
 8004620:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004622:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8004624:	430b      	orrs	r3, r1
 8004626:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004628:	2200      	movs	r2, #0
 800462a:	0011      	movs	r1, r2
 800462c:	f7fd fef0 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004630:	2002      	movs	r0, #2
 8004632:	f7fd ff1d 	bl	8002470 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004636:	bd10      	pop	{r4, pc}
 8004638:	40002800 	.word	0x40002800
 800463c:	40021000 	.word	0x40021000

08004640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004640:	b510      	push	{r4, lr}
 8004642:	0004      	movs	r4, r0
 8004644:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004646:	2214      	movs	r2, #20
 8004648:	2100      	movs	r1, #0
 800464a:	a801      	add	r0, sp, #4
 800464c:	f000 fe5c 	bl	8005308 <memset>
  if(hspi->Instance==SPI1)
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <HAL_SPI_MspInit+0x50>)
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d118      	bne.n	800468a <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004658:	2280      	movs	r2, #128	; 0x80
 800465a:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <HAL_SPI_MspInit+0x54>)
 800465c:	0152      	lsls	r2, r2, #5
 800465e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004660:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004662:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004664:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004666:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800466a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466c:	430a      	orrs	r2, r1
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	400b      	ands	r3, r1
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004678:	23e0      	movs	r3, #224	; 0xe0
 800467a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	3bde      	subs	r3, #222	; 0xde
 800467e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004680:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004682:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004684:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004686:	f7fd ff17 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800468a:	b006      	add	sp, #24
 800468c:	bd10      	pop	{r4, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	40013000 	.word	0x40013000
 8004694:	40021000 	.word	0x40021000

08004698 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <HAL_SPI_MspDeInit+0x20>)
 800469a:	6802      	ldr	r2, [r0, #0]
{
 800469c:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 800469e:	429a      	cmp	r2, r3
 80046a0:	d109      	bne.n	80046b6 <HAL_SPI_MspDeInit+0x1e>
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80046a2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_DISABLE();
 80046a4:	4a05      	ldr	r2, [pc, #20]	; (80046bc <HAL_SPI_MspDeInit+0x24>)
 80046a6:	4906      	ldr	r1, [pc, #24]	; (80046c0 <HAL_SPI_MspDeInit+0x28>)
 80046a8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80046aa:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_DISABLE();
 80046ac:	400b      	ands	r3, r1
 80046ae:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80046b0:	21e0      	movs	r1, #224	; 0xe0
 80046b2:	f7fd ffbf 	bl	8002634 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80046b6:	bd10      	pop	{r4, pc}
 80046b8:	40013000 	.word	0x40013000
 80046bc:	40021000 	.word	0x40021000
 80046c0:	ffffefff 	.word	0xffffefff

080046c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046c4:	b510      	push	{r4, lr}
 80046c6:	0004      	movs	r4, r0
 80046c8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ca:	2214      	movs	r2, #20
 80046cc:	2100      	movs	r1, #0
 80046ce:	a801      	add	r0, sp, #4
 80046d0:	f000 fe1a 	bl	8005308 <memset>
  if(huart->Instance==USART2)
 80046d4:	4b10      	ldr	r3, [pc, #64]	; (8004718 <HAL_UART_MspInit+0x54>)
 80046d6:	6822      	ldr	r2, [r4, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d11a      	bne.n	8004712 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <HAL_UART_MspInit+0x58>)
 80046e0:	0292      	lsls	r2, r2, #10
 80046e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80046e6:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e8:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ee:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f0:	430a      	orrs	r2, r1
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	400b      	ands	r3, r1
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80046fc:	230c      	movs	r3, #12
 80046fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	3b0a      	subs	r3, #10
 8004702:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004704:	185b      	adds	r3, r3, r1
 8004706:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004708:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800470c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470e:	f7fd fed3 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004712:	b006      	add	sp, #24
 8004714:	bd10      	pop	{r4, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	40004400 	.word	0x40004400
 800471c:	40021000 	.word	0x40021000

08004720 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <HAL_UART_MspDeInit+0x20>)
 8004722:	6802      	ldr	r2, [r0, #0]
{
 8004724:	b510      	push	{r4, lr}
  if(huart->Instance==USART2)
 8004726:	429a      	cmp	r2, r3
 8004728:	d109      	bne.n	800473e <HAL_UART_MspDeInit+0x1e>
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 800472a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 800472c:	4a05      	ldr	r2, [pc, #20]	; (8004744 <HAL_UART_MspDeInit+0x24>)
 800472e:	4906      	ldr	r1, [pc, #24]	; (8004748 <HAL_UART_MspDeInit+0x28>)
 8004730:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8004732:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8004734:	400b      	ands	r3, r1
 8004736:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8004738:	210c      	movs	r1, #12
 800473a:	f7fd ff7b 	bl	8002634 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800473e:	bd10      	pop	{r4, pc}
 8004740:	40004400 	.word	0x40004400
 8004744:	40021000 	.word	0x40021000
 8004748:	fffdffff 	.word	0xfffdffff

0800474c <NMI_Handler>:
 800474c:	4770      	bx	lr

0800474e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800474e:	e7fe      	b.n	800474e <HardFault_Handler>

08004750 <SVC_Handler>:
 8004750:	4770      	bx	lr

08004752 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004752:	4770      	bx	lr

08004754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004754:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004756:	f7fd fe27 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800475a:	bd10      	pop	{r4, pc}

0800475c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800475c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800475e:	4802      	ldr	r0, [pc, #8]	; (8004768 <RTC_IRQHandler+0xc>)
 8004760:	f7ff f800 	bl	8003764 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004764:	bd10      	pop	{r4, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	20000344 	.word	0x20000344

0800476c <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800476c:	2080      	movs	r0, #128	; 0x80
{
 800476e:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004770:	0180      	lsls	r0, r0, #6
 8004772:	f7fd ffd7 	bl	8002724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004776:	bd10      	pop	{r4, pc}

08004778 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <_sbrk+0x2c>)
{
 800477a:	b510      	push	{r4, lr}
	if (heap_end == 0)
 800477c:	6819      	ldr	r1, [r3, #0]
{
 800477e:	0002      	movs	r2, r0
	if (heap_end == 0)
 8004780:	2900      	cmp	r1, #0
 8004782:	d101      	bne.n	8004788 <_sbrk+0x10>
		heap_end = &end;
 8004784:	4908      	ldr	r1, [pc, #32]	; (80047a8 <_sbrk+0x30>)
 8004786:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004788:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800478a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800478c:	1882      	adds	r2, r0, r2
 800478e:	428a      	cmp	r2, r1
 8004790:	d906      	bls.n	80047a0 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004792:	f000 fcab 	bl	80050ec <__errno>
 8004796:	230c      	movs	r3, #12
 8004798:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800479a:	2001      	movs	r0, #1
 800479c:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800479e:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80047a0:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80047a2:	e7fc      	b.n	800479e <_sbrk+0x26>
 80047a4:	20000248 	.word	0x20000248
 80047a8:	20000444 	.word	0x20000444

080047ac <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80047ac:	2280      	movs	r2, #128	; 0x80
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <SystemInit+0x44>)
 80047b0:	0052      	lsls	r2, r2, #1
 80047b2:	6819      	ldr	r1, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	490e      	ldr	r1, [pc, #56]	; (80047f4 <SystemInit+0x48>)
 80047bc:	400a      	ands	r2, r1
 80047be:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	490d      	ldr	r1, [pc, #52]	; (80047f8 <SystemInit+0x4c>)
 80047c4:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80047c6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80047c8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	438a      	bics	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	490a      	ldr	r1, [pc, #40]	; (80047fc <SystemInit+0x50>)
 80047d4:	400a      	ands	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	4909      	ldr	r1, [pc, #36]	; (8004800 <SystemInit+0x54>)
 80047dc:	400a      	ands	r2, r1
 80047de:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80047e0:	2200      	movs	r2, #0
 80047e2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047e4:	2280      	movs	r2, #128	; 0x80
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <SystemInit+0x58>)
 80047e8:	0512      	lsls	r2, r2, #20
 80047ea:	609a      	str	r2, [r3, #8]
#endif
}
 80047ec:	4770      	bx	lr
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	40021000 	.word	0x40021000
 80047f4:	88ff400c 	.word	0x88ff400c
 80047f8:	fef6fff6 	.word	0xfef6fff6
 80047fc:	fffbffff 	.word	0xfffbffff
 8004800:	ff02ffff 	.word	0xff02ffff
 8004804:	e000ed00 	.word	0xe000ed00

08004808 <BMP180_Init>:
static int16_t AC1,AC2,AC3,VB1,VB2,MB,MC,MD;
static uint16_t AC4,AC5,AC6;
static double c5,c6,mc,md,xx0,xx1,xx2,yy0,yy1,yy2,p0,p1,p2;

void BMP180_Init()
{
 8004808:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t _calData[22];
	double c3,c4,b1;

	// Set data pointer to calibration data
	_calData[0] = 0xAA;
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _calData, 1, 1000);
 800480a:	26fa      	movs	r6, #250	; 0xfa
	_calData[0] = 0xAA;
 800480c:	23aa      	movs	r3, #170	; 0xaa
{
 800480e:	b093      	sub	sp, #76	; 0x4c
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _calData, 1, 1000);
 8004810:	4d63      	ldr	r5, [pc, #396]	; (80049a0 <BMP180_Init+0x198>)
	_calData[0] = 0xAA;
 8004812:	ac0c      	add	r4, sp, #48	; 0x30
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _calData, 1, 1000);
 8004814:	00b6      	lsls	r6, r6, #2
	_calData[0] = 0xAA;
 8004816:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _calData, 1, 1000);
 8004818:	0022      	movs	r2, r4
 800481a:	9600      	str	r6, [sp, #0]
 800481c:	3ba9      	subs	r3, #169	; 0xa9
 800481e:	21ee      	movs	r1, #238	; 0xee
 8004820:	0028      	movs	r0, r5
 8004822:	f7fe f917 	bl	8002a54 <HAL_I2C_Master_Transmit>

	// Get all calibration data
	HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR, _calData, 22, 1000);
 8004826:	9600      	str	r6, [sp, #0]
 8004828:	0022      	movs	r2, r4
 800482a:	2316      	movs	r3, #22
 800482c:	21ee      	movs	r1, #238	; 0xee
 800482e:	0028      	movs	r0, r5
 8004830:	f7fe f9a6 	bl	8002b80 <HAL_I2C_Master_Receive>

	AC1 = (_calData[0] << 8) | _calData[1];
 8004834:	7822      	ldrb	r2, [r4, #0]
 8004836:	7863      	ldrb	r3, [r4, #1]
 8004838:	0212      	lsls	r2, r2, #8
 800483a:	4313      	orrs	r3, r2
 800483c:	b21b      	sxth	r3, r3
 800483e:	9303      	str	r3, [sp, #12]
	AC2 = (_calData[2] << 8) | _calData[3];
 8004840:	78a2      	ldrb	r2, [r4, #2]
 8004842:	78e3      	ldrb	r3, [r4, #3]
 8004844:	0212      	lsls	r2, r2, #8
 8004846:	4313      	orrs	r3, r2
 8004848:	b21b      	sxth	r3, r3
 800484a:	9304      	str	r3, [sp, #16]
	AC3 = (_calData[4] << 8) | _calData[5];
	AC4 = (_calData[6] << 8) | _calData[7];
	AC5 = (_calData[8] << 8) | _calData[9];
	AC6 = (_calData[10] << 8) | _calData[11];
 800484c:	7aa7      	ldrb	r7, [r4, #10]
 800484e:	7ae3      	ldrb	r3, [r4, #11]
 8004850:	023f      	lsls	r7, r7, #8
 8004852:	433b      	orrs	r3, r7
 8004854:	9305      	str	r3, [sp, #20]
	VB1 = (_calData[12] << 8) | _calData[13];
	VB2 = (_calData[14] << 8) | _calData[15];
 8004856:	7ba2      	ldrb	r2, [r4, #14]
 8004858:	7be3      	ldrb	r3, [r4, #15]
 800485a:	0212      	lsls	r2, r2, #8
 800485c:	4313      	orrs	r3, r2
 800485e:	b21b      	sxth	r3, r3
 8004860:	9306      	str	r3, [sp, #24]
	MB = (_calData[16] << 8) | _calData[17];
	MC = (_calData[18] << 8) | _calData[19];
 8004862:	7ca3      	ldrb	r3, [r4, #18]
 8004864:	7ce6      	ldrb	r6, [r4, #19]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	431e      	orrs	r6, r3
 800486a:	b233      	sxth	r3, r6
 800486c:	9307      	str	r3, [sp, #28]
	MD = (_calData[20] << 8) | _calData[21];
 800486e:	7d23      	ldrb	r3, [r4, #20]
 8004870:	7d65      	ldrb	r5, [r4, #21]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	431d      	orrs	r5, r3
	AC3 = (_calData[4] << 8) | _calData[5];
 8004876:	7923      	ldrb	r3, [r4, #4]
 8004878:	7960      	ldrb	r0, [r4, #5]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	4318      	orrs	r0, r3

	c3 = 160.0 * pow(2,-15) * AC3;
 800487e:	b200      	sxth	r0, r0
 8004880:	f7fd fb26 	bl	8001ed0 <__aeabi_i2d>
 8004884:	2200      	movs	r2, #0
 8004886:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <BMP180_Init+0x19c>)
 8004888:	f7fc fd58 	bl	800133c <__aeabi_dmul>
 800488c:	9008      	str	r0, [sp, #32]
 800488e:	9109      	str	r1, [sp, #36]	; 0x24
	AC4 = (_calData[6] << 8) | _calData[7];
 8004890:	79a3      	ldrb	r3, [r4, #6]
 8004892:	79e0      	ldrb	r0, [r4, #7]
 8004894:	021b      	lsls	r3, r3, #8
	c4 = pow(10,-3) * pow(2,-15) * AC4;
 8004896:	4318      	orrs	r0, r3
 8004898:	f7fd fb1a 	bl	8001ed0 <__aeabi_i2d>
 800489c:	4a42      	ldr	r2, [pc, #264]	; (80049a8 <BMP180_Init+0x1a0>)
 800489e:	4b43      	ldr	r3, [pc, #268]	; (80049ac <BMP180_Init+0x1a4>)
 80048a0:	f7fc fd4c 	bl	800133c <__aeabi_dmul>
	VB1 = (_calData[12] << 8) | _calData[13];
 80048a4:	7b23      	ldrb	r3, [r4, #12]
	c4 = pow(10,-3) * pow(2,-15) * AC4;
 80048a6:	0006      	movs	r6, r0
	VB1 = (_calData[12] << 8) | _calData[13];
 80048a8:	7b60      	ldrb	r0, [r4, #13]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	4318      	orrs	r0, r3
	b1 = pow(160,2) * pow(2,-30) * VB1;
 80048ae:	b200      	sxth	r0, r0
	c4 = pow(10,-3) * pow(2,-15) * AC4;
 80048b0:	000f      	movs	r7, r1
	b1 = pow(160,2) * pow(2,-30) * VB1;
 80048b2:	f7fd fb0d 	bl	8001ed0 <__aeabi_i2d>
 80048b6:	2200      	movs	r2, #0
 80048b8:	4b3d      	ldr	r3, [pc, #244]	; (80049b0 <BMP180_Init+0x1a8>)
 80048ba:	f7fc fd3f 	bl	800133c <__aeabi_dmul>
 80048be:	900a      	str	r0, [sp, #40]	; 0x28
 80048c0:	910b      	str	r1, [sp, #44]	; 0x2c
	AC5 = (_calData[8] << 8) | _calData[9];
 80048c2:	7a23      	ldrb	r3, [r4, #8]
 80048c4:	7a60      	ldrb	r0, [r4, #9]
 80048c6:	021b      	lsls	r3, r3, #8
	c5 = (pow(2,-15) / 160) * AC5;
 80048c8:	4318      	orrs	r0, r3
 80048ca:	f7fd fb01 	bl	8001ed0 <__aeabi_i2d>
 80048ce:	4a39      	ldr	r2, [pc, #228]	; (80049b4 <BMP180_Init+0x1ac>)
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <BMP180_Init+0x1b0>)
 80048d2:	f7fc fd33 	bl	800133c <__aeabi_dmul>
 80048d6:	4b39      	ldr	r3, [pc, #228]	; (80049bc <BMP180_Init+0x1b4>)
	MD = (_calData[20] << 8) | _calData[21];
 80048d8:	b22d      	sxth	r5, r5
	c5 = (pow(2,-15) / 160) * AC5;
 80048da:	6018      	str	r0, [r3, #0]
 80048dc:	6059      	str	r1, [r3, #4]
	c6 = AC6;
 80048de:	9805      	ldr	r0, [sp, #20]
 80048e0:	f7fd fb38 	bl	8001f54 <__aeabi_ui2d>
 80048e4:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <BMP180_Init+0x1b8>)
 80048e6:	6018      	str	r0, [r3, #0]
 80048e8:	6059      	str	r1, [r3, #4]
	mc = (pow(2,11) / pow(160,2)) * MC;
 80048ea:	9807      	ldr	r0, [sp, #28]
 80048ec:	f7fd faf0 	bl	8001ed0 <__aeabi_i2d>
 80048f0:	4a34      	ldr	r2, [pc, #208]	; (80049c4 <BMP180_Init+0x1bc>)
 80048f2:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <BMP180_Init+0x1c0>)
 80048f4:	f7fc fd22 	bl	800133c <__aeabi_dmul>
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <BMP180_Init+0x1c4>)
 80048fa:	6018      	str	r0, [r3, #0]
 80048fc:	6059      	str	r1, [r3, #4]
	md = MD / 160.0;
 80048fe:	0028      	movs	r0, r5
 8004900:	f7fd fae6 	bl	8001ed0 <__aeabi_i2d>
 8004904:	2200      	movs	r2, #0
 8004906:	4b32      	ldr	r3, [pc, #200]	; (80049d0 <BMP180_Init+0x1c8>)
 8004908:	f7fc f9e4 	bl	8000cd4 <__aeabi_ddiv>
 800490c:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <BMP180_Init+0x1cc>)
 800490e:	6018      	str	r0, [r3, #0]
 8004910:	6059      	str	r1, [r3, #4]
	xx0 = AC1;
 8004912:	9803      	ldr	r0, [sp, #12]
 8004914:	f7fd fadc 	bl	8001ed0 <__aeabi_i2d>
 8004918:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <BMP180_Init+0x1d0>)
 800491a:	6018      	str	r0, [r3, #0]
 800491c:	6059      	str	r1, [r3, #4]
	xx1 = 160.0 * pow(2,-13) * AC2;
 800491e:	9804      	ldr	r0, [sp, #16]
 8004920:	f7fd fad6 	bl	8001ed0 <__aeabi_i2d>
 8004924:	2200      	movs	r2, #0
 8004926:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <BMP180_Init+0x1d4>)
 8004928:	f7fc fd08 	bl	800133c <__aeabi_dmul>
 800492c:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <BMP180_Init+0x1d8>)
 800492e:	6018      	str	r0, [r3, #0]
 8004930:	6059      	str	r1, [r3, #4]
	xx2 = pow(160,2) * pow(2,-25) * VB2;
 8004932:	9806      	ldr	r0, [sp, #24]
 8004934:	f7fd facc 	bl	8001ed0 <__aeabi_i2d>
 8004938:	2200      	movs	r2, #0
 800493a:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <BMP180_Init+0x1dc>)
 800493c:	f7fc fcfe 	bl	800133c <__aeabi_dmul>
 8004940:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <BMP180_Init+0x1e0>)
	yy0 = c4 * pow(2,15);
 8004942:	2200      	movs	r2, #0
	xx2 = pow(160,2) * pow(2,-25) * VB2;
 8004944:	6018      	str	r0, [r3, #0]
 8004946:	6059      	str	r1, [r3, #4]
	yy0 = c4 * pow(2,15);
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <BMP180_Init+0x1e4>)
 800494a:	0030      	movs	r0, r6
 800494c:	0039      	movs	r1, r7
 800494e:	f7fc fcf5 	bl	800133c <__aeabi_dmul>
 8004952:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <BMP180_Init+0x1e8>)
	yy1 = c4 * c3;
 8004954:	0032      	movs	r2, r6
	yy0 = c4 * pow(2,15);
 8004956:	6018      	str	r0, [r3, #0]
 8004958:	6059      	str	r1, [r3, #4]
	yy1 = c4 * c3;
 800495a:	9808      	ldr	r0, [sp, #32]
 800495c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800495e:	003b      	movs	r3, r7
 8004960:	f7fc fcec 	bl	800133c <__aeabi_dmul>
 8004964:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <BMP180_Init+0x1ec>)
 8004966:	6018      	str	r0, [r3, #0]
 8004968:	6059      	str	r1, [r3, #4]
	yy2 = c4 * b1;
 800496a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800496c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800496e:	0030      	movs	r0, r6
 8004970:	0039      	movs	r1, r7
 8004972:	f7fc fce3 	bl	800133c <__aeabi_dmul>
 8004976:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <BMP180_Init+0x1f0>)
 8004978:	6018      	str	r0, [r3, #0]
 800497a:	6059      	str	r1, [r3, #4]
	p0 = (3791.0 - 8.0) / 1600.0;
 800497c:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <BMP180_Init+0x1f4>)
 800497e:	4820      	ldr	r0, [pc, #128]	; (8004a00 <BMP180_Init+0x1f8>)
 8004980:	4920      	ldr	r1, [pc, #128]	; (8004a04 <BMP180_Init+0x1fc>)
 8004982:	6018      	str	r0, [r3, #0]
 8004984:	6059      	str	r1, [r3, #4]
	p1 = 1.0 - 7357.0 * pow(2,-20);
 8004986:	2000      	movs	r0, #0
 8004988:	4b1f      	ldr	r3, [pc, #124]	; (8004a08 <BMP180_Init+0x200>)
 800498a:	4920      	ldr	r1, [pc, #128]	; (8004a0c <BMP180_Init+0x204>)
 800498c:	6018      	str	r0, [r3, #0]
 800498e:	6059      	str	r1, [r3, #4]
	p2 = 3038.0 * 100.0 * pow(2,-36);
 8004990:	2000      	movs	r0, #0
 8004992:	491f      	ldr	r1, [pc, #124]	; (8004a10 <BMP180_Init+0x208>)
 8004994:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <BMP180_Init+0x20c>)
 8004996:	6018      	str	r0, [r3, #0]
 8004998:	6059      	str	r1, [r3, #4]
}
 800499a:	b013      	add	sp, #76	; 0x4c
 800499c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	200002f8 	.word	0x200002f8
 80049a4:	3f740000 	.word	0x3f740000
 80049a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80049ac:	3e60624d 	.word	0x3e60624d
 80049b0:	3ef90000 	.word	0x3ef90000
 80049b4:	9999999a 	.word	0x9999999a
 80049b8:	3e899999 	.word	0x3e899999
 80049bc:	20000250 	.word	0x20000250
 80049c0:	20000258 	.word	0x20000258
 80049c4:	47ae147b 	.word	0x47ae147b
 80049c8:	3fb47ae1 	.word	0x3fb47ae1
 80049cc:	20000260 	.word	0x20000260
 80049d0:	40640000 	.word	0x40640000
 80049d4:	20000268 	.word	0x20000268
 80049d8:	20000288 	.word	0x20000288
 80049dc:	3f940000 	.word	0x3f940000
 80049e0:	20000290 	.word	0x20000290
 80049e4:	3f490000 	.word	0x3f490000
 80049e8:	20000298 	.word	0x20000298
 80049ec:	40e00000 	.word	0x40e00000
 80049f0:	200002a0 	.word	0x200002a0
 80049f4:	200002a8 	.word	0x200002a8
 80049f8:	200002b0 	.word	0x200002b0
 80049fc:	20000270 	.word	0x20000270
 8004a00:	70a3d70a 	.word	0x70a3d70a
 8004a04:	4002ea3d 	.word	0x4002ea3d
 8004a08:	20000278 	.word	0x20000278
 8004a0c:	3fefc686 	.word	0x3fefc686
 8004a10:	3ed28ae0 	.word	0x3ed28ae0
 8004a14:	20000280 	.word	0x20000280

08004a18 <BMP180_ReadTemperatue>:

int16_t BMP180_ReadTemperatue()
{
 8004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char _data[2];
	double tu, a;

	// Send request to read temperature
	_data[0] = BMP180_REG_CONTROL;
 8004a1a:	23f4      	movs	r3, #244	; 0xf4
	_data[1] = BMP180_COMMAND_TEMPERATURE;
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004a1c:	26fa      	movs	r6, #250	; 0xfa
{
 8004a1e:	b085      	sub	sp, #20
	_data[0] = BMP180_REG_CONTROL;
 8004a20:	ac03      	add	r4, sp, #12
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004a22:	4d2b      	ldr	r5, [pc, #172]	; (8004ad0 <BMP180_ReadTemperatue+0xb8>)
	_data[0] = BMP180_REG_CONTROL;
 8004a24:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004a26:	00b6      	lsls	r6, r6, #2
	_data[1] = BMP180_COMMAND_TEMPERATURE;
 8004a28:	3bc6      	subs	r3, #198	; 0xc6
 8004a2a:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004a2c:	0022      	movs	r2, r4
 8004a2e:	9600      	str	r6, [sp, #0]
 8004a30:	3b2c      	subs	r3, #44	; 0x2c
 8004a32:	21ee      	movs	r1, #238	; 0xee
 8004a34:	0028      	movs	r0, r5
 8004a36:	f7fe f80d 	bl	8002a54 <HAL_I2C_Master_Transmit>

	// Wait a little to make temperature measurement
	HAL_Delay(5);
 8004a3a:	2005      	movs	r0, #5
 8004a3c:	f7fd fcc6 	bl	80023cc <HAL_Delay>

	// Get temp data
	_data[0] = BMP180_REG_RESULT;
 8004a40:	23f6      	movs	r3, #246	; 0xf6
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 1, 1000);
 8004a42:	0022      	movs	r2, r4
	_data[0] = BMP180_REG_RESULT;
 8004a44:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 1, 1000);
 8004a46:	21ee      	movs	r1, #238	; 0xee
 8004a48:	9600      	str	r6, [sp, #0]
 8004a4a:	3bf5      	subs	r3, #245	; 0xf5
 8004a4c:	0028      	movs	r0, r5
 8004a4e:	f7fe f801 	bl	8002a54 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004a52:	0022      	movs	r2, r4
 8004a54:	9600      	str	r6, [sp, #0]
 8004a56:	2302      	movs	r3, #2
 8004a58:	21ee      	movs	r1, #238	; 0xee
 8004a5a:	0028      	movs	r0, r5
 8004a5c:	f7fe f890 	bl	8002b80 <HAL_I2C_Master_Receive>

	// Calculate temp with cal. data
	tu = (_data[0] * 256.0) + _data[1];
 8004a60:	7820      	ldrb	r0, [r4, #0]
 8004a62:	f7fd fa35 	bl	8001ed0 <__aeabi_i2d>
 8004a66:	2200      	movs	r2, #0
 8004a68:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <BMP180_ReadTemperatue+0xbc>)
 8004a6a:	f7fc fc67 	bl	800133c <__aeabi_dmul>
 8004a6e:	0006      	movs	r6, r0
 8004a70:	7860      	ldrb	r0, [r4, #1]
 8004a72:	000f      	movs	r7, r1
 8004a74:	f7fd fa2c 	bl	8001ed0 <__aeabi_i2d>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	000b      	movs	r3, r1
 8004a7c:	0030      	movs	r0, r6
 8004a7e:	0039      	movs	r1, r7
 8004a80:	f7fb fe18 	bl	80006b4 <__aeabi_dadd>
	a = c5 * (tu - c6);
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <BMP180_ReadTemperatue+0xc0>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f7fc fed7 	bl	800183c <__aeabi_dsub>
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <BMP180_ReadTemperatue+0xc4>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f7fc fc52 	bl	800133c <__aeabi_dmul>

	return (int16_t)((a + (mc / (a + md))) * 100);
 8004a98:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <BMP180_ReadTemperatue+0xc8>)
	a = c5 * (tu - c6);
 8004a9a:	0004      	movs	r4, r0
	return (int16_t)((a + (mc / (a + md))) * 100);
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
	a = c5 * (tu - c6);
 8004aa0:	000d      	movs	r5, r1
	return (int16_t)((a + (mc / (a + md))) * 100);
 8004aa2:	f7fb fe07 	bl	80006b4 <__aeabi_dadd>
 8004aa6:	000b      	movs	r3, r1
 8004aa8:	490e      	ldr	r1, [pc, #56]	; (8004ae4 <BMP180_ReadTemperatue+0xcc>)
 8004aaa:	0002      	movs	r2, r0
 8004aac:	6808      	ldr	r0, [r1, #0]
 8004aae:	6849      	ldr	r1, [r1, #4]
 8004ab0:	f7fc f910 	bl	8000cd4 <__aeabi_ddiv>
 8004ab4:	0022      	movs	r2, r4
 8004ab6:	002b      	movs	r3, r5
 8004ab8:	f7fb fdfc 	bl	80006b4 <__aeabi_dadd>
 8004abc:	2200      	movs	r2, #0
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <BMP180_ReadTemperatue+0xd0>)
 8004ac0:	f7fc fc3c 	bl	800133c <__aeabi_dmul>
 8004ac4:	f7fd f9d0 	bl	8001e68 <__aeabi_d2iz>
 8004ac8:	b200      	sxth	r0, r0
}
 8004aca:	b005      	add	sp, #20
 8004acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	200002f8 	.word	0x200002f8
 8004ad4:	40700000 	.word	0x40700000
 8004ad8:	20000258 	.word	0x20000258
 8004adc:	20000250 	.word	0x20000250
 8004ae0:	20000268 	.word	0x20000268
 8004ae4:	20000260 	.word	0x20000260
 8004ae8:	40590000 	.word	0x40590000

08004aec <BMP180_ReadPressure>:

uint16_t BMP180_ReadPressure()
{
 8004aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	double T = BMP180_ReadTemperatue() / 100.0;

	// Now send request to read pressure with highest resolution
	_data[0] = BMP180_REG_CONTROL;
	_data[1] = BMP180_COMMAND_PRESSURE3;
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004aee:	26fa      	movs	r6, #250	; 0xfa
{
 8004af0:	b089      	sub	sp, #36	; 0x24
	double T = BMP180_ReadTemperatue() / 100.0;
 8004af2:	f7ff ff91 	bl	8004a18 <BMP180_ReadTemperatue>
	_data[0] = BMP180_REG_CONTROL;
 8004af6:	23f4      	movs	r3, #244	; 0xf4
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004af8:	4d60      	ldr	r5, [pc, #384]	; (8004c7c <BMP180_ReadPressure+0x190>)
	_data[0] = BMP180_REG_CONTROL;
 8004afa:	ac07      	add	r4, sp, #28
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004afc:	00b6      	lsls	r6, r6, #2
	_data[0] = BMP180_REG_CONTROL;
 8004afe:	7023      	strb	r3, [r4, #0]
	_data[1] = BMP180_COMMAND_PRESSURE3;
 8004b00:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004b02:	0022      	movs	r2, r4
	double T = BMP180_ReadTemperatue() / 100.0;
 8004b04:	0007      	movs	r7, r0
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8004b06:	9600      	str	r6, [sp, #0]
 8004b08:	3bf2      	subs	r3, #242	; 0xf2
 8004b0a:	21ee      	movs	r1, #238	; 0xee
 8004b0c:	0028      	movs	r0, r5
 8004b0e:	f7fd ffa1 	bl	8002a54 <HAL_I2C_Master_Transmit>

	// Wait a little to make pressure measurement
	HAL_Delay(26);
 8004b12:	201a      	movs	r0, #26
 8004b14:	f7fd fc5a 	bl	80023cc <HAL_Delay>

	// Get pressure data
	_data[0] = BMP180_REG_RESULT;
 8004b18:	23f6      	movs	r3, #246	; 0xf6
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 1, 1000);
 8004b1a:	0022      	movs	r2, r4
	_data[0] = BMP180_REG_RESULT;
 8004b1c:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 1, 1000);
 8004b1e:	21ee      	movs	r1, #238	; 0xee
 8004b20:	9600      	str	r6, [sp, #0]
 8004b22:	3bf5      	subs	r3, #245	; 0xf5
 8004b24:	0028      	movs	r0, r5
 8004b26:	f7fd ff95 	bl	8002a54 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR, _data, 3, 1000);
 8004b2a:	0022      	movs	r2, r4
 8004b2c:	9600      	str	r6, [sp, #0]
 8004b2e:	2303      	movs	r3, #3
 8004b30:	21ee      	movs	r1, #238	; 0xee
 8004b32:	0028      	movs	r0, r5
 8004b34:	f7fe f824 	bl	8002b80 <HAL_I2C_Master_Receive>
	double T = BMP180_ReadTemperatue() / 100.0;
 8004b38:	0038      	movs	r0, r7
 8004b3a:	f7fd f9c9 	bl	8001ed0 <__aeabi_i2d>
 8004b3e:	2200      	movs	r2, #0
 8004b40:	4b4f      	ldr	r3, [pc, #316]	; (8004c80 <BMP180_ReadPressure+0x194>)
 8004b42:	f7fc f8c7 	bl	8000cd4 <__aeabi_ddiv>

	// Calculate pressure with cal. data
	pu = (_data[0] * 256.0) + _data[1] + (_data[2]/256.0);
	s = T - 25.0;
 8004b46:	2200      	movs	r2, #0
 8004b48:	4b4e      	ldr	r3, [pc, #312]	; (8004c84 <BMP180_ReadPressure+0x198>)
 8004b4a:	f7fc fe77 	bl	800183c <__aeabi_dsub>
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 8004b4e:	0002      	movs	r2, r0
 8004b50:	000b      	movs	r3, r1
	s = T - 25.0;
 8004b52:	9002      	str	r0, [sp, #8]
 8004b54:	9103      	str	r1, [sp, #12]
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 8004b56:	f7fc fbf1 	bl	800133c <__aeabi_dmul>
 8004b5a:	9004      	str	r0, [sp, #16]
 8004b5c:	9105      	str	r1, [sp, #20]
	pu = (_data[0] * 256.0) + _data[1] + (_data[2]/256.0);
 8004b5e:	7820      	ldrb	r0, [r4, #0]
 8004b60:	f7fd f9b6 	bl	8001ed0 <__aeabi_i2d>
 8004b64:	2200      	movs	r2, #0
 8004b66:	4b48      	ldr	r3, [pc, #288]	; (8004c88 <BMP180_ReadPressure+0x19c>)
 8004b68:	f7fc fbe8 	bl	800133c <__aeabi_dmul>
 8004b6c:	0006      	movs	r6, r0
 8004b6e:	7860      	ldrb	r0, [r4, #1]
 8004b70:	000f      	movs	r7, r1
 8004b72:	f7fd f9ad 	bl	8001ed0 <__aeabi_i2d>
 8004b76:	0002      	movs	r2, r0
 8004b78:	000b      	movs	r3, r1
 8004b7a:	0030      	movs	r0, r6
 8004b7c:	0039      	movs	r1, r7
 8004b7e:	f7fb fd99 	bl	80006b4 <__aeabi_dadd>
 8004b82:	0006      	movs	r6, r0
 8004b84:	78a0      	ldrb	r0, [r4, #2]
 8004b86:	000f      	movs	r7, r1
 8004b88:	f7fd f9a2 	bl	8001ed0 <__aeabi_i2d>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <BMP180_ReadPressure+0x1a0>)
 8004b90:	f7fc fbd4 	bl	800133c <__aeabi_dmul>
 8004b94:	0002      	movs	r2, r0
 8004b96:	000b      	movs	r3, r1
 8004b98:	0030      	movs	r0, r6
 8004b9a:	0039      	movs	r1, r7
 8004b9c:	f7fb fd8a 	bl	80006b4 <__aeabi_dadd>
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 8004ba0:	4b3b      	ldr	r3, [pc, #236]	; (8004c90 <BMP180_ReadPressure+0x1a4>)
	pu = (_data[0] * 256.0) + _data[1] + (_data[2]/256.0);
 8004ba2:	0006      	movs	r6, r0
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
	pu = (_data[0] * 256.0) + _data[1] + (_data[2]/256.0);
 8004ba8:	000f      	movs	r7, r1
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 8004baa:	9804      	ldr	r0, [sp, #16]
 8004bac:	9905      	ldr	r1, [sp, #20]
 8004bae:	f7fc fbc5 	bl	800133c <__aeabi_dmul>
 8004bb2:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <BMP180_ReadPressure+0x1a8>)
 8004bb4:	0004      	movs	r4, r0
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	000d      	movs	r5, r1
 8004bbc:	9802      	ldr	r0, [sp, #8]
 8004bbe:	9903      	ldr	r1, [sp, #12]
 8004bc0:	f7fc fbbc 	bl	800133c <__aeabi_dmul>
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	000b      	movs	r3, r1
 8004bc8:	0020      	movs	r0, r4
 8004bca:	0029      	movs	r1, r5
 8004bcc:	f7fb fd72 	bl	80006b4 <__aeabi_dadd>
 8004bd0:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <BMP180_ReadPressure+0x1ac>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f7fb fd6d 	bl	80006b4 <__aeabi_dadd>
 8004bda:	0002      	movs	r2, r0
 8004bdc:	000b      	movs	r3, r1
	y = (yy2 * pow(s,2)) + (yy1 * s) + yy0;
	z = (pu - x) / y;
 8004bde:	0030      	movs	r0, r6
 8004be0:	0039      	movs	r1, r7
 8004be2:	f7fc fe2b 	bl	800183c <__aeabi_dsub>
	y = (yy2 * pow(s,2)) + (yy1 * s) + yy0;
 8004be6:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <BMP180_ReadPressure+0x1b0>)
	z = (pu - x) / y;
 8004be8:	0006      	movs	r6, r0
	y = (yy2 * pow(s,2)) + (yy1 * s) + yy0;
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
	z = (pu - x) / y;
 8004bee:	000f      	movs	r7, r1
	y = (yy2 * pow(s,2)) + (yy1 * s) + yy0;
 8004bf0:	9804      	ldr	r0, [sp, #16]
 8004bf2:	9905      	ldr	r1, [sp, #20]
 8004bf4:	f7fc fba2 	bl	800133c <__aeabi_dmul>
 8004bf8:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <BMP180_ReadPressure+0x1b4>)
 8004bfa:	0004      	movs	r4, r0
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	000d      	movs	r5, r1
 8004c02:	9802      	ldr	r0, [sp, #8]
 8004c04:	9903      	ldr	r1, [sp, #12]
 8004c06:	f7fc fb99 	bl	800133c <__aeabi_dmul>
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	000b      	movs	r3, r1
 8004c0e:	0020      	movs	r0, r4
 8004c10:	0029      	movs	r1, r5
 8004c12:	f7fb fd4f 	bl	80006b4 <__aeabi_dadd>
 8004c16:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <BMP180_ReadPressure+0x1b8>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f7fb fd4a 	bl	80006b4 <__aeabi_dadd>
 8004c20:	0002      	movs	r2, r0
 8004c22:	000b      	movs	r3, r1
	z = (pu - x) / y;
 8004c24:	0030      	movs	r0, r6
 8004c26:	0039      	movs	r1, r7
 8004c28:	f7fc f854 	bl	8000cd4 <__aeabi_ddiv>
	return (uint16_t)(((p2 * pow(z,2)) + (p1 * z) + p0) * 10);
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	000b      	movs	r3, r1
	z = (pu - x) / y;
 8004c30:	0004      	movs	r4, r0
 8004c32:	000d      	movs	r5, r1
	return (uint16_t)(((p2 * pow(z,2)) + (p1 * z) + p0) * 10);
 8004c34:	f7fc fb82 	bl	800133c <__aeabi_dmul>
 8004c38:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <BMP180_ReadPressure+0x1bc>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f7fc fb7d 	bl	800133c <__aeabi_dmul>
 8004c42:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <BMP180_ReadPressure+0x1c0>)
 8004c44:	0006      	movs	r6, r0
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	000f      	movs	r7, r1
 8004c4c:	0020      	movs	r0, r4
 8004c4e:	0029      	movs	r1, r5
 8004c50:	f7fc fb74 	bl	800133c <__aeabi_dmul>
 8004c54:	0002      	movs	r2, r0
 8004c56:	000b      	movs	r3, r1
 8004c58:	0030      	movs	r0, r6
 8004c5a:	0039      	movs	r1, r7
 8004c5c:	f7fb fd2a 	bl	80006b4 <__aeabi_dadd>
 8004c60:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <BMP180_ReadPressure+0x1c4>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f7fb fd25 	bl	80006b4 <__aeabi_dadd>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <BMP180_ReadPressure+0x1c8>)
 8004c6e:	f7fc fb65 	bl	800133c <__aeabi_dmul>
 8004c72:	f7fb fbfb 	bl	800046c <__aeabi_d2uiz>
 8004c76:	b280      	uxth	r0, r0
}
 8004c78:	b009      	add	sp, #36	; 0x24
 8004c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c7c:	200002f8 	.word	0x200002f8
 8004c80:	40590000 	.word	0x40590000
 8004c84:	40390000 	.word	0x40390000
 8004c88:	40700000 	.word	0x40700000
 8004c8c:	3f700000 	.word	0x3f700000
 8004c90:	20000298 	.word	0x20000298
 8004c94:	20000290 	.word	0x20000290
 8004c98:	20000288 	.word	0x20000288
 8004c9c:	200002b0 	.word	0x200002b0
 8004ca0:	200002a8 	.word	0x200002a8
 8004ca4:	200002a0 	.word	0x200002a0
 8004ca8:	20000280 	.word	0x20000280
 8004cac:	20000278 	.word	0x20000278
 8004cb0:	20000270 	.word	0x20000270
 8004cb4:	40240000 	.word	0x40240000

08004cb8 <SHT21_ReadRegister>:
	// Return relative humidity multiplied by ten to avoid using float;
  	return (int16_t)((-46.85 + 175.72/65536 * (float)_t) * 100);
}

uint16_t SHT21_ReadRegister(uint8_t _reg)
{
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	220f      	movs	r2, #15
	uint8_t _data[3];

	// Use No Hold Master Mode - No Clock Streching!
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8004cbc:	26fa      	movs	r6, #250	; 0xfa
{
 8004cbe:	b086      	sub	sp, #24
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8004cc0:	4d0c      	ldr	r5, [pc, #48]	; (8004cf4 <SHT21_ReadRegister+0x3c>)
{
 8004cc2:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8004cc4:	00b6      	lsls	r6, r6, #2
{
 8004cc6:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8004cc8:	2301      	movs	r3, #1
 8004cca:	2180      	movs	r1, #128	; 0x80
 8004ccc:	9600      	str	r6, [sp, #0]
 8004cce:	0028      	movs	r0, r5
 8004cd0:	f7fd fec0 	bl	8002a54 <HAL_I2C_Master_Transmit>

	// Wait for measurment to be completed
	HAL_Delay(100);

	// Read the data
	HAL_I2C_Master_Receive(&hi2c1, SHT21_ADDRESS, _data, 3, 1000);
 8004cd4:	ac05      	add	r4, sp, #20
	HAL_Delay(100);
 8004cd6:	2064      	movs	r0, #100	; 0x64
 8004cd8:	f7fd fb78 	bl	80023cc <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, SHT21_ADDRESS, _data, 3, 1000);
 8004cdc:	9600      	str	r6, [sp, #0]
 8004cde:	2303      	movs	r3, #3
 8004ce0:	0022      	movs	r2, r4
 8004ce2:	2180      	movs	r1, #128	; 0x80
 8004ce4:	0028      	movs	r0, r5
 8004ce6:	f7fd ff4b 	bl	8002b80 <HAL_I2C_Master_Receive>
 8004cea:	8820      	ldrh	r0, [r4, #0]
 8004cec:	ba40      	rev16	r0, r0
 8004cee:	b280      	uxth	r0, r0

	// Pack it!
	return (uint16_t)(_data[0] << 8) | _data[1];
}
 8004cf0:	b006      	add	sp, #24
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	200002f8 	.word	0x200002f8

08004cf8 <SHT21_ReadHumidity>:
int16_t SHT21_ReadHumidity() {
 8004cf8:	b510      	push	{r4, lr}
	uint16_t _rh = SHT21_ReadRegister(SHT21_TRIG_HUM_MEAS_NO_HOLD);
 8004cfa:	20f5      	movs	r0, #245	; 0xf5
 8004cfc:	f7ff ffdc 	bl	8004cb8 <SHT21_ReadRegister>
	_rh &= ~0x0003;
 8004d00:	2303      	movs	r3, #3
 8004d02:	4398      	bics	r0, r3
  	return (int16_t)((-6.0 + 125.0/65536 * (float)_rh) * 100);
 8004d04:	b280      	uxth	r0, r0
 8004d06:	f7fb fc8f 	bl	8000628 <__aeabi_ui2f>
 8004d0a:	f7fd f95b 	bl	8001fc4 <__aeabi_f2d>
 8004d0e:	2200      	movs	r2, #0
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <SHT21_ReadHumidity+0x38>)
 8004d12:	f7fc fb13 	bl	800133c <__aeabi_dmul>
 8004d16:	2200      	movs	r2, #0
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <SHT21_ReadHumidity+0x3c>)
 8004d1a:	f7fc fd8f 	bl	800183c <__aeabi_dsub>
 8004d1e:	2200      	movs	r2, #0
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <SHT21_ReadHumidity+0x40>)
 8004d22:	f7fc fb0b 	bl	800133c <__aeabi_dmul>
 8004d26:	f7fd f89f 	bl	8001e68 <__aeabi_d2iz>
 8004d2a:	b200      	sxth	r0, r0
}
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	3f5f4000 	.word	0x3f5f4000
 8004d34:	40180000 	.word	0x40180000
 8004d38:	40590000 	.word	0x40590000

08004d3c <SHT21_ReadTemperature>:
{
 8004d3c:	b510      	push	{r4, lr}
	uint16_t _t = SHT21_ReadRegister(SHT21_TRIG_TEMP_MEAS_NO_HOLD);
 8004d3e:	20f3      	movs	r0, #243	; 0xf3
 8004d40:	f7ff ffba 	bl	8004cb8 <SHT21_ReadRegister>
	_t &= ~0x0003;
 8004d44:	2303      	movs	r3, #3
 8004d46:	4398      	bics	r0, r3
  	return (int16_t)((-46.85 + 175.72/65536 * (float)_t) * 100);
 8004d48:	b280      	uxth	r0, r0
 8004d4a:	f7fb fc6d 	bl	8000628 <__aeabi_ui2f>
 8004d4e:	f7fd f939 	bl	8001fc4 <__aeabi_f2d>
 8004d52:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <SHT21_ReadTemperature+0x38>)
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <SHT21_ReadTemperature+0x3c>)
 8004d56:	f7fc faf1 	bl	800133c <__aeabi_dmul>
 8004d5a:	4a08      	ldr	r2, [pc, #32]	; (8004d7c <SHT21_ReadTemperature+0x40>)
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <SHT21_ReadTemperature+0x44>)
 8004d5e:	f7fc fd6d 	bl	800183c <__aeabi_dsub>
 8004d62:	2200      	movs	r2, #0
 8004d64:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <SHT21_ReadTemperature+0x48>)
 8004d66:	f7fc fae9 	bl	800133c <__aeabi_dmul>
 8004d6a:	f7fd f87d 	bl	8001e68 <__aeabi_d2iz>
 8004d6e:	b200      	sxth	r0, r0
}
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	3d70a3d7 	.word	0x3d70a3d7
 8004d78:	3f65f70a 	.word	0x3f65f70a
 8004d7c:	cccccccd 	.word	0xcccccccd
 8004d80:	40476ccc 	.word	0x40476ccc
 8004d84:	40590000 	.word	0x40590000

08004d88 <glassLCD_WriteData>:
	glassLCD_Clear();
	glassLCD_Update();
}

void glassLCD_WriteData(char* s)
{
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	0004      	movs	r4, r0
	// Get the size of string
	uint8_t _n = strlen(s);
 8004d8c:	f7fb f9bc 	bl	8000108 <strlen>

	//Convert ASCII to segment data and save it to buffer
	for (int i = 0; i < _n; i++)
 8004d90:	2300      	movs	r3, #0
	{
		_lcdTemp[i] |= asciiToSeg[s[i] - ' '];
 8004d92:	4907      	ldr	r1, [pc, #28]	; (8004db0 <glassLCD_WriteData+0x28>)
 8004d94:	4d07      	ldr	r5, [pc, #28]	; (8004db4 <glassLCD_WriteData+0x2c>)
	for (int i = 0; i < _n; i++)
 8004d96:	b2c0      	uxtb	r0, r0
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	db00      	blt.n	8004d9e <glassLCD_WriteData+0x16>
	}
}
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
		_lcdTemp[i] |= asciiToSeg[s[i] - ' '];
 8004d9e:	5ce2      	ldrb	r2, [r4, r3]
 8004da0:	5c5e      	ldrb	r6, [r3, r1]
 8004da2:	18aa      	adds	r2, r5, r2
 8004da4:	3a20      	subs	r2, #32
 8004da6:	7812      	ldrb	r2, [r2, #0]
 8004da8:	4332      	orrs	r2, r6
 8004daa:	545a      	strb	r2, [r3, r1]
	for (int i = 0; i < _n; i++)
 8004dac:	3301      	adds	r3, #1
 8004dae:	e7f3      	b.n	8004d98 <glassLCD_WriteData+0x10>
 8004db0:	200002b9 	.word	0x200002b9
 8004db4:	08007103 	.word	0x08007103

08004db8 <glassLCD_Update>:

void glassLCD_Update()
{
 8004db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dba:	b087      	sub	sp, #28
	uint8_t _dotMask = 0;

	// Buffer for I2C data
	uint8_t _data[9] = {0};
 8004dbc:	ad03      	add	r5, sp, #12
 8004dbe:	2209      	movs	r2, #9
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	0028      	movs	r0, r5
 8004dc4:	f000 faa0 	bl	8005308 <memset>

	//Write segments
	_data[0] = 0;
	for (int i = 0; i < 8; i++)
 8004dc8:	2300      	movs	r3, #0
	{
		_data[i + 1] = _lcdTemp[i];
 8004dca:	4f19      	ldr	r7, [pc, #100]	; (8004e30 <glassLCD_Update+0x78>)
 8004dcc:	3301      	adds	r3, #1
 8004dce:	1e5a      	subs	r2, r3, #1
 8004dd0:	5cba      	ldrb	r2, [r7, r2]
 8004dd2:	54ea      	strb	r2, [r5, r3]
	for (int i = 0; i < 8; i++)
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d1f9      	bne.n	8004dcc <glassLCD_Update+0x14>
	}
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 9, 1000);
 8004dd8:	23fa      	movs	r3, #250	; 0xfa
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	002a      	movs	r2, r5
 8004de0:	2309      	movs	r3, #9
 8004de2:	2170      	movs	r1, #112	; 0x70
 8004de4:	4813      	ldr	r0, [pc, #76]	; (8004e34 <glassLCD_Update+0x7c>)
 8004de6:	f7fd fe35 	bl	8002a54 <HAL_I2C_Master_Transmit>
 8004dea:	2602      	movs	r6, #2

	//Now write dots
	for (int i = 0; i < 8; i++)
 8004dec:	2400      	movs	r4, #0
	{
		_dotMask = (_dots & (1 << (7 - i))) ? 0b00100000 : 0b00000000;
 8004dee:	2207      	movs	r2, #7
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <glassLCD_Update+0x80>)
 8004df2:	1b12      	subs	r2, r2, r4
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	0021      	movs	r1, r4
 8004df8:	4113      	asrs	r3, r2
 8004dfa:	2201      	movs	r2, #1
	    _data[0] = 2 + (3 * i);
	    _data[1] = ((_lcdTemp[i] & 3) << 6) | _dotMask | (_lcdTemp[i + 1] >> 3);
 8004dfc:	3401      	adds	r4, #1
		_dotMask = (_dots & (1 << (7 - i))) ? 0b00100000 : 0b00000000;
 8004dfe:	4013      	ands	r3, r2
 8004e00:	015a      	lsls	r2, r3, #5
	    _data[1] = ((_lcdTemp[i] & 3) << 6) | _dotMask | (_lcdTemp[i + 1] >> 3);
 8004e02:	5c7b      	ldrb	r3, [r7, r1]
 8004e04:	5d39      	ldrb	r1, [r7, r4]
 8004e06:	019b      	lsls	r3, r3, #6
 8004e08:	08c9      	lsrs	r1, r1, #3
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	706b      	strb	r3, [r5, #1]
	    HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 2, 1000);
 8004e10:	23fa      	movs	r3, #250	; 0xfa
 8004e12:	009b      	lsls	r3, r3, #2
	    _data[0] = 2 + (3 * i);
 8004e14:	702e      	strb	r6, [r5, #0]
	    HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 2, 1000);
 8004e16:	002a      	movs	r2, r5
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	2170      	movs	r1, #112	; 0x70
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	4805      	ldr	r0, [pc, #20]	; (8004e34 <glassLCD_Update+0x7c>)
 8004e20:	3603      	adds	r6, #3
 8004e22:	f7fd fe17 	bl	8002a54 <HAL_I2C_Master_Transmit>
 8004e26:	b2f6      	uxtb	r6, r6
	for (int i = 0; i < 8; i++)
 8004e28:	2c08      	cmp	r4, #8
 8004e2a:	d1e0      	bne.n	8004dee <glassLCD_Update+0x36>
	}
}
 8004e2c:	b007      	add	sp, #28
 8004e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e30:	200002b9 	.word	0x200002b9
 8004e34:	200002f8 	.word	0x200002f8
 8004e38:	200002b8 	.word	0x200002b8

08004e3c <glassLCD_Clear>:

void glassLCD_Clear()
{
 8004e3c:	b510      	push	{r4, lr}
	memset(_lcdTemp, 0, 8);
 8004e3e:	2208      	movs	r2, #8
 8004e40:	2100      	movs	r1, #0
 8004e42:	4803      	ldr	r0, [pc, #12]	; (8004e50 <glassLCD_Clear+0x14>)
 8004e44:	f000 fa60 	bl	8005308 <memset>
	_dots = 0;
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4b02      	ldr	r3, [pc, #8]	; (8004e54 <glassLCD_Clear+0x18>)
 8004e4c:	701a      	strb	r2, [r3, #0]
}
 8004e4e:	bd10      	pop	{r4, pc}
 8004e50:	200002b9 	.word	0x200002b9
 8004e54:	200002b8 	.word	0x200002b8

08004e58 <glassLCD_SetDot>:
//	}
//}

void glassLCD_SetDot(uint8_t _dot)
{
	_dots = _dot;
 8004e58:	4b01      	ldr	r3, [pc, #4]	; (8004e60 <glassLCD_SetDot+0x8>)
 8004e5a:	7018      	strb	r0, [r3, #0]
}
 8004e5c:	4770      	bx	lr
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	200002b8 	.word	0x200002b8

08004e64 <glassLCD_WriteArrow>:

void glassLCD_WriteArrow(uint8_t _a)
{
 8004e64:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i < 8; i++)
 8004e66:	2300      	movs	r3, #0
  {
	  if (_a & 1 << (7 - i))
 8004e68:	2507      	movs	r5, #7
 8004e6a:	2601      	movs	r6, #1
 8004e6c:	2420      	movs	r4, #32
 8004e6e:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <glassLCD_WriteArrow+0x2c>)
 8004e70:	0007      	movs	r7, r0
 8004e72:	1ae9      	subs	r1, r5, r3
 8004e74:	410f      	asrs	r7, r1
 8004e76:	4237      	tst	r7, r6
 8004e78:	d006      	beq.n	8004e88 <glassLCD_WriteArrow+0x24>
  	  {
	  	  _lcdTemp[i] |= SEGW;
 8004e7a:	5cd1      	ldrb	r1, [r2, r3]
 8004e7c:	4321      	orrs	r1, r4
  	  }
  	  else
  	  {
	  	  _lcdTemp[i] &= ~(SEGW);
 8004e7e:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 8; i++)
 8004e80:	3301      	adds	r3, #1
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d1f4      	bne.n	8004e70 <glassLCD_WriteArrow+0xc>
  	  }
  }
}
 8004e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  	  _lcdTemp[i] &= ~(SEGW);
 8004e88:	5cd1      	ldrb	r1, [r2, r3]
 8004e8a:	43a1      	bics	r1, r4
 8004e8c:	e7f7      	b.n	8004e7e <glassLCD_WriteArrow+0x1a>
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	200002b9 	.word	0x200002b9

08004e94 <glassLCD_WriteCmd>:

void glassLCD_WriteCmd(uint8_t _comm)
{
 8004e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	_comm = _comm | 0b10000000;
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	425b      	negs	r3, r3
 8004e9a:	4318      	orrs	r0, r3
{
 8004e9c:	220f      	movs	r2, #15
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 8004e9e:	23fa      	movs	r3, #250	; 0xfa
{
 8004ea0:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 8004ea2:	009b      	lsls	r3, r3, #2
	_comm = _comm | 0b10000000;
 8004ea4:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 8004ea6:	2170      	movs	r1, #112	; 0x70
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	4803      	ldr	r0, [pc, #12]	; (8004eb8 <glassLCD_WriteCmd+0x24>)
 8004eac:	2301      	movs	r3, #1
 8004eae:	f7fd fdd1 	bl	8002a54 <HAL_I2C_Master_Transmit>
}
 8004eb2:	b005      	add	sp, #20
 8004eb4:	bd00      	pop	{pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	200002f8 	.word	0x200002f8

08004ebc <glassLCD_Begin>:
{
 8004ebc:	b510      	push	{r4, lr}
	glassLCD_WriteCmd(LCD_CONFIG);
 8004ebe:	204b      	movs	r0, #75	; 0x4b
 8004ec0:	f7ff ffe8 	bl	8004e94 <glassLCD_WriteCmd>
	glassLCD_Clear();
 8004ec4:	f7ff ffba 	bl	8004e3c <glassLCD_Clear>
	glassLCD_Update();
 8004ec8:	f7ff ff76 	bl	8004db8 <glassLCD_Update>
}
 8004ecc:	bd10      	pop	{r4, pc}
	...

08004ed0 <RTC_SetTime>:
extern RTC_HandleTypeDef hrtc;
static time_t _epoch;
static const time_t* _epochHandler = &_epoch;

void RTC_SetTime(uint8_t _h, uint8_t _m, uint8_t _s)
{
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	0007      	movs	r7, r0
 8004ed4:	000e      	movs	r6, r1
 8004ed6:	0015      	movs	r5, r2
 8004ed8:	b087      	sub	sp, #28
	RTC_TimeTypeDef sTime = {0};
 8004eda:	ac01      	add	r4, sp, #4
 8004edc:	2214      	movs	r2, #20
 8004ede:	2100      	movs	r1, #0
 8004ee0:	0020      	movs	r0, r4
 8004ee2:	f000 fa11 	bl	8005308 <memset>
	sTime.Hours = _h;
	sTime.Minutes = _m;
	sTime.Seconds = _s;
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	0021      	movs	r1, r4
 8004eea:	4804      	ldr	r0, [pc, #16]	; (8004efc <RTC_SetTime+0x2c>)
	sTime.Hours = _h;
 8004eec:	7027      	strb	r7, [r4, #0]
	sTime.Minutes = _m;
 8004eee:	7066      	strb	r6, [r4, #1]
	sTime.Seconds = _s;
 8004ef0:	70a5      	strb	r5, [r4, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004ef2:	f7fe fd05 	bl	8003900 <HAL_RTC_SetTime>
}
 8004ef6:	b007      	add	sp, #28
 8004ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	20000344 	.word	0x20000344

08004f00 <RTC_GetData>:
	struct tm _t = RTC_GetData();
	return mktime(&_t);
}

struct tm RTC_GetData()
{
 8004f00:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct tm _t = {0};
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8004f02:	2500      	movs	r5, #0
{
 8004f04:	0004      	movs	r4, r0
 8004f06:	b08b      	sub	sp, #44	; 0x2c
  RTC_TimeTypeDef sTime = {0};
 8004f08:	ae05      	add	r6, sp, #20
 8004f0a:	2214      	movs	r2, #20
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	0030      	movs	r0, r6
 8004f10:	f000 f9fa 	bl	8005308 <memset>
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004f14:	4f17      	ldr	r7, [pc, #92]	; (8004f74 <RTC_GetData+0x74>)
 8004f16:	002a      	movs	r2, r5
 8004f18:	0031      	movs	r1, r6
 8004f1a:	0038      	movs	r0, r7
  RTC_DateTypeDef sDate = {0};
 8004f1c:	9504      	str	r5, [sp, #16]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004f1e:	f7fe feab 	bl	8003c78 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004f22:	002a      	movs	r2, r5
 8004f24:	a904      	add	r1, sp, #16
 8004f26:	0038      	movs	r0, r7
 8004f28:	f7fe fed0 	bl	8003ccc <HAL_RTC_GetDate>
  _t.tm_sec = sTime.Seconds;;
  _t.tm_min = sTime.Minutes;
  _t.tm_hour = sTime.Hours;
 8004f2c:	7833      	ldrb	r3, [r6, #0]
  _t.tm_min = sTime.Minutes;
 8004f2e:	7877      	ldrb	r7, [r6, #1]
  _t.tm_hour = sTime.Hours;
 8004f30:	9301      	str	r3, [sp, #4]
  _t.tm_mday = sDate.Date;
 8004f32:	ab04      	add	r3, sp, #16
 8004f34:	789b      	ldrb	r3, [r3, #2]
  _t.tm_mon = (sDate.Month - 1);
  _t.tm_year = 100 + (sDate.Year % 100);
 8004f36:	2164      	movs	r1, #100	; 0x64
  _t.tm_mday = sDate.Date;
 8004f38:	9302      	str	r3, [sp, #8]
  _t.tm_mon = (sDate.Month - 1);
 8004f3a:	ab04      	add	r3, sp, #16
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	9303      	str	r3, [sp, #12]
  _t.tm_year = 100 + (sDate.Year % 100);
 8004f42:	ab04      	add	r3, sp, #16
 8004f44:	78d8      	ldrb	r0, [r3, #3]
 8004f46:	f7fb f981 	bl	800024c <__aeabi_uidivmod>
  _t.tm_sec = sTime.Seconds;;
 8004f4a:	78b3      	ldrb	r3, [r6, #2]
  _t.tm_isdst = -1;
  _t.tm_yday = 0;
  _t.tm_wday = 0;
  return _t;
}
 8004f4c:	0020      	movs	r0, r4
  _t.tm_sec = sTime.Seconds;;
 8004f4e:	6023      	str	r3, [r4, #0]
  return _t;
 8004f50:	9b01      	ldr	r3, [sp, #4]
  _t.tm_year = 100 + (sDate.Year % 100);
 8004f52:	b2c9      	uxtb	r1, r1
  return _t;
 8004f54:	60a3      	str	r3, [r4, #8]
 8004f56:	9b02      	ldr	r3, [sp, #8]
  _t.tm_year = 100 + (sDate.Year % 100);
 8004f58:	3164      	adds	r1, #100	; 0x64
  return _t;
 8004f5a:	60e3      	str	r3, [r4, #12]
 8004f5c:	9b03      	ldr	r3, [sp, #12]
 8004f5e:	6067      	str	r7, [r4, #4]
 8004f60:	6123      	str	r3, [r4, #16]
 8004f62:	2301      	movs	r3, #1
 8004f64:	425b      	negs	r3, r3
 8004f66:	6161      	str	r1, [r4, #20]
 8004f68:	61a5      	str	r5, [r4, #24]
 8004f6a:	61e5      	str	r5, [r4, #28]
 8004f6c:	6223      	str	r3, [r4, #32]
}
 8004f6e:	b00b      	add	sp, #44	; 0x2c
 8004f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	20000344 	.word	0x20000344

08004f78 <RTC_GetEpoch>:
{
 8004f78:	b500      	push	{lr}
 8004f7a:	b08b      	sub	sp, #44	; 0x2c
	struct tm _t = RTC_GetData();
 8004f7c:	a801      	add	r0, sp, #4
 8004f7e:	f7ff ffbf 	bl	8004f00 <RTC_GetData>
	return mktime(&_t);
 8004f82:	a801      	add	r0, sp, #4
 8004f84:	f000 fa94 	bl	80054b0 <mktime>
}
 8004f88:	b00b      	add	sp, #44	; 0x2c
 8004f8a:	bd00      	pop	{pc}

08004f8c <RTC_epochToTimeAndDate>:
    _sAlarm.Alarm = RTC_ALARM_A;
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
}

void RTC_epochToTimeAndDate(uint32_t _ep, uint8_t *_sec, uint8_t *_min, uint8_t *_hour, uint8_t *_day, uint8_t *_month, uint8_t *_year)
{
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	001c      	movs	r4, r3
  struct tm *_t;
  _epoch = _ep;
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <RTC_epochToTimeAndDate+0x38>)
{
 8004f92:	0015      	movs	r5, r2
  _epoch = _ep;
 8004f94:	6018      	str	r0, [r3, #0]
  _t = gmtime(_epochHandler);
 8004f96:	0018      	movs	r0, r3
{
 8004f98:	000e      	movs	r6, r1
  _t = gmtime(_epochHandler);
 8004f9a:	f000 f8ad 	bl	80050f8 <gmtime>
  *_sec = _t->tm_sec;
 8004f9e:	7803      	ldrb	r3, [r0, #0]
 8004fa0:	7033      	strb	r3, [r6, #0]
  *_min = _t->tm_min;
 8004fa2:	7903      	ldrb	r3, [r0, #4]
 8004fa4:	702b      	strb	r3, [r5, #0]
  *_hour = _t->tm_hour;
 8004fa6:	7a03      	ldrb	r3, [r0, #8]
 8004fa8:	7023      	strb	r3, [r4, #0]
  *_day = _t->tm_mday;
 8004faa:	7b02      	ldrb	r2, [r0, #12]
 8004fac:	9b04      	ldr	r3, [sp, #16]
 8004fae:	701a      	strb	r2, [r3, #0]
  *_month = (_t->tm_mon) + 1;
 8004fb0:	6903      	ldr	r3, [r0, #16]
 8004fb2:	9a05      	ldr	r2, [sp, #20]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	7013      	strb	r3, [r2, #0]
  *_year = (_t->tm_year) + 1900;
 8004fb8:	6943      	ldr	r3, [r0, #20]
 8004fba:	9a06      	ldr	r2, [sp, #24]
 8004fbc:	336c      	adds	r3, #108	; 0x6c
 8004fbe:	7013      	strb	r3, [r2, #0]
}
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	200002c4 	.word	0x200002c4

08004fc8 <RTC_SetAlarmEpoch>:
{
 8004fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8004fca:	2780      	movs	r7, #128	; 0x80
 8004fcc:	4e1b      	ldr	r6, [pc, #108]	; (800503c <RTC_SetAlarmEpoch+0x74>)
{
 8004fce:	b097      	sub	sp, #92	; 0x5c
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8004fd0:	007f      	lsls	r7, r7, #1
	RTC_AlarmTypeDef _sAlarm = {0};
 8004fd2:	ad0c      	add	r5, sp, #48	; 0x30
{
 8004fd4:	9004      	str	r0, [sp, #16]
 8004fd6:	9105      	str	r1, [sp, #20]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8004fd8:	0030      	movs	r0, r6
 8004fda:	0039      	movs	r1, r7
 8004fdc:	f7fe fb60 	bl	80036a0 <HAL_RTC_DeactivateAlarm>
	RTC_TimeTypeDef _sTime = {0};
 8004fe0:	ac07      	add	r4, sp, #28
	RTC_AlarmTypeDef _sAlarm = {0};
 8004fe2:	2228      	movs	r2, #40	; 0x28
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	0028      	movs	r0, r5
 8004fe8:	f000 f98e 	bl	8005308 <memset>
	RTC_TimeTypeDef _sTime = {0};
 8004fec:	2214      	movs	r2, #20
 8004fee:	2100      	movs	r1, #0
 8004ff0:	0020      	movs	r0, r4
 8004ff2:	f000 f989 	bl	8005308 <memset>
	RTC_epochToTimeAndDate(_alarmEpoch, &_sTime.Seconds, &_sTime.Minutes, &_sTime.Hours, &_sAlarm.AlarmDateWeekDay, &_dummy, &_dummy);
 8004ff6:	2313      	movs	r3, #19
 8004ff8:	aa02      	add	r2, sp, #8
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	2215      	movs	r2, #21
 8004ffe:	a902      	add	r1, sp, #8
 8005000:	1852      	adds	r2, r2, r1
 8005002:	2116      	movs	r1, #22
 8005004:	9302      	str	r3, [sp, #8]
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	a802      	add	r0, sp, #8
 800500a:	ab14      	add	r3, sp, #80	; 0x50
 800500c:	1809      	adds	r1, r1, r0
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	9804      	ldr	r0, [sp, #16]
 8005012:	0023      	movs	r3, r4
 8005014:	f7ff ffba 	bl	8004f8c <RTC_epochToTimeAndDate>
    _sAlarm.AlarmTime = _sTime;
 8005018:	002b      	movs	r3, r5
 800501a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800501c:	c307      	stmia	r3!, {r0, r1, r2}
 800501e:	cc06      	ldmia	r4!, {r1, r2}
 8005020:	c306      	stmia	r3!, {r1, r2}
    _sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005022:	2200      	movs	r2, #0
    _sAlarm.AlarmMask = _mask;
 8005024:	9b05      	ldr	r3, [sp, #20]
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
 8005026:	0029      	movs	r1, r5
 8005028:	0030      	movs	r0, r6
    _sAlarm.AlarmMask = _mask;
 800502a:	616b      	str	r3, [r5, #20]
    _sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800502c:	61aa      	str	r2, [r5, #24]
    _sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800502e:	61ea      	str	r2, [r5, #28]
    _sAlarm.Alarm = RTC_ALARM_A;
 8005030:	626f      	str	r7, [r5, #36]	; 0x24
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
 8005032:	f7fe fd4f 	bl	8003ad4 <HAL_RTC_SetAlarm_IT>
}
 8005036:	b017      	add	sp, #92	; 0x5c
 8005038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	20000344 	.word	0x20000344

08005040 <Sleep_LightSleep>:
#include "sleep.h"

void Sleep_LightSleep()
{
 8005040:	b570      	push	{r4, r5, r6, lr}
	HAL_PWR_DisablePVD();
 8005042:	f7fd fe89 	bl	8002d58 <HAL_PWR_DisablePVD>
	HAL_PWREx_EnableUltraLowPower();
 8005046:	f7fd feab 	bl	8002da0 <HAL_PWREx_EnableUltraLowPower>

	// Disable HAL_Tick (it triggers every 1ms, even from sleep)
	HAL_SuspendTick();
 800504a:	f7fd f9d1 	bl	80023f0 <HAL_SuspendTick>

	// Disable all unused periph. in sleep mode
	HAL_I2C_DeInit(&hi2c1);
 800504e:	4e0f      	ldr	r6, [pc, #60]	; (800508c <Sleep_LightSleep+0x4c>)
 8005050:	0030      	movs	r0, r6
 8005052:	f7fd fce5 	bl	8002a20 <HAL_I2C_DeInit>
	HAL_SPI_DeInit(&hspi1);
 8005056:	4d0e      	ldr	r5, [pc, #56]	; (8005090 <Sleep_LightSleep+0x50>)
 8005058:	0028      	movs	r0, r5
 800505a:	f7fe fe9b 	bl	8003d94 <HAL_SPI_DeInit>
	HAL_UART_DeInit(&huart2);
 800505e:	4c0d      	ldr	r4, [pc, #52]	; (8005094 <Sleep_LightSleep+0x54>)
 8005060:	0020      	movs	r0, r4
 8005062:	f7fe feae 	bl	8003dc2 <HAL_UART_DeInit>

	// Enter "light sleep" mode and wait for Interrupt to wake up (WFI - Wait For Interrupt)
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8005066:	2101      	movs	r1, #1
 8005068:	0008      	movs	r0, r1
 800506a:	f7fd fe7d 	bl	8002d68 <HAL_PWR_EnterSTOPMode>

	// Recover from "light sleep" mode

	// First set up all clock once again
	SystemClock_Config();
 800506e:	f7ff f8d7 	bl	8004220 <SystemClock_Config>

	// Re-activate HAL_Tick
	HAL_ResumeTick();
 8005072:	f7fd f9c5 	bl	8002400 <HAL_ResumeTick>

	// Re-Init all prev. disabled periph.
	HAL_I2C_Init(&hi2c1);
 8005076:	0030      	movs	r0, r6
 8005078:	f7fd fc7c 	bl	8002974 <HAL_I2C_Init>
	HAL_SPI_Init(&hspi1);
 800507c:	0028      	movs	r0, r5
 800507e:	f7fe fe49 	bl	8003d14 <HAL_SPI_Init>
	HAL_UART_Init(&huart2);
 8005082:	0020      	movs	r0, r4
 8005084:	f7ff f89a 	bl	80041bc <HAL_UART_Init>
}
 8005088:	bd70      	pop	{r4, r5, r6, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	200002f8 	.word	0x200002f8
 8005090:	20000368 	.word	0x20000368
 8005094:	200003c0 	.word	0x200003c0

08005098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8005098:	480d      	ldr	r0, [pc, #52]	; (80050d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800509a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800509c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800509e:	e003      	b.n	80050a8 <LoopCopyDataInit>

080050a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80050a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050a6:	3104      	adds	r1, #4

080050a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80050a8:	480b      	ldr	r0, [pc, #44]	; (80050d8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80050aa:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <LoopForever+0xe>)
  adds  r2, r0, r1
 80050ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050b0:	d3f6      	bcc.n	80050a0 <CopyDataInit>
  ldr  r2, =_sbss
 80050b2:	4a0b      	ldr	r2, [pc, #44]	; (80050e0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80050b4:	e002      	b.n	80050bc <LoopFillZerobss>

080050b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80050b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80050b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050ba:	3204      	adds	r2, #4

080050bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <LoopForever+0x16>)
  cmp  r2, r3
 80050be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050c0:	d3f9      	bcc.n	80050b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80050c2:	f7ff fb73 	bl	80047ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050c6:	f000 f8e7 	bl	8005298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050ca:	f7ff f8f1 	bl	80042b0 <main>

080050ce <LoopForever>:

LoopForever:
    b LoopForever
 80050ce:	e7fe      	b.n	80050ce <LoopForever>
  ldr   r0, =_estack
 80050d0:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80050d4:	080073f4 	.word	0x080073f4
  ldr  r0, =_sdata
 80050d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80050dc:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 80050e0:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 80050e4:	20000444 	.word	0x20000444

080050e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050e8:	e7fe      	b.n	80050e8 <ADC1_COMP_IRQHandler>
	...

080050ec <__errno>:
 80050ec:	4b01      	ldr	r3, [pc, #4]	; (80050f4 <__errno+0x8>)
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	4770      	bx	lr
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	20000010 	.word	0x20000010

080050f8 <gmtime>:
 80050f8:	4b07      	ldr	r3, [pc, #28]	; (8005118 <gmtime+0x20>)
 80050fa:	b570      	push	{r4, r5, r6, lr}
 80050fc:	681c      	ldr	r4, [r3, #0]
 80050fe:	0005      	movs	r5, r0
 8005100:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <gmtime+0x16>
 8005106:	2024      	movs	r0, #36	; 0x24
 8005108:	f000 f8ea 	bl	80052e0 <malloc>
 800510c:	63e0      	str	r0, [r4, #60]	; 0x3c
 800510e:	0028      	movs	r0, r5
 8005110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005112:	f000 f803 	bl	800511c <gmtime_r>
 8005116:	bd70      	pop	{r4, r5, r6, pc}
 8005118:	20000010 	.word	0x20000010

0800511c <gmtime_r>:
 800511c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511e:	6805      	ldr	r5, [r0, #0]
 8005120:	b085      	sub	sp, #20
 8005122:	000c      	movs	r4, r1
 8005124:	0028      	movs	r0, r5
 8005126:	4952      	ldr	r1, [pc, #328]	; (8005270 <gmtime_r+0x154>)
 8005128:	f7fb f894 	bl	8000254 <__divsi3>
 800512c:	4950      	ldr	r1, [pc, #320]	; (8005270 <gmtime_r+0x154>)
 800512e:	0006      	movs	r6, r0
 8005130:	0028      	movs	r0, r5
 8005132:	f7fb f975 	bl	8000420 <__aeabi_idivmod>
 8005136:	1e0f      	subs	r7, r1, #0
 8005138:	da00      	bge.n	800513c <gmtime_r+0x20>
 800513a:	e080      	b.n	800523e <gmtime_r+0x122>
 800513c:	4b4d      	ldr	r3, [pc, #308]	; (8005274 <gmtime_r+0x158>)
 800513e:	21e1      	movs	r1, #225	; 0xe1
 8005140:	0038      	movs	r0, r7
 8005142:	0109      	lsls	r1, r1, #4
 8005144:	18f5      	adds	r5, r6, r3
 8005146:	f7fb f885 	bl	8000254 <__divsi3>
 800514a:	21e1      	movs	r1, #225	; 0xe1
 800514c:	60a0      	str	r0, [r4, #8]
 800514e:	0109      	lsls	r1, r1, #4
 8005150:	0038      	movs	r0, r7
 8005152:	f7fb f965 	bl	8000420 <__aeabi_idivmod>
 8005156:	000e      	movs	r6, r1
 8005158:	213c      	movs	r1, #60	; 0x3c
 800515a:	0030      	movs	r0, r6
 800515c:	f7fb f87a 	bl	8000254 <__divsi3>
 8005160:	213c      	movs	r1, #60	; 0x3c
 8005162:	6060      	str	r0, [r4, #4]
 8005164:	0030      	movs	r0, r6
 8005166:	f7fb f95b 	bl	8000420 <__aeabi_idivmod>
 800516a:	1ce8      	adds	r0, r5, #3
 800516c:	6021      	str	r1, [r4, #0]
 800516e:	2107      	movs	r1, #7
 8005170:	f7fb f956 	bl	8000420 <__aeabi_idivmod>
 8005174:	0028      	movs	r0, r5
 8005176:	61a1      	str	r1, [r4, #24]
 8005178:	493f      	ldr	r1, [pc, #252]	; (8005278 <gmtime_r+0x15c>)
 800517a:	f7fb f86b 	bl	8000254 <__divsi3>
 800517e:	4e3f      	ldr	r6, [pc, #252]	; (800527c <gmtime_r+0x160>)
 8005180:	493f      	ldr	r1, [pc, #252]	; (8005280 <gmtime_r+0x164>)
 8005182:	4346      	muls	r6, r0
 8005184:	1976      	adds	r6, r6, r5
 8005186:	0007      	movs	r7, r0
 8005188:	0030      	movs	r0, r6
 800518a:	f7fa ffd9 	bl	8000140 <__udivsi3>
 800518e:	493d      	ldr	r1, [pc, #244]	; (8005284 <gmtime_r+0x168>)
 8005190:	1985      	adds	r5, r0, r6
 8005192:	0030      	movs	r0, r6
 8005194:	f7fa ffd4 	bl	8000140 <__udivsi3>
 8005198:	493b      	ldr	r1, [pc, #236]	; (8005288 <gmtime_r+0x16c>)
 800519a:	1a2d      	subs	r5, r5, r0
 800519c:	0030      	movs	r0, r6
 800519e:	f7fa ffcf 	bl	8000140 <__udivsi3>
 80051a2:	216e      	movs	r1, #110	; 0x6e
 80051a4:	1a2d      	subs	r5, r5, r0
 80051a6:	31ff      	adds	r1, #255	; 0xff
 80051a8:	0028      	movs	r0, r5
 80051aa:	f7fa ffc9 	bl	8000140 <__udivsi3>
 80051ae:	4937      	ldr	r1, [pc, #220]	; (800528c <gmtime_r+0x170>)
 80051b0:	9001      	str	r0, [sp, #4]
 80051b2:	0028      	movs	r0, r5
 80051b4:	f7fa ffc4 	bl	8000140 <__udivsi3>
 80051b8:	4932      	ldr	r1, [pc, #200]	; (8005284 <gmtime_r+0x168>)
 80051ba:	1986      	adds	r6, r0, r6
 80051bc:	0028      	movs	r0, r5
 80051be:	f7fa ffbf 	bl	8000140 <__udivsi3>
 80051c2:	216e      	movs	r1, #110	; 0x6e
 80051c4:	9b01      	ldr	r3, [sp, #4]
 80051c6:	31ff      	adds	r1, #255	; 0xff
 80051c8:	4359      	muls	r1, r3
 80051ca:	1a36      	subs	r6, r6, r0
 80051cc:	1a73      	subs	r3, r6, r1
 80051ce:	0018      	movs	r0, r3
 80051d0:	2605      	movs	r6, #5
 80051d2:	4370      	muls	r0, r6
 80051d4:	2199      	movs	r1, #153	; 0x99
 80051d6:	3002      	adds	r0, #2
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	f7fa ffb1 	bl	8000140 <__udivsi3>
 80051de:	0005      	movs	r5, r0
 80051e0:	2099      	movs	r0, #153	; 0x99
 80051e2:	4368      	muls	r0, r5
 80051e4:	9b02      	ldr	r3, [sp, #8]
 80051e6:	3002      	adds	r0, #2
 80051e8:	3301      	adds	r3, #1
 80051ea:	0031      	movs	r1, r6
 80051ec:	9303      	str	r3, [sp, #12]
 80051ee:	f7fa ffa7 	bl	8000140 <__udivsi3>
 80051f2:	9b03      	ldr	r3, [sp, #12]
 80051f4:	1a1b      	subs	r3, r3, r0
 80051f6:	9303      	str	r3, [sp, #12]
 80051f8:	2302      	movs	r3, #2
 80051fa:	2d09      	cmp	r5, #9
 80051fc:	d900      	bls.n	8005200 <gmtime_r+0xe4>
 80051fe:	3b0c      	subs	r3, #12
 8005200:	195d      	adds	r5, r3, r5
 8005202:	23c8      	movs	r3, #200	; 0xc8
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	435f      	muls	r7, r3
 8005208:	9b01      	ldr	r3, [sp, #4]
 800520a:	2601      	movs	r6, #1
 800520c:	18ff      	adds	r7, r7, r3
 800520e:	2300      	movs	r3, #0
 8005210:	42ae      	cmp	r6, r5
 8005212:	415b      	adcs	r3, r3
 8005214:	18ff      	adds	r7, r7, r3
 8005216:	2332      	movs	r3, #50	; 0x32
 8005218:	9a02      	ldr	r2, [sp, #8]
 800521a:	33ff      	adds	r3, #255	; 0xff
 800521c:	429a      	cmp	r2, r3
 800521e:	d912      	bls.n	8005246 <gmtime_r+0x12a>
 8005220:	0016      	movs	r6, r2
 8005222:	3e33      	subs	r6, #51	; 0x33
 8005224:	3eff      	subs	r6, #255	; 0xff
 8005226:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <gmtime_r+0x174>)
 8005228:	0020      	movs	r0, r4
 800522a:	18ff      	adds	r7, r7, r3
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	61e6      	str	r6, [r4, #28]
 8005230:	60e3      	str	r3, [r4, #12]
 8005232:	2300      	movs	r3, #0
 8005234:	6167      	str	r7, [r4, #20]
 8005236:	6125      	str	r5, [r4, #16]
 8005238:	6223      	str	r3, [r4, #32]
 800523a:	b005      	add	sp, #20
 800523c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <gmtime_r+0x154>)
 8005240:	18cf      	adds	r7, r1, r3
 8005242:	4b14      	ldr	r3, [pc, #80]	; (8005294 <gmtime_r+0x178>)
 8005244:	e77b      	b.n	800513e <gmtime_r+0x22>
 8005246:	9b01      	ldr	r3, [sp, #4]
 8005248:	079b      	lsls	r3, r3, #30
 800524a:	d105      	bne.n	8005258 <gmtime_r+0x13c>
 800524c:	2164      	movs	r1, #100	; 0x64
 800524e:	9801      	ldr	r0, [sp, #4]
 8005250:	f7fa fffc 	bl	800024c <__aeabi_uidivmod>
 8005254:	2900      	cmp	r1, #0
 8005256:	d106      	bne.n	8005266 <gmtime_r+0x14a>
 8005258:	21c8      	movs	r1, #200	; 0xc8
 800525a:	9801      	ldr	r0, [sp, #4]
 800525c:	0049      	lsls	r1, r1, #1
 800525e:	f7fa fff5 	bl	800024c <__aeabi_uidivmod>
 8005262:	424e      	negs	r6, r1
 8005264:	414e      	adcs	r6, r1
 8005266:	9802      	ldr	r0, [sp, #8]
 8005268:	303b      	adds	r0, #59	; 0x3b
 800526a:	1986      	adds	r6, r0, r6
 800526c:	e7db      	b.n	8005226 <gmtime_r+0x10a>
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	00015180 	.word	0x00015180
 8005274:	000afa6c 	.word	0x000afa6c
 8005278:	00023ab1 	.word	0x00023ab1
 800527c:	fffdc54f 	.word	0xfffdc54f
 8005280:	00008eac 	.word	0x00008eac
 8005284:	000005b4 	.word	0x000005b4
 8005288:	00023ab0 	.word	0x00023ab0
 800528c:	00008e94 	.word	0x00008e94
 8005290:	fffff894 	.word	0xfffff894
 8005294:	000afa6b 	.word	0x000afa6b

08005298 <__libc_init_array>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	2600      	movs	r6, #0
 800529c:	4d0c      	ldr	r5, [pc, #48]	; (80052d0 <__libc_init_array+0x38>)
 800529e:	4c0d      	ldr	r4, [pc, #52]	; (80052d4 <__libc_init_array+0x3c>)
 80052a0:	1b64      	subs	r4, r4, r5
 80052a2:	10a4      	asrs	r4, r4, #2
 80052a4:	42a6      	cmp	r6, r4
 80052a6:	d109      	bne.n	80052bc <__libc_init_array+0x24>
 80052a8:	2600      	movs	r6, #0
 80052aa:	f001 feaf 	bl	800700c <_init>
 80052ae:	4d0a      	ldr	r5, [pc, #40]	; (80052d8 <__libc_init_array+0x40>)
 80052b0:	4c0a      	ldr	r4, [pc, #40]	; (80052dc <__libc_init_array+0x44>)
 80052b2:	1b64      	subs	r4, r4, r5
 80052b4:	10a4      	asrs	r4, r4, #2
 80052b6:	42a6      	cmp	r6, r4
 80052b8:	d105      	bne.n	80052c6 <__libc_init_array+0x2e>
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	00b3      	lsls	r3, r6, #2
 80052be:	58eb      	ldr	r3, [r5, r3]
 80052c0:	4798      	blx	r3
 80052c2:	3601      	adds	r6, #1
 80052c4:	e7ee      	b.n	80052a4 <__libc_init_array+0xc>
 80052c6:	00b3      	lsls	r3, r6, #2
 80052c8:	58eb      	ldr	r3, [r5, r3]
 80052ca:	4798      	blx	r3
 80052cc:	3601      	adds	r6, #1
 80052ce:	e7f2      	b.n	80052b6 <__libc_init_array+0x1e>
 80052d0:	080073ec 	.word	0x080073ec
 80052d4:	080073ec 	.word	0x080073ec
 80052d8:	080073ec 	.word	0x080073ec
 80052dc:	080073f0 	.word	0x080073f0

080052e0 <malloc>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <malloc+0x10>)
 80052e4:	0001      	movs	r1, r0
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	f000 fab6 	bl	8005858 <_malloc_r>
 80052ec:	bd10      	pop	{r4, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	20000010 	.word	0x20000010

080052f4 <free>:
 80052f4:	b510      	push	{r4, lr}
 80052f6:	4b03      	ldr	r3, [pc, #12]	; (8005304 <free+0x10>)
 80052f8:	0001      	movs	r1, r0
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	f000 fa62 	bl	80057c4 <_free_r>
 8005300:	bd10      	pop	{r4, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	20000010 	.word	0x20000010

08005308 <memset>:
 8005308:	0003      	movs	r3, r0
 800530a:	1882      	adds	r2, r0, r2
 800530c:	4293      	cmp	r3, r2
 800530e:	d100      	bne.n	8005312 <memset+0xa>
 8005310:	4770      	bx	lr
 8005312:	7019      	strb	r1, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	e7f9      	b.n	800530c <memset+0x4>

08005318 <validate_structure>:
 8005318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800531a:	6801      	ldr	r1, [r0, #0]
 800531c:	0004      	movs	r4, r0
 800531e:	293b      	cmp	r1, #59	; 0x3b
 8005320:	d90b      	bls.n	800533a <validate_structure+0x22>
 8005322:	223c      	movs	r2, #60	; 0x3c
 8005324:	4668      	mov	r0, sp
 8005326:	f000 fd5f 	bl	8005de8 <div>
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	9900      	ldr	r1, [sp, #0]
 800532e:	9a01      	ldr	r2, [sp, #4]
 8005330:	185b      	adds	r3, r3, r1
 8005332:	6063      	str	r3, [r4, #4]
 8005334:	2a00      	cmp	r2, #0
 8005336:	db6c      	blt.n	8005412 <validate_structure+0xfa>
 8005338:	6022      	str	r2, [r4, #0]
 800533a:	6861      	ldr	r1, [r4, #4]
 800533c:	293b      	cmp	r1, #59	; 0x3b
 800533e:	d90b      	bls.n	8005358 <validate_structure+0x40>
 8005340:	223c      	movs	r2, #60	; 0x3c
 8005342:	4668      	mov	r0, sp
 8005344:	f000 fd50 	bl	8005de8 <div>
 8005348:	68a3      	ldr	r3, [r4, #8]
 800534a:	9900      	ldr	r1, [sp, #0]
 800534c:	9a01      	ldr	r2, [sp, #4]
 800534e:	185b      	adds	r3, r3, r1
 8005350:	60a3      	str	r3, [r4, #8]
 8005352:	2a00      	cmp	r2, #0
 8005354:	db62      	blt.n	800541c <validate_structure+0x104>
 8005356:	6062      	str	r2, [r4, #4]
 8005358:	68a1      	ldr	r1, [r4, #8]
 800535a:	2917      	cmp	r1, #23
 800535c:	d90b      	bls.n	8005376 <validate_structure+0x5e>
 800535e:	2218      	movs	r2, #24
 8005360:	4668      	mov	r0, sp
 8005362:	f000 fd41 	bl	8005de8 <div>
 8005366:	68e3      	ldr	r3, [r4, #12]
 8005368:	9900      	ldr	r1, [sp, #0]
 800536a:	9a01      	ldr	r2, [sp, #4]
 800536c:	185b      	adds	r3, r3, r1
 800536e:	60e3      	str	r3, [r4, #12]
 8005370:	2a00      	cmp	r2, #0
 8005372:	db58      	blt.n	8005426 <validate_structure+0x10e>
 8005374:	60a2      	str	r2, [r4, #8]
 8005376:	6921      	ldr	r1, [r4, #16]
 8005378:	290b      	cmp	r1, #11
 800537a:	d90b      	bls.n	8005394 <validate_structure+0x7c>
 800537c:	220c      	movs	r2, #12
 800537e:	4668      	mov	r0, sp
 8005380:	f000 fd32 	bl	8005de8 <div>
 8005384:	6963      	ldr	r3, [r4, #20]
 8005386:	9900      	ldr	r1, [sp, #0]
 8005388:	9a01      	ldr	r2, [sp, #4]
 800538a:	185b      	adds	r3, r3, r1
 800538c:	6163      	str	r3, [r4, #20]
 800538e:	2a00      	cmp	r2, #0
 8005390:	db4e      	blt.n	8005430 <validate_structure+0x118>
 8005392:	6122      	str	r2, [r4, #16]
 8005394:	6965      	ldr	r5, [r4, #20]
 8005396:	231c      	movs	r3, #28
 8005398:	07aa      	lsls	r2, r5, #30
 800539a:	d10f      	bne.n	80053bc <validate_structure+0xa4>
 800539c:	2164      	movs	r1, #100	; 0x64
 800539e:	0028      	movs	r0, r5
 80053a0:	f7fb f83e 	bl	8000420 <__aeabi_idivmod>
 80053a4:	231d      	movs	r3, #29
 80053a6:	2900      	cmp	r1, #0
 80053a8:	d108      	bne.n	80053bc <validate_structure+0xa4>
 80053aa:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <validate_structure+0x188>)
 80053ac:	3191      	adds	r1, #145	; 0x91
 80053ae:	18e8      	adds	r0, r5, r3
 80053b0:	31ff      	adds	r1, #255	; 0xff
 80053b2:	f7fb f835 	bl	8000420 <__aeabi_idivmod>
 80053b6:	424b      	negs	r3, r1
 80053b8:	414b      	adcs	r3, r1
 80053ba:	331c      	adds	r3, #28
 80053bc:	68e2      	ldr	r2, [r4, #12]
 80053be:	2a00      	cmp	r2, #0
 80053c0:	dd3b      	ble.n	800543a <validate_structure+0x122>
 80053c2:	2602      	movs	r6, #2
 80053c4:	4f37      	ldr	r7, [pc, #220]	; (80054a4 <validate_structure+0x18c>)
 80053c6:	6921      	ldr	r1, [r4, #16]
 80053c8:	68e2      	ldr	r2, [r4, #12]
 80053ca:	2901      	cmp	r1, #1
 80053cc:	d061      	beq.n	8005492 <validate_structure+0x17a>
 80053ce:	0088      	lsls	r0, r1, #2
 80053d0:	59c0      	ldr	r0, [r0, r7]
 80053d2:	4282      	cmp	r2, r0
 80053d4:	dd35      	ble.n	8005442 <validate_structure+0x12a>
 80053d6:	1a12      	subs	r2, r2, r0
 80053d8:	3101      	adds	r1, #1
 80053da:	60e2      	str	r2, [r4, #12]
 80053dc:	6121      	str	r1, [r4, #16]
 80053de:	290c      	cmp	r1, #12
 80053e0:	d1f1      	bne.n	80053c6 <validate_structure+0xae>
 80053e2:	2300      	movs	r3, #0
 80053e4:	6965      	ldr	r5, [r4, #20]
 80053e6:	6123      	str	r3, [r4, #16]
 80053e8:	1c68      	adds	r0, r5, #1
 80053ea:	6160      	str	r0, [r4, #20]
 80053ec:	331c      	adds	r3, #28
 80053ee:	0782      	lsls	r2, r0, #30
 80053f0:	d1e9      	bne.n	80053c6 <validate_structure+0xae>
 80053f2:	3158      	adds	r1, #88	; 0x58
 80053f4:	f7fb f814 	bl	8000420 <__aeabi_idivmod>
 80053f8:	231d      	movs	r3, #29
 80053fa:	2900      	cmp	r1, #0
 80053fc:	d1e3      	bne.n	80053c6 <validate_structure+0xae>
 80053fe:	4b2a      	ldr	r3, [pc, #168]	; (80054a8 <validate_structure+0x190>)
 8005400:	3191      	adds	r1, #145	; 0x91
 8005402:	18e8      	adds	r0, r5, r3
 8005404:	31ff      	adds	r1, #255	; 0xff
 8005406:	f7fb f80b 	bl	8000420 <__aeabi_idivmod>
 800540a:	424b      	negs	r3, r1
 800540c:	414b      	adcs	r3, r1
 800540e:	331c      	adds	r3, #28
 8005410:	e7d9      	b.n	80053c6 <validate_structure+0xae>
 8005412:	323c      	adds	r2, #60	; 0x3c
 8005414:	3b01      	subs	r3, #1
 8005416:	6022      	str	r2, [r4, #0]
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	e78e      	b.n	800533a <validate_structure+0x22>
 800541c:	323c      	adds	r2, #60	; 0x3c
 800541e:	3b01      	subs	r3, #1
 8005420:	6062      	str	r2, [r4, #4]
 8005422:	60a3      	str	r3, [r4, #8]
 8005424:	e798      	b.n	8005358 <validate_structure+0x40>
 8005426:	3218      	adds	r2, #24
 8005428:	3b01      	subs	r3, #1
 800542a:	60a2      	str	r2, [r4, #8]
 800542c:	60e3      	str	r3, [r4, #12]
 800542e:	e7a2      	b.n	8005376 <validate_structure+0x5e>
 8005430:	320c      	adds	r2, #12
 8005432:	3b01      	subs	r3, #1
 8005434:	6122      	str	r2, [r4, #16]
 8005436:	6163      	str	r3, [r4, #20]
 8005438:	e7ac      	b.n	8005394 <validate_structure+0x7c>
 800543a:	271d      	movs	r7, #29
 800543c:	68e6      	ldr	r6, [r4, #12]
 800543e:	2e00      	cmp	r6, #0
 8005440:	dd00      	ble.n	8005444 <validate_structure+0x12c>
 8005442:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005444:	6922      	ldr	r2, [r4, #16]
 8005446:	3a01      	subs	r2, #1
 8005448:	6122      	str	r2, [r4, #16]
 800544a:	3201      	adds	r2, #1
 800544c:	d117      	bne.n	800547e <validate_structure+0x166>
 800544e:	230b      	movs	r3, #11
 8005450:	2203      	movs	r2, #3
 8005452:	6965      	ldr	r5, [r4, #20]
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	1e68      	subs	r0, r5, #1
 8005458:	6160      	str	r0, [r4, #20]
 800545a:	3311      	adds	r3, #17
 800545c:	4210      	tst	r0, r2
 800545e:	d10e      	bne.n	800547e <validate_structure+0x166>
 8005460:	2164      	movs	r1, #100	; 0x64
 8005462:	f7fa ffdd 	bl	8000420 <__aeabi_idivmod>
 8005466:	003b      	movs	r3, r7
 8005468:	2900      	cmp	r1, #0
 800546a:	d108      	bne.n	800547e <validate_structure+0x166>
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <validate_structure+0x194>)
 800546e:	3191      	adds	r1, #145	; 0x91
 8005470:	18e8      	adds	r0, r5, r3
 8005472:	31ff      	adds	r1, #255	; 0xff
 8005474:	f7fa ffd4 	bl	8000420 <__aeabi_idivmod>
 8005478:	424b      	negs	r3, r1
 800547a:	414b      	adcs	r3, r1
 800547c:	331c      	adds	r3, #28
 800547e:	6921      	ldr	r1, [r4, #16]
 8005480:	001a      	movs	r2, r3
 8005482:	2901      	cmp	r1, #1
 8005484:	d002      	beq.n	800548c <validate_structure+0x174>
 8005486:	4a07      	ldr	r2, [pc, #28]	; (80054a4 <validate_structure+0x18c>)
 8005488:	0089      	lsls	r1, r1, #2
 800548a:	588a      	ldr	r2, [r1, r2]
 800548c:	1996      	adds	r6, r2, r6
 800548e:	60e6      	str	r6, [r4, #12]
 8005490:	e7d4      	b.n	800543c <validate_structure+0x124>
 8005492:	4293      	cmp	r3, r2
 8005494:	dad5      	bge.n	8005442 <validate_structure+0x12a>
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	60e2      	str	r2, [r4, #12]
 800549a:	6126      	str	r6, [r4, #16]
 800549c:	e793      	b.n	80053c6 <validate_structure+0xae>
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	0000076c 	.word	0x0000076c
 80054a4:	0800712c 	.word	0x0800712c
 80054a8:	0000076d 	.word	0x0000076d
 80054ac:	0000076b 	.word	0x0000076b

080054b0 <mktime>:
 80054b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b2:	b087      	sub	sp, #28
 80054b4:	0004      	movs	r4, r0
 80054b6:	f000 fcf5 	bl	8005ea4 <__gettzinfo>
 80054ba:	9004      	str	r0, [sp, #16]
 80054bc:	0020      	movs	r0, r4
 80054be:	f7ff ff2b 	bl	8005318 <validate_structure>
 80054c2:	233c      	movs	r3, #60	; 0x3c
 80054c4:	6862      	ldr	r2, [r4, #4]
 80054c6:	68a1      	ldr	r1, [r4, #8]
 80054c8:	4353      	muls	r3, r2
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	6965      	ldr	r5, [r4, #20]
 80054ce:	189b      	adds	r3, r3, r2
 80054d0:	22e1      	movs	r2, #225	; 0xe1
 80054d2:	0112      	lsls	r2, r2, #4
 80054d4:	434a      	muls	r2, r1
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	68e2      	ldr	r2, [r4, #12]
 80054da:	9303      	str	r3, [sp, #12]
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	1e50      	subs	r0, r2, #1
 80054e0:	4ab1      	ldr	r2, [pc, #708]	; (80057a8 <mktime+0x2f8>)
 80054e2:	0099      	lsls	r1, r3, #2
 80054e4:	588a      	ldr	r2, [r1, r2]
 80054e6:	1882      	adds	r2, r0, r2
 80054e8:	9201      	str	r2, [sp, #4]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	dd12      	ble.n	8005514 <mktime+0x64>
 80054ee:	07ab      	lsls	r3, r5, #30
 80054f0:	d110      	bne.n	8005514 <mktime+0x64>
 80054f2:	2164      	movs	r1, #100	; 0x64
 80054f4:	0028      	movs	r0, r5
 80054f6:	f7fa ff93 	bl	8000420 <__aeabi_idivmod>
 80054fa:	2900      	cmp	r1, #0
 80054fc:	d107      	bne.n	800550e <mktime+0x5e>
 80054fe:	4bab      	ldr	r3, [pc, #684]	; (80057ac <mktime+0x2fc>)
 8005500:	3191      	adds	r1, #145	; 0x91
 8005502:	31ff      	adds	r1, #255	; 0xff
 8005504:	18e8      	adds	r0, r5, r3
 8005506:	f7fa ff8b 	bl	8000420 <__aeabi_idivmod>
 800550a:	2900      	cmp	r1, #0
 800550c:	d102      	bne.n	8005514 <mktime+0x64>
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	3301      	adds	r3, #1
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	9b01      	ldr	r3, [sp, #4]
 8005516:	4aa6      	ldr	r2, [pc, #664]	; (80057b0 <mktime+0x300>)
 8005518:	61e3      	str	r3, [r4, #28]
 800551a:	4ba6      	ldr	r3, [pc, #664]	; (80057b4 <mktime+0x304>)
 800551c:	18eb      	adds	r3, r5, r3
 800551e:	4293      	cmp	r3, r2
 8005520:	d900      	bls.n	8005524 <mktime+0x74>
 8005522:	e0f8      	b.n	8005716 <mktime+0x266>
 8005524:	2346      	movs	r3, #70	; 0x46
 8005526:	9302      	str	r3, [sp, #8]
 8005528:	2d46      	cmp	r5, #70	; 0x46
 800552a:	dc00      	bgt.n	800552e <mktime+0x7e>
 800552c:	e072      	b.n	8005614 <mktime+0x164>
 800552e:	27b7      	movs	r7, #183	; 0xb7
 8005530:	26c8      	movs	r6, #200	; 0xc8
 8005532:	007f      	lsls	r7, r7, #1
 8005534:	0076      	lsls	r6, r6, #1
 8005536:	2203      	movs	r2, #3
 8005538:	9b02      	ldr	r3, [sp, #8]
 800553a:	4213      	tst	r3, r2
 800553c:	d168      	bne.n	8005610 <mktime+0x160>
 800553e:	0018      	movs	r0, r3
 8005540:	2164      	movs	r1, #100	; 0x64
 8005542:	f7fa ff6d 	bl	8000420 <__aeabi_idivmod>
 8005546:	003b      	movs	r3, r7
 8005548:	2900      	cmp	r1, #0
 800554a:	d109      	bne.n	8005560 <mktime+0xb0>
 800554c:	9b02      	ldr	r3, [sp, #8]
 800554e:	4a97      	ldr	r2, [pc, #604]	; (80057ac <mktime+0x2fc>)
 8005550:	0031      	movs	r1, r6
 8005552:	1898      	adds	r0, r3, r2
 8005554:	f7fa ff64 	bl	8000420 <__aeabi_idivmod>
 8005558:	424b      	negs	r3, r1
 800555a:	414b      	adcs	r3, r1
 800555c:	336e      	adds	r3, #110	; 0x6e
 800555e:	33ff      	adds	r3, #255	; 0xff
 8005560:	9a01      	ldr	r2, [sp, #4]
 8005562:	18d3      	adds	r3, r2, r3
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	9b02      	ldr	r3, [sp, #8]
 8005568:	3301      	adds	r3, #1
 800556a:	9302      	str	r3, [sp, #8]
 800556c:	429d      	cmp	r5, r3
 800556e:	d1e2      	bne.n	8005536 <mktime+0x86>
 8005570:	9a01      	ldr	r2, [sp, #4]
 8005572:	4b91      	ldr	r3, [pc, #580]	; (80057b8 <mktime+0x308>)
 8005574:	4353      	muls	r3, r2
 8005576:	9a03      	ldr	r2, [sp, #12]
 8005578:	189b      	adds	r3, r3, r2
 800557a:	9303      	str	r3, [sp, #12]
 800557c:	f000 faac 	bl	8005ad8 <__tz_lock>
 8005580:	f000 faac 	bl	8005adc <_tzset_unlocked>
 8005584:	4b8d      	ldr	r3, [pc, #564]	; (80057bc <mktime+0x30c>)
 8005586:	681d      	ldr	r5, [r3, #0]
 8005588:	2d00      	cmp	r5, #0
 800558a:	d100      	bne.n	800558e <mktime+0xde>
 800558c:	e107      	b.n	800579e <mktime+0x2ee>
 800558e:	6963      	ldr	r3, [r4, #20]
 8005590:	4a86      	ldr	r2, [pc, #536]	; (80057ac <mktime+0x2fc>)
 8005592:	6a26      	ldr	r6, [r4, #32]
 8005594:	1898      	adds	r0, r3, r2
 8005596:	2e00      	cmp	r6, #0
 8005598:	dd00      	ble.n	800559c <mktime+0xec>
 800559a:	2601      	movs	r6, #1
 800559c:	9b04      	ldr	r3, [sp, #16]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	9305      	str	r3, [sp, #20]
 80055a2:	4298      	cmp	r0, r3
 80055a4:	d000      	beq.n	80055a8 <mktime+0xf8>
 80055a6:	e073      	b.n	8005690 <mktime+0x1e0>
 80055a8:	9b04      	ldr	r3, [sp, #16]
 80055aa:	9d03      	ldr	r5, [sp, #12]
 80055ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	9305      	str	r3, [sp, #20]
 80055b2:	1a1a      	subs	r2, r3, r0
 80055b4:	9b04      	ldr	r3, [sp, #16]
 80055b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	1acf      	subs	r7, r1, r3
 80055bc:	42bd      	cmp	r5, r7
 80055be:	db00      	blt.n	80055c2 <mktime+0x112>
 80055c0:	e06d      	b.n	800569e <mktime+0x1ee>
 80055c2:	9904      	ldr	r1, [sp, #16]
 80055c4:	6809      	ldr	r1, [r1, #0]
 80055c6:	2900      	cmp	r1, #0
 80055c8:	d100      	bne.n	80055cc <mktime+0x11c>
 80055ca:	e06d      	b.n	80056a8 <mktime+0x1f8>
 80055cc:	9903      	ldr	r1, [sp, #12]
 80055ce:	4291      	cmp	r1, r2
 80055d0:	da00      	bge.n	80055d4 <mktime+0x124>
 80055d2:	e0e1      	b.n	8005798 <mktime+0x2e8>
 80055d4:	2501      	movs	r5, #1
 80055d6:	42b9      	cmp	r1, r7
 80055d8:	db00      	blt.n	80055dc <mktime+0x12c>
 80055da:	2500      	movs	r5, #0
 80055dc:	2e00      	cmp	r6, #0
 80055de:	db00      	blt.n	80055e2 <mktime+0x132>
 80055e0:	e0a0      	b.n	8005724 <mktime+0x274>
 80055e2:	2d01      	cmp	r5, #1
 80055e4:	d000      	beq.n	80055e8 <mktime+0x138>
 80055e6:	e0da      	b.n	800579e <mktime+0x2ee>
 80055e8:	2501      	movs	r5, #1
 80055ea:	9b04      	ldr	r3, [sp, #16]
 80055ec:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	199e      	adds	r6, r3, r6
 80055f2:	f000 fa72 	bl	8005ada <__tz_unlock>
 80055f6:	9801      	ldr	r0, [sp, #4]
 80055f8:	6225      	str	r5, [r4, #32]
 80055fa:	3004      	adds	r0, #4
 80055fc:	2107      	movs	r1, #7
 80055fe:	f7fa ff0f 	bl	8000420 <__aeabi_idivmod>
 8005602:	2900      	cmp	r1, #0
 8005604:	da00      	bge.n	8005608 <mktime+0x158>
 8005606:	e084      	b.n	8005712 <mktime+0x262>
 8005608:	61a1      	str	r1, [r4, #24]
 800560a:	0030      	movs	r0, r6
 800560c:	b007      	add	sp, #28
 800560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005610:	236e      	movs	r3, #110	; 0x6e
 8005612:	e7a4      	b.n	800555e <mktime+0xae>
 8005614:	429d      	cmp	r5, r3
 8005616:	d0ab      	beq.n	8005570 <mktime+0xc0>
 8005618:	2645      	movs	r6, #69	; 0x45
 800561a:	2703      	movs	r7, #3
 800561c:	42ae      	cmp	r6, r5
 800561e:	dc17      	bgt.n	8005650 <mktime+0x1a0>
 8005620:	423d      	tst	r5, r7
 8005622:	d130      	bne.n	8005686 <mktime+0x1d6>
 8005624:	2164      	movs	r1, #100	; 0x64
 8005626:	0028      	movs	r0, r5
 8005628:	f7fa fefa 	bl	8000420 <__aeabi_idivmod>
 800562c:	2900      	cmp	r1, #0
 800562e:	d12c      	bne.n	800568a <mktime+0x1da>
 8005630:	4b5e      	ldr	r3, [pc, #376]	; (80057ac <mktime+0x2fc>)
 8005632:	3191      	adds	r1, #145	; 0x91
 8005634:	18e8      	adds	r0, r5, r3
 8005636:	31ff      	adds	r1, #255	; 0xff
 8005638:	f7fa fef2 	bl	8000420 <__aeabi_idivmod>
 800563c:	000b      	movs	r3, r1
 800563e:	4259      	negs	r1, r3
 8005640:	4159      	adcs	r1, r3
 8005642:	316e      	adds	r1, #110	; 0x6e
 8005644:	31ff      	adds	r1, #255	; 0xff
 8005646:	9b01      	ldr	r3, [sp, #4]
 8005648:	9502      	str	r5, [sp, #8]
 800564a:	1a5b      	subs	r3, r3, r1
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	e78f      	b.n	8005570 <mktime+0xc0>
 8005650:	423e      	tst	r6, r7
 8005652:	d116      	bne.n	8005682 <mktime+0x1d2>
 8005654:	2164      	movs	r1, #100	; 0x64
 8005656:	0030      	movs	r0, r6
 8005658:	f7fa fee2 	bl	8000420 <__aeabi_idivmod>
 800565c:	23b7      	movs	r3, #183	; 0xb7
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	2900      	cmp	r1, #0
 8005662:	d109      	bne.n	8005678 <mktime+0x1c8>
 8005664:	4b51      	ldr	r3, [pc, #324]	; (80057ac <mktime+0x2fc>)
 8005666:	3191      	adds	r1, #145	; 0x91
 8005668:	18f0      	adds	r0, r6, r3
 800566a:	31ff      	adds	r1, #255	; 0xff
 800566c:	f7fa fed8 	bl	8000420 <__aeabi_idivmod>
 8005670:	424b      	negs	r3, r1
 8005672:	414b      	adcs	r3, r1
 8005674:	336e      	adds	r3, #110	; 0x6e
 8005676:	33ff      	adds	r3, #255	; 0xff
 8005678:	9a01      	ldr	r2, [sp, #4]
 800567a:	3e01      	subs	r6, #1
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	e7cc      	b.n	800561c <mktime+0x16c>
 8005682:	236e      	movs	r3, #110	; 0x6e
 8005684:	e7f7      	b.n	8005676 <mktime+0x1c6>
 8005686:	216e      	movs	r1, #110	; 0x6e
 8005688:	e7dc      	b.n	8005644 <mktime+0x194>
 800568a:	21b7      	movs	r1, #183	; 0xb7
 800568c:	0049      	lsls	r1, r1, #1
 800568e:	e7da      	b.n	8005646 <mktime+0x196>
 8005690:	f000 f974 	bl	800597c <__tzcalc_limits>
 8005694:	2800      	cmp	r0, #0
 8005696:	d000      	beq.n	800569a <mktime+0x1ea>
 8005698:	e786      	b.n	80055a8 <mktime+0xf8>
 800569a:	0035      	movs	r5, r6
 800569c:	e7a1      	b.n	80055e2 <mktime+0x132>
 800569e:	9d03      	ldr	r5, [sp, #12]
 80056a0:	1a09      	subs	r1, r1, r0
 80056a2:	428d      	cmp	r5, r1
 80056a4:	dbf9      	blt.n	800569a <mktime+0x1ea>
 80056a6:	e78c      	b.n	80055c2 <mktime+0x112>
 80056a8:	9d03      	ldr	r5, [sp, #12]
 80056aa:	4295      	cmp	r5, r2
 80056ac:	da36      	bge.n	800571c <mktime+0x26c>
 80056ae:	9a03      	ldr	r2, [sp, #12]
 80056b0:	2501      	movs	r5, #1
 80056b2:	42ba      	cmp	r2, r7
 80056b4:	da00      	bge.n	80056b8 <mktime+0x208>
 80056b6:	e791      	b.n	80055dc <mktime+0x12c>
 80056b8:	000d      	movs	r5, r1
 80056ba:	e78f      	b.n	80055dc <mktime+0x12c>
 80056bc:	2701      	movs	r7, #1
 80056be:	427f      	negs	r7, r7
 80056c0:	e04b      	b.n	800575a <mktime+0x2aa>
 80056c2:	21b6      	movs	r1, #182	; 0xb6
 80056c4:	0049      	lsls	r1, r1, #1
 80056c6:	61e1      	str	r1, [r4, #28]
 80056c8:	e78b      	b.n	80055e2 <mktime+0x132>
 80056ca:	216e      	movs	r1, #110	; 0x6e
 80056cc:	e062      	b.n	8005794 <mktime+0x2e4>
 80056ce:	9a02      	ldr	r2, [sp, #8]
 80056d0:	421a      	tst	r2, r3
 80056d2:	d117      	bne.n	8005704 <mktime+0x254>
 80056d4:	2164      	movs	r1, #100	; 0x64
 80056d6:	0010      	movs	r0, r2
 80056d8:	f7fa fea2 	bl	8000420 <__aeabi_idivmod>
 80056dc:	2900      	cmp	r1, #0
 80056de:	d113      	bne.n	8005708 <mktime+0x258>
 80056e0:	4a32      	ldr	r2, [pc, #200]	; (80057ac <mktime+0x2fc>)
 80056e2:	9b02      	ldr	r3, [sp, #8]
 80056e4:	4694      	mov	ip, r2
 80056e6:	3191      	adds	r1, #145	; 0x91
 80056e8:	4463      	add	r3, ip
 80056ea:	0018      	movs	r0, r3
 80056ec:	31ff      	adds	r1, #255	; 0xff
 80056ee:	f7fa fe97 	bl	8000420 <__aeabi_idivmod>
 80056f2:	000b      	movs	r3, r1
 80056f4:	4259      	negs	r1, r3
 80056f6:	4159      	adcs	r1, r3
 80056f8:	316e      	adds	r1, #110	; 0x6e
 80056fa:	31ff      	adds	r1, #255	; 0xff
 80056fc:	42b9      	cmp	r1, r7
 80056fe:	dd06      	ble.n	800570e <mktime+0x25e>
 8005700:	61e7      	str	r7, [r4, #28]
 8005702:	e76e      	b.n	80055e2 <mktime+0x132>
 8005704:	216e      	movs	r1, #110	; 0x6e
 8005706:	e7f8      	b.n	80056fa <mktime+0x24a>
 8005708:	21b7      	movs	r1, #183	; 0xb7
 800570a:	0049      	lsls	r1, r1, #1
 800570c:	e7f6      	b.n	80056fc <mktime+0x24c>
 800570e:	1a7f      	subs	r7, r7, r1
 8005710:	e7f6      	b.n	8005700 <mktime+0x250>
 8005712:	3107      	adds	r1, #7
 8005714:	e778      	b.n	8005608 <mktime+0x158>
 8005716:	2601      	movs	r6, #1
 8005718:	4276      	negs	r6, r6
 800571a:	e776      	b.n	800560a <mktime+0x15a>
 800571c:	2501      	movs	r5, #1
 800571e:	2e00      	cmp	r6, #0
 8005720:	da00      	bge.n	8005724 <mktime+0x274>
 8005722:	e761      	b.n	80055e8 <mktime+0x138>
 8005724:	406e      	eors	r6, r5
 8005726:	2e01      	cmp	r6, #1
 8005728:	d000      	beq.n	800572c <mktime+0x27c>
 800572a:	e75a      	b.n	80055e2 <mktime+0x132>
 800572c:	1a1b      	subs	r3, r3, r0
 800572e:	2d00      	cmp	r5, #0
 8005730:	d100      	bne.n	8005734 <mktime+0x284>
 8005732:	425b      	negs	r3, r3
 8005734:	6822      	ldr	r2, [r4, #0]
 8005736:	0020      	movs	r0, r4
 8005738:	18d2      	adds	r2, r2, r3
 800573a:	6022      	str	r2, [r4, #0]
 800573c:	9a03      	ldr	r2, [sp, #12]
 800573e:	68e7      	ldr	r7, [r4, #12]
 8005740:	18d3      	adds	r3, r2, r3
 8005742:	9303      	str	r3, [sp, #12]
 8005744:	f7ff fde8 	bl	8005318 <validate_structure>
 8005748:	68e3      	ldr	r3, [r4, #12]
 800574a:	1bdf      	subs	r7, r3, r7
 800574c:	d100      	bne.n	8005750 <mktime+0x2a0>
 800574e:	e748      	b.n	80055e2 <mktime+0x132>
 8005750:	2f01      	cmp	r7, #1
 8005752:	dcb3      	bgt.n	80056bc <mktime+0x20c>
 8005754:	1c7b      	adds	r3, r7, #1
 8005756:	da00      	bge.n	800575a <mktime+0x2aa>
 8005758:	0037      	movs	r7, r6
 800575a:	9b01      	ldr	r3, [sp, #4]
 800575c:	69e2      	ldr	r2, [r4, #28]
 800575e:	19db      	adds	r3, r3, r7
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	2303      	movs	r3, #3
 8005764:	18bf      	adds	r7, r7, r2
 8005766:	d5b2      	bpl.n	80056ce <mktime+0x21e>
 8005768:	9a02      	ldr	r2, [sp, #8]
 800576a:	1e50      	subs	r0, r2, #1
 800576c:	4218      	tst	r0, r3
 800576e:	d1a8      	bne.n	80056c2 <mktime+0x212>
 8005770:	2164      	movs	r1, #100	; 0x64
 8005772:	f7fa fe55 	bl	8000420 <__aeabi_idivmod>
 8005776:	2900      	cmp	r1, #0
 8005778:	d1a7      	bne.n	80056ca <mktime+0x21a>
 800577a:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <mktime+0x310>)
 800577c:	9b02      	ldr	r3, [sp, #8]
 800577e:	4694      	mov	ip, r2
 8005780:	3191      	adds	r1, #145	; 0x91
 8005782:	4463      	add	r3, ip
 8005784:	0018      	movs	r0, r3
 8005786:	31ff      	adds	r1, #255	; 0xff
 8005788:	f7fa fe4a 	bl	8000420 <__aeabi_idivmod>
 800578c:	000b      	movs	r3, r1
 800578e:	4259      	negs	r1, r3
 8005790:	4159      	adcs	r1, r3
 8005792:	316d      	adds	r1, #109	; 0x6d
 8005794:	31ff      	adds	r1, #255	; 0xff
 8005796:	e796      	b.n	80056c6 <mktime+0x216>
 8005798:	2500      	movs	r5, #0
 800579a:	2e00      	cmp	r6, #0
 800579c:	dac2      	bge.n	8005724 <mktime+0x274>
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	6a1e      	ldr	r6, [r3, #32]
 80057a2:	9b03      	ldr	r3, [sp, #12]
 80057a4:	199e      	adds	r6, r3, r6
 80057a6:	e724      	b.n	80055f2 <mktime+0x142>
 80057a8:	0800715c 	.word	0x0800715c
 80057ac:	0000076c 	.word	0x0000076c
 80057b0:	00004e20 	.word	0x00004e20
 80057b4:	00002710 	.word	0x00002710
 80057b8:	00015180 	.word	0x00015180
 80057bc:	200002ec 	.word	0x200002ec
 80057c0:	0000076b 	.word	0x0000076b

080057c4 <_free_r>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	0005      	movs	r5, r0
 80057c8:	2900      	cmp	r1, #0
 80057ca:	d010      	beq.n	80057ee <_free_r+0x2a>
 80057cc:	1f0c      	subs	r4, r1, #4
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	da00      	bge.n	80057d6 <_free_r+0x12>
 80057d4:	18e4      	adds	r4, r4, r3
 80057d6:	0028      	movs	r0, r5
 80057d8:	f000 fb68 	bl	8005eac <__malloc_lock>
 80057dc:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <_free_r+0x90>)
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d105      	bne.n	80057f0 <_free_r+0x2c>
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	6014      	str	r4, [r2, #0]
 80057e8:	0028      	movs	r0, r5
 80057ea:	f000 fb60 	bl	8005eae <__malloc_unlock>
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	42a3      	cmp	r3, r4
 80057f2:	d909      	bls.n	8005808 <_free_r+0x44>
 80057f4:	6821      	ldr	r1, [r4, #0]
 80057f6:	1860      	adds	r0, r4, r1
 80057f8:	4283      	cmp	r3, r0
 80057fa:	d1f3      	bne.n	80057e4 <_free_r+0x20>
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	1841      	adds	r1, r0, r1
 8005802:	6021      	str	r1, [r4, #0]
 8005804:	e7ee      	b.n	80057e4 <_free_r+0x20>
 8005806:	0013      	movs	r3, r2
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	2a00      	cmp	r2, #0
 800580c:	d001      	beq.n	8005812 <_free_r+0x4e>
 800580e:	42a2      	cmp	r2, r4
 8005810:	d9f9      	bls.n	8005806 <_free_r+0x42>
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	1858      	adds	r0, r3, r1
 8005816:	42a0      	cmp	r0, r4
 8005818:	d10b      	bne.n	8005832 <_free_r+0x6e>
 800581a:	6820      	ldr	r0, [r4, #0]
 800581c:	1809      	adds	r1, r1, r0
 800581e:	1858      	adds	r0, r3, r1
 8005820:	6019      	str	r1, [r3, #0]
 8005822:	4282      	cmp	r2, r0
 8005824:	d1e0      	bne.n	80057e8 <_free_r+0x24>
 8005826:	6810      	ldr	r0, [r2, #0]
 8005828:	6852      	ldr	r2, [r2, #4]
 800582a:	1841      	adds	r1, r0, r1
 800582c:	6019      	str	r1, [r3, #0]
 800582e:	605a      	str	r2, [r3, #4]
 8005830:	e7da      	b.n	80057e8 <_free_r+0x24>
 8005832:	42a0      	cmp	r0, r4
 8005834:	d902      	bls.n	800583c <_free_r+0x78>
 8005836:	230c      	movs	r3, #12
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	e7d5      	b.n	80057e8 <_free_r+0x24>
 800583c:	6821      	ldr	r1, [r4, #0]
 800583e:	1860      	adds	r0, r4, r1
 8005840:	4282      	cmp	r2, r0
 8005842:	d103      	bne.n	800584c <_free_r+0x88>
 8005844:	6810      	ldr	r0, [r2, #0]
 8005846:	6852      	ldr	r2, [r2, #4]
 8005848:	1841      	adds	r1, r0, r1
 800584a:	6021      	str	r1, [r4, #0]
 800584c:	6062      	str	r2, [r4, #4]
 800584e:	605c      	str	r4, [r3, #4]
 8005850:	e7ca      	b.n	80057e8 <_free_r+0x24>
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	200002c8 	.word	0x200002c8

08005858 <_malloc_r>:
 8005858:	2303      	movs	r3, #3
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	1ccd      	adds	r5, r1, #3
 800585e:	439d      	bics	r5, r3
 8005860:	3508      	adds	r5, #8
 8005862:	0006      	movs	r6, r0
 8005864:	2d0c      	cmp	r5, #12
 8005866:	d21e      	bcs.n	80058a6 <_malloc_r+0x4e>
 8005868:	250c      	movs	r5, #12
 800586a:	42a9      	cmp	r1, r5
 800586c:	d81d      	bhi.n	80058aa <_malloc_r+0x52>
 800586e:	0030      	movs	r0, r6
 8005870:	f000 fb1c 	bl	8005eac <__malloc_lock>
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <_malloc_r+0xb4>)
 8005876:	6814      	ldr	r4, [r2, #0]
 8005878:	0021      	movs	r1, r4
 800587a:	2900      	cmp	r1, #0
 800587c:	d119      	bne.n	80058b2 <_malloc_r+0x5a>
 800587e:	4c24      	ldr	r4, [pc, #144]	; (8005910 <_malloc_r+0xb8>)
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <_malloc_r+0x36>
 8005886:	0030      	movs	r0, r6
 8005888:	f000 f844 	bl	8005914 <_sbrk_r>
 800588c:	6020      	str	r0, [r4, #0]
 800588e:	0029      	movs	r1, r5
 8005890:	0030      	movs	r0, r6
 8005892:	f000 f83f 	bl	8005914 <_sbrk_r>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d12c      	bne.n	80058f4 <_malloc_r+0x9c>
 800589a:	230c      	movs	r3, #12
 800589c:	0030      	movs	r0, r6
 800589e:	6033      	str	r3, [r6, #0]
 80058a0:	f000 fb05 	bl	8005eae <__malloc_unlock>
 80058a4:	e003      	b.n	80058ae <_malloc_r+0x56>
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	dadf      	bge.n	800586a <_malloc_r+0x12>
 80058aa:	230c      	movs	r3, #12
 80058ac:	6033      	str	r3, [r6, #0]
 80058ae:	2000      	movs	r0, #0
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	680b      	ldr	r3, [r1, #0]
 80058b4:	1b5b      	subs	r3, r3, r5
 80058b6:	d41a      	bmi.n	80058ee <_malloc_r+0x96>
 80058b8:	2b0b      	cmp	r3, #11
 80058ba:	d903      	bls.n	80058c4 <_malloc_r+0x6c>
 80058bc:	600b      	str	r3, [r1, #0]
 80058be:	18cc      	adds	r4, r1, r3
 80058c0:	6025      	str	r5, [r4, #0]
 80058c2:	e003      	b.n	80058cc <_malloc_r+0x74>
 80058c4:	428c      	cmp	r4, r1
 80058c6:	d10e      	bne.n	80058e6 <_malloc_r+0x8e>
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	0030      	movs	r0, r6
 80058ce:	f000 faee 	bl	8005eae <__malloc_unlock>
 80058d2:	0020      	movs	r0, r4
 80058d4:	2207      	movs	r2, #7
 80058d6:	300b      	adds	r0, #11
 80058d8:	1d23      	adds	r3, r4, #4
 80058da:	4390      	bics	r0, r2
 80058dc:	1ac3      	subs	r3, r0, r3
 80058de:	d0e7      	beq.n	80058b0 <_malloc_r+0x58>
 80058e0:	425a      	negs	r2, r3
 80058e2:	50e2      	str	r2, [r4, r3]
 80058e4:	e7e4      	b.n	80058b0 <_malloc_r+0x58>
 80058e6:	684b      	ldr	r3, [r1, #4]
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	000c      	movs	r4, r1
 80058ec:	e7ee      	b.n	80058cc <_malloc_r+0x74>
 80058ee:	000c      	movs	r4, r1
 80058f0:	6849      	ldr	r1, [r1, #4]
 80058f2:	e7c2      	b.n	800587a <_malloc_r+0x22>
 80058f4:	2303      	movs	r3, #3
 80058f6:	1cc4      	adds	r4, r0, #3
 80058f8:	439c      	bics	r4, r3
 80058fa:	42a0      	cmp	r0, r4
 80058fc:	d0e0      	beq.n	80058c0 <_malloc_r+0x68>
 80058fe:	1a21      	subs	r1, r4, r0
 8005900:	0030      	movs	r0, r6
 8005902:	f000 f807 	bl	8005914 <_sbrk_r>
 8005906:	1c43      	adds	r3, r0, #1
 8005908:	d1da      	bne.n	80058c0 <_malloc_r+0x68>
 800590a:	e7c6      	b.n	800589a <_malloc_r+0x42>
 800590c:	200002c8 	.word	0x200002c8
 8005910:	200002cc 	.word	0x200002cc

08005914 <_sbrk_r>:
 8005914:	2300      	movs	r3, #0
 8005916:	b570      	push	{r4, r5, r6, lr}
 8005918:	4c06      	ldr	r4, [pc, #24]	; (8005934 <_sbrk_r+0x20>)
 800591a:	0005      	movs	r5, r0
 800591c:	0008      	movs	r0, r1
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	f7fe ff2a 	bl	8004778 <_sbrk>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d103      	bne.n	8005930 <_sbrk_r+0x1c>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d000      	beq.n	8005930 <_sbrk_r+0x1c>
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	bd70      	pop	{r4, r5, r6, pc}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	20000440 	.word	0x20000440

08005938 <siprintf>:
 8005938:	b40e      	push	{r1, r2, r3}
 800593a:	b510      	push	{r4, lr}
 800593c:	b09d      	sub	sp, #116	; 0x74
 800593e:	a902      	add	r1, sp, #8
 8005940:	9002      	str	r0, [sp, #8]
 8005942:	6108      	str	r0, [r1, #16]
 8005944:	480b      	ldr	r0, [pc, #44]	; (8005974 <siprintf+0x3c>)
 8005946:	2482      	movs	r4, #130	; 0x82
 8005948:	6088      	str	r0, [r1, #8]
 800594a:	6148      	str	r0, [r1, #20]
 800594c:	2001      	movs	r0, #1
 800594e:	4240      	negs	r0, r0
 8005950:	ab1f      	add	r3, sp, #124	; 0x7c
 8005952:	81c8      	strh	r0, [r1, #14]
 8005954:	4808      	ldr	r0, [pc, #32]	; (8005978 <siprintf+0x40>)
 8005956:	cb04      	ldmia	r3!, {r2}
 8005958:	00a4      	lsls	r4, r4, #2
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	818c      	strh	r4, [r1, #12]
 8005960:	f000 fb08 	bl	8005f74 <_svfiprintf_r>
 8005964:	2300      	movs	r3, #0
 8005966:	9a02      	ldr	r2, [sp, #8]
 8005968:	7013      	strb	r3, [r2, #0]
 800596a:	b01d      	add	sp, #116	; 0x74
 800596c:	bc10      	pop	{r4}
 800596e:	bc08      	pop	{r3}
 8005970:	b003      	add	sp, #12
 8005972:	4718      	bx	r3
 8005974:	7fffffff 	.word	0x7fffffff
 8005978:	20000010 	.word	0x20000010

0800597c <__tzcalc_limits>:
 800597c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597e:	b089      	sub	sp, #36	; 0x24
 8005980:	0004      	movs	r4, r0
 8005982:	f000 fa8f 	bl	8005ea4 <__gettzinfo>
 8005986:	4b4c      	ldr	r3, [pc, #304]	; (8005ab8 <__tzcalc_limits+0x13c>)
 8005988:	0007      	movs	r7, r0
 800598a:	2000      	movs	r0, #0
 800598c:	429c      	cmp	r4, r3
 800598e:	dd58      	ble.n	8005a42 <__tzcalc_limits+0xc6>
 8005990:	256e      	movs	r5, #110	; 0x6e
 8005992:	2164      	movs	r1, #100	; 0x64
 8005994:	4b49      	ldr	r3, [pc, #292]	; (8005abc <__tzcalc_limits+0x140>)
 8005996:	35ff      	adds	r5, #255	; 0xff
 8005998:	18e0      	adds	r0, r4, r3
 800599a:	4345      	muls	r5, r0
 800599c:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <__tzcalc_limits+0x144>)
 800599e:	607c      	str	r4, [r7, #4]
 80059a0:	18e0      	adds	r0, r4, r3
 80059a2:	4b48      	ldr	r3, [pc, #288]	; (8005ac4 <__tzcalc_limits+0x148>)
 80059a4:	1080      	asrs	r0, r0, #2
 80059a6:	182d      	adds	r5, r5, r0
 80059a8:	4249      	negs	r1, r1
 80059aa:	18e0      	adds	r0, r4, r3
 80059ac:	f7fa fc52 	bl	8000254 <__divsi3>
 80059b0:	21c8      	movs	r1, #200	; 0xc8
 80059b2:	4b45      	ldr	r3, [pc, #276]	; (8005ac8 <__tzcalc_limits+0x14c>)
 80059b4:	182d      	adds	r5, r5, r0
 80059b6:	0049      	lsls	r1, r1, #1
 80059b8:	18e0      	adds	r0, r4, r3
 80059ba:	f7fa fc4b 	bl	8000254 <__divsi3>
 80059be:	2164      	movs	r1, #100	; 0x64
 80059c0:	182b      	adds	r3, r5, r0
 80059c2:	0020      	movs	r0, r4
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	f7fa fd2b 	bl	8000420 <__aeabi_idivmod>
 80059ca:	9102      	str	r1, [sp, #8]
 80059cc:	21c8      	movs	r1, #200	; 0xc8
 80059ce:	0020      	movs	r0, r4
 80059d0:	0049      	lsls	r1, r1, #1
 80059d2:	f7fa fd25 	bl	8000420 <__aeabi_idivmod>
 80059d6:	000a      	movs	r2, r1
 80059d8:	4253      	negs	r3, r2
 80059da:	415a      	adcs	r2, r3
 80059dc:	003b      	movs	r3, r7
 80059de:	3340      	adds	r3, #64	; 0x40
 80059e0:	9307      	str	r3, [sp, #28]
 80059e2:	2303      	movs	r3, #3
 80059e4:	003d      	movs	r5, r7
 80059e6:	401c      	ands	r4, r3
 80059e8:	9103      	str	r1, [sp, #12]
 80059ea:	9205      	str	r2, [sp, #20]
 80059ec:	3508      	adds	r5, #8
 80059ee:	9406      	str	r4, [sp, #24]
 80059f0:	782b      	ldrb	r3, [r5, #0]
 80059f2:	2b4a      	cmp	r3, #74	; 0x4a
 80059f4:	d127      	bne.n	8005a46 <__tzcalc_limits+0xca>
 80059f6:	9a01      	ldr	r2, [sp, #4]
 80059f8:	68eb      	ldr	r3, [r5, #12]
 80059fa:	18d1      	adds	r1, r2, r3
 80059fc:	9a06      	ldr	r2, [sp, #24]
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	d102      	bne.n	8005a08 <__tzcalc_limits+0x8c>
 8005a02:	9a02      	ldr	r2, [sp, #8]
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	d103      	bne.n	8005a10 <__tzcalc_limits+0x94>
 8005a08:	2400      	movs	r4, #0
 8005a0a:	9a03      	ldr	r2, [sp, #12]
 8005a0c:	42a2      	cmp	r2, r4
 8005a0e:	d103      	bne.n	8005a18 <__tzcalc_limits+0x9c>
 8005a10:	2401      	movs	r4, #1
 8005a12:	2b3b      	cmp	r3, #59	; 0x3b
 8005a14:	dc00      	bgt.n	8005a18 <__tzcalc_limits+0x9c>
 8005a16:	2400      	movs	r4, #0
 8005a18:	1864      	adds	r4, r4, r1
 8005a1a:	3c01      	subs	r4, #1
 8005a1c:	492b      	ldr	r1, [pc, #172]	; (8005acc <__tzcalc_limits+0x150>)
 8005a1e:	692b      	ldr	r3, [r5, #16]
 8005a20:	434c      	muls	r4, r1
 8005a22:	18e4      	adds	r4, r4, r3
 8005a24:	69ab      	ldr	r3, [r5, #24]
 8005a26:	18e4      	adds	r4, r4, r3
 8005a28:	9b07      	ldr	r3, [sp, #28]
 8005a2a:	616c      	str	r4, [r5, #20]
 8005a2c:	351c      	adds	r5, #28
 8005a2e:	42ab      	cmp	r3, r5
 8005a30:	d1de      	bne.n	80059f0 <__tzcalc_limits+0x74>
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a36:	2301      	movs	r3, #1
 8005a38:	428a      	cmp	r2, r1
 8005a3a:	db00      	blt.n	8005a3e <__tzcalc_limits+0xc2>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2001      	movs	r0, #1
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	b009      	add	sp, #36	; 0x24
 8005a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a46:	2b44      	cmp	r3, #68	; 0x44
 8005a48:	d103      	bne.n	8005a52 <__tzcalc_limits+0xd6>
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	68ea      	ldr	r2, [r5, #12]
 8005a4e:	189c      	adds	r4, r3, r2
 8005a50:	e7e4      	b.n	8005a1c <__tzcalc_limits+0xa0>
 8005a52:	9a06      	ldr	r2, [sp, #24]
 8005a54:	9b05      	ldr	r3, [sp, #20]
 8005a56:	2a00      	cmp	r2, #0
 8005a58:	d103      	bne.n	8005a62 <__tzcalc_limits+0xe6>
 8005a5a:	9a02      	ldr	r2, [sp, #8]
 8005a5c:	2a00      	cmp	r2, #0
 8005a5e:	d000      	beq.n	8005a62 <__tzcalc_limits+0xe6>
 8005a60:	2301      	movs	r3, #1
 8005a62:	2230      	movs	r2, #48	; 0x30
 8005a64:	4353      	muls	r3, r2
 8005a66:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <__tzcalc_limits+0x154>)
 8005a68:	686e      	ldr	r6, [r5, #4]
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	001a      	movs	r2, r3
 8005a70:	2301      	movs	r3, #1
 8005a72:	9c01      	ldr	r4, [sp, #4]
 8005a74:	42b3      	cmp	r3, r6
 8005a76:	db18      	blt.n	8005aaa <__tzcalc_limits+0x12e>
 8005a78:	2e00      	cmp	r6, #0
 8005a7a:	dc00      	bgt.n	8005a7e <__tzcalc_limits+0x102>
 8005a7c:	2601      	movs	r6, #1
 8005a7e:	1d20      	adds	r0, r4, #4
 8005a80:	2107      	movs	r1, #7
 8005a82:	f7fa fccd 	bl	8000420 <__aeabi_idivmod>
 8005a86:	68eb      	ldr	r3, [r5, #12]
 8005a88:	1a5b      	subs	r3, r3, r1
 8005a8a:	d500      	bpl.n	8005a8e <__tzcalc_limits+0x112>
 8005a8c:	3307      	adds	r3, #7
 8005a8e:	2107      	movs	r1, #7
 8005a90:	68aa      	ldr	r2, [r5, #8]
 8005a92:	3a01      	subs	r2, #1
 8005a94:	4351      	muls	r1, r2
 8005a96:	18c9      	adds	r1, r1, r3
 8005a98:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <__tzcalc_limits+0x158>)
 8005a9a:	18f6      	adds	r6, r6, r3
 8005a9c:	9b04      	ldr	r3, [sp, #16]
 8005a9e:	00b6      	lsls	r6, r6, #2
 8005aa0:	58f3      	ldr	r3, [r6, r3]
 8005aa2:	4299      	cmp	r1, r3
 8005aa4:	da05      	bge.n	8005ab2 <__tzcalc_limits+0x136>
 8005aa6:	1864      	adds	r4, r4, r1
 8005aa8:	e7b8      	b.n	8005a1c <__tzcalc_limits+0xa0>
 8005aaa:	ca02      	ldmia	r2!, {r1}
 8005aac:	3301      	adds	r3, #1
 8005aae:	1864      	adds	r4, r4, r1
 8005ab0:	e7e0      	b.n	8005a74 <__tzcalc_limits+0xf8>
 8005ab2:	3907      	subs	r1, #7
 8005ab4:	e7f5      	b.n	8005aa2 <__tzcalc_limits+0x126>
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	000007b1 	.word	0x000007b1
 8005abc:	fffff84e 	.word	0xfffff84e
 8005ac0:	fffff84f 	.word	0xfffff84f
 8005ac4:	fffff893 	.word	0xfffff893
 8005ac8:	fffff9bf 	.word	0xfffff9bf
 8005acc:	00015180 	.word	0x00015180
 8005ad0:	080071c8 	.word	0x080071c8
 8005ad4:	3fffffff 	.word	0x3fffffff

08005ad8 <__tz_lock>:
 8005ad8:	4770      	bx	lr

08005ada <__tz_unlock>:
 8005ada:	4770      	bx	lr

08005adc <_tzset_unlocked>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	4b02      	ldr	r3, [pc, #8]	; (8005ae8 <_tzset_unlocked+0xc>)
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	f000 f803 	bl	8005aec <_tzset_unlocked_r>
 8005ae6:	bd10      	pop	{r4, pc}
 8005ae8:	20000010 	.word	0x20000010

08005aec <_tzset_unlocked_r>:
 8005aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aee:	b08d      	sub	sp, #52	; 0x34
 8005af0:	0007      	movs	r7, r0
 8005af2:	f000 f9d7 	bl	8005ea4 <__gettzinfo>
 8005af6:	49af      	ldr	r1, [pc, #700]	; (8005db4 <_tzset_unlocked_r+0x2c8>)
 8005af8:	0006      	movs	r6, r0
 8005afa:	0038      	movs	r0, r7
 8005afc:	f000 f9cc 	bl	8005e98 <_getenv_r>
 8005b00:	4dad      	ldr	r5, [pc, #692]	; (8005db8 <_tzset_unlocked_r+0x2cc>)
 8005b02:	1e04      	subs	r4, r0, #0
 8005b04:	d10d      	bne.n	8005b22 <_tzset_unlocked_r+0x36>
 8005b06:	4bad      	ldr	r3, [pc, #692]	; (8005dbc <_tzset_unlocked_r+0x2d0>)
 8005b08:	4aad      	ldr	r2, [pc, #692]	; (8005dc0 <_tzset_unlocked_r+0x2d4>)
 8005b0a:	6018      	str	r0, [r3, #0]
 8005b0c:	4bad      	ldr	r3, [pc, #692]	; (8005dc4 <_tzset_unlocked_r+0x2d8>)
 8005b0e:	6018      	str	r0, [r3, #0]
 8005b10:	4bad      	ldr	r3, [pc, #692]	; (8005dc8 <_tzset_unlocked_r+0x2dc>)
 8005b12:	6828      	ldr	r0, [r5, #0]
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	605a      	str	r2, [r3, #4]
 8005b18:	f7ff fbec 	bl	80052f4 <free>
 8005b1c:	602c      	str	r4, [r5, #0]
 8005b1e:	b00d      	add	sp, #52	; 0x34
 8005b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b22:	6829      	ldr	r1, [r5, #0]
 8005b24:	2900      	cmp	r1, #0
 8005b26:	d15a      	bne.n	8005bde <_tzset_unlocked_r+0xf2>
 8005b28:	6828      	ldr	r0, [r5, #0]
 8005b2a:	f7ff fbe3 	bl	80052f4 <free>
 8005b2e:	0020      	movs	r0, r4
 8005b30:	f7fa faea 	bl	8000108 <strlen>
 8005b34:	1c41      	adds	r1, r0, #1
 8005b36:	0038      	movs	r0, r7
 8005b38:	f7ff fe8e 	bl	8005858 <_malloc_r>
 8005b3c:	6028      	str	r0, [r5, #0]
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d152      	bne.n	8005be8 <_tzset_unlocked_r+0xfc>
 8005b42:	7823      	ldrb	r3, [r4, #0]
 8005b44:	3b3a      	subs	r3, #58	; 0x3a
 8005b46:	4259      	negs	r1, r3
 8005b48:	4159      	adcs	r1, r3
 8005b4a:	1864      	adds	r4, r4, r1
 8005b4c:	ab0a      	add	r3, sp, #40	; 0x28
 8005b4e:	4a9f      	ldr	r2, [pc, #636]	; (8005dcc <_tzset_unlocked_r+0x2e0>)
 8005b50:	499f      	ldr	r1, [pc, #636]	; (8005dd0 <_tzset_unlocked_r+0x2e4>)
 8005b52:	0020      	movs	r0, r4
 8005b54:	f000 fc9a 	bl	800648c <siscanf>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	dde0      	ble.n	8005b1e <_tzset_unlocked_r+0x32>
 8005b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5e:	18e4      	adds	r4, r4, r3
 8005b60:	7823      	ldrb	r3, [r4, #0]
 8005b62:	2b2d      	cmp	r3, #45	; 0x2d
 8005b64:	d144      	bne.n	8005bf0 <_tzset_unlocked_r+0x104>
 8005b66:	3b2e      	subs	r3, #46	; 0x2e
 8005b68:	3401      	adds	r4, #1
 8005b6a:	9304      	str	r3, [sp, #16]
 8005b6c:	2716      	movs	r7, #22
 8005b6e:	ab02      	add	r3, sp, #8
 8005b70:	18ff      	adds	r7, r7, r3
 8005b72:	2300      	movs	r3, #0
 8005b74:	803b      	strh	r3, [r7, #0]
 8005b76:	2300      	movs	r3, #0
 8005b78:	ad08      	add	r5, sp, #32
 8005b7a:	802b      	strh	r3, [r5, #0]
 8005b7c:	ab0a      	add	r3, sp, #40	; 0x28
 8005b7e:	9303      	str	r3, [sp, #12]
 8005b80:	9502      	str	r5, [sp, #8]
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	9700      	str	r7, [sp, #0]
 8005b86:	aa07      	add	r2, sp, #28
 8005b88:	4992      	ldr	r1, [pc, #584]	; (8005dd4 <_tzset_unlocked_r+0x2e8>)
 8005b8a:	0020      	movs	r0, r4
 8005b8c:	f000 fc7e 	bl	800648c <siscanf>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	ddc4      	ble.n	8005b1e <_tzset_unlocked_r+0x32>
 8005b94:	233c      	movs	r3, #60	; 0x3c
 8005b96:	883a      	ldrh	r2, [r7, #0]
 8005b98:	4f8f      	ldr	r7, [pc, #572]	; (8005dd8 <_tzset_unlocked_r+0x2ec>)
 8005b9a:	4353      	muls	r3, r2
 8005b9c:	882a      	ldrh	r2, [r5, #0]
 8005b9e:	4d8a      	ldr	r5, [pc, #552]	; (8005dc8 <_tzset_unlocked_r+0x2dc>)
 8005ba0:	189b      	adds	r3, r3, r2
 8005ba2:	aa02      	add	r2, sp, #8
 8005ba4:	8a91      	ldrh	r1, [r2, #20]
 8005ba6:	22e1      	movs	r2, #225	; 0xe1
 8005ba8:	0112      	lsls	r2, r2, #4
 8005baa:	434a      	muls	r2, r1
 8005bac:	189b      	adds	r3, r3, r2
 8005bae:	9a04      	ldr	r2, [sp, #16]
 8005bb0:	4987      	ldr	r1, [pc, #540]	; (8005dd0 <_tzset_unlocked_r+0x2e4>)
 8005bb2:	435a      	muls	r2, r3
 8005bb4:	4b85      	ldr	r3, [pc, #532]	; (8005dcc <_tzset_unlocked_r+0x2e0>)
 8005bb6:	6232      	str	r2, [r6, #32]
 8005bb8:	602b      	str	r3, [r5, #0]
 8005bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbc:	003a      	movs	r2, r7
 8005bbe:	18e4      	adds	r4, r4, r3
 8005bc0:	0020      	movs	r0, r4
 8005bc2:	ab0a      	add	r3, sp, #40	; 0x28
 8005bc4:	f000 fc62 	bl	800648c <siscanf>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	dc18      	bgt.n	8005bfe <_tzset_unlocked_r+0x112>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	6a32      	ldr	r2, [r6, #32]
 8005bd0:	606b      	str	r3, [r5, #4]
 8005bd2:	4b7a      	ldr	r3, [pc, #488]	; (8005dbc <_tzset_unlocked_r+0x2d0>)
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	4b7a      	ldr	r3, [pc, #488]	; (8005dc4 <_tzset_unlocked_r+0x2d8>)
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e79f      	b.n	8005b1e <_tzset_unlocked_r+0x32>
 8005bde:	f7fa fa9a 	bl	8000116 <strcmp>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d09b      	beq.n	8005b1e <_tzset_unlocked_r+0x32>
 8005be6:	e79f      	b.n	8005b28 <_tzset_unlocked_r+0x3c>
 8005be8:	0021      	movs	r1, r4
 8005bea:	f000 fc79 	bl	80064e0 <strcpy>
 8005bee:	e7a8      	b.n	8005b42 <_tzset_unlocked_r+0x56>
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	3b2b      	subs	r3, #43	; 0x2b
 8005bf4:	9204      	str	r2, [sp, #16]
 8005bf6:	4259      	negs	r1, r3
 8005bf8:	4159      	adcs	r1, r3
 8005bfa:	1864      	adds	r4, r4, r1
 8005bfc:	e7b6      	b.n	8005b6c <_tzset_unlocked_r+0x80>
 8005bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c00:	606f      	str	r7, [r5, #4]
 8005c02:	18e4      	adds	r4, r4, r3
 8005c04:	7823      	ldrb	r3, [r4, #0]
 8005c06:	2b2d      	cmp	r3, #45	; 0x2d
 8005c08:	d000      	beq.n	8005c0c <_tzset_unlocked_r+0x120>
 8005c0a:	e08f      	b.n	8005d2c <_tzset_unlocked_r+0x240>
 8005c0c:	3b2e      	subs	r3, #46	; 0x2e
 8005c0e:	3401      	adds	r4, #1
 8005c10:	9304      	str	r3, [sp, #16]
 8005c12:	2716      	movs	r7, #22
 8005c14:	2300      	movs	r3, #0
 8005c16:	aa02      	add	r2, sp, #8
 8005c18:	18bf      	adds	r7, r7, r2
 8005c1a:	ad07      	add	r5, sp, #28
 8005c1c:	8313      	strh	r3, [r2, #24]
 8005c1e:	802b      	strh	r3, [r5, #0]
 8005c20:	803b      	strh	r3, [r7, #0]
 8005c22:	aa08      	add	r2, sp, #32
 8005c24:	930a      	str	r3, [sp, #40]	; 0x28
 8005c26:	ab0a      	add	r3, sp, #40	; 0x28
 8005c28:	9202      	str	r2, [sp, #8]
 8005c2a:	9303      	str	r3, [sp, #12]
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	9700      	str	r7, [sp, #0]
 8005c30:	002a      	movs	r2, r5
 8005c32:	4968      	ldr	r1, [pc, #416]	; (8005dd4 <_tzset_unlocked_r+0x2e8>)
 8005c34:	0020      	movs	r0, r4
 8005c36:	f000 fc29 	bl	800648c <siscanf>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	dd00      	ble.n	8005c40 <_tzset_unlocked_r+0x154>
 8005c3e:	e07c      	b.n	8005d3a <_tzset_unlocked_r+0x24e>
 8005c40:	6a33      	ldr	r3, [r6, #32]
 8005c42:	4a66      	ldr	r2, [pc, #408]	; (8005ddc <_tzset_unlocked_r+0x2f0>)
 8005c44:	189b      	adds	r3, r3, r2
 8005c46:	63f3      	str	r3, [r6, #60]	; 0x3c
 8005c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c4a:	0037      	movs	r7, r6
 8005c4c:	18e4      	adds	r4, r4, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	3708      	adds	r7, #8
 8005c52:	9304      	str	r3, [sp, #16]
 8005c54:	7823      	ldrb	r3, [r4, #0]
 8005c56:	3b2c      	subs	r3, #44	; 0x2c
 8005c58:	4259      	negs	r1, r3
 8005c5a:	4159      	adcs	r1, r3
 8005c5c:	1864      	adds	r4, r4, r1
 8005c5e:	7825      	ldrb	r5, [r4, #0]
 8005c60:	2d4d      	cmp	r5, #77	; 0x4d
 8005c62:	d000      	beq.n	8005c66 <_tzset_unlocked_r+0x17a>
 8005c64:	e078      	b.n	8005d58 <_tzset_unlocked_r+0x26c>
 8005c66:	221e      	movs	r2, #30
 8005c68:	a902      	add	r1, sp, #8
 8005c6a:	1852      	adds	r2, r2, r1
 8005c6c:	9202      	str	r2, [sp, #8]
 8005c6e:	aa09      	add	r2, sp, #36	; 0x24
 8005c70:	9200      	str	r2, [sp, #0]
 8005c72:	221a      	movs	r2, #26
 8005c74:	ab0a      	add	r3, sp, #40	; 0x28
 8005c76:	1852      	adds	r2, r2, r1
 8005c78:	9303      	str	r3, [sp, #12]
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	4958      	ldr	r1, [pc, #352]	; (8005de0 <_tzset_unlocked_r+0x2f4>)
 8005c7e:	0020      	movs	r0, r4
 8005c80:	f000 fc04 	bl	800648c <siscanf>
 8005c84:	2803      	cmp	r0, #3
 8005c86:	d000      	beq.n	8005c8a <_tzset_unlocked_r+0x19e>
 8005c88:	e749      	b.n	8005b1e <_tzset_unlocked_r+0x32>
 8005c8a:	ab02      	add	r3, sp, #8
 8005c8c:	8b59      	ldrh	r1, [r3, #26]
 8005c8e:	1e4b      	subs	r3, r1, #1
 8005c90:	2b0b      	cmp	r3, #11
 8005c92:	d900      	bls.n	8005c96 <_tzset_unlocked_r+0x1aa>
 8005c94:	e743      	b.n	8005b1e <_tzset_unlocked_r+0x32>
 8005c96:	ab02      	add	r3, sp, #8
 8005c98:	8b9a      	ldrh	r2, [r3, #28]
 8005c9a:	1e53      	subs	r3, r2, #1
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d900      	bls.n	8005ca2 <_tzset_unlocked_r+0x1b6>
 8005ca0:	e73d      	b.n	8005b1e <_tzset_unlocked_r+0x32>
 8005ca2:	ab02      	add	r3, sp, #8
 8005ca4:	8bdb      	ldrh	r3, [r3, #30]
 8005ca6:	2b06      	cmp	r3, #6
 8005ca8:	d900      	bls.n	8005cac <_tzset_unlocked_r+0x1c0>
 8005caa:	e738      	b.n	8005b1e <_tzset_unlocked_r+0x32>
 8005cac:	703d      	strb	r5, [r7, #0]
 8005cae:	6079      	str	r1, [r7, #4]
 8005cb0:	60ba      	str	r2, [r7, #8]
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb6:	18e5      	adds	r5, r4, r3
 8005cb8:	2302      	movs	r3, #2
 8005cba:	aa07      	add	r2, sp, #28
 8005cbc:	8013      	strh	r3, [r2, #0]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	a902      	add	r1, sp, #8
 8005cc2:	ac08      	add	r4, sp, #32
 8005cc4:	82cb      	strh	r3, [r1, #22]
 8005cc6:	8023      	strh	r3, [r4, #0]
 8005cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8005cca:	782b      	ldrb	r3, [r5, #0]
 8005ccc:	2b2f      	cmp	r3, #47	; 0x2f
 8005cce:	d10b      	bne.n	8005ce8 <_tzset_unlocked_r+0x1fc>
 8005cd0:	2116      	movs	r1, #22
 8005cd2:	a802      	add	r0, sp, #8
 8005cd4:	1809      	adds	r1, r1, r0
 8005cd6:	ab0a      	add	r3, sp, #40	; 0x28
 8005cd8:	9100      	str	r1, [sp, #0]
 8005cda:	9303      	str	r3, [sp, #12]
 8005cdc:	9402      	str	r4, [sp, #8]
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	4940      	ldr	r1, [pc, #256]	; (8005de4 <_tzset_unlocked_r+0x2f8>)
 8005ce2:	0028      	movs	r0, r5
 8005ce4:	f000 fbd2 	bl	800648c <siscanf>
 8005ce8:	ab02      	add	r3, sp, #8
 8005cea:	8ada      	ldrh	r2, [r3, #22]
 8005cec:	233c      	movs	r3, #60	; 0x3c
 8005cee:	4353      	muls	r3, r2
 8005cf0:	8822      	ldrh	r2, [r4, #0]
 8005cf2:	189b      	adds	r3, r3, r2
 8005cf4:	aa07      	add	r2, sp, #28
 8005cf6:	8811      	ldrh	r1, [r2, #0]
 8005cf8:	22e1      	movs	r2, #225	; 0xe1
 8005cfa:	0112      	lsls	r2, r2, #4
 8005cfc:	434a      	muls	r2, r1
 8005cfe:	189b      	adds	r3, r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d04:	371c      	adds	r7, #28
 8005d06:	18ec      	adds	r4, r5, r3
 8005d08:	9b04      	ldr	r3, [sp, #16]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d1a0      	bne.n	8005c54 <_tzset_unlocked_r+0x168>
 8005d12:	6870      	ldr	r0, [r6, #4]
 8005d14:	f7ff fe32 	bl	800597c <__tzcalc_limits>
 8005d18:	6a32      	ldr	r2, [r6, #32]
 8005d1a:	4b28      	ldr	r3, [pc, #160]	; (8005dbc <_tzset_unlocked_r+0x2d0>)
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	1e5a      	subs	r2, r3, #1
 8005d24:	4193      	sbcs	r3, r2
 8005d26:	4a27      	ldr	r2, [pc, #156]	; (8005dc4 <_tzset_unlocked_r+0x2d8>)
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e6f8      	b.n	8005b1e <_tzset_unlocked_r+0x32>
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	3b2b      	subs	r3, #43	; 0x2b
 8005d30:	9204      	str	r2, [sp, #16]
 8005d32:	4259      	negs	r1, r3
 8005d34:	4159      	adcs	r1, r3
 8005d36:	1864      	adds	r4, r4, r1
 8005d38:	e76b      	b.n	8005c12 <_tzset_unlocked_r+0x126>
 8005d3a:	233c      	movs	r3, #60	; 0x3c
 8005d3c:	883a      	ldrh	r2, [r7, #0]
 8005d3e:	8829      	ldrh	r1, [r5, #0]
 8005d40:	4353      	muls	r3, r2
 8005d42:	aa02      	add	r2, sp, #8
 8005d44:	8b12      	ldrh	r2, [r2, #24]
 8005d46:	189b      	adds	r3, r3, r2
 8005d48:	22e1      	movs	r2, #225	; 0xe1
 8005d4a:	0112      	lsls	r2, r2, #4
 8005d4c:	434a      	muls	r2, r1
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	9a04      	ldr	r2, [sp, #16]
 8005d52:	435a      	muls	r2, r3
 8005d54:	0013      	movs	r3, r2
 8005d56:	e776      	b.n	8005c46 <_tzset_unlocked_r+0x15a>
 8005d58:	2344      	movs	r3, #68	; 0x44
 8005d5a:	9305      	str	r3, [sp, #20]
 8005d5c:	2d4a      	cmp	r5, #74	; 0x4a
 8005d5e:	d101      	bne.n	8005d64 <_tzset_unlocked_r+0x278>
 8005d60:	3401      	adds	r4, #1
 8005d62:	9505      	str	r5, [sp, #20]
 8005d64:	220a      	movs	r2, #10
 8005d66:	a90b      	add	r1, sp, #44	; 0x2c
 8005d68:	0020      	movs	r0, r4
 8005d6a:	f000 fc69 	bl	8006640 <strtoul>
 8005d6e:	231e      	movs	r3, #30
 8005d70:	aa02      	add	r2, sp, #8
 8005d72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005d74:	189b      	adds	r3, r3, r2
 8005d76:	8018      	strh	r0, [r3, #0]
 8005d78:	42ac      	cmp	r4, r5
 8005d7a:	d115      	bne.n	8005da8 <_tzset_unlocked_r+0x2bc>
 8005d7c:	9b04      	ldr	r3, [sp, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d108      	bne.n	8005d94 <_tzset_unlocked_r+0x2a8>
 8005d82:	334d      	adds	r3, #77	; 0x4d
 8005d84:	7233      	strb	r3, [r6, #8]
 8005d86:	2303      	movs	r3, #3
 8005d88:	60f3      	str	r3, [r6, #12]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	6133      	str	r3, [r6, #16]
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	6173      	str	r3, [r6, #20]
 8005d92:	e791      	b.n	8005cb8 <_tzset_unlocked_r+0x1cc>
 8005d94:	224d      	movs	r2, #77	; 0x4d
 8005d96:	1d73      	adds	r3, r6, #5
 8005d98:	77da      	strb	r2, [r3, #31]
 8005d9a:	230b      	movs	r3, #11
 8005d9c:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d9e:	3b0a      	subs	r3, #10
 8005da0:	62f3      	str	r3, [r6, #44]	; 0x2c
 8005da2:	2300      	movs	r3, #0
 8005da4:	6333      	str	r3, [r6, #48]	; 0x30
 8005da6:	e787      	b.n	8005cb8 <_tzset_unlocked_r+0x1cc>
 8005da8:	466b      	mov	r3, sp
 8005daa:	7d1b      	ldrb	r3, [r3, #20]
 8005dac:	b280      	uxth	r0, r0
 8005dae:	703b      	strb	r3, [r7, #0]
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	e781      	b.n	8005cb8 <_tzset_unlocked_r+0x1cc>
 8005db4:	0800718c 	.word	0x0800718c
 8005db8:	200002e8 	.word	0x200002e8
 8005dbc:	200002f0 	.word	0x200002f0
 8005dc0:	0800718f 	.word	0x0800718f
 8005dc4:	200002ec 	.word	0x200002ec
 8005dc8:	20000074 	.word	0x20000074
 8005dcc:	200002db 	.word	0x200002db
 8005dd0:	08007193 	.word	0x08007193
 8005dd4:	080071b6 	.word	0x080071b6
 8005dd8:	200002d0 	.word	0x200002d0
 8005ddc:	fffff1f0 	.word	0xfffff1f0
 8005de0:	080071a2 	.word	0x080071a2
 8005de4:	080071b5 	.word	0x080071b5

08005de8 <div>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	000f      	movs	r7, r1
 8005dec:	0006      	movs	r6, r0
 8005dee:	0011      	movs	r1, r2
 8005df0:	0038      	movs	r0, r7
 8005df2:	0015      	movs	r5, r2
 8005df4:	f7fa fa2e 	bl	8000254 <__divsi3>
 8005df8:	0029      	movs	r1, r5
 8005dfa:	0004      	movs	r4, r0
 8005dfc:	0038      	movs	r0, r7
 8005dfe:	f7fa fb0f 	bl	8000420 <__aeabi_idivmod>
 8005e02:	2f00      	cmp	r7, #0
 8005e04:	db07      	blt.n	8005e16 <div+0x2e>
 8005e06:	2900      	cmp	r1, #0
 8005e08:	da01      	bge.n	8005e0e <div+0x26>
 8005e0a:	3401      	adds	r4, #1
 8005e0c:	1b49      	subs	r1, r1, r5
 8005e0e:	0030      	movs	r0, r6
 8005e10:	6034      	str	r4, [r6, #0]
 8005e12:	6071      	str	r1, [r6, #4]
 8005e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e16:	2900      	cmp	r1, #0
 8005e18:	ddf9      	ble.n	8005e0e <div+0x26>
 8005e1a:	3c01      	subs	r4, #1
 8005e1c:	1949      	adds	r1, r1, r5
 8005e1e:	e7f6      	b.n	8005e0e <div+0x26>

08005e20 <_findenv_r>:
 8005e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e22:	000e      	movs	r6, r1
 8005e24:	b085      	sub	sp, #20
 8005e26:	0007      	movs	r7, r0
 8005e28:	9203      	str	r2, [sp, #12]
 8005e2a:	f000 fc1d 	bl	8006668 <__env_lock>
 8005e2e:	4c19      	ldr	r4, [pc, #100]	; (8005e94 <_findenv_r+0x74>)
 8005e30:	0033      	movs	r3, r6
 8005e32:	6825      	ldr	r5, [r4, #0]
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	d106      	bne.n	8005e46 <_findenv_r+0x26>
 8005e38:	0038      	movs	r0, r7
 8005e3a:	f000 fc16 	bl	800666a <__env_unlock>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	b005      	add	sp, #20
 8005e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e44:	3301      	adds	r3, #1
 8005e46:	781a      	ldrb	r2, [r3, #0]
 8005e48:	2a00      	cmp	r2, #0
 8005e4a:	d01f      	beq.n	8005e8c <_findenv_r+0x6c>
 8005e4c:	2a3d      	cmp	r2, #61	; 0x3d
 8005e4e:	d1f9      	bne.n	8005e44 <_findenv_r+0x24>
 8005e50:	e7f2      	b.n	8005e38 <_findenv_r+0x18>
 8005e52:	3504      	adds	r5, #4
 8005e54:	6828      	ldr	r0, [r5, #0]
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d0ee      	beq.n	8005e38 <_findenv_r+0x18>
 8005e5a:	9a01      	ldr	r2, [sp, #4]
 8005e5c:	0031      	movs	r1, r6
 8005e5e:	f000 fb47 	bl	80064f0 <strncmp>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d1f5      	bne.n	8005e52 <_findenv_r+0x32>
 8005e66:	9a01      	ldr	r2, [sp, #4]
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	4694      	mov	ip, r2
 8005e6c:	4463      	add	r3, ip
 8005e6e:	9302      	str	r3, [sp, #8]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b3d      	cmp	r3, #61	; 0x3d
 8005e74:	d1ed      	bne.n	8005e52 <_findenv_r+0x32>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	0038      	movs	r0, r7
 8005e7a:	1aed      	subs	r5, r5, r3
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	10ad      	asrs	r5, r5, #2
 8005e80:	601d      	str	r5, [r3, #0]
 8005e82:	f000 fbf2 	bl	800666a <__env_unlock>
 8005e86:	9802      	ldr	r0, [sp, #8]
 8005e88:	3001      	adds	r0, #1
 8005e8a:	e7d9      	b.n	8005e40 <_findenv_r+0x20>
 8005e8c:	1b9b      	subs	r3, r3, r6
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	e7e0      	b.n	8005e54 <_findenv_r+0x34>
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	20000008 	.word	0x20000008

08005e98 <_getenv_r>:
 8005e98:	b507      	push	{r0, r1, r2, lr}
 8005e9a:	aa01      	add	r2, sp, #4
 8005e9c:	f7ff ffc0 	bl	8005e20 <_findenv_r>
 8005ea0:	bd0e      	pop	{r1, r2, r3, pc}
	...

08005ea4 <__gettzinfo>:
 8005ea4:	4800      	ldr	r0, [pc, #0]	; (8005ea8 <__gettzinfo+0x4>)
 8005ea6:	4770      	bx	lr
 8005ea8:	2000007c 	.word	0x2000007c

08005eac <__malloc_lock>:
 8005eac:	4770      	bx	lr

08005eae <__malloc_unlock>:
 8005eae:	4770      	bx	lr

08005eb0 <__ssputs_r>:
 8005eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb2:	688e      	ldr	r6, [r1, #8]
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	0007      	movs	r7, r0
 8005eb8:	000c      	movs	r4, r1
 8005eba:	9203      	str	r2, [sp, #12]
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	429e      	cmp	r6, r3
 8005ec0:	d839      	bhi.n	8005f36 <__ssputs_r+0x86>
 8005ec2:	2390      	movs	r3, #144	; 0x90
 8005ec4:	898a      	ldrh	r2, [r1, #12]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	421a      	tst	r2, r3
 8005eca:	d034      	beq.n	8005f36 <__ssputs_r+0x86>
 8005ecc:	2503      	movs	r5, #3
 8005ece:	6909      	ldr	r1, [r1, #16]
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	1a5b      	subs	r3, r3, r1
 8005ed4:	9302      	str	r3, [sp, #8]
 8005ed6:	6963      	ldr	r3, [r4, #20]
 8005ed8:	9802      	ldr	r0, [sp, #8]
 8005eda:	435d      	muls	r5, r3
 8005edc:	0feb      	lsrs	r3, r5, #31
 8005ede:	195d      	adds	r5, r3, r5
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	106d      	asrs	r5, r5, #1
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	181b      	adds	r3, r3, r0
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	d900      	bls.n	8005eee <__ssputs_r+0x3e>
 8005eec:	001d      	movs	r5, r3
 8005eee:	0553      	lsls	r3, r2, #21
 8005ef0:	d532      	bpl.n	8005f58 <__ssputs_r+0xa8>
 8005ef2:	0029      	movs	r1, r5
 8005ef4:	0038      	movs	r0, r7
 8005ef6:	f7ff fcaf 	bl	8005858 <_malloc_r>
 8005efa:	1e06      	subs	r6, r0, #0
 8005efc:	d109      	bne.n	8005f12 <__ssputs_r+0x62>
 8005efe:	230c      	movs	r3, #12
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	2340      	movs	r3, #64	; 0x40
 8005f04:	2001      	movs	r0, #1
 8005f06:	89a2      	ldrh	r2, [r4, #12]
 8005f08:	4240      	negs	r0, r0
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	b005      	add	sp, #20
 8005f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f12:	9a02      	ldr	r2, [sp, #8]
 8005f14:	6921      	ldr	r1, [r4, #16]
 8005f16:	f000 fbd8 	bl	80066ca <memcpy>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <__ssputs_r+0xc0>)
 8005f1e:	401a      	ands	r2, r3
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	4313      	orrs	r3, r2
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	9b02      	ldr	r3, [sp, #8]
 8005f28:	6126      	str	r6, [r4, #16]
 8005f2a:	18f6      	adds	r6, r6, r3
 8005f2c:	6026      	str	r6, [r4, #0]
 8005f2e:	6165      	str	r5, [r4, #20]
 8005f30:	9e01      	ldr	r6, [sp, #4]
 8005f32:	1aed      	subs	r5, r5, r3
 8005f34:	60a5      	str	r5, [r4, #8]
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	42b3      	cmp	r3, r6
 8005f3a:	d200      	bcs.n	8005f3e <__ssputs_r+0x8e>
 8005f3c:	001e      	movs	r6, r3
 8005f3e:	0032      	movs	r2, r6
 8005f40:	9903      	ldr	r1, [sp, #12]
 8005f42:	6820      	ldr	r0, [r4, #0]
 8005f44:	f000 fbca 	bl	80066dc <memmove>
 8005f48:	68a3      	ldr	r3, [r4, #8]
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	1b9b      	subs	r3, r3, r6
 8005f4e:	60a3      	str	r3, [r4, #8]
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	199e      	adds	r6, r3, r6
 8005f54:	6026      	str	r6, [r4, #0]
 8005f56:	e7da      	b.n	8005f0e <__ssputs_r+0x5e>
 8005f58:	002a      	movs	r2, r5
 8005f5a:	0038      	movs	r0, r7
 8005f5c:	f000 fbd0 	bl	8006700 <_realloc_r>
 8005f60:	1e06      	subs	r6, r0, #0
 8005f62:	d1e0      	bne.n	8005f26 <__ssputs_r+0x76>
 8005f64:	6921      	ldr	r1, [r4, #16]
 8005f66:	0038      	movs	r0, r7
 8005f68:	f7ff fc2c 	bl	80057c4 <_free_r>
 8005f6c:	e7c7      	b.n	8005efe <__ssputs_r+0x4e>
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	fffffb7f 	.word	0xfffffb7f

08005f74 <_svfiprintf_r>:
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	b09f      	sub	sp, #124	; 0x7c
 8005f78:	9002      	str	r0, [sp, #8]
 8005f7a:	9305      	str	r3, [sp, #20]
 8005f7c:	898b      	ldrh	r3, [r1, #12]
 8005f7e:	000f      	movs	r7, r1
 8005f80:	0016      	movs	r6, r2
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	d511      	bpl.n	8005faa <_svfiprintf_r+0x36>
 8005f86:	690b      	ldr	r3, [r1, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10e      	bne.n	8005faa <_svfiprintf_r+0x36>
 8005f8c:	2140      	movs	r1, #64	; 0x40
 8005f8e:	f7ff fc63 	bl	8005858 <_malloc_r>
 8005f92:	6038      	str	r0, [r7, #0]
 8005f94:	6138      	str	r0, [r7, #16]
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d105      	bne.n	8005fa6 <_svfiprintf_r+0x32>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	9a02      	ldr	r2, [sp, #8]
 8005f9e:	3801      	subs	r0, #1
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	b01f      	add	sp, #124	; 0x7c
 8005fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fa6:	2340      	movs	r3, #64	; 0x40
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	2300      	movs	r3, #0
 8005fac:	ad06      	add	r5, sp, #24
 8005fae:	616b      	str	r3, [r5, #20]
 8005fb0:	3320      	adds	r3, #32
 8005fb2:	766b      	strb	r3, [r5, #25]
 8005fb4:	3310      	adds	r3, #16
 8005fb6:	76ab      	strb	r3, [r5, #26]
 8005fb8:	0034      	movs	r4, r6
 8005fba:	7823      	ldrb	r3, [r4, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d147      	bne.n	8006050 <_svfiprintf_r+0xdc>
 8005fc0:	1ba3      	subs	r3, r4, r6
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	d00d      	beq.n	8005fe2 <_svfiprintf_r+0x6e>
 8005fc6:	1ba3      	subs	r3, r4, r6
 8005fc8:	0032      	movs	r2, r6
 8005fca:	0039      	movs	r1, r7
 8005fcc:	9802      	ldr	r0, [sp, #8]
 8005fce:	f7ff ff6f 	bl	8005eb0 <__ssputs_r>
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	d100      	bne.n	8005fd8 <_svfiprintf_r+0x64>
 8005fd6:	e0b5      	b.n	8006144 <_svfiprintf_r+0x1d0>
 8005fd8:	696a      	ldr	r2, [r5, #20]
 8005fda:	9b04      	ldr	r3, [sp, #16]
 8005fdc:	4694      	mov	ip, r2
 8005fde:	4463      	add	r3, ip
 8005fe0:	616b      	str	r3, [r5, #20]
 8005fe2:	7823      	ldrb	r3, [r4, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d100      	bne.n	8005fea <_svfiprintf_r+0x76>
 8005fe8:	e0ac      	b.n	8006144 <_svfiprintf_r+0x1d0>
 8005fea:	2201      	movs	r2, #1
 8005fec:	2300      	movs	r3, #0
 8005fee:	4252      	negs	r2, r2
 8005ff0:	606a      	str	r2, [r5, #4]
 8005ff2:	a902      	add	r1, sp, #8
 8005ff4:	3254      	adds	r2, #84	; 0x54
 8005ff6:	1852      	adds	r2, r2, r1
 8005ff8:	3401      	adds	r4, #1
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	60eb      	str	r3, [r5, #12]
 8005ffe:	60ab      	str	r3, [r5, #8]
 8006000:	7013      	strb	r3, [r2, #0]
 8006002:	65ab      	str	r3, [r5, #88]	; 0x58
 8006004:	4e58      	ldr	r6, [pc, #352]	; (8006168 <_svfiprintf_r+0x1f4>)
 8006006:	2205      	movs	r2, #5
 8006008:	7821      	ldrb	r1, [r4, #0]
 800600a:	0030      	movs	r0, r6
 800600c:	f000 fb52 	bl	80066b4 <memchr>
 8006010:	1c62      	adds	r2, r4, #1
 8006012:	2800      	cmp	r0, #0
 8006014:	d120      	bne.n	8006058 <_svfiprintf_r+0xe4>
 8006016:	6829      	ldr	r1, [r5, #0]
 8006018:	06cb      	lsls	r3, r1, #27
 800601a:	d504      	bpl.n	8006026 <_svfiprintf_r+0xb2>
 800601c:	2353      	movs	r3, #83	; 0x53
 800601e:	ae02      	add	r6, sp, #8
 8006020:	3020      	adds	r0, #32
 8006022:	199b      	adds	r3, r3, r6
 8006024:	7018      	strb	r0, [r3, #0]
 8006026:	070b      	lsls	r3, r1, #28
 8006028:	d504      	bpl.n	8006034 <_svfiprintf_r+0xc0>
 800602a:	2353      	movs	r3, #83	; 0x53
 800602c:	202b      	movs	r0, #43	; 0x2b
 800602e:	ae02      	add	r6, sp, #8
 8006030:	199b      	adds	r3, r3, r6
 8006032:	7018      	strb	r0, [r3, #0]
 8006034:	7823      	ldrb	r3, [r4, #0]
 8006036:	2b2a      	cmp	r3, #42	; 0x2a
 8006038:	d016      	beq.n	8006068 <_svfiprintf_r+0xf4>
 800603a:	2000      	movs	r0, #0
 800603c:	210a      	movs	r1, #10
 800603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006040:	7822      	ldrb	r2, [r4, #0]
 8006042:	3a30      	subs	r2, #48	; 0x30
 8006044:	2a09      	cmp	r2, #9
 8006046:	d955      	bls.n	80060f4 <_svfiprintf_r+0x180>
 8006048:	2800      	cmp	r0, #0
 800604a:	d015      	beq.n	8006078 <_svfiprintf_r+0x104>
 800604c:	9309      	str	r3, [sp, #36]	; 0x24
 800604e:	e013      	b.n	8006078 <_svfiprintf_r+0x104>
 8006050:	2b25      	cmp	r3, #37	; 0x25
 8006052:	d0b5      	beq.n	8005fc0 <_svfiprintf_r+0x4c>
 8006054:	3401      	adds	r4, #1
 8006056:	e7b0      	b.n	8005fba <_svfiprintf_r+0x46>
 8006058:	2301      	movs	r3, #1
 800605a:	1b80      	subs	r0, r0, r6
 800605c:	4083      	lsls	r3, r0
 800605e:	6829      	ldr	r1, [r5, #0]
 8006060:	0014      	movs	r4, r2
 8006062:	430b      	orrs	r3, r1
 8006064:	602b      	str	r3, [r5, #0]
 8006066:	e7cd      	b.n	8006004 <_svfiprintf_r+0x90>
 8006068:	9b05      	ldr	r3, [sp, #20]
 800606a:	1d18      	adds	r0, r3, #4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	9005      	str	r0, [sp, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	db39      	blt.n	80060e8 <_svfiprintf_r+0x174>
 8006074:	9309      	str	r3, [sp, #36]	; 0x24
 8006076:	0014      	movs	r4, r2
 8006078:	7823      	ldrb	r3, [r4, #0]
 800607a:	2b2e      	cmp	r3, #46	; 0x2e
 800607c:	d10b      	bne.n	8006096 <_svfiprintf_r+0x122>
 800607e:	7863      	ldrb	r3, [r4, #1]
 8006080:	1c62      	adds	r2, r4, #1
 8006082:	2b2a      	cmp	r3, #42	; 0x2a
 8006084:	d13e      	bne.n	8006104 <_svfiprintf_r+0x190>
 8006086:	9b05      	ldr	r3, [sp, #20]
 8006088:	3402      	adds	r4, #2
 800608a:	1d1a      	adds	r2, r3, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	9205      	str	r2, [sp, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	db34      	blt.n	80060fe <_svfiprintf_r+0x18a>
 8006094:	9307      	str	r3, [sp, #28]
 8006096:	4e35      	ldr	r6, [pc, #212]	; (800616c <_svfiprintf_r+0x1f8>)
 8006098:	7821      	ldrb	r1, [r4, #0]
 800609a:	2203      	movs	r2, #3
 800609c:	0030      	movs	r0, r6
 800609e:	f000 fb09 	bl	80066b4 <memchr>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d006      	beq.n	80060b4 <_svfiprintf_r+0x140>
 80060a6:	2340      	movs	r3, #64	; 0x40
 80060a8:	1b80      	subs	r0, r0, r6
 80060aa:	4083      	lsls	r3, r0
 80060ac:	682a      	ldr	r2, [r5, #0]
 80060ae:	3401      	adds	r4, #1
 80060b0:	4313      	orrs	r3, r2
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	7821      	ldrb	r1, [r4, #0]
 80060b6:	2206      	movs	r2, #6
 80060b8:	482d      	ldr	r0, [pc, #180]	; (8006170 <_svfiprintf_r+0x1fc>)
 80060ba:	1c66      	adds	r6, r4, #1
 80060bc:	7629      	strb	r1, [r5, #24]
 80060be:	f000 faf9 	bl	80066b4 <memchr>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d046      	beq.n	8006154 <_svfiprintf_r+0x1e0>
 80060c6:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <_svfiprintf_r+0x200>)
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d12f      	bne.n	800612c <_svfiprintf_r+0x1b8>
 80060cc:	6829      	ldr	r1, [r5, #0]
 80060ce:	9b05      	ldr	r3, [sp, #20]
 80060d0:	2207      	movs	r2, #7
 80060d2:	05c9      	lsls	r1, r1, #23
 80060d4:	d528      	bpl.n	8006128 <_svfiprintf_r+0x1b4>
 80060d6:	189b      	adds	r3, r3, r2
 80060d8:	4393      	bics	r3, r2
 80060da:	3308      	adds	r3, #8
 80060dc:	9305      	str	r3, [sp, #20]
 80060de:	696b      	ldr	r3, [r5, #20]
 80060e0:	9a03      	ldr	r2, [sp, #12]
 80060e2:	189b      	adds	r3, r3, r2
 80060e4:	616b      	str	r3, [r5, #20]
 80060e6:	e767      	b.n	8005fb8 <_svfiprintf_r+0x44>
 80060e8:	425b      	negs	r3, r3
 80060ea:	60eb      	str	r3, [r5, #12]
 80060ec:	2302      	movs	r3, #2
 80060ee:	430b      	orrs	r3, r1
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	e7c0      	b.n	8006076 <_svfiprintf_r+0x102>
 80060f4:	434b      	muls	r3, r1
 80060f6:	3401      	adds	r4, #1
 80060f8:	189b      	adds	r3, r3, r2
 80060fa:	2001      	movs	r0, #1
 80060fc:	e7a0      	b.n	8006040 <_svfiprintf_r+0xcc>
 80060fe:	2301      	movs	r3, #1
 8006100:	425b      	negs	r3, r3
 8006102:	e7c7      	b.n	8006094 <_svfiprintf_r+0x120>
 8006104:	2300      	movs	r3, #0
 8006106:	0014      	movs	r4, r2
 8006108:	200a      	movs	r0, #10
 800610a:	001a      	movs	r2, r3
 800610c:	606b      	str	r3, [r5, #4]
 800610e:	7821      	ldrb	r1, [r4, #0]
 8006110:	3930      	subs	r1, #48	; 0x30
 8006112:	2909      	cmp	r1, #9
 8006114:	d903      	bls.n	800611e <_svfiprintf_r+0x1aa>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0bd      	beq.n	8006096 <_svfiprintf_r+0x122>
 800611a:	9207      	str	r2, [sp, #28]
 800611c:	e7bb      	b.n	8006096 <_svfiprintf_r+0x122>
 800611e:	4342      	muls	r2, r0
 8006120:	3401      	adds	r4, #1
 8006122:	1852      	adds	r2, r2, r1
 8006124:	2301      	movs	r3, #1
 8006126:	e7f2      	b.n	800610e <_svfiprintf_r+0x19a>
 8006128:	3307      	adds	r3, #7
 800612a:	e7d5      	b.n	80060d8 <_svfiprintf_r+0x164>
 800612c:	ab05      	add	r3, sp, #20
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	003a      	movs	r2, r7
 8006132:	4b11      	ldr	r3, [pc, #68]	; (8006178 <_svfiprintf_r+0x204>)
 8006134:	0029      	movs	r1, r5
 8006136:	9802      	ldr	r0, [sp, #8]
 8006138:	e000      	b.n	800613c <_svfiprintf_r+0x1c8>
 800613a:	bf00      	nop
 800613c:	9003      	str	r0, [sp, #12]
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	d1cc      	bne.n	80060de <_svfiprintf_r+0x16a>
 8006144:	89bb      	ldrh	r3, [r7, #12]
 8006146:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006148:	065b      	lsls	r3, r3, #25
 800614a:	d400      	bmi.n	800614e <_svfiprintf_r+0x1da>
 800614c:	e729      	b.n	8005fa2 <_svfiprintf_r+0x2e>
 800614e:	2001      	movs	r0, #1
 8006150:	4240      	negs	r0, r0
 8006152:	e726      	b.n	8005fa2 <_svfiprintf_r+0x2e>
 8006154:	ab05      	add	r3, sp, #20
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	003a      	movs	r2, r7
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <_svfiprintf_r+0x204>)
 800615c:	0029      	movs	r1, r5
 800615e:	9802      	ldr	r0, [sp, #8]
 8006160:	f000 f87a 	bl	8006258 <_printf_i>
 8006164:	e7ea      	b.n	800613c <_svfiprintf_r+0x1c8>
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	08007228 	.word	0x08007228
 800616c:	0800722e 	.word	0x0800722e
 8006170:	08007232 	.word	0x08007232
 8006174:	00000000 	.word	0x00000000
 8006178:	08005eb1 	.word	0x08005eb1

0800617c <_printf_common>:
 800617c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800617e:	0015      	movs	r5, r2
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	688a      	ldr	r2, [r1, #8]
 8006184:	690b      	ldr	r3, [r1, #16]
 8006186:	9000      	str	r0, [sp, #0]
 8006188:	000c      	movs	r4, r1
 800618a:	4293      	cmp	r3, r2
 800618c:	da00      	bge.n	8006190 <_printf_common+0x14>
 800618e:	0013      	movs	r3, r2
 8006190:	0022      	movs	r2, r4
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	3243      	adds	r2, #67	; 0x43
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	2a00      	cmp	r2, #0
 800619a:	d001      	beq.n	80061a0 <_printf_common+0x24>
 800619c:	3301      	adds	r3, #1
 800619e:	602b      	str	r3, [r5, #0]
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	069b      	lsls	r3, r3, #26
 80061a4:	d502      	bpl.n	80061ac <_printf_common+0x30>
 80061a6:	682b      	ldr	r3, [r5, #0]
 80061a8:	3302      	adds	r3, #2
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	2706      	movs	r7, #6
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	401f      	ands	r7, r3
 80061b2:	d027      	beq.n	8006204 <_printf_common+0x88>
 80061b4:	0023      	movs	r3, r4
 80061b6:	3343      	adds	r3, #67	; 0x43
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	1e5a      	subs	r2, r3, #1
 80061bc:	4193      	sbcs	r3, r2
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	0692      	lsls	r2, r2, #26
 80061c2:	d430      	bmi.n	8006226 <_printf_common+0xaa>
 80061c4:	0022      	movs	r2, r4
 80061c6:	9901      	ldr	r1, [sp, #4]
 80061c8:	3243      	adds	r2, #67	; 0x43
 80061ca:	9800      	ldr	r0, [sp, #0]
 80061cc:	9e08      	ldr	r6, [sp, #32]
 80061ce:	47b0      	blx	r6
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d025      	beq.n	8006220 <_printf_common+0xa4>
 80061d4:	2306      	movs	r3, #6
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	682a      	ldr	r2, [r5, #0]
 80061da:	68e1      	ldr	r1, [r4, #12]
 80061dc:	4003      	ands	r3, r0
 80061de:	2500      	movs	r5, #0
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d103      	bne.n	80061ec <_printf_common+0x70>
 80061e4:	1a8d      	subs	r5, r1, r2
 80061e6:	43eb      	mvns	r3, r5
 80061e8:	17db      	asrs	r3, r3, #31
 80061ea:	401d      	ands	r5, r3
 80061ec:	68a3      	ldr	r3, [r4, #8]
 80061ee:	6922      	ldr	r2, [r4, #16]
 80061f0:	4293      	cmp	r3, r2
 80061f2:	dd01      	ble.n	80061f8 <_printf_common+0x7c>
 80061f4:	1a9b      	subs	r3, r3, r2
 80061f6:	18ed      	adds	r5, r5, r3
 80061f8:	2700      	movs	r7, #0
 80061fa:	42bd      	cmp	r5, r7
 80061fc:	d120      	bne.n	8006240 <_printf_common+0xc4>
 80061fe:	2000      	movs	r0, #0
 8006200:	e010      	b.n	8006224 <_printf_common+0xa8>
 8006202:	3701      	adds	r7, #1
 8006204:	68e3      	ldr	r3, [r4, #12]
 8006206:	682a      	ldr	r2, [r5, #0]
 8006208:	1a9b      	subs	r3, r3, r2
 800620a:	429f      	cmp	r7, r3
 800620c:	dad2      	bge.n	80061b4 <_printf_common+0x38>
 800620e:	0022      	movs	r2, r4
 8006210:	2301      	movs	r3, #1
 8006212:	3219      	adds	r2, #25
 8006214:	9901      	ldr	r1, [sp, #4]
 8006216:	9800      	ldr	r0, [sp, #0]
 8006218:	9e08      	ldr	r6, [sp, #32]
 800621a:	47b0      	blx	r6
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d1f0      	bne.n	8006202 <_printf_common+0x86>
 8006220:	2001      	movs	r0, #1
 8006222:	4240      	negs	r0, r0
 8006224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006226:	2030      	movs	r0, #48	; 0x30
 8006228:	18e1      	adds	r1, r4, r3
 800622a:	3143      	adds	r1, #67	; 0x43
 800622c:	7008      	strb	r0, [r1, #0]
 800622e:	0021      	movs	r1, r4
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	3145      	adds	r1, #69	; 0x45
 8006234:	7809      	ldrb	r1, [r1, #0]
 8006236:	18a2      	adds	r2, r4, r2
 8006238:	3243      	adds	r2, #67	; 0x43
 800623a:	3302      	adds	r3, #2
 800623c:	7011      	strb	r1, [r2, #0]
 800623e:	e7c1      	b.n	80061c4 <_printf_common+0x48>
 8006240:	0022      	movs	r2, r4
 8006242:	2301      	movs	r3, #1
 8006244:	321a      	adds	r2, #26
 8006246:	9901      	ldr	r1, [sp, #4]
 8006248:	9800      	ldr	r0, [sp, #0]
 800624a:	9e08      	ldr	r6, [sp, #32]
 800624c:	47b0      	blx	r6
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	d0e6      	beq.n	8006220 <_printf_common+0xa4>
 8006252:	3701      	adds	r7, #1
 8006254:	e7d1      	b.n	80061fa <_printf_common+0x7e>
	...

08006258 <_printf_i>:
 8006258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625a:	b08b      	sub	sp, #44	; 0x2c
 800625c:	9206      	str	r2, [sp, #24]
 800625e:	000a      	movs	r2, r1
 8006260:	3243      	adds	r2, #67	; 0x43
 8006262:	9307      	str	r3, [sp, #28]
 8006264:	9005      	str	r0, [sp, #20]
 8006266:	9204      	str	r2, [sp, #16]
 8006268:	7e0a      	ldrb	r2, [r1, #24]
 800626a:	000c      	movs	r4, r1
 800626c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800626e:	2a6e      	cmp	r2, #110	; 0x6e
 8006270:	d100      	bne.n	8006274 <_printf_i+0x1c>
 8006272:	e08f      	b.n	8006394 <_printf_i+0x13c>
 8006274:	d817      	bhi.n	80062a6 <_printf_i+0x4e>
 8006276:	2a63      	cmp	r2, #99	; 0x63
 8006278:	d02c      	beq.n	80062d4 <_printf_i+0x7c>
 800627a:	d808      	bhi.n	800628e <_printf_i+0x36>
 800627c:	2a00      	cmp	r2, #0
 800627e:	d100      	bne.n	8006282 <_printf_i+0x2a>
 8006280:	e099      	b.n	80063b6 <_printf_i+0x15e>
 8006282:	2a58      	cmp	r2, #88	; 0x58
 8006284:	d054      	beq.n	8006330 <_printf_i+0xd8>
 8006286:	0026      	movs	r6, r4
 8006288:	3642      	adds	r6, #66	; 0x42
 800628a:	7032      	strb	r2, [r6, #0]
 800628c:	e029      	b.n	80062e2 <_printf_i+0x8a>
 800628e:	2a64      	cmp	r2, #100	; 0x64
 8006290:	d001      	beq.n	8006296 <_printf_i+0x3e>
 8006292:	2a69      	cmp	r2, #105	; 0x69
 8006294:	d1f7      	bne.n	8006286 <_printf_i+0x2e>
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	0608      	lsls	r0, r1, #24
 800629c:	d523      	bpl.n	80062e6 <_printf_i+0x8e>
 800629e:	1d11      	adds	r1, r2, #4
 80062a0:	6019      	str	r1, [r3, #0]
 80062a2:	6815      	ldr	r5, [r2, #0]
 80062a4:	e025      	b.n	80062f2 <_printf_i+0x9a>
 80062a6:	2a73      	cmp	r2, #115	; 0x73
 80062a8:	d100      	bne.n	80062ac <_printf_i+0x54>
 80062aa:	e088      	b.n	80063be <_printf_i+0x166>
 80062ac:	d808      	bhi.n	80062c0 <_printf_i+0x68>
 80062ae:	2a6f      	cmp	r2, #111	; 0x6f
 80062b0:	d029      	beq.n	8006306 <_printf_i+0xae>
 80062b2:	2a70      	cmp	r2, #112	; 0x70
 80062b4:	d1e7      	bne.n	8006286 <_printf_i+0x2e>
 80062b6:	2220      	movs	r2, #32
 80062b8:	6809      	ldr	r1, [r1, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	6022      	str	r2, [r4, #0]
 80062be:	e003      	b.n	80062c8 <_printf_i+0x70>
 80062c0:	2a75      	cmp	r2, #117	; 0x75
 80062c2:	d020      	beq.n	8006306 <_printf_i+0xae>
 80062c4:	2a78      	cmp	r2, #120	; 0x78
 80062c6:	d1de      	bne.n	8006286 <_printf_i+0x2e>
 80062c8:	0022      	movs	r2, r4
 80062ca:	2178      	movs	r1, #120	; 0x78
 80062cc:	3245      	adds	r2, #69	; 0x45
 80062ce:	7011      	strb	r1, [r2, #0]
 80062d0:	4a6c      	ldr	r2, [pc, #432]	; (8006484 <_printf_i+0x22c>)
 80062d2:	e030      	b.n	8006336 <_printf_i+0xde>
 80062d4:	000e      	movs	r6, r1
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	3642      	adds	r6, #66	; 0x42
 80062da:	1d11      	adds	r1, r2, #4
 80062dc:	6019      	str	r1, [r3, #0]
 80062de:	6813      	ldr	r3, [r2, #0]
 80062e0:	7033      	strb	r3, [r6, #0]
 80062e2:	2301      	movs	r3, #1
 80062e4:	e079      	b.n	80063da <_printf_i+0x182>
 80062e6:	0649      	lsls	r1, r1, #25
 80062e8:	d5d9      	bpl.n	800629e <_printf_i+0x46>
 80062ea:	1d11      	adds	r1, r2, #4
 80062ec:	6019      	str	r1, [r3, #0]
 80062ee:	2300      	movs	r3, #0
 80062f0:	5ed5      	ldrsh	r5, [r2, r3]
 80062f2:	2d00      	cmp	r5, #0
 80062f4:	da03      	bge.n	80062fe <_printf_i+0xa6>
 80062f6:	232d      	movs	r3, #45	; 0x2d
 80062f8:	9a04      	ldr	r2, [sp, #16]
 80062fa:	426d      	negs	r5, r5
 80062fc:	7013      	strb	r3, [r2, #0]
 80062fe:	4b62      	ldr	r3, [pc, #392]	; (8006488 <_printf_i+0x230>)
 8006300:	270a      	movs	r7, #10
 8006302:	9303      	str	r3, [sp, #12]
 8006304:	e02f      	b.n	8006366 <_printf_i+0x10e>
 8006306:	6820      	ldr	r0, [r4, #0]
 8006308:	6819      	ldr	r1, [r3, #0]
 800630a:	0605      	lsls	r5, r0, #24
 800630c:	d503      	bpl.n	8006316 <_printf_i+0xbe>
 800630e:	1d08      	adds	r0, r1, #4
 8006310:	6018      	str	r0, [r3, #0]
 8006312:	680d      	ldr	r5, [r1, #0]
 8006314:	e005      	b.n	8006322 <_printf_i+0xca>
 8006316:	0640      	lsls	r0, r0, #25
 8006318:	d5f9      	bpl.n	800630e <_printf_i+0xb6>
 800631a:	680d      	ldr	r5, [r1, #0]
 800631c:	1d08      	adds	r0, r1, #4
 800631e:	6018      	str	r0, [r3, #0]
 8006320:	b2ad      	uxth	r5, r5
 8006322:	4b59      	ldr	r3, [pc, #356]	; (8006488 <_printf_i+0x230>)
 8006324:	2708      	movs	r7, #8
 8006326:	9303      	str	r3, [sp, #12]
 8006328:	2a6f      	cmp	r2, #111	; 0x6f
 800632a:	d018      	beq.n	800635e <_printf_i+0x106>
 800632c:	270a      	movs	r7, #10
 800632e:	e016      	b.n	800635e <_printf_i+0x106>
 8006330:	3145      	adds	r1, #69	; 0x45
 8006332:	700a      	strb	r2, [r1, #0]
 8006334:	4a54      	ldr	r2, [pc, #336]	; (8006488 <_printf_i+0x230>)
 8006336:	9203      	str	r2, [sp, #12]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	6821      	ldr	r1, [r4, #0]
 800633c:	1d10      	adds	r0, r2, #4
 800633e:	6018      	str	r0, [r3, #0]
 8006340:	6815      	ldr	r5, [r2, #0]
 8006342:	0608      	lsls	r0, r1, #24
 8006344:	d522      	bpl.n	800638c <_printf_i+0x134>
 8006346:	07cb      	lsls	r3, r1, #31
 8006348:	d502      	bpl.n	8006350 <_printf_i+0xf8>
 800634a:	2320      	movs	r3, #32
 800634c:	4319      	orrs	r1, r3
 800634e:	6021      	str	r1, [r4, #0]
 8006350:	2710      	movs	r7, #16
 8006352:	2d00      	cmp	r5, #0
 8006354:	d103      	bne.n	800635e <_printf_i+0x106>
 8006356:	2320      	movs	r3, #32
 8006358:	6822      	ldr	r2, [r4, #0]
 800635a:	439a      	bics	r2, r3
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	0023      	movs	r3, r4
 8006360:	2200      	movs	r2, #0
 8006362:	3343      	adds	r3, #67	; 0x43
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	6863      	ldr	r3, [r4, #4]
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	db5c      	blt.n	8006428 <_printf_i+0x1d0>
 800636e:	2204      	movs	r2, #4
 8006370:	6821      	ldr	r1, [r4, #0]
 8006372:	4391      	bics	r1, r2
 8006374:	6021      	str	r1, [r4, #0]
 8006376:	2d00      	cmp	r5, #0
 8006378:	d158      	bne.n	800642c <_printf_i+0x1d4>
 800637a:	9e04      	ldr	r6, [sp, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d064      	beq.n	800644a <_printf_i+0x1f2>
 8006380:	0026      	movs	r6, r4
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	3642      	adds	r6, #66	; 0x42
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	7033      	strb	r3, [r6, #0]
 800638a:	e05e      	b.n	800644a <_printf_i+0x1f2>
 800638c:	0648      	lsls	r0, r1, #25
 800638e:	d5da      	bpl.n	8006346 <_printf_i+0xee>
 8006390:	b2ad      	uxth	r5, r5
 8006392:	e7d8      	b.n	8006346 <_printf_i+0xee>
 8006394:	6809      	ldr	r1, [r1, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	0608      	lsls	r0, r1, #24
 800639a:	d505      	bpl.n	80063a8 <_printf_i+0x150>
 800639c:	1d11      	adds	r1, r2, #4
 800639e:	6019      	str	r1, [r3, #0]
 80063a0:	6813      	ldr	r3, [r2, #0]
 80063a2:	6962      	ldr	r2, [r4, #20]
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e006      	b.n	80063b6 <_printf_i+0x15e>
 80063a8:	0649      	lsls	r1, r1, #25
 80063aa:	d5f7      	bpl.n	800639c <_printf_i+0x144>
 80063ac:	1d11      	adds	r1, r2, #4
 80063ae:	6019      	str	r1, [r3, #0]
 80063b0:	6813      	ldr	r3, [r2, #0]
 80063b2:	8aa2      	ldrh	r2, [r4, #20]
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	9e04      	ldr	r6, [sp, #16]
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	e054      	b.n	8006468 <_printf_i+0x210>
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	1d11      	adds	r1, r2, #4
 80063c2:	6019      	str	r1, [r3, #0]
 80063c4:	6816      	ldr	r6, [r2, #0]
 80063c6:	2100      	movs	r1, #0
 80063c8:	6862      	ldr	r2, [r4, #4]
 80063ca:	0030      	movs	r0, r6
 80063cc:	f000 f972 	bl	80066b4 <memchr>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d001      	beq.n	80063d8 <_printf_i+0x180>
 80063d4:	1b80      	subs	r0, r0, r6
 80063d6:	6060      	str	r0, [r4, #4]
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	2300      	movs	r3, #0
 80063de:	9a04      	ldr	r2, [sp, #16]
 80063e0:	7013      	strb	r3, [r2, #0]
 80063e2:	e041      	b.n	8006468 <_printf_i+0x210>
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	0032      	movs	r2, r6
 80063e8:	9906      	ldr	r1, [sp, #24]
 80063ea:	9805      	ldr	r0, [sp, #20]
 80063ec:	9d07      	ldr	r5, [sp, #28]
 80063ee:	47a8      	blx	r5
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d043      	beq.n	800647c <_printf_i+0x224>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	2500      	movs	r5, #0
 80063f8:	079b      	lsls	r3, r3, #30
 80063fa:	d40f      	bmi.n	800641c <_printf_i+0x1c4>
 80063fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fe:	68e0      	ldr	r0, [r4, #12]
 8006400:	4298      	cmp	r0, r3
 8006402:	da3d      	bge.n	8006480 <_printf_i+0x228>
 8006404:	0018      	movs	r0, r3
 8006406:	e03b      	b.n	8006480 <_printf_i+0x228>
 8006408:	0022      	movs	r2, r4
 800640a:	2301      	movs	r3, #1
 800640c:	3219      	adds	r2, #25
 800640e:	9906      	ldr	r1, [sp, #24]
 8006410:	9805      	ldr	r0, [sp, #20]
 8006412:	9e07      	ldr	r6, [sp, #28]
 8006414:	47b0      	blx	r6
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d030      	beq.n	800647c <_printf_i+0x224>
 800641a:	3501      	adds	r5, #1
 800641c:	68e3      	ldr	r3, [r4, #12]
 800641e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	429d      	cmp	r5, r3
 8006424:	dbf0      	blt.n	8006408 <_printf_i+0x1b0>
 8006426:	e7e9      	b.n	80063fc <_printf_i+0x1a4>
 8006428:	2d00      	cmp	r5, #0
 800642a:	d0a9      	beq.n	8006380 <_printf_i+0x128>
 800642c:	9e04      	ldr	r6, [sp, #16]
 800642e:	0028      	movs	r0, r5
 8006430:	0039      	movs	r1, r7
 8006432:	f7f9 ff0b 	bl	800024c <__aeabi_uidivmod>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	3e01      	subs	r6, #1
 800643a:	5c5b      	ldrb	r3, [r3, r1]
 800643c:	0028      	movs	r0, r5
 800643e:	7033      	strb	r3, [r6, #0]
 8006440:	0039      	movs	r1, r7
 8006442:	f7f9 fe7d 	bl	8000140 <__udivsi3>
 8006446:	1e05      	subs	r5, r0, #0
 8006448:	d1f1      	bne.n	800642e <_printf_i+0x1d6>
 800644a:	2f08      	cmp	r7, #8
 800644c:	d109      	bne.n	8006462 <_printf_i+0x20a>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	07db      	lsls	r3, r3, #31
 8006452:	d506      	bpl.n	8006462 <_printf_i+0x20a>
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	6922      	ldr	r2, [r4, #16]
 8006458:	4293      	cmp	r3, r2
 800645a:	dc02      	bgt.n	8006462 <_printf_i+0x20a>
 800645c:	2330      	movs	r3, #48	; 0x30
 800645e:	3e01      	subs	r6, #1
 8006460:	7033      	strb	r3, [r6, #0]
 8006462:	9b04      	ldr	r3, [sp, #16]
 8006464:	1b9b      	subs	r3, r3, r6
 8006466:	6123      	str	r3, [r4, #16]
 8006468:	9b07      	ldr	r3, [sp, #28]
 800646a:	aa09      	add	r2, sp, #36	; 0x24
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	0021      	movs	r1, r4
 8006470:	9b06      	ldr	r3, [sp, #24]
 8006472:	9805      	ldr	r0, [sp, #20]
 8006474:	f7ff fe82 	bl	800617c <_printf_common>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d1b3      	bne.n	80063e4 <_printf_i+0x18c>
 800647c:	2001      	movs	r0, #1
 800647e:	4240      	negs	r0, r0
 8006480:	b00b      	add	sp, #44	; 0x2c
 8006482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006484:	0800724a 	.word	0x0800724a
 8006488:	08007239 	.word	0x08007239

0800648c <siscanf>:
 800648c:	b40e      	push	{r1, r2, r3}
 800648e:	2381      	movs	r3, #129	; 0x81
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	b09d      	sub	sp, #116	; 0x74
 8006494:	ac02      	add	r4, sp, #8
 8006496:	ad21      	add	r5, sp, #132	; 0x84
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	cd40      	ldmia	r5!, {r6}
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	9002      	str	r0, [sp, #8]
 80064a0:	9006      	str	r0, [sp, #24]
 80064a2:	f7f9 fe31 	bl	8000108 <strlen>
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <siscanf+0x48>)
 80064a8:	6060      	str	r0, [r4, #4]
 80064aa:	6263      	str	r3, [r4, #36]	; 0x24
 80064ac:	2300      	movs	r3, #0
 80064ae:	6160      	str	r0, [r4, #20]
 80064b0:	4809      	ldr	r0, [pc, #36]	; (80064d8 <siscanf+0x4c>)
 80064b2:	6363      	str	r3, [r4, #52]	; 0x34
 80064b4:	64a3      	str	r3, [r4, #72]	; 0x48
 80064b6:	3b01      	subs	r3, #1
 80064b8:	81e3      	strh	r3, [r4, #14]
 80064ba:	0032      	movs	r2, r6
 80064bc:	002b      	movs	r3, r5
 80064be:	0021      	movs	r1, r4
 80064c0:	6800      	ldr	r0, [r0, #0]
 80064c2:	9501      	str	r5, [sp, #4]
 80064c4:	f000 f99e 	bl	8006804 <__ssvfiscanf_r>
 80064c8:	b01d      	add	sp, #116	; 0x74
 80064ca:	bc70      	pop	{r4, r5, r6}
 80064cc:	bc08      	pop	{r3}
 80064ce:	b003      	add	sp, #12
 80064d0:	4718      	bx	r3
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	080064dd 	.word	0x080064dd
 80064d8:	20000010 	.word	0x20000010

080064dc <__seofread>:
 80064dc:	2000      	movs	r0, #0
 80064de:	4770      	bx	lr

080064e0 <strcpy>:
 80064e0:	1c03      	adds	r3, r0, #0
 80064e2:	780a      	ldrb	r2, [r1, #0]
 80064e4:	3101      	adds	r1, #1
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	d1f9      	bne.n	80064e2 <strcpy+0x2>
 80064ee:	4770      	bx	lr

080064f0 <strncmp>:
 80064f0:	2300      	movs	r3, #0
 80064f2:	b530      	push	{r4, r5, lr}
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d00a      	beq.n	800650e <strncmp+0x1e>
 80064f8:	3a01      	subs	r2, #1
 80064fa:	5cc4      	ldrb	r4, [r0, r3]
 80064fc:	5ccd      	ldrb	r5, [r1, r3]
 80064fe:	42ac      	cmp	r4, r5
 8006500:	d104      	bne.n	800650c <strncmp+0x1c>
 8006502:	429a      	cmp	r2, r3
 8006504:	d002      	beq.n	800650c <strncmp+0x1c>
 8006506:	3301      	adds	r3, #1
 8006508:	2c00      	cmp	r4, #0
 800650a:	d1f6      	bne.n	80064fa <strncmp+0xa>
 800650c:	1b63      	subs	r3, r4, r5
 800650e:	0018      	movs	r0, r3
 8006510:	bd30      	pop	{r4, r5, pc}

08006512 <_strtoul_l.isra.0>:
 8006512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006514:	001f      	movs	r7, r3
 8006516:	000e      	movs	r6, r1
 8006518:	b087      	sub	sp, #28
 800651a:	9005      	str	r0, [sp, #20]
 800651c:	9103      	str	r1, [sp, #12]
 800651e:	9201      	str	r2, [sp, #4]
 8006520:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006522:	7834      	ldrb	r4, [r6, #0]
 8006524:	f000 f8a2 	bl	800666c <__locale_ctype_ptr_l>
 8006528:	2208      	movs	r2, #8
 800652a:	1900      	adds	r0, r0, r4
 800652c:	7843      	ldrb	r3, [r0, #1]
 800652e:	1c75      	adds	r5, r6, #1
 8006530:	4013      	ands	r3, r2
 8006532:	d10c      	bne.n	800654e <_strtoul_l.isra.0+0x3c>
 8006534:	2c2d      	cmp	r4, #45	; 0x2d
 8006536:	d10c      	bne.n	8006552 <_strtoul_l.isra.0+0x40>
 8006538:	3301      	adds	r3, #1
 800653a:	782c      	ldrb	r4, [r5, #0]
 800653c:	9302      	str	r3, [sp, #8]
 800653e:	1cb5      	adds	r5, r6, #2
 8006540:	2f00      	cmp	r7, #0
 8006542:	d00c      	beq.n	800655e <_strtoul_l.isra.0+0x4c>
 8006544:	2f10      	cmp	r7, #16
 8006546:	d114      	bne.n	8006572 <_strtoul_l.isra.0+0x60>
 8006548:	2c30      	cmp	r4, #48	; 0x30
 800654a:	d00a      	beq.n	8006562 <_strtoul_l.isra.0+0x50>
 800654c:	e011      	b.n	8006572 <_strtoul_l.isra.0+0x60>
 800654e:	002e      	movs	r6, r5
 8006550:	e7e6      	b.n	8006520 <_strtoul_l.isra.0+0xe>
 8006552:	9302      	str	r3, [sp, #8]
 8006554:	2c2b      	cmp	r4, #43	; 0x2b
 8006556:	d1f3      	bne.n	8006540 <_strtoul_l.isra.0+0x2e>
 8006558:	782c      	ldrb	r4, [r5, #0]
 800655a:	1cb5      	adds	r5, r6, #2
 800655c:	e7f0      	b.n	8006540 <_strtoul_l.isra.0+0x2e>
 800655e:	2c30      	cmp	r4, #48	; 0x30
 8006560:	d12f      	bne.n	80065c2 <_strtoul_l.isra.0+0xb0>
 8006562:	2220      	movs	r2, #32
 8006564:	782b      	ldrb	r3, [r5, #0]
 8006566:	4393      	bics	r3, r2
 8006568:	2b58      	cmp	r3, #88	; 0x58
 800656a:	d154      	bne.n	8006616 <_strtoul_l.isra.0+0x104>
 800656c:	2710      	movs	r7, #16
 800656e:	786c      	ldrb	r4, [r5, #1]
 8006570:	3502      	adds	r5, #2
 8006572:	2001      	movs	r0, #1
 8006574:	0039      	movs	r1, r7
 8006576:	4240      	negs	r0, r0
 8006578:	f7f9 fde2 	bl	8000140 <__udivsi3>
 800657c:	0006      	movs	r6, r0
 800657e:	2001      	movs	r0, #1
 8006580:	0039      	movs	r1, r7
 8006582:	4240      	negs	r0, r0
 8006584:	f7f9 fe62 	bl	800024c <__aeabi_uidivmod>
 8006588:	2300      	movs	r3, #0
 800658a:	9104      	str	r1, [sp, #16]
 800658c:	2101      	movs	r1, #1
 800658e:	2201      	movs	r2, #1
 8006590:	0018      	movs	r0, r3
 8006592:	468c      	mov	ip, r1
 8006594:	4252      	negs	r2, r2
 8006596:	0021      	movs	r1, r4
 8006598:	3930      	subs	r1, #48	; 0x30
 800659a:	2909      	cmp	r1, #9
 800659c:	d813      	bhi.n	80065c6 <_strtoul_l.isra.0+0xb4>
 800659e:	000c      	movs	r4, r1
 80065a0:	42a7      	cmp	r7, r4
 80065a2:	dd1e      	ble.n	80065e2 <_strtoul_l.isra.0+0xd0>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	db1a      	blt.n	80065de <_strtoul_l.isra.0+0xcc>
 80065a8:	0013      	movs	r3, r2
 80065aa:	4286      	cmp	r6, r0
 80065ac:	d306      	bcc.n	80065bc <_strtoul_l.isra.0+0xaa>
 80065ae:	d102      	bne.n	80065b6 <_strtoul_l.isra.0+0xa4>
 80065b0:	9904      	ldr	r1, [sp, #16]
 80065b2:	42a1      	cmp	r1, r4
 80065b4:	db02      	blt.n	80065bc <_strtoul_l.isra.0+0xaa>
 80065b6:	4663      	mov	r3, ip
 80065b8:	4378      	muls	r0, r7
 80065ba:	1820      	adds	r0, r4, r0
 80065bc:	782c      	ldrb	r4, [r5, #0]
 80065be:	3501      	adds	r5, #1
 80065c0:	e7e9      	b.n	8006596 <_strtoul_l.isra.0+0x84>
 80065c2:	270a      	movs	r7, #10
 80065c4:	e7d5      	b.n	8006572 <_strtoul_l.isra.0+0x60>
 80065c6:	0021      	movs	r1, r4
 80065c8:	3941      	subs	r1, #65	; 0x41
 80065ca:	2919      	cmp	r1, #25
 80065cc:	d801      	bhi.n	80065d2 <_strtoul_l.isra.0+0xc0>
 80065ce:	3c37      	subs	r4, #55	; 0x37
 80065d0:	e7e6      	b.n	80065a0 <_strtoul_l.isra.0+0x8e>
 80065d2:	0021      	movs	r1, r4
 80065d4:	3961      	subs	r1, #97	; 0x61
 80065d6:	2919      	cmp	r1, #25
 80065d8:	d803      	bhi.n	80065e2 <_strtoul_l.isra.0+0xd0>
 80065da:	3c57      	subs	r4, #87	; 0x57
 80065dc:	e7e0      	b.n	80065a0 <_strtoul_l.isra.0+0x8e>
 80065de:	0013      	movs	r3, r2
 80065e0:	e7ec      	b.n	80065bc <_strtoul_l.isra.0+0xaa>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da09      	bge.n	80065fa <_strtoul_l.isra.0+0xe8>
 80065e6:	2322      	movs	r3, #34	; 0x22
 80065e8:	2001      	movs	r0, #1
 80065ea:	9a05      	ldr	r2, [sp, #20]
 80065ec:	4240      	negs	r0, r0
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	9b01      	ldr	r3, [sp, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10b      	bne.n	800660e <_strtoul_l.isra.0+0xfc>
 80065f6:	b007      	add	sp, #28
 80065f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065fa:	9a02      	ldr	r2, [sp, #8]
 80065fc:	2a00      	cmp	r2, #0
 80065fe:	d000      	beq.n	8006602 <_strtoul_l.isra.0+0xf0>
 8006600:	4240      	negs	r0, r0
 8006602:	9a01      	ldr	r2, [sp, #4]
 8006604:	2a00      	cmp	r2, #0
 8006606:	d0f6      	beq.n	80065f6 <_strtoul_l.isra.0+0xe4>
 8006608:	9a03      	ldr	r2, [sp, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d000      	beq.n	8006610 <_strtoul_l.isra.0+0xfe>
 800660e:	1e6a      	subs	r2, r5, #1
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e7ef      	b.n	80065f6 <_strtoul_l.isra.0+0xe4>
 8006616:	2430      	movs	r4, #48	; 0x30
 8006618:	2f00      	cmp	r7, #0
 800661a:	d1aa      	bne.n	8006572 <_strtoul_l.isra.0+0x60>
 800661c:	3708      	adds	r7, #8
 800661e:	e7a8      	b.n	8006572 <_strtoul_l.isra.0+0x60>

08006620 <_strtoul_r>:
 8006620:	b513      	push	{r0, r1, r4, lr}
 8006622:	4c05      	ldr	r4, [pc, #20]	; (8006638 <_strtoul_r+0x18>)
 8006624:	6824      	ldr	r4, [r4, #0]
 8006626:	6a24      	ldr	r4, [r4, #32]
 8006628:	2c00      	cmp	r4, #0
 800662a:	d100      	bne.n	800662e <_strtoul_r+0xe>
 800662c:	4c03      	ldr	r4, [pc, #12]	; (800663c <_strtoul_r+0x1c>)
 800662e:	9400      	str	r4, [sp, #0]
 8006630:	f7ff ff6f 	bl	8006512 <_strtoul_l.isra.0>
 8006634:	bd16      	pop	{r1, r2, r4, pc}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	20000010 	.word	0x20000010
 800663c:	200000bc 	.word	0x200000bc

08006640 <strtoul>:
 8006640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006642:	0013      	movs	r3, r2
 8006644:	4a06      	ldr	r2, [pc, #24]	; (8006660 <strtoul+0x20>)
 8006646:	0005      	movs	r5, r0
 8006648:	6810      	ldr	r0, [r2, #0]
 800664a:	6a04      	ldr	r4, [r0, #32]
 800664c:	2c00      	cmp	r4, #0
 800664e:	d100      	bne.n	8006652 <strtoul+0x12>
 8006650:	4c04      	ldr	r4, [pc, #16]	; (8006664 <strtoul+0x24>)
 8006652:	000a      	movs	r2, r1
 8006654:	9400      	str	r4, [sp, #0]
 8006656:	0029      	movs	r1, r5
 8006658:	f7ff ff5b 	bl	8006512 <_strtoul_l.isra.0>
 800665c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	20000010 	.word	0x20000010
 8006664:	200000bc 	.word	0x200000bc

08006668 <__env_lock>:
 8006668:	4770      	bx	lr

0800666a <__env_unlock>:
 800666a:	4770      	bx	lr

0800666c <__locale_ctype_ptr_l>:
 800666c:	30ec      	adds	r0, #236	; 0xec
 800666e:	6800      	ldr	r0, [r0, #0]
 8006670:	4770      	bx	lr
	...

08006674 <__locale_ctype_ptr>:
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <__locale_ctype_ptr+0x14>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d100      	bne.n	8006680 <__locale_ctype_ptr+0xc>
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <__locale_ctype_ptr+0x18>)
 8006680:	33ec      	adds	r3, #236	; 0xec
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4770      	bx	lr
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	20000010 	.word	0x20000010
 800668c:	200000bc 	.word	0x200000bc

08006690 <__ascii_mbtowc>:
 8006690:	b082      	sub	sp, #8
 8006692:	2900      	cmp	r1, #0
 8006694:	d100      	bne.n	8006698 <__ascii_mbtowc+0x8>
 8006696:	a901      	add	r1, sp, #4
 8006698:	1e10      	subs	r0, r2, #0
 800669a:	d006      	beq.n	80066aa <__ascii_mbtowc+0x1a>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d006      	beq.n	80066ae <__ascii_mbtowc+0x1e>
 80066a0:	7813      	ldrb	r3, [r2, #0]
 80066a2:	600b      	str	r3, [r1, #0]
 80066a4:	7810      	ldrb	r0, [r2, #0]
 80066a6:	1e43      	subs	r3, r0, #1
 80066a8:	4198      	sbcs	r0, r3
 80066aa:	b002      	add	sp, #8
 80066ac:	4770      	bx	lr
 80066ae:	2002      	movs	r0, #2
 80066b0:	4240      	negs	r0, r0
 80066b2:	e7fa      	b.n	80066aa <__ascii_mbtowc+0x1a>

080066b4 <memchr>:
 80066b4:	b2c9      	uxtb	r1, r1
 80066b6:	1882      	adds	r2, r0, r2
 80066b8:	4290      	cmp	r0, r2
 80066ba:	d101      	bne.n	80066c0 <memchr+0xc>
 80066bc:	2000      	movs	r0, #0
 80066be:	4770      	bx	lr
 80066c0:	7803      	ldrb	r3, [r0, #0]
 80066c2:	428b      	cmp	r3, r1
 80066c4:	d0fb      	beq.n	80066be <memchr+0xa>
 80066c6:	3001      	adds	r0, #1
 80066c8:	e7f6      	b.n	80066b8 <memchr+0x4>

080066ca <memcpy>:
 80066ca:	2300      	movs	r3, #0
 80066cc:	b510      	push	{r4, lr}
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d100      	bne.n	80066d4 <memcpy+0xa>
 80066d2:	bd10      	pop	{r4, pc}
 80066d4:	5ccc      	ldrb	r4, [r1, r3]
 80066d6:	54c4      	strb	r4, [r0, r3]
 80066d8:	3301      	adds	r3, #1
 80066da:	e7f8      	b.n	80066ce <memcpy+0x4>

080066dc <memmove>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4288      	cmp	r0, r1
 80066e0:	d902      	bls.n	80066e8 <memmove+0xc>
 80066e2:	188b      	adds	r3, r1, r2
 80066e4:	4298      	cmp	r0, r3
 80066e6:	d308      	bcc.n	80066fa <memmove+0x1e>
 80066e8:	2300      	movs	r3, #0
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d007      	beq.n	80066fe <memmove+0x22>
 80066ee:	5ccc      	ldrb	r4, [r1, r3]
 80066f0:	54c4      	strb	r4, [r0, r3]
 80066f2:	3301      	adds	r3, #1
 80066f4:	e7f9      	b.n	80066ea <memmove+0xe>
 80066f6:	5c8b      	ldrb	r3, [r1, r2]
 80066f8:	5483      	strb	r3, [r0, r2]
 80066fa:	3a01      	subs	r2, #1
 80066fc:	d2fb      	bcs.n	80066f6 <memmove+0x1a>
 80066fe:	bd10      	pop	{r4, pc}

08006700 <_realloc_r>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	0007      	movs	r7, r0
 8006704:	000d      	movs	r5, r1
 8006706:	0016      	movs	r6, r2
 8006708:	2900      	cmp	r1, #0
 800670a:	d105      	bne.n	8006718 <_realloc_r+0x18>
 800670c:	0011      	movs	r1, r2
 800670e:	f7ff f8a3 	bl	8005858 <_malloc_r>
 8006712:	0004      	movs	r4, r0
 8006714:	0020      	movs	r0, r4
 8006716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006718:	2a00      	cmp	r2, #0
 800671a:	d103      	bne.n	8006724 <_realloc_r+0x24>
 800671c:	f7ff f852 	bl	80057c4 <_free_r>
 8006720:	0034      	movs	r4, r6
 8006722:	e7f7      	b.n	8006714 <_realloc_r+0x14>
 8006724:	f000 fc6a 	bl	8006ffc <_malloc_usable_size_r>
 8006728:	002c      	movs	r4, r5
 800672a:	4286      	cmp	r6, r0
 800672c:	d9f2      	bls.n	8006714 <_realloc_r+0x14>
 800672e:	0031      	movs	r1, r6
 8006730:	0038      	movs	r0, r7
 8006732:	f7ff f891 	bl	8005858 <_malloc_r>
 8006736:	1e04      	subs	r4, r0, #0
 8006738:	d0ec      	beq.n	8006714 <_realloc_r+0x14>
 800673a:	0029      	movs	r1, r5
 800673c:	0032      	movs	r2, r6
 800673e:	f7ff ffc4 	bl	80066ca <memcpy>
 8006742:	0029      	movs	r1, r5
 8006744:	0038      	movs	r0, r7
 8006746:	f7ff f83d 	bl	80057c4 <_free_r>
 800674a:	e7e3      	b.n	8006714 <_realloc_r+0x14>

0800674c <_sungetc_r>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	0014      	movs	r4, r2
 8006750:	1c4b      	adds	r3, r1, #1
 8006752:	d103      	bne.n	800675c <_sungetc_r+0x10>
 8006754:	2501      	movs	r5, #1
 8006756:	426d      	negs	r5, r5
 8006758:	0028      	movs	r0, r5
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	8993      	ldrh	r3, [r2, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	4393      	bics	r3, r2
 8006762:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	b2ce      	uxtb	r6, r1
 8006768:	b2cd      	uxtb	r5, r1
 800676a:	6863      	ldr	r3, [r4, #4]
 800676c:	2a00      	cmp	r2, #0
 800676e:	d010      	beq.n	8006792 <_sungetc_r+0x46>
 8006770:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006772:	4293      	cmp	r3, r2
 8006774:	da07      	bge.n	8006786 <_sungetc_r+0x3a>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	701e      	strb	r6, [r3, #0]
 800677e:	6863      	ldr	r3, [r4, #4]
 8006780:	3301      	adds	r3, #1
 8006782:	6063      	str	r3, [r4, #4]
 8006784:	e7e8      	b.n	8006758 <_sungetc_r+0xc>
 8006786:	0021      	movs	r1, r4
 8006788:	f000 fbee 	bl	8006f68 <__submore>
 800678c:	2800      	cmp	r0, #0
 800678e:	d0f2      	beq.n	8006776 <_sungetc_r+0x2a>
 8006790:	e7e0      	b.n	8006754 <_sungetc_r+0x8>
 8006792:	6921      	ldr	r1, [r4, #16]
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	2900      	cmp	r1, #0
 8006798:	d007      	beq.n	80067aa <_sungetc_r+0x5e>
 800679a:	4291      	cmp	r1, r2
 800679c:	d205      	bcs.n	80067aa <_sungetc_r+0x5e>
 800679e:	1e51      	subs	r1, r2, #1
 80067a0:	7808      	ldrb	r0, [r1, #0]
 80067a2:	4285      	cmp	r5, r0
 80067a4:	d101      	bne.n	80067aa <_sungetc_r+0x5e>
 80067a6:	6021      	str	r1, [r4, #0]
 80067a8:	e7ea      	b.n	8006780 <_sungetc_r+0x34>
 80067aa:	6423      	str	r3, [r4, #64]	; 0x40
 80067ac:	0023      	movs	r3, r4
 80067ae:	3344      	adds	r3, #68	; 0x44
 80067b0:	6363      	str	r3, [r4, #52]	; 0x34
 80067b2:	2303      	movs	r3, #3
 80067b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80067b6:	0023      	movs	r3, r4
 80067b8:	3346      	adds	r3, #70	; 0x46
 80067ba:	63e2      	str	r2, [r4, #60]	; 0x3c
 80067bc:	701e      	strb	r6, [r3, #0]
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	2301      	movs	r3, #1
 80067c2:	e7de      	b.n	8006782 <_sungetc_r+0x36>

080067c4 <__ssrefill_r>:
 80067c4:	b510      	push	{r4, lr}
 80067c6:	000c      	movs	r4, r1
 80067c8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80067ca:	2900      	cmp	r1, #0
 80067cc:	d00e      	beq.n	80067ec <__ssrefill_r+0x28>
 80067ce:	0023      	movs	r3, r4
 80067d0:	3344      	adds	r3, #68	; 0x44
 80067d2:	4299      	cmp	r1, r3
 80067d4:	d001      	beq.n	80067da <__ssrefill_r+0x16>
 80067d6:	f7fe fff5 	bl	80057c4 <_free_r>
 80067da:	2000      	movs	r0, #0
 80067dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067de:	6360      	str	r0, [r4, #52]	; 0x34
 80067e0:	6063      	str	r3, [r4, #4]
 80067e2:	4283      	cmp	r3, r0
 80067e4:	d002      	beq.n	80067ec <__ssrefill_r+0x28>
 80067e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd10      	pop	{r4, pc}
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	2001      	movs	r0, #1
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	2300      	movs	r3, #0
 80067f4:	89a2      	ldrh	r2, [r4, #12]
 80067f6:	6063      	str	r3, [r4, #4]
 80067f8:	3320      	adds	r3, #32
 80067fa:	4313      	orrs	r3, r2
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	4240      	negs	r0, r0
 8006800:	e7f3      	b.n	80067ea <__ssrefill_r+0x26>
	...

08006804 <__ssvfiscanf_r>:
 8006804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006806:	4cbd      	ldr	r4, [pc, #756]	; (8006afc <__ssvfiscanf_r+0x2f8>)
 8006808:	2586      	movs	r5, #134	; 0x86
 800680a:	44a5      	add	sp, r4
 800680c:	9303      	str	r3, [sp, #12]
 800680e:	2300      	movs	r3, #0
 8006810:	9348      	str	r3, [sp, #288]	; 0x120
 8006812:	9349      	str	r3, [sp, #292]	; 0x124
 8006814:	ab05      	add	r3, sp, #20
 8006816:	934a      	str	r3, [sp, #296]	; 0x128
 8006818:	23be      	movs	r3, #190	; 0xbe
 800681a:	006d      	lsls	r5, r5, #1
 800681c:	9000      	str	r0, [sp, #0]
 800681e:	000c      	movs	r4, r1
 8006820:	a802      	add	r0, sp, #8
 8006822:	49b7      	ldr	r1, [pc, #732]	; (8006b00 <__ssvfiscanf_r+0x2fc>)
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	1940      	adds	r0, r0, r5
 8006828:	27c0      	movs	r7, #192	; 0xc0
 800682a:	50c1      	str	r1, [r0, r3]
 800682c:	ab02      	add	r3, sp, #8
 800682e:	195b      	adds	r3, r3, r5
 8006830:	0015      	movs	r5, r2
 8006832:	49b4      	ldr	r1, [pc, #720]	; (8006b04 <__ssvfiscanf_r+0x300>)
 8006834:	007f      	lsls	r7, r7, #1
 8006836:	51d9      	str	r1, [r3, r7]
 8006838:	782b      	ldrb	r3, [r5, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d100      	bne.n	8006840 <__ssvfiscanf_r+0x3c>
 800683e:	e15b      	b.n	8006af8 <__ssvfiscanf_r+0x2f4>
 8006840:	f7ff ff18 	bl	8006674 <__locale_ctype_ptr>
 8006844:	2208      	movs	r2, #8
 8006846:	782b      	ldrb	r3, [r5, #0]
 8006848:	18c0      	adds	r0, r0, r3
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	7843      	ldrb	r3, [r0, #1]
 800684e:	4013      	ands	r3, r2
 8006850:	d141      	bne.n	80068d6 <__ssvfiscanf_r+0xd2>
 8006852:	9a01      	ldr	r2, [sp, #4]
 8006854:	1c6e      	adds	r6, r5, #1
 8006856:	2a25      	cmp	r2, #37	; 0x25
 8006858:	d000      	beq.n	800685c <__ssvfiscanf_r+0x58>
 800685a:	e0a8      	b.n	80069ae <__ssvfiscanf_r+0x1aa>
 800685c:	9347      	str	r3, [sp, #284]	; 0x11c
 800685e:	9345      	str	r3, [sp, #276]	; 0x114
 8006860:	786b      	ldrb	r3, [r5, #1]
 8006862:	2b2a      	cmp	r3, #42	; 0x2a
 8006864:	d102      	bne.n	800686c <__ssvfiscanf_r+0x68>
 8006866:	3b1a      	subs	r3, #26
 8006868:	9345      	str	r3, [sp, #276]	; 0x114
 800686a:	1cae      	adds	r6, r5, #2
 800686c:	0035      	movs	r5, r6
 800686e:	220a      	movs	r2, #10
 8006870:	7829      	ldrb	r1, [r5, #0]
 8006872:	000b      	movs	r3, r1
 8006874:	3b30      	subs	r3, #48	; 0x30
 8006876:	2b09      	cmp	r3, #9
 8006878:	d948      	bls.n	800690c <__ssvfiscanf_r+0x108>
 800687a:	4ea3      	ldr	r6, [pc, #652]	; (8006b08 <__ssvfiscanf_r+0x304>)
 800687c:	2203      	movs	r2, #3
 800687e:	0030      	movs	r0, r6
 8006880:	f7ff ff18 	bl	80066b4 <memchr>
 8006884:	2800      	cmp	r0, #0
 8006886:	d007      	beq.n	8006898 <__ssvfiscanf_r+0x94>
 8006888:	2301      	movs	r3, #1
 800688a:	1b80      	subs	r0, r0, r6
 800688c:	4083      	lsls	r3, r0
 800688e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006890:	3501      	adds	r5, #1
 8006892:	4313      	orrs	r3, r2
 8006894:	9202      	str	r2, [sp, #8]
 8006896:	9345      	str	r3, [sp, #276]	; 0x114
 8006898:	782b      	ldrb	r3, [r5, #0]
 800689a:	1c6e      	adds	r6, r5, #1
 800689c:	2b67      	cmp	r3, #103	; 0x67
 800689e:	d858      	bhi.n	8006952 <__ssvfiscanf_r+0x14e>
 80068a0:	2b65      	cmp	r3, #101	; 0x65
 80068a2:	d300      	bcc.n	80068a6 <__ssvfiscanf_r+0xa2>
 80068a4:	e0dd      	b.n	8006a62 <__ssvfiscanf_r+0x25e>
 80068a6:	2b47      	cmp	r3, #71	; 0x47
 80068a8:	d838      	bhi.n	800691c <__ssvfiscanf_r+0x118>
 80068aa:	2b45      	cmp	r3, #69	; 0x45
 80068ac:	d300      	bcc.n	80068b0 <__ssvfiscanf_r+0xac>
 80068ae:	e0d8      	b.n	8006a62 <__ssvfiscanf_r+0x25e>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d100      	bne.n	80068b6 <__ssvfiscanf_r+0xb2>
 80068b4:	e11d      	b.n	8006af2 <__ssvfiscanf_r+0x2ee>
 80068b6:	2b25      	cmp	r3, #37	; 0x25
 80068b8:	d079      	beq.n	80069ae <__ssvfiscanf_r+0x1aa>
 80068ba:	2303      	movs	r3, #3
 80068bc:	934b      	str	r3, [sp, #300]	; 0x12c
 80068be:	3307      	adds	r3, #7
 80068c0:	9346      	str	r3, [sp, #280]	; 0x118
 80068c2:	e053      	b.n	800696c <__ssvfiscanf_r+0x168>
 80068c4:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80068c6:	3301      	adds	r3, #1
 80068c8:	9201      	str	r2, [sp, #4]
 80068ca:	3201      	adds	r2, #1
 80068cc:	9249      	str	r2, [sp, #292]	; 0x124
 80068ce:	6862      	ldr	r2, [r4, #4]
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	3a01      	subs	r2, #1
 80068d4:	6062      	str	r2, [r4, #4]
 80068d6:	6863      	ldr	r3, [r4, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dd0b      	ble.n	80068f4 <__ssvfiscanf_r+0xf0>
 80068dc:	f7ff feca 	bl	8006674 <__locale_ctype_ptr>
 80068e0:	2108      	movs	r1, #8
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	1880      	adds	r0, r0, r2
 80068e8:	7842      	ldrb	r2, [r0, #1]
 80068ea:	420a      	tst	r2, r1
 80068ec:	d1ea      	bne.n	80068c4 <__ssvfiscanf_r+0xc0>
 80068ee:	1c6e      	adds	r6, r5, #1
 80068f0:	0035      	movs	r5, r6
 80068f2:	e7a1      	b.n	8006838 <__ssvfiscanf_r+0x34>
 80068f4:	2286      	movs	r2, #134	; 0x86
 80068f6:	ab02      	add	r3, sp, #8
 80068f8:	0052      	lsls	r2, r2, #1
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	59db      	ldr	r3, [r3, r7]
 80068fe:	0021      	movs	r1, r4
 8006900:	9800      	ldr	r0, [sp, #0]
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	4798      	blx	r3
 8006906:	2800      	cmp	r0, #0
 8006908:	d0e8      	beq.n	80068dc <__ssvfiscanf_r+0xd8>
 800690a:	e7f0      	b.n	80068ee <__ssvfiscanf_r+0xea>
 800690c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800690e:	3501      	adds	r5, #1
 8006910:	9302      	str	r3, [sp, #8]
 8006912:	4353      	muls	r3, r2
 8006914:	3b30      	subs	r3, #48	; 0x30
 8006916:	1859      	adds	r1, r3, r1
 8006918:	9147      	str	r1, [sp, #284]	; 0x11c
 800691a:	e7a9      	b.n	8006870 <__ssvfiscanf_r+0x6c>
 800691c:	2b5b      	cmp	r3, #91	; 0x5b
 800691e:	d100      	bne.n	8006922 <__ssvfiscanf_r+0x11e>
 8006920:	e077      	b.n	8006a12 <__ssvfiscanf_r+0x20e>
 8006922:	d80f      	bhi.n	8006944 <__ssvfiscanf_r+0x140>
 8006924:	2b58      	cmp	r3, #88	; 0x58
 8006926:	d1c8      	bne.n	80068ba <__ssvfiscanf_r+0xb6>
 8006928:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800692a:	9201      	str	r2, [sp, #4]
 800692c:	2280      	movs	r2, #128	; 0x80
 800692e:	9901      	ldr	r1, [sp, #4]
 8006930:	0092      	lsls	r2, r2, #2
 8006932:	430a      	orrs	r2, r1
 8006934:	9245      	str	r2, [sp, #276]	; 0x114
 8006936:	2210      	movs	r2, #16
 8006938:	9246      	str	r2, [sp, #280]	; 0x118
 800693a:	2203      	movs	r2, #3
 800693c:	2b6e      	cmp	r3, #110	; 0x6e
 800693e:	dd14      	ble.n	800696a <__ssvfiscanf_r+0x166>
 8006940:	3201      	adds	r2, #1
 8006942:	e012      	b.n	800696a <__ssvfiscanf_r+0x166>
 8006944:	2b63      	cmp	r3, #99	; 0x63
 8006946:	d100      	bne.n	800694a <__ssvfiscanf_r+0x146>
 8006948:	e071      	b.n	8006a2e <__ssvfiscanf_r+0x22a>
 800694a:	2b64      	cmp	r3, #100	; 0x64
 800694c:	d1b5      	bne.n	80068ba <__ssvfiscanf_r+0xb6>
 800694e:	220a      	movs	r2, #10
 8006950:	e7f2      	b.n	8006938 <__ssvfiscanf_r+0x134>
 8006952:	2b70      	cmp	r3, #112	; 0x70
 8006954:	d052      	beq.n	80069fc <__ssvfiscanf_r+0x1f8>
 8006956:	d822      	bhi.n	800699e <__ssvfiscanf_r+0x19a>
 8006958:	2b6e      	cmp	r3, #110	; 0x6e
 800695a:	d100      	bne.n	800695e <__ssvfiscanf_r+0x15a>
 800695c:	e06f      	b.n	8006a3e <__ssvfiscanf_r+0x23a>
 800695e:	d854      	bhi.n	8006a0a <__ssvfiscanf_r+0x206>
 8006960:	2b69      	cmp	r3, #105	; 0x69
 8006962:	d1aa      	bne.n	80068ba <__ssvfiscanf_r+0xb6>
 8006964:	2300      	movs	r3, #0
 8006966:	2203      	movs	r2, #3
 8006968:	9346      	str	r3, [sp, #280]	; 0x118
 800696a:	924b      	str	r2, [sp, #300]	; 0x12c
 800696c:	6863      	ldr	r3, [r4, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dc00      	bgt.n	8006974 <__ssvfiscanf_r+0x170>
 8006972:	e078      	b.n	8006a66 <__ssvfiscanf_r+0x262>
 8006974:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	065b      	lsls	r3, r3, #25
 800697a:	d400      	bmi.n	800697e <__ssvfiscanf_r+0x17a>
 800697c:	e08b      	b.n	8006a96 <__ssvfiscanf_r+0x292>
 800697e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8006980:	2b02      	cmp	r3, #2
 8006982:	dd00      	ble.n	8006986 <__ssvfiscanf_r+0x182>
 8006984:	e09d      	b.n	8006ac2 <__ssvfiscanf_r+0x2be>
 8006986:	ab03      	add	r3, sp, #12
 8006988:	0022      	movs	r2, r4
 800698a:	a945      	add	r1, sp, #276	; 0x114
 800698c:	9800      	ldr	r0, [sp, #0]
 800698e:	f000 f8bf 	bl	8006b10 <_scanf_chars>
 8006992:	2801      	cmp	r0, #1
 8006994:	d100      	bne.n	8006998 <__ssvfiscanf_r+0x194>
 8006996:	e0af      	b.n	8006af8 <__ssvfiscanf_r+0x2f4>
 8006998:	2802      	cmp	r0, #2
 800699a:	d1a9      	bne.n	80068f0 <__ssvfiscanf_r+0xec>
 800699c:	e025      	b.n	80069ea <__ssvfiscanf_r+0x1e6>
 800699e:	2b75      	cmp	r3, #117	; 0x75
 80069a0:	d0d5      	beq.n	800694e <__ssvfiscanf_r+0x14a>
 80069a2:	2b78      	cmp	r3, #120	; 0x78
 80069a4:	d0c0      	beq.n	8006928 <__ssvfiscanf_r+0x124>
 80069a6:	2b73      	cmp	r3, #115	; 0x73
 80069a8:	d187      	bne.n	80068ba <__ssvfiscanf_r+0xb6>
 80069aa:	2302      	movs	r3, #2
 80069ac:	e03d      	b.n	8006a2a <__ssvfiscanf_r+0x226>
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	dd0f      	ble.n	80069d4 <__ssvfiscanf_r+0x1d0>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	9901      	ldr	r1, [sp, #4]
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	4291      	cmp	r1, r2
 80069bc:	d000      	beq.n	80069c0 <__ssvfiscanf_r+0x1bc>
 80069be:	e09b      	b.n	8006af8 <__ssvfiscanf_r+0x2f4>
 80069c0:	3301      	adds	r3, #1
 80069c2:	6862      	ldr	r2, [r4, #4]
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80069c8:	3a01      	subs	r2, #1
 80069ca:	9301      	str	r3, [sp, #4]
 80069cc:	3301      	adds	r3, #1
 80069ce:	6062      	str	r2, [r4, #4]
 80069d0:	9349      	str	r3, [sp, #292]	; 0x124
 80069d2:	e78d      	b.n	80068f0 <__ssvfiscanf_r+0xec>
 80069d4:	2286      	movs	r2, #134	; 0x86
 80069d6:	ab02      	add	r3, sp, #8
 80069d8:	0052      	lsls	r2, r2, #1
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	59db      	ldr	r3, [r3, r7]
 80069de:	0021      	movs	r1, r4
 80069e0:	9800      	ldr	r0, [sp, #0]
 80069e2:	9302      	str	r3, [sp, #8]
 80069e4:	4798      	blx	r3
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d0e4      	beq.n	80069b4 <__ssvfiscanf_r+0x1b0>
 80069ea:	9848      	ldr	r0, [sp, #288]	; 0x120
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d000      	beq.n	80069f2 <__ssvfiscanf_r+0x1ee>
 80069f0:	e07b      	b.n	8006aea <__ssvfiscanf_r+0x2e6>
 80069f2:	3801      	subs	r0, #1
 80069f4:	23a7      	movs	r3, #167	; 0xa7
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	449d      	add	sp, r3
 80069fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80069fe:	9201      	str	r2, [sp, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	9901      	ldr	r1, [sp, #4]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	9245      	str	r2, [sp, #276]	; 0x114
 8006a08:	e78e      	b.n	8006928 <__ssvfiscanf_r+0x124>
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	9346      	str	r3, [sp, #280]	; 0x118
 8006a10:	e7ab      	b.n	800696a <__ssvfiscanf_r+0x166>
 8006a12:	0031      	movs	r1, r6
 8006a14:	a805      	add	r0, sp, #20
 8006a16:	f000 f9df 	bl	8006dd8 <__sccl>
 8006a1a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006a1c:	0006      	movs	r6, r0
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	2340      	movs	r3, #64	; 0x40
 8006a22:	9a01      	ldr	r2, [sp, #4]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	9345      	str	r3, [sp, #276]	; 0x114
 8006a28:	2301      	movs	r3, #1
 8006a2a:	934b      	str	r3, [sp, #300]	; 0x12c
 8006a2c:	e79e      	b.n	800696c <__ssvfiscanf_r+0x168>
 8006a2e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	2340      	movs	r3, #64	; 0x40
 8006a34:	9a01      	ldr	r2, [sp, #4]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	9345      	str	r3, [sp, #276]	; 0x114
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e7f5      	b.n	8006a2a <__ssvfiscanf_r+0x226>
 8006a3e:	9945      	ldr	r1, [sp, #276]	; 0x114
 8006a40:	06cb      	lsls	r3, r1, #27
 8006a42:	d500      	bpl.n	8006a46 <__ssvfiscanf_r+0x242>
 8006a44:	e754      	b.n	80068f0 <__ssvfiscanf_r+0xec>
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8006a4a:	07c8      	lsls	r0, r1, #31
 8006a4c:	d504      	bpl.n	8006a58 <__ssvfiscanf_r+0x254>
 8006a4e:	1d19      	adds	r1, r3, #4
 8006a50:	9103      	str	r1, [sp, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	801a      	strh	r2, [r3, #0]
 8006a56:	e74b      	b.n	80068f0 <__ssvfiscanf_r+0xec>
 8006a58:	1d19      	adds	r1, r3, #4
 8006a5a:	9103      	str	r1, [sp, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e746      	b.n	80068f0 <__ssvfiscanf_r+0xec>
 8006a62:	2305      	movs	r3, #5
 8006a64:	e7e1      	b.n	8006a2a <__ssvfiscanf_r+0x226>
 8006a66:	2286      	movs	r2, #134	; 0x86
 8006a68:	ab02      	add	r3, sp, #8
 8006a6a:	0052      	lsls	r2, r2, #1
 8006a6c:	189b      	adds	r3, r3, r2
 8006a6e:	59db      	ldr	r3, [r3, r7]
 8006a70:	0021      	movs	r1, r4
 8006a72:	9800      	ldr	r0, [sp, #0]
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	4798      	blx	r3
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d100      	bne.n	8006a7e <__ssvfiscanf_r+0x27a>
 8006a7c:	e77a      	b.n	8006974 <__ssvfiscanf_r+0x170>
 8006a7e:	e7b4      	b.n	80069ea <__ssvfiscanf_r+0x1e6>
 8006a80:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8006a82:	9201      	str	r2, [sp, #4]
 8006a84:	3201      	adds	r2, #1
 8006a86:	9249      	str	r2, [sp, #292]	; 0x124
 8006a88:	6862      	ldr	r2, [r4, #4]
 8006a8a:	3a01      	subs	r2, #1
 8006a8c:	6062      	str	r2, [r4, #4]
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	dd0b      	ble.n	8006aaa <__ssvfiscanf_r+0x2a6>
 8006a92:	3301      	adds	r3, #1
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	f7ff fded 	bl	8006674 <__locale_ctype_ptr>
 8006a9a:	2108      	movs	r1, #8
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	781a      	ldrb	r2, [r3, #0]
 8006aa0:	1880      	adds	r0, r0, r2
 8006aa2:	7842      	ldrb	r2, [r0, #1]
 8006aa4:	420a      	tst	r2, r1
 8006aa6:	d1eb      	bne.n	8006a80 <__ssvfiscanf_r+0x27c>
 8006aa8:	e769      	b.n	800697e <__ssvfiscanf_r+0x17a>
 8006aaa:	2286      	movs	r2, #134	; 0x86
 8006aac:	ab02      	add	r3, sp, #8
 8006aae:	0052      	lsls	r2, r2, #1
 8006ab0:	189b      	adds	r3, r3, r2
 8006ab2:	59db      	ldr	r3, [r3, r7]
 8006ab4:	0021      	movs	r1, r4
 8006ab6:	9800      	ldr	r0, [sp, #0]
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	4798      	blx	r3
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d0ea      	beq.n	8006a96 <__ssvfiscanf_r+0x292>
 8006ac0:	e793      	b.n	80069ea <__ssvfiscanf_r+0x1e6>
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	dc06      	bgt.n	8006ad4 <__ssvfiscanf_r+0x2d0>
 8006ac6:	ab03      	add	r3, sp, #12
 8006ac8:	0022      	movs	r2, r4
 8006aca:	a945      	add	r1, sp, #276	; 0x114
 8006acc:	9800      	ldr	r0, [sp, #0]
 8006ace:	f000 f883 	bl	8006bd8 <_scanf_i>
 8006ad2:	e75e      	b.n	8006992 <__ssvfiscanf_r+0x18e>
 8006ad4:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <__ssvfiscanf_r+0x308>)
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d100      	bne.n	8006adc <__ssvfiscanf_r+0x2d8>
 8006ada:	e709      	b.n	80068f0 <__ssvfiscanf_r+0xec>
 8006adc:	ab03      	add	r3, sp, #12
 8006ade:	0022      	movs	r2, r4
 8006ae0:	a945      	add	r1, sp, #276	; 0x114
 8006ae2:	9800      	ldr	r0, [sp, #0]
 8006ae4:	e000      	b.n	8006ae8 <__ssvfiscanf_r+0x2e4>
 8006ae6:	bf00      	nop
 8006ae8:	e753      	b.n	8006992 <__ssvfiscanf_r+0x18e>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	065b      	lsls	r3, r3, #25
 8006aee:	d400      	bmi.n	8006af2 <__ssvfiscanf_r+0x2ee>
 8006af0:	e780      	b.n	80069f4 <__ssvfiscanf_r+0x1f0>
 8006af2:	2001      	movs	r0, #1
 8006af4:	4240      	negs	r0, r0
 8006af6:	e77d      	b.n	80069f4 <__ssvfiscanf_r+0x1f0>
 8006af8:	9848      	ldr	r0, [sp, #288]	; 0x120
 8006afa:	e77b      	b.n	80069f4 <__ssvfiscanf_r+0x1f0>
 8006afc:	fffffd64 	.word	0xfffffd64
 8006b00:	0800674d 	.word	0x0800674d
 8006b04:	080067c5 	.word	0x080067c5
 8006b08:	0800722e 	.word	0x0800722e
 8006b0c:	00000000 	.word	0x00000000

08006b10 <_scanf_chars>:
 8006b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b12:	0015      	movs	r5, r2
 8006b14:	688a      	ldr	r2, [r1, #8]
 8006b16:	9001      	str	r0, [sp, #4]
 8006b18:	000c      	movs	r4, r1
 8006b1a:	2a00      	cmp	r2, #0
 8006b1c:	d106      	bne.n	8006b2c <_scanf_chars+0x1c>
 8006b1e:	698a      	ldr	r2, [r1, #24]
 8006b20:	1e51      	subs	r1, r2, #1
 8006b22:	418a      	sbcs	r2, r1
 8006b24:	2101      	movs	r1, #1
 8006b26:	4252      	negs	r2, r2
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	60a2      	str	r2, [r4, #8]
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	06d2      	lsls	r2, r2, #27
 8006b30:	d403      	bmi.n	8006b3a <_scanf_chars+0x2a>
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	1d11      	adds	r1, r2, #4
 8006b36:	6019      	str	r1, [r3, #0]
 8006b38:	6817      	ldr	r7, [r2, #0]
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	69a3      	ldr	r3, [r4, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01c      	beq.n	8006b7c <_scanf_chars+0x6c>
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d108      	bne.n	8006b58 <_scanf_chars+0x48>
 8006b46:	682b      	ldr	r3, [r5, #0]
 8006b48:	6962      	ldr	r2, [r4, #20]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	5cd3      	ldrb	r3, [r2, r3]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d114      	bne.n	8006b7c <_scanf_chars+0x6c>
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d130      	bne.n	8006bb8 <_scanf_chars+0xa8>
 8006b56:	e006      	b.n	8006b66 <_scanf_chars+0x56>
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d006      	beq.n	8006b6a <_scanf_chars+0x5a>
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	d12b      	bne.n	8006bb8 <_scanf_chars+0xa8>
 8006b60:	69a3      	ldr	r3, [r4, #24]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d128      	bne.n	8006bb8 <_scanf_chars+0xa8>
 8006b66:	2001      	movs	r0, #1
 8006b68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b6a:	f7ff fd83 	bl	8006674 <__locale_ctype_ptr>
 8006b6e:	2208      	movs	r2, #8
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	18c0      	adds	r0, r0, r3
 8006b76:	7843      	ldrb	r3, [r0, #1]
 8006b78:	4213      	tst	r3, r2
 8006b7a:	d1ef      	bne.n	8006b5c <_scanf_chars+0x4c>
 8006b7c:	2210      	movs	r2, #16
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	3601      	adds	r6, #1
 8006b82:	4213      	tst	r3, r2
 8006b84:	d103      	bne.n	8006b8e <_scanf_chars+0x7e>
 8006b86:	682b      	ldr	r3, [r5, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	703b      	strb	r3, [r7, #0]
 8006b8c:	3701      	adds	r7, #1
 8006b8e:	682a      	ldr	r2, [r5, #0]
 8006b90:	686b      	ldr	r3, [r5, #4]
 8006b92:	3201      	adds	r2, #1
 8006b94:	602a      	str	r2, [r5, #0]
 8006b96:	68a2      	ldr	r2, [r4, #8]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	3a01      	subs	r2, #1
 8006b9c:	606b      	str	r3, [r5, #4]
 8006b9e:	60a2      	str	r2, [r4, #8]
 8006ba0:	2a00      	cmp	r2, #0
 8006ba2:	d009      	beq.n	8006bb8 <_scanf_chars+0xa8>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dcc9      	bgt.n	8006b3c <_scanf_chars+0x2c>
 8006ba8:	23c0      	movs	r3, #192	; 0xc0
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	58e3      	ldr	r3, [r4, r3]
 8006bae:	0029      	movs	r1, r5
 8006bb0:	9801      	ldr	r0, [sp, #4]
 8006bb2:	4798      	blx	r3
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d0c1      	beq.n	8006b3c <_scanf_chars+0x2c>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d106      	bne.n	8006bce <_scanf_chars+0xbe>
 8006bc0:	68e2      	ldr	r2, [r4, #12]
 8006bc2:	3201      	adds	r2, #1
 8006bc4:	60e2      	str	r2, [r4, #12]
 8006bc6:	69a2      	ldr	r2, [r4, #24]
 8006bc8:	2a00      	cmp	r2, #0
 8006bca:	d000      	beq.n	8006bce <_scanf_chars+0xbe>
 8006bcc:	703b      	strb	r3, [r7, #0]
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	199e      	adds	r6, r3, r6
 8006bd4:	6126      	str	r6, [r4, #16]
 8006bd6:	e7c7      	b.n	8006b68 <_scanf_chars+0x58>

08006bd8 <_scanf_i>:
 8006bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bda:	000c      	movs	r4, r1
 8006bdc:	b08d      	sub	sp, #52	; 0x34
 8006bde:	9302      	str	r3, [sp, #8]
 8006be0:	4b77      	ldr	r3, [pc, #476]	; (8006dc0 <_scanf_i+0x1e8>)
 8006be2:	9005      	str	r0, [sp, #20]
 8006be4:	0016      	movs	r6, r2
 8006be6:	aa09      	add	r2, sp, #36	; 0x24
 8006be8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006bea:	c223      	stmia	r2!, {r0, r1, r5}
 8006bec:	4b75      	ldr	r3, [pc, #468]	; (8006dc4 <_scanf_i+0x1ec>)
 8006bee:	9306      	str	r3, [sp, #24]
 8006bf0:	69a3      	ldr	r3, [r4, #24]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d001      	beq.n	8006bfa <_scanf_i+0x22>
 8006bf6:	4b74      	ldr	r3, [pc, #464]	; (8006dc8 <_scanf_i+0x1f0>)
 8006bf8:	9306      	str	r3, [sp, #24]
 8006bfa:	22ae      	movs	r2, #174	; 0xae
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	68a3      	ldr	r3, [r4, #8]
 8006c00:	0052      	lsls	r2, r2, #1
 8006c02:	1e59      	subs	r1, r3, #1
 8006c04:	9004      	str	r0, [sp, #16]
 8006c06:	4291      	cmp	r1, r2
 8006c08:	d905      	bls.n	8006c16 <_scanf_i+0x3e>
 8006c0a:	3b5e      	subs	r3, #94	; 0x5e
 8006c0c:	3bff      	subs	r3, #255	; 0xff
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	235e      	movs	r3, #94	; 0x5e
 8006c12:	33ff      	adds	r3, #255	; 0xff
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	0023      	movs	r3, r4
 8006c18:	331c      	adds	r3, #28
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	23d0      	movs	r3, #208	; 0xd0
 8006c1e:	2700      	movs	r7, #0
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	011b      	lsls	r3, r3, #4
 8006c24:	4313      	orrs	r3, r2
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	9b01      	ldr	r3, [sp, #4]
 8006c2a:	9303      	str	r3, [sp, #12]
 8006c2c:	6833      	ldr	r3, [r6, #0]
 8006c2e:	a809      	add	r0, sp, #36	; 0x24
 8006c30:	7819      	ldrb	r1, [r3, #0]
 8006c32:	00bb      	lsls	r3, r7, #2
 8006c34:	2202      	movs	r2, #2
 8006c36:	5818      	ldr	r0, [r3, r0]
 8006c38:	f7ff fd3c 	bl	80066b4 <memchr>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d02b      	beq.n	8006c98 <_scanf_i+0xc0>
 8006c40:	2f01      	cmp	r7, #1
 8006c42:	d15f      	bne.n	8006d04 <_scanf_i+0x12c>
 8006c44:	6863      	ldr	r3, [r4, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <_scanf_i+0x80>
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	6063      	str	r3, [r4, #4]
 8006c50:	33f9      	adds	r3, #249	; 0xf9
 8006c52:	33ff      	adds	r3, #255	; 0xff
 8006c54:	4313      	orrs	r3, r2
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	4b5c      	ldr	r3, [pc, #368]	; (8006dcc <_scanf_i+0x1f4>)
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	68a3      	ldr	r3, [r4, #8]
 8006c62:	1e5a      	subs	r2, r3, #1
 8006c64:	60a2      	str	r2, [r4, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <_scanf_i+0xc0>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	1c5d      	adds	r5, r3, #1
 8006c6e:	6833      	ldr	r3, [r6, #0]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	6032      	str	r2, [r6, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	9a03      	ldr	r2, [sp, #12]
 8006c78:	9503      	str	r5, [sp, #12]
 8006c7a:	7013      	strb	r3, [r2, #0]
 8006c7c:	6873      	ldr	r3, [r6, #4]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	6073      	str	r3, [r6, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dc08      	bgt.n	8006c98 <_scanf_i+0xc0>
 8006c86:	23c0      	movs	r3, #192	; 0xc0
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	58e3      	ldr	r3, [r4, r3]
 8006c8c:	0031      	movs	r1, r6
 8006c8e:	9805      	ldr	r0, [sp, #20]
 8006c90:	9307      	str	r3, [sp, #28]
 8006c92:	4798      	blx	r3
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d17d      	bne.n	8006d94 <_scanf_i+0x1bc>
 8006c98:	3701      	adds	r7, #1
 8006c9a:	2f03      	cmp	r7, #3
 8006c9c:	d1c6      	bne.n	8006c2c <_scanf_i+0x54>
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <_scanf_i+0xd0>
 8006ca4:	330a      	adds	r3, #10
 8006ca6:	6063      	str	r3, [r4, #4]
 8006ca8:	2110      	movs	r1, #16
 8006caa:	2700      	movs	r7, #0
 8006cac:	6863      	ldr	r3, [r4, #4]
 8006cae:	6960      	ldr	r0, [r4, #20]
 8006cb0:	1ac9      	subs	r1, r1, r3
 8006cb2:	4b47      	ldr	r3, [pc, #284]	; (8006dd0 <_scanf_i+0x1f8>)
 8006cb4:	18c9      	adds	r1, r1, r3
 8006cb6:	f000 f88f 	bl	8006dd8 <__sccl>
 8006cba:	9d03      	ldr	r5, [sp, #12]
 8006cbc:	68a3      	ldr	r3, [r4, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d041      	beq.n	8006d46 <_scanf_i+0x16e>
 8006cc2:	6832      	ldr	r2, [r6, #0]
 8006cc4:	6960      	ldr	r0, [r4, #20]
 8006cc6:	7811      	ldrb	r1, [r2, #0]
 8006cc8:	5c40      	ldrb	r0, [r0, r1]
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d03b      	beq.n	8006d46 <_scanf_i+0x16e>
 8006cce:	2930      	cmp	r1, #48	; 0x30
 8006cd0:	d128      	bne.n	8006d24 <_scanf_i+0x14c>
 8006cd2:	2080      	movs	r0, #128	; 0x80
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	0100      	lsls	r0, r0, #4
 8006cd8:	4201      	tst	r1, r0
 8006cda:	d023      	beq.n	8006d24 <_scanf_i+0x14c>
 8006cdc:	9a04      	ldr	r2, [sp, #16]
 8006cde:	3701      	adds	r7, #1
 8006ce0:	2a00      	cmp	r2, #0
 8006ce2:	d003      	beq.n	8006cec <_scanf_i+0x114>
 8006ce4:	3a01      	subs	r2, #1
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	9204      	str	r2, [sp, #16]
 8006cea:	60a3      	str	r3, [r4, #8]
 8006cec:	6873      	ldr	r3, [r6, #4]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	6073      	str	r3, [r6, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dd1e      	ble.n	8006d34 <_scanf_i+0x15c>
 8006cf6:	6833      	ldr	r3, [r6, #0]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	6033      	str	r3, [r6, #0]
 8006cfc:	68a3      	ldr	r3, [r4, #8]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	60a3      	str	r3, [r4, #8]
 8006d02:	e7db      	b.n	8006cbc <_scanf_i+0xe4>
 8006d04:	2f02      	cmp	r7, #2
 8006d06:	d1ab      	bne.n	8006c60 <_scanf_i+0x88>
 8006d08:	21c0      	movs	r1, #192	; 0xc0
 8006d0a:	2380      	movs	r3, #128	; 0x80
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	00c9      	lsls	r1, r1, #3
 8006d10:	4011      	ands	r1, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4299      	cmp	r1, r3
 8006d16:	d1c2      	bne.n	8006c9e <_scanf_i+0xc6>
 8006d18:	3bf1      	subs	r3, #241	; 0xf1
 8006d1a:	3bff      	subs	r3, #255	; 0xff
 8006d1c:	6063      	str	r3, [r4, #4]
 8006d1e:	33f0      	adds	r3, #240	; 0xf0
 8006d20:	4313      	orrs	r3, r2
 8006d22:	e79c      	b.n	8006c5e <_scanf_i+0x86>
 8006d24:	6821      	ldr	r1, [r4, #0]
 8006d26:	4b2b      	ldr	r3, [pc, #172]	; (8006dd4 <_scanf_i+0x1fc>)
 8006d28:	400b      	ands	r3, r1
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	7813      	ldrb	r3, [r2, #0]
 8006d2e:	702b      	strb	r3, [r5, #0]
 8006d30:	3501      	adds	r5, #1
 8006d32:	e7db      	b.n	8006cec <_scanf_i+0x114>
 8006d34:	23c0      	movs	r3, #192	; 0xc0
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	58e3      	ldr	r3, [r4, r3]
 8006d3a:	0031      	movs	r1, r6
 8006d3c:	9805      	ldr	r0, [sp, #20]
 8006d3e:	9303      	str	r3, [sp, #12]
 8006d40:	4798      	blx	r3
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d0da      	beq.n	8006cfc <_scanf_i+0x124>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	05db      	lsls	r3, r3, #23
 8006d4a:	d50e      	bpl.n	8006d6a <_scanf_i+0x192>
 8006d4c:	9b01      	ldr	r3, [sp, #4]
 8006d4e:	429d      	cmp	r5, r3
 8006d50:	d907      	bls.n	8006d62 <_scanf_i+0x18a>
 8006d52:	23be      	movs	r3, #190	; 0xbe
 8006d54:	3d01      	subs	r5, #1
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	7829      	ldrb	r1, [r5, #0]
 8006d5a:	58e3      	ldr	r3, [r4, r3]
 8006d5c:	0032      	movs	r2, r6
 8006d5e:	9805      	ldr	r0, [sp, #20]
 8006d60:	4798      	blx	r3
 8006d62:	9b01      	ldr	r3, [sp, #4]
 8006d64:	2001      	movs	r0, #1
 8006d66:	429d      	cmp	r5, r3
 8006d68:	d027      	beq.n	8006dba <_scanf_i+0x1e2>
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	401a      	ands	r2, r3
 8006d70:	d11c      	bne.n	8006dac <_scanf_i+0x1d4>
 8006d72:	702a      	strb	r2, [r5, #0]
 8006d74:	6863      	ldr	r3, [r4, #4]
 8006d76:	9901      	ldr	r1, [sp, #4]
 8006d78:	9805      	ldr	r0, [sp, #20]
 8006d7a:	9e06      	ldr	r6, [sp, #24]
 8006d7c:	47b0      	blx	r6
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	6822      	ldr	r2, [r4, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	0691      	lsls	r1, r2, #26
 8006d86:	d507      	bpl.n	8006d98 <_scanf_i+0x1c0>
 8006d88:	9902      	ldr	r1, [sp, #8]
 8006d8a:	1d1a      	adds	r2, r3, #4
 8006d8c:	600a      	str	r2, [r1, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6018      	str	r0, [r3, #0]
 8006d92:	e008      	b.n	8006da6 <_scanf_i+0x1ce>
 8006d94:	2700      	movs	r7, #0
 8006d96:	e7d6      	b.n	8006d46 <_scanf_i+0x16e>
 8006d98:	07d1      	lsls	r1, r2, #31
 8006d9a:	d5f5      	bpl.n	8006d88 <_scanf_i+0x1b0>
 8006d9c:	9902      	ldr	r1, [sp, #8]
 8006d9e:	1d1a      	adds	r2, r3, #4
 8006da0:	600a      	str	r2, [r1, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	8018      	strh	r0, [r3, #0]
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	60e3      	str	r3, [r4, #12]
 8006dac:	2000      	movs	r0, #0
 8006dae:	9b01      	ldr	r3, [sp, #4]
 8006db0:	1aed      	subs	r5, r5, r3
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	19ef      	adds	r7, r5, r7
 8006db6:	19df      	adds	r7, r3, r7
 8006db8:	6127      	str	r7, [r4, #16]
 8006dba:	b00d      	add	sp, #52	; 0x34
 8006dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	08007024 	.word	0x08007024
 8006dc4:	08006f49 	.word	0x08006f49
 8006dc8:	08006621 	.word	0x08006621
 8006dcc:	fffffaff 	.word	0xfffffaff
 8006dd0:	08007265 	.word	0x08007265
 8006dd4:	fffff6ff 	.word	0xfffff6ff

08006dd8 <__sccl>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	780b      	ldrb	r3, [r1, #0]
 8006ddc:	2b5e      	cmp	r3, #94	; 0x5e
 8006dde:	d00d      	beq.n	8006dfc <__sccl+0x24>
 8006de0:	1c4a      	adds	r2, r1, #1
 8006de2:	2100      	movs	r1, #0
 8006de4:	0004      	movs	r4, r0
 8006de6:	1c45      	adds	r5, r0, #1
 8006de8:	35ff      	adds	r5, #255	; 0xff
 8006dea:	7021      	strb	r1, [r4, #0]
 8006dec:	3401      	adds	r4, #1
 8006dee:	42a5      	cmp	r5, r4
 8006df0:	d1fb      	bne.n	8006dea <__sccl+0x12>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <__sccl+0x2c>
 8006df6:	3a01      	subs	r2, #1
 8006df8:	0010      	movs	r0, r2
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	1c8a      	adds	r2, r1, #2
 8006dfe:	784b      	ldrb	r3, [r1, #1]
 8006e00:	2101      	movs	r1, #1
 8006e02:	e7ef      	b.n	8006de4 <__sccl+0xc>
 8006e04:	2401      	movs	r4, #1
 8006e06:	404c      	eors	r4, r1
 8006e08:	0011      	movs	r1, r2
 8006e0a:	54c4      	strb	r4, [r0, r3]
 8006e0c:	780d      	ldrb	r5, [r1, #0]
 8006e0e:	1c4a      	adds	r2, r1, #1
 8006e10:	2d2d      	cmp	r5, #45	; 0x2d
 8006e12:	d007      	beq.n	8006e24 <__sccl+0x4c>
 8006e14:	2d5d      	cmp	r5, #93	; 0x5d
 8006e16:	d0ef      	beq.n	8006df8 <__sccl+0x20>
 8006e18:	2d00      	cmp	r5, #0
 8006e1a:	d101      	bne.n	8006e20 <__sccl+0x48>
 8006e1c:	000a      	movs	r2, r1
 8006e1e:	e7eb      	b.n	8006df8 <__sccl+0x20>
 8006e20:	002b      	movs	r3, r5
 8006e22:	e7f1      	b.n	8006e08 <__sccl+0x30>
 8006e24:	784e      	ldrb	r6, [r1, #1]
 8006e26:	2e5d      	cmp	r6, #93	; 0x5d
 8006e28:	d0fa      	beq.n	8006e20 <__sccl+0x48>
 8006e2a:	42b3      	cmp	r3, r6
 8006e2c:	dcf8      	bgt.n	8006e20 <__sccl+0x48>
 8006e2e:	3102      	adds	r1, #2
 8006e30:	3301      	adds	r3, #1
 8006e32:	54c4      	strb	r4, [r0, r3]
 8006e34:	429e      	cmp	r6, r3
 8006e36:	dcfb      	bgt.n	8006e30 <__sccl+0x58>
 8006e38:	e7e8      	b.n	8006e0c <__sccl+0x34>
	...

08006e3c <_strtol_l.isra.0>:
 8006e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3e:	001f      	movs	r7, r3
 8006e40:	000e      	movs	r6, r1
 8006e42:	b087      	sub	sp, #28
 8006e44:	9005      	str	r0, [sp, #20]
 8006e46:	9103      	str	r1, [sp, #12]
 8006e48:	9202      	str	r2, [sp, #8]
 8006e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e4c:	7834      	ldrb	r4, [r6, #0]
 8006e4e:	f7ff fc0d 	bl	800666c <__locale_ctype_ptr_l>
 8006e52:	2208      	movs	r2, #8
 8006e54:	1900      	adds	r0, r0, r4
 8006e56:	7843      	ldrb	r3, [r0, #1]
 8006e58:	1c75      	adds	r5, r6, #1
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	d10c      	bne.n	8006e78 <_strtol_l.isra.0+0x3c>
 8006e5e:	2c2d      	cmp	r4, #45	; 0x2d
 8006e60:	d10c      	bne.n	8006e7c <_strtol_l.isra.0+0x40>
 8006e62:	3301      	adds	r3, #1
 8006e64:	782c      	ldrb	r4, [r5, #0]
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	1cb5      	adds	r5, r6, #2
 8006e6a:	2f00      	cmp	r7, #0
 8006e6c:	d00c      	beq.n	8006e88 <_strtol_l.isra.0+0x4c>
 8006e6e:	2f10      	cmp	r7, #16
 8006e70:	d114      	bne.n	8006e9c <_strtol_l.isra.0+0x60>
 8006e72:	2c30      	cmp	r4, #48	; 0x30
 8006e74:	d00a      	beq.n	8006e8c <_strtol_l.isra.0+0x50>
 8006e76:	e011      	b.n	8006e9c <_strtol_l.isra.0+0x60>
 8006e78:	002e      	movs	r6, r5
 8006e7a:	e7e6      	b.n	8006e4a <_strtol_l.isra.0+0xe>
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	2c2b      	cmp	r4, #43	; 0x2b
 8006e80:	d1f3      	bne.n	8006e6a <_strtol_l.isra.0+0x2e>
 8006e82:	782c      	ldrb	r4, [r5, #0]
 8006e84:	1cb5      	adds	r5, r6, #2
 8006e86:	e7f0      	b.n	8006e6a <_strtol_l.isra.0+0x2e>
 8006e88:	2c30      	cmp	r4, #48	; 0x30
 8006e8a:	d12f      	bne.n	8006eec <_strtol_l.isra.0+0xb0>
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	782b      	ldrb	r3, [r5, #0]
 8006e90:	4393      	bics	r3, r2
 8006e92:	2b58      	cmp	r3, #88	; 0x58
 8006e94:	d151      	bne.n	8006f3a <_strtol_l.isra.0+0xfe>
 8006e96:	2710      	movs	r7, #16
 8006e98:	786c      	ldrb	r4, [r5, #1]
 8006e9a:	3502      	adds	r5, #2
 8006e9c:	9b01      	ldr	r3, [sp, #4]
 8006e9e:	4a29      	ldr	r2, [pc, #164]	; (8006f44 <_strtol_l.isra.0+0x108>)
 8006ea0:	0039      	movs	r1, r7
 8006ea2:	189e      	adds	r6, r3, r2
 8006ea4:	0030      	movs	r0, r6
 8006ea6:	f7f9 f9d1 	bl	800024c <__aeabi_uidivmod>
 8006eaa:	0030      	movs	r0, r6
 8006eac:	9104      	str	r1, [sp, #16]
 8006eae:	0039      	movs	r1, r7
 8006eb0:	f7f9 f946 	bl	8000140 <__udivsi3>
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	4249      	negs	r1, r1
 8006eba:	0002      	movs	r2, r0
 8006ebc:	468c      	mov	ip, r1
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	0021      	movs	r1, r4
 8006ec2:	3930      	subs	r1, #48	; 0x30
 8006ec4:	2909      	cmp	r1, #9
 8006ec6:	d813      	bhi.n	8006ef0 <_strtol_l.isra.0+0xb4>
 8006ec8:	000c      	movs	r4, r1
 8006eca:	42a7      	cmp	r7, r4
 8006ecc:	dd1c      	ble.n	8006f08 <_strtol_l.isra.0+0xcc>
 8006ece:	1c59      	adds	r1, r3, #1
 8006ed0:	d009      	beq.n	8006ee6 <_strtol_l.isra.0+0xaa>
 8006ed2:	4663      	mov	r3, ip
 8006ed4:	4282      	cmp	r2, r0
 8006ed6:	d306      	bcc.n	8006ee6 <_strtol_l.isra.0+0xaa>
 8006ed8:	d102      	bne.n	8006ee0 <_strtol_l.isra.0+0xa4>
 8006eda:	9904      	ldr	r1, [sp, #16]
 8006edc:	42a1      	cmp	r1, r4
 8006ede:	db02      	blt.n	8006ee6 <_strtol_l.isra.0+0xaa>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4378      	muls	r0, r7
 8006ee4:	1820      	adds	r0, r4, r0
 8006ee6:	782c      	ldrb	r4, [r5, #0]
 8006ee8:	3501      	adds	r5, #1
 8006eea:	e7e9      	b.n	8006ec0 <_strtol_l.isra.0+0x84>
 8006eec:	270a      	movs	r7, #10
 8006eee:	e7d5      	b.n	8006e9c <_strtol_l.isra.0+0x60>
 8006ef0:	0021      	movs	r1, r4
 8006ef2:	3941      	subs	r1, #65	; 0x41
 8006ef4:	2919      	cmp	r1, #25
 8006ef6:	d801      	bhi.n	8006efc <_strtol_l.isra.0+0xc0>
 8006ef8:	3c37      	subs	r4, #55	; 0x37
 8006efa:	e7e6      	b.n	8006eca <_strtol_l.isra.0+0x8e>
 8006efc:	0021      	movs	r1, r4
 8006efe:	3961      	subs	r1, #97	; 0x61
 8006f00:	2919      	cmp	r1, #25
 8006f02:	d801      	bhi.n	8006f08 <_strtol_l.isra.0+0xcc>
 8006f04:	3c57      	subs	r4, #87	; 0x57
 8006f06:	e7e0      	b.n	8006eca <_strtol_l.isra.0+0x8e>
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	d108      	bne.n	8006f1e <_strtol_l.isra.0+0xe2>
 8006f0c:	9a05      	ldr	r2, [sp, #20]
 8006f0e:	3323      	adds	r3, #35	; 0x23
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	9b02      	ldr	r3, [sp, #8]
 8006f14:	0030      	movs	r0, r6
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10b      	bne.n	8006f32 <_strtol_l.isra.0+0xf6>
 8006f1a:	b007      	add	sp, #28
 8006f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f1e:	9a01      	ldr	r2, [sp, #4]
 8006f20:	2a00      	cmp	r2, #0
 8006f22:	d000      	beq.n	8006f26 <_strtol_l.isra.0+0xea>
 8006f24:	4240      	negs	r0, r0
 8006f26:	9a02      	ldr	r2, [sp, #8]
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	d0f6      	beq.n	8006f1a <_strtol_l.isra.0+0xde>
 8006f2c:	9a03      	ldr	r2, [sp, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d000      	beq.n	8006f34 <_strtol_l.isra.0+0xf8>
 8006f32:	1e6a      	subs	r2, r5, #1
 8006f34:	9b02      	ldr	r3, [sp, #8]
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e7ef      	b.n	8006f1a <_strtol_l.isra.0+0xde>
 8006f3a:	2430      	movs	r4, #48	; 0x30
 8006f3c:	2f00      	cmp	r7, #0
 8006f3e:	d1ad      	bne.n	8006e9c <_strtol_l.isra.0+0x60>
 8006f40:	3708      	adds	r7, #8
 8006f42:	e7ab      	b.n	8006e9c <_strtol_l.isra.0+0x60>
 8006f44:	7fffffff 	.word	0x7fffffff

08006f48 <_strtol_r>:
 8006f48:	b513      	push	{r0, r1, r4, lr}
 8006f4a:	4c05      	ldr	r4, [pc, #20]	; (8006f60 <_strtol_r+0x18>)
 8006f4c:	6824      	ldr	r4, [r4, #0]
 8006f4e:	6a24      	ldr	r4, [r4, #32]
 8006f50:	2c00      	cmp	r4, #0
 8006f52:	d100      	bne.n	8006f56 <_strtol_r+0xe>
 8006f54:	4c03      	ldr	r4, [pc, #12]	; (8006f64 <_strtol_r+0x1c>)
 8006f56:	9400      	str	r4, [sp, #0]
 8006f58:	f7ff ff70 	bl	8006e3c <_strtol_l.isra.0>
 8006f5c:	bd16      	pop	{r1, r2, r4, pc}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	20000010 	.word	0x20000010
 8006f64:	200000bc 	.word	0x200000bc

08006f68 <__submore>:
 8006f68:	000b      	movs	r3, r1
 8006f6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f6c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006f6e:	3344      	adds	r3, #68	; 0x44
 8006f70:	000c      	movs	r4, r1
 8006f72:	429d      	cmp	r5, r3
 8006f74:	d11c      	bne.n	8006fb0 <__submore+0x48>
 8006f76:	2680      	movs	r6, #128	; 0x80
 8006f78:	00f6      	lsls	r6, r6, #3
 8006f7a:	0031      	movs	r1, r6
 8006f7c:	f7fe fc6c 	bl	8005858 <_malloc_r>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d102      	bne.n	8006f8a <__submore+0x22>
 8006f84:	2001      	movs	r0, #1
 8006f86:	4240      	negs	r0, r0
 8006f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f8a:	0023      	movs	r3, r4
 8006f8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006f8e:	63a6      	str	r6, [r4, #56]	; 0x38
 8006f90:	3346      	adds	r3, #70	; 0x46
 8006f92:	781a      	ldrb	r2, [r3, #0]
 8006f94:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <__submore+0x70>)
 8006f96:	54c2      	strb	r2, [r0, r3]
 8006f98:	0023      	movs	r3, r4
 8006f9a:	3345      	adds	r3, #69	; 0x45
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <__submore+0x74>)
 8006fa0:	54c2      	strb	r2, [r0, r3]
 8006fa2:	782a      	ldrb	r2, [r5, #0]
 8006fa4:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <__submore+0x78>)
 8006fa6:	54c2      	strb	r2, [r0, r3]
 8006fa8:	18c0      	adds	r0, r0, r3
 8006faa:	6020      	str	r0, [r4, #0]
 8006fac:	2000      	movs	r0, #0
 8006fae:	e7eb      	b.n	8006f88 <__submore+0x20>
 8006fb0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006fb2:	0029      	movs	r1, r5
 8006fb4:	0073      	lsls	r3, r6, #1
 8006fb6:	001a      	movs	r2, r3
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	f7ff fba1 	bl	8006700 <_realloc_r>
 8006fbe:	1e05      	subs	r5, r0, #0
 8006fc0:	d0e0      	beq.n	8006f84 <__submore+0x1c>
 8006fc2:	1987      	adds	r7, r0, r6
 8006fc4:	0001      	movs	r1, r0
 8006fc6:	0032      	movs	r2, r6
 8006fc8:	0038      	movs	r0, r7
 8006fca:	f7ff fb7e 	bl	80066ca <memcpy>
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	6027      	str	r7, [r4, #0]
 8006fd2:	6365      	str	r5, [r4, #52]	; 0x34
 8006fd4:	63a3      	str	r3, [r4, #56]	; 0x38
 8006fd6:	e7e9      	b.n	8006fac <__submore+0x44>
 8006fd8:	000003ff 	.word	0x000003ff
 8006fdc:	000003fe 	.word	0x000003fe
 8006fe0:	000003fd 	.word	0x000003fd

08006fe4 <__ascii_wctomb>:
 8006fe4:	1e0b      	subs	r3, r1, #0
 8006fe6:	d004      	beq.n	8006ff2 <__ascii_wctomb+0xe>
 8006fe8:	2aff      	cmp	r2, #255	; 0xff
 8006fea:	d904      	bls.n	8006ff6 <__ascii_wctomb+0x12>
 8006fec:	238a      	movs	r3, #138	; 0x8a
 8006fee:	6003      	str	r3, [r0, #0]
 8006ff0:	3b8b      	subs	r3, #139	; 0x8b
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	4770      	bx	lr
 8006ff6:	700a      	strb	r2, [r1, #0]
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e7fa      	b.n	8006ff2 <__ascii_wctomb+0xe>

08006ffc <_malloc_usable_size_r>:
 8006ffc:	1f0b      	subs	r3, r1, #4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	1f18      	subs	r0, r3, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	da01      	bge.n	800700a <_malloc_usable_size_r+0xe>
 8007006:	580b      	ldr	r3, [r1, r0]
 8007008:	18c0      	adds	r0, r0, r3
 800700a:	4770      	bx	lr

0800700c <_init>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr

08007018 <_fini>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701e:	bc08      	pop	{r3}
 8007020:	469e      	mov	lr, r3
 8007022:	4770      	bx	lr
