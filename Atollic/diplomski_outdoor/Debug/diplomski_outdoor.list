
diplomski_outdoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a24  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  08005e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b0  20000228  080060c0  00020228  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003d8  080060c0  000203d8  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015989  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000317e  00000000  00000000  00035bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a1df  00000000  00000000  00038d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e10  00000000  00000000  00042f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001038  00000000  00000000  00043d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008485  00000000  00000000  00044d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000477c  00000000  00000000  0004d205  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00051981  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000356c  00000000  00000000  00051a00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000228 	.word	0x20000228
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005acc 	.word	0x08005acc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000022c 	.word	0x2000022c
 8000104:	08005acc 	.word	0x08005acc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_uldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d111      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d10f      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_uldivmod+0xe>
 8000438:	2800      	cmp	r0, #0
 800043a:	d002      	beq.n	8000442 <__aeabi_uldivmod+0x16>
 800043c:	2100      	movs	r1, #0
 800043e:	43c9      	mvns	r1, r1
 8000440:	1c08      	adds	r0, r1, #0
 8000442:	b407      	push	{r0, r1, r2}
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <__aeabi_uldivmod+0x24>)
 8000446:	a102      	add	r1, pc, #8	; (adr r1, 8000450 <__aeabi_uldivmod+0x24>)
 8000448:	1840      	adds	r0, r0, r1
 800044a:	9002      	str	r0, [sp, #8]
 800044c:	bd03      	pop	{r0, r1, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	ffffffd9 	.word	0xffffffd9
 8000454:	b403      	push	{r0, r1}
 8000456:	4668      	mov	r0, sp
 8000458:	b501      	push	{r0, lr}
 800045a:	9802      	ldr	r0, [sp, #8]
 800045c:	f000 f806 	bl	800046c <__udivmoddi4>
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	469e      	mov	lr, r3
 8000464:	b002      	add	sp, #8
 8000466:	bc0c      	pop	{r2, r3}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	4657      	mov	r7, sl
 8000470:	464e      	mov	r6, r9
 8000472:	4645      	mov	r5, r8
 8000474:	46de      	mov	lr, fp
 8000476:	b5e0      	push	{r5, r6, r7, lr}
 8000478:	0004      	movs	r4, r0
 800047a:	b083      	sub	sp, #12
 800047c:	000d      	movs	r5, r1
 800047e:	4692      	mov	sl, r2
 8000480:	4699      	mov	r9, r3
 8000482:	428b      	cmp	r3, r1
 8000484:	d82f      	bhi.n	80004e6 <__udivmoddi4+0x7a>
 8000486:	d02c      	beq.n	80004e2 <__udivmoddi4+0x76>
 8000488:	4649      	mov	r1, r9
 800048a:	4650      	mov	r0, sl
 800048c:	f000 ff2e 	bl	80012ec <__clzdi2>
 8000490:	0029      	movs	r1, r5
 8000492:	0006      	movs	r6, r0
 8000494:	0020      	movs	r0, r4
 8000496:	f000 ff29 	bl	80012ec <__clzdi2>
 800049a:	1a33      	subs	r3, r6, r0
 800049c:	4698      	mov	r8, r3
 800049e:	3b20      	subs	r3, #32
 80004a0:	469b      	mov	fp, r3
 80004a2:	d500      	bpl.n	80004a6 <__udivmoddi4+0x3a>
 80004a4:	e074      	b.n	8000590 <__udivmoddi4+0x124>
 80004a6:	4653      	mov	r3, sl
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	001f      	movs	r7, r3
 80004ae:	4653      	mov	r3, sl
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	001e      	movs	r6, r3
 80004b6:	42af      	cmp	r7, r5
 80004b8:	d829      	bhi.n	800050e <__udivmoddi4+0xa2>
 80004ba:	d026      	beq.n	800050a <__udivmoddi4+0x9e>
 80004bc:	465b      	mov	r3, fp
 80004be:	1ba4      	subs	r4, r4, r6
 80004c0:	41bd      	sbcs	r5, r7
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	da00      	bge.n	80004c8 <__udivmoddi4+0x5c>
 80004c6:	e079      	b.n	80005bc <__udivmoddi4+0x150>
 80004c8:	2200      	movs	r2, #0
 80004ca:	2300      	movs	r3, #0
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	2301      	movs	r3, #1
 80004d2:	465a      	mov	r2, fp
 80004d4:	4093      	lsls	r3, r2
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2301      	movs	r3, #1
 80004da:	4642      	mov	r2, r8
 80004dc:	4093      	lsls	r3, r2
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	e019      	b.n	8000516 <__udivmoddi4+0xaa>
 80004e2:	4282      	cmp	r2, r0
 80004e4:	d9d0      	bls.n	8000488 <__udivmoddi4+0x1c>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <__udivmoddi4+0x8c>
 80004f4:	601c      	str	r4, [r3, #0]
 80004f6:	605d      	str	r5, [r3, #4]
 80004f8:	9800      	ldr	r0, [sp, #0]
 80004fa:	9901      	ldr	r1, [sp, #4]
 80004fc:	b003      	add	sp, #12
 80004fe:	bc3c      	pop	{r2, r3, r4, r5}
 8000500:	4690      	mov	r8, r2
 8000502:	4699      	mov	r9, r3
 8000504:	46a2      	mov	sl, r4
 8000506:	46ab      	mov	fp, r5
 8000508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050a:	42a3      	cmp	r3, r4
 800050c:	d9d6      	bls.n	80004bc <__udivmoddi4+0x50>
 800050e:	2200      	movs	r2, #0
 8000510:	2300      	movs	r3, #0
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	4643      	mov	r3, r8
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0e8      	beq.n	80004ee <__udivmoddi4+0x82>
 800051c:	07fb      	lsls	r3, r7, #31
 800051e:	0872      	lsrs	r2, r6, #1
 8000520:	431a      	orrs	r2, r3
 8000522:	4646      	mov	r6, r8
 8000524:	087b      	lsrs	r3, r7, #1
 8000526:	e00e      	b.n	8000546 <__udivmoddi4+0xda>
 8000528:	42ab      	cmp	r3, r5
 800052a:	d101      	bne.n	8000530 <__udivmoddi4+0xc4>
 800052c:	42a2      	cmp	r2, r4
 800052e:	d80c      	bhi.n	800054a <__udivmoddi4+0xde>
 8000530:	1aa4      	subs	r4, r4, r2
 8000532:	419d      	sbcs	r5, r3
 8000534:	2001      	movs	r0, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2100      	movs	r1, #0
 800053c:	3e01      	subs	r6, #1
 800053e:	1824      	adds	r4, r4, r0
 8000540:	414d      	adcs	r5, r1
 8000542:	2e00      	cmp	r6, #0
 8000544:	d006      	beq.n	8000554 <__udivmoddi4+0xe8>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d9ee      	bls.n	8000528 <__udivmoddi4+0xbc>
 800054a:	3e01      	subs	r6, #1
 800054c:	1924      	adds	r4, r4, r4
 800054e:	416d      	adcs	r5, r5
 8000550:	2e00      	cmp	r6, #0
 8000552:	d1f8      	bne.n	8000546 <__udivmoddi4+0xda>
 8000554:	465b      	mov	r3, fp
 8000556:	9800      	ldr	r0, [sp, #0]
 8000558:	9901      	ldr	r1, [sp, #4]
 800055a:	1900      	adds	r0, r0, r4
 800055c:	4169      	adcs	r1, r5
 800055e:	2b00      	cmp	r3, #0
 8000560:	db22      	blt.n	80005a8 <__udivmoddi4+0x13c>
 8000562:	002b      	movs	r3, r5
 8000564:	465a      	mov	r2, fp
 8000566:	40d3      	lsrs	r3, r2
 8000568:	002a      	movs	r2, r5
 800056a:	4644      	mov	r4, r8
 800056c:	40e2      	lsrs	r2, r4
 800056e:	001c      	movs	r4, r3
 8000570:	465b      	mov	r3, fp
 8000572:	0015      	movs	r5, r2
 8000574:	2b00      	cmp	r3, #0
 8000576:	db2c      	blt.n	80005d2 <__udivmoddi4+0x166>
 8000578:	0026      	movs	r6, r4
 800057a:	409e      	lsls	r6, r3
 800057c:	0033      	movs	r3, r6
 800057e:	0026      	movs	r6, r4
 8000580:	4647      	mov	r7, r8
 8000582:	40be      	lsls	r6, r7
 8000584:	0032      	movs	r2, r6
 8000586:	1a80      	subs	r0, r0, r2
 8000588:	4199      	sbcs	r1, r3
 800058a:	9000      	str	r0, [sp, #0]
 800058c:	9101      	str	r1, [sp, #4]
 800058e:	e7ae      	b.n	80004ee <__udivmoddi4+0x82>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	4652      	mov	r2, sl
 8000598:	40da      	lsrs	r2, r3
 800059a:	4641      	mov	r1, r8
 800059c:	0013      	movs	r3, r2
 800059e:	464a      	mov	r2, r9
 80005a0:	408a      	lsls	r2, r1
 80005a2:	0017      	movs	r7, r2
 80005a4:	431f      	orrs	r7, r3
 80005a6:	e782      	b.n	80004ae <__udivmoddi4+0x42>
 80005a8:	4642      	mov	r2, r8
 80005aa:	2320      	movs	r3, #32
 80005ac:	1a9b      	subs	r3, r3, r2
 80005ae:	002a      	movs	r2, r5
 80005b0:	4646      	mov	r6, r8
 80005b2:	409a      	lsls	r2, r3
 80005b4:	0023      	movs	r3, r4
 80005b6:	40f3      	lsrs	r3, r6
 80005b8:	4313      	orrs	r3, r2
 80005ba:	e7d5      	b.n	8000568 <__udivmoddi4+0xfc>
 80005bc:	4642      	mov	r2, r8
 80005be:	2320      	movs	r3, #32
 80005c0:	2100      	movs	r1, #0
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	2200      	movs	r2, #0
 80005c6:	9100      	str	r1, [sp, #0]
 80005c8:	9201      	str	r2, [sp, #4]
 80005ca:	2201      	movs	r2, #1
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	9201      	str	r2, [sp, #4]
 80005d0:	e782      	b.n	80004d8 <__udivmoddi4+0x6c>
 80005d2:	4642      	mov	r2, r8
 80005d4:	2320      	movs	r3, #32
 80005d6:	0026      	movs	r6, r4
 80005d8:	1a9b      	subs	r3, r3, r2
 80005da:	40de      	lsrs	r6, r3
 80005dc:	002f      	movs	r7, r5
 80005de:	46b4      	mov	ip, r6
 80005e0:	4097      	lsls	r7, r2
 80005e2:	4666      	mov	r6, ip
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7c9      	b.n	800057e <__udivmoddi4+0x112>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__aeabi_ui2f>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	1e04      	subs	r4, r0, #0
 80005f0:	d027      	beq.n	8000642 <__aeabi_ui2f+0x56>
 80005f2:	f000 fe5d 	bl	80012b0 <__clzsi2>
 80005f6:	239e      	movs	r3, #158	; 0x9e
 80005f8:	1a1b      	subs	r3, r3, r0
 80005fa:	2b96      	cmp	r3, #150	; 0x96
 80005fc:	dc0a      	bgt.n	8000614 <__aeabi_ui2f+0x28>
 80005fe:	2296      	movs	r2, #150	; 0x96
 8000600:	1ad2      	subs	r2, r2, r3
 8000602:	4094      	lsls	r4, r2
 8000604:	0264      	lsls	r4, r4, #9
 8000606:	0a64      	lsrs	r4, r4, #9
 8000608:	b2db      	uxtb	r3, r3
 800060a:	0264      	lsls	r4, r4, #9
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	0a60      	lsrs	r0, r4, #9
 8000610:	4318      	orrs	r0, r3
 8000612:	bd10      	pop	{r4, pc}
 8000614:	2b99      	cmp	r3, #153	; 0x99
 8000616:	dc17      	bgt.n	8000648 <__aeabi_ui2f+0x5c>
 8000618:	2299      	movs	r2, #153	; 0x99
 800061a:	1ad2      	subs	r2, r2, r3
 800061c:	2a00      	cmp	r2, #0
 800061e:	dd27      	ble.n	8000670 <__aeabi_ui2f+0x84>
 8000620:	4094      	lsls	r4, r2
 8000622:	0022      	movs	r2, r4
 8000624:	4c13      	ldr	r4, [pc, #76]	; (8000674 <__aeabi_ui2f+0x88>)
 8000626:	4014      	ands	r4, r2
 8000628:	0751      	lsls	r1, r2, #29
 800062a:	d004      	beq.n	8000636 <__aeabi_ui2f+0x4a>
 800062c:	210f      	movs	r1, #15
 800062e:	400a      	ands	r2, r1
 8000630:	2a04      	cmp	r2, #4
 8000632:	d000      	beq.n	8000636 <__aeabi_ui2f+0x4a>
 8000634:	3404      	adds	r4, #4
 8000636:	0162      	lsls	r2, r4, #5
 8000638:	d412      	bmi.n	8000660 <__aeabi_ui2f+0x74>
 800063a:	01a4      	lsls	r4, r4, #6
 800063c:	0a64      	lsrs	r4, r4, #9
 800063e:	b2db      	uxtb	r3, r3
 8000640:	e7e3      	b.n	800060a <__aeabi_ui2f+0x1e>
 8000642:	2300      	movs	r3, #0
 8000644:	2400      	movs	r4, #0
 8000646:	e7e0      	b.n	800060a <__aeabi_ui2f+0x1e>
 8000648:	22b9      	movs	r2, #185	; 0xb9
 800064a:	0021      	movs	r1, r4
 800064c:	1ad2      	subs	r2, r2, r3
 800064e:	4091      	lsls	r1, r2
 8000650:	000a      	movs	r2, r1
 8000652:	1e51      	subs	r1, r2, #1
 8000654:	418a      	sbcs	r2, r1
 8000656:	2105      	movs	r1, #5
 8000658:	1a09      	subs	r1, r1, r0
 800065a:	40cc      	lsrs	r4, r1
 800065c:	4314      	orrs	r4, r2
 800065e:	e7db      	b.n	8000618 <__aeabi_ui2f+0x2c>
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__aeabi_ui2f+0x88>)
 8000662:	401c      	ands	r4, r3
 8000664:	239f      	movs	r3, #159	; 0x9f
 8000666:	01a4      	lsls	r4, r4, #6
 8000668:	1a1b      	subs	r3, r3, r0
 800066a:	0a64      	lsrs	r4, r4, #9
 800066c:	b2db      	uxtb	r3, r3
 800066e:	e7cc      	b.n	800060a <__aeabi_ui2f+0x1e>
 8000670:	0022      	movs	r2, r4
 8000672:	e7d7      	b.n	8000624 <__aeabi_ui2f+0x38>
 8000674:	fbffffff 	.word	0xfbffffff

08000678 <__aeabi_dmul>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	4657      	mov	r7, sl
 800067c:	4645      	mov	r5, r8
 800067e:	46de      	mov	lr, fp
 8000680:	464e      	mov	r6, r9
 8000682:	b5e0      	push	{r5, r6, r7, lr}
 8000684:	030c      	lsls	r4, r1, #12
 8000686:	4698      	mov	r8, r3
 8000688:	004e      	lsls	r6, r1, #1
 800068a:	0b23      	lsrs	r3, r4, #12
 800068c:	b087      	sub	sp, #28
 800068e:	0007      	movs	r7, r0
 8000690:	4692      	mov	sl, r2
 8000692:	469b      	mov	fp, r3
 8000694:	0d76      	lsrs	r6, r6, #21
 8000696:	0fcd      	lsrs	r5, r1, #31
 8000698:	2e00      	cmp	r6, #0
 800069a:	d06b      	beq.n	8000774 <__aeabi_dmul+0xfc>
 800069c:	4b6d      	ldr	r3, [pc, #436]	; (8000854 <__aeabi_dmul+0x1dc>)
 800069e:	429e      	cmp	r6, r3
 80006a0:	d035      	beq.n	800070e <__aeabi_dmul+0x96>
 80006a2:	2480      	movs	r4, #128	; 0x80
 80006a4:	465b      	mov	r3, fp
 80006a6:	0f42      	lsrs	r2, r0, #29
 80006a8:	0424      	lsls	r4, r4, #16
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4314      	orrs	r4, r2
 80006ae:	431c      	orrs	r4, r3
 80006b0:	00c3      	lsls	r3, r0, #3
 80006b2:	4699      	mov	r9, r3
 80006b4:	4b68      	ldr	r3, [pc, #416]	; (8000858 <__aeabi_dmul+0x1e0>)
 80006b6:	46a3      	mov	fp, r4
 80006b8:	469c      	mov	ip, r3
 80006ba:	2300      	movs	r3, #0
 80006bc:	2700      	movs	r7, #0
 80006be:	4466      	add	r6, ip
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	4643      	mov	r3, r8
 80006c4:	031c      	lsls	r4, r3, #12
 80006c6:	005a      	lsls	r2, r3, #1
 80006c8:	0fdb      	lsrs	r3, r3, #31
 80006ca:	4650      	mov	r0, sl
 80006cc:	0b24      	lsrs	r4, r4, #12
 80006ce:	0d52      	lsrs	r2, r2, #21
 80006d0:	4698      	mov	r8, r3
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dmul+0x5e>
 80006d4:	e076      	b.n	80007c4 <__aeabi_dmul+0x14c>
 80006d6:	4b5f      	ldr	r3, [pc, #380]	; (8000854 <__aeabi_dmul+0x1dc>)
 80006d8:	429a      	cmp	r2, r3
 80006da:	d06d      	beq.n	80007b8 <__aeabi_dmul+0x140>
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	0f41      	lsrs	r1, r0, #29
 80006e0:	041b      	lsls	r3, r3, #16
 80006e2:	430b      	orrs	r3, r1
 80006e4:	495c      	ldr	r1, [pc, #368]	; (8000858 <__aeabi_dmul+0x1e0>)
 80006e6:	00e4      	lsls	r4, r4, #3
 80006e8:	468c      	mov	ip, r1
 80006ea:	431c      	orrs	r4, r3
 80006ec:	00c3      	lsls	r3, r0, #3
 80006ee:	2000      	movs	r0, #0
 80006f0:	4462      	add	r2, ip
 80006f2:	4641      	mov	r1, r8
 80006f4:	18b6      	adds	r6, r6, r2
 80006f6:	4069      	eors	r1, r5
 80006f8:	1c72      	adds	r2, r6, #1
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	4694      	mov	ip, r2
 80006fe:	4307      	orrs	r7, r0
 8000700:	2f0f      	cmp	r7, #15
 8000702:	d900      	bls.n	8000706 <__aeabi_dmul+0x8e>
 8000704:	e0b0      	b.n	8000868 <__aeabi_dmul+0x1f0>
 8000706:	4a55      	ldr	r2, [pc, #340]	; (800085c <__aeabi_dmul+0x1e4>)
 8000708:	00bf      	lsls	r7, r7, #2
 800070a:	59d2      	ldr	r2, [r2, r7]
 800070c:	4697      	mov	pc, r2
 800070e:	465b      	mov	r3, fp
 8000710:	4303      	orrs	r3, r0
 8000712:	4699      	mov	r9, r3
 8000714:	d000      	beq.n	8000718 <__aeabi_dmul+0xa0>
 8000716:	e087      	b.n	8000828 <__aeabi_dmul+0x1b0>
 8000718:	2300      	movs	r3, #0
 800071a:	469b      	mov	fp, r3
 800071c:	3302      	adds	r3, #2
 800071e:	2708      	movs	r7, #8
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	e7ce      	b.n	80006c2 <__aeabi_dmul+0x4a>
 8000724:	4642      	mov	r2, r8
 8000726:	9201      	str	r2, [sp, #4]
 8000728:	2802      	cmp	r0, #2
 800072a:	d067      	beq.n	80007fc <__aeabi_dmul+0x184>
 800072c:	2803      	cmp	r0, #3
 800072e:	d100      	bne.n	8000732 <__aeabi_dmul+0xba>
 8000730:	e20e      	b.n	8000b50 <__aeabi_dmul+0x4d8>
 8000732:	2801      	cmp	r0, #1
 8000734:	d000      	beq.n	8000738 <__aeabi_dmul+0xc0>
 8000736:	e162      	b.n	80009fe <__aeabi_dmul+0x386>
 8000738:	2300      	movs	r3, #0
 800073a:	2400      	movs	r4, #0
 800073c:	2200      	movs	r2, #0
 800073e:	4699      	mov	r9, r3
 8000740:	9901      	ldr	r1, [sp, #4]
 8000742:	4001      	ands	r1, r0
 8000744:	b2cd      	uxtb	r5, r1
 8000746:	2100      	movs	r1, #0
 8000748:	0312      	lsls	r2, r2, #12
 800074a:	0d0b      	lsrs	r3, r1, #20
 800074c:	0b12      	lsrs	r2, r2, #12
 800074e:	051b      	lsls	r3, r3, #20
 8000750:	4313      	orrs	r3, r2
 8000752:	4a43      	ldr	r2, [pc, #268]	; (8000860 <__aeabi_dmul+0x1e8>)
 8000754:	0524      	lsls	r4, r4, #20
 8000756:	4013      	ands	r3, r2
 8000758:	431c      	orrs	r4, r3
 800075a:	0064      	lsls	r4, r4, #1
 800075c:	07ed      	lsls	r5, r5, #31
 800075e:	0864      	lsrs	r4, r4, #1
 8000760:	432c      	orrs	r4, r5
 8000762:	4648      	mov	r0, r9
 8000764:	0021      	movs	r1, r4
 8000766:	b007      	add	sp, #28
 8000768:	bc3c      	pop	{r2, r3, r4, r5}
 800076a:	4690      	mov	r8, r2
 800076c:	4699      	mov	r9, r3
 800076e:	46a2      	mov	sl, r4
 8000770:	46ab      	mov	fp, r5
 8000772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000774:	4303      	orrs	r3, r0
 8000776:	4699      	mov	r9, r3
 8000778:	d04f      	beq.n	800081a <__aeabi_dmul+0x1a2>
 800077a:	465b      	mov	r3, fp
 800077c:	2b00      	cmp	r3, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dmul+0x10a>
 8000780:	e189      	b.n	8000a96 <__aeabi_dmul+0x41e>
 8000782:	4658      	mov	r0, fp
 8000784:	f000 fd94 	bl	80012b0 <__clzsi2>
 8000788:	0003      	movs	r3, r0
 800078a:	3b0b      	subs	r3, #11
 800078c:	2b1c      	cmp	r3, #28
 800078e:	dd00      	ble.n	8000792 <__aeabi_dmul+0x11a>
 8000790:	e17a      	b.n	8000a88 <__aeabi_dmul+0x410>
 8000792:	221d      	movs	r2, #29
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	003a      	movs	r2, r7
 8000798:	0001      	movs	r1, r0
 800079a:	465c      	mov	r4, fp
 800079c:	40da      	lsrs	r2, r3
 800079e:	3908      	subs	r1, #8
 80007a0:	408c      	lsls	r4, r1
 80007a2:	0013      	movs	r3, r2
 80007a4:	408f      	lsls	r7, r1
 80007a6:	4323      	orrs	r3, r4
 80007a8:	469b      	mov	fp, r3
 80007aa:	46b9      	mov	r9, r7
 80007ac:	2300      	movs	r3, #0
 80007ae:	4e2d      	ldr	r6, [pc, #180]	; (8000864 <__aeabi_dmul+0x1ec>)
 80007b0:	2700      	movs	r7, #0
 80007b2:	1a36      	subs	r6, r6, r0
 80007b4:	9302      	str	r3, [sp, #8]
 80007b6:	e784      	b.n	80006c2 <__aeabi_dmul+0x4a>
 80007b8:	4653      	mov	r3, sl
 80007ba:	4323      	orrs	r3, r4
 80007bc:	d12a      	bne.n	8000814 <__aeabi_dmul+0x19c>
 80007be:	2400      	movs	r4, #0
 80007c0:	2002      	movs	r0, #2
 80007c2:	e796      	b.n	80006f2 <__aeabi_dmul+0x7a>
 80007c4:	4653      	mov	r3, sl
 80007c6:	4323      	orrs	r3, r4
 80007c8:	d020      	beq.n	800080c <__aeabi_dmul+0x194>
 80007ca:	2c00      	cmp	r4, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dmul+0x158>
 80007ce:	e157      	b.n	8000a80 <__aeabi_dmul+0x408>
 80007d0:	0020      	movs	r0, r4
 80007d2:	f000 fd6d 	bl	80012b0 <__clzsi2>
 80007d6:	0003      	movs	r3, r0
 80007d8:	3b0b      	subs	r3, #11
 80007da:	2b1c      	cmp	r3, #28
 80007dc:	dd00      	ble.n	80007e0 <__aeabi_dmul+0x168>
 80007de:	e149      	b.n	8000a74 <__aeabi_dmul+0x3fc>
 80007e0:	211d      	movs	r1, #29
 80007e2:	1acb      	subs	r3, r1, r3
 80007e4:	4651      	mov	r1, sl
 80007e6:	0002      	movs	r2, r0
 80007e8:	40d9      	lsrs	r1, r3
 80007ea:	4653      	mov	r3, sl
 80007ec:	3a08      	subs	r2, #8
 80007ee:	4094      	lsls	r4, r2
 80007f0:	4093      	lsls	r3, r2
 80007f2:	430c      	orrs	r4, r1
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <__aeabi_dmul+0x1ec>)
 80007f6:	1a12      	subs	r2, r2, r0
 80007f8:	2000      	movs	r0, #0
 80007fa:	e77a      	b.n	80006f2 <__aeabi_dmul+0x7a>
 80007fc:	2501      	movs	r5, #1
 80007fe:	9b01      	ldr	r3, [sp, #4]
 8000800:	4c14      	ldr	r4, [pc, #80]	; (8000854 <__aeabi_dmul+0x1dc>)
 8000802:	401d      	ands	r5, r3
 8000804:	2300      	movs	r3, #0
 8000806:	2200      	movs	r2, #0
 8000808:	4699      	mov	r9, r3
 800080a:	e79c      	b.n	8000746 <__aeabi_dmul+0xce>
 800080c:	2400      	movs	r4, #0
 800080e:	2200      	movs	r2, #0
 8000810:	2001      	movs	r0, #1
 8000812:	e76e      	b.n	80006f2 <__aeabi_dmul+0x7a>
 8000814:	4653      	mov	r3, sl
 8000816:	2003      	movs	r0, #3
 8000818:	e76b      	b.n	80006f2 <__aeabi_dmul+0x7a>
 800081a:	2300      	movs	r3, #0
 800081c:	469b      	mov	fp, r3
 800081e:	3301      	adds	r3, #1
 8000820:	2704      	movs	r7, #4
 8000822:	2600      	movs	r6, #0
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	e74c      	b.n	80006c2 <__aeabi_dmul+0x4a>
 8000828:	2303      	movs	r3, #3
 800082a:	4681      	mov	r9, r0
 800082c:	270c      	movs	r7, #12
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	e747      	b.n	80006c2 <__aeabi_dmul+0x4a>
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	2300      	movs	r3, #0
 8000836:	2500      	movs	r5, #0
 8000838:	0312      	lsls	r2, r2, #12
 800083a:	4699      	mov	r9, r3
 800083c:	4c05      	ldr	r4, [pc, #20]	; (8000854 <__aeabi_dmul+0x1dc>)
 800083e:	e782      	b.n	8000746 <__aeabi_dmul+0xce>
 8000840:	465c      	mov	r4, fp
 8000842:	464b      	mov	r3, r9
 8000844:	9802      	ldr	r0, [sp, #8]
 8000846:	e76f      	b.n	8000728 <__aeabi_dmul+0xb0>
 8000848:	465c      	mov	r4, fp
 800084a:	464b      	mov	r3, r9
 800084c:	9501      	str	r5, [sp, #4]
 800084e:	9802      	ldr	r0, [sp, #8]
 8000850:	e76a      	b.n	8000728 <__aeabi_dmul+0xb0>
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	000007ff 	.word	0x000007ff
 8000858:	fffffc01 	.word	0xfffffc01
 800085c:	08005af0 	.word	0x08005af0
 8000860:	800fffff 	.word	0x800fffff
 8000864:	fffffc0d 	.word	0xfffffc0d
 8000868:	464a      	mov	r2, r9
 800086a:	4649      	mov	r1, r9
 800086c:	0c17      	lsrs	r7, r2, #16
 800086e:	0c1a      	lsrs	r2, r3, #16
 8000870:	041b      	lsls	r3, r3, #16
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	0408      	lsls	r0, r1, #16
 8000876:	0019      	movs	r1, r3
 8000878:	0c00      	lsrs	r0, r0, #16
 800087a:	4341      	muls	r1, r0
 800087c:	0015      	movs	r5, r2
 800087e:	4688      	mov	r8, r1
 8000880:	0019      	movs	r1, r3
 8000882:	437d      	muls	r5, r7
 8000884:	4379      	muls	r1, r7
 8000886:	9503      	str	r5, [sp, #12]
 8000888:	4689      	mov	r9, r1
 800088a:	0029      	movs	r1, r5
 800088c:	0015      	movs	r5, r2
 800088e:	4345      	muls	r5, r0
 8000890:	444d      	add	r5, r9
 8000892:	9502      	str	r5, [sp, #8]
 8000894:	4645      	mov	r5, r8
 8000896:	0c2d      	lsrs	r5, r5, #16
 8000898:	46aa      	mov	sl, r5
 800089a:	9d02      	ldr	r5, [sp, #8]
 800089c:	4455      	add	r5, sl
 800089e:	45a9      	cmp	r9, r5
 80008a0:	d906      	bls.n	80008b0 <__aeabi_dmul+0x238>
 80008a2:	468a      	mov	sl, r1
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	0249      	lsls	r1, r1, #9
 80008a8:	4689      	mov	r9, r1
 80008aa:	44ca      	add	sl, r9
 80008ac:	4651      	mov	r1, sl
 80008ae:	9103      	str	r1, [sp, #12]
 80008b0:	0c29      	lsrs	r1, r5, #16
 80008b2:	9104      	str	r1, [sp, #16]
 80008b4:	4641      	mov	r1, r8
 80008b6:	0409      	lsls	r1, r1, #16
 80008b8:	042d      	lsls	r5, r5, #16
 80008ba:	0c09      	lsrs	r1, r1, #16
 80008bc:	4688      	mov	r8, r1
 80008be:	0029      	movs	r1, r5
 80008c0:	0c25      	lsrs	r5, r4, #16
 80008c2:	0424      	lsls	r4, r4, #16
 80008c4:	4441      	add	r1, r8
 80008c6:	0c24      	lsrs	r4, r4, #16
 80008c8:	9105      	str	r1, [sp, #20]
 80008ca:	0021      	movs	r1, r4
 80008cc:	4341      	muls	r1, r0
 80008ce:	4688      	mov	r8, r1
 80008d0:	0021      	movs	r1, r4
 80008d2:	4379      	muls	r1, r7
 80008d4:	468a      	mov	sl, r1
 80008d6:	4368      	muls	r0, r5
 80008d8:	4641      	mov	r1, r8
 80008da:	4450      	add	r0, sl
 80008dc:	4681      	mov	r9, r0
 80008de:	0c08      	lsrs	r0, r1, #16
 80008e0:	4448      	add	r0, r9
 80008e2:	436f      	muls	r7, r5
 80008e4:	4582      	cmp	sl, r0
 80008e6:	d903      	bls.n	80008f0 <__aeabi_dmul+0x278>
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	0249      	lsls	r1, r1, #9
 80008ec:	4689      	mov	r9, r1
 80008ee:	444f      	add	r7, r9
 80008f0:	0c01      	lsrs	r1, r0, #16
 80008f2:	4689      	mov	r9, r1
 80008f4:	0039      	movs	r1, r7
 80008f6:	4449      	add	r1, r9
 80008f8:	9102      	str	r1, [sp, #8]
 80008fa:	4641      	mov	r1, r8
 80008fc:	040f      	lsls	r7, r1, #16
 80008fe:	9904      	ldr	r1, [sp, #16]
 8000900:	0c3f      	lsrs	r7, r7, #16
 8000902:	4688      	mov	r8, r1
 8000904:	0400      	lsls	r0, r0, #16
 8000906:	19c0      	adds	r0, r0, r7
 8000908:	4480      	add	r8, r0
 800090a:	4641      	mov	r1, r8
 800090c:	9104      	str	r1, [sp, #16]
 800090e:	4659      	mov	r1, fp
 8000910:	0c0f      	lsrs	r7, r1, #16
 8000912:	0409      	lsls	r1, r1, #16
 8000914:	0c09      	lsrs	r1, r1, #16
 8000916:	4688      	mov	r8, r1
 8000918:	4359      	muls	r1, r3
 800091a:	468a      	mov	sl, r1
 800091c:	0039      	movs	r1, r7
 800091e:	4351      	muls	r1, r2
 8000920:	4689      	mov	r9, r1
 8000922:	4641      	mov	r1, r8
 8000924:	434a      	muls	r2, r1
 8000926:	4651      	mov	r1, sl
 8000928:	0c09      	lsrs	r1, r1, #16
 800092a:	468b      	mov	fp, r1
 800092c:	437b      	muls	r3, r7
 800092e:	18d2      	adds	r2, r2, r3
 8000930:	445a      	add	r2, fp
 8000932:	4293      	cmp	r3, r2
 8000934:	d903      	bls.n	800093e <__aeabi_dmul+0x2c6>
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	025b      	lsls	r3, r3, #9
 800093a:	469b      	mov	fp, r3
 800093c:	44d9      	add	r9, fp
 800093e:	4651      	mov	r1, sl
 8000940:	0409      	lsls	r1, r1, #16
 8000942:	0c09      	lsrs	r1, r1, #16
 8000944:	468a      	mov	sl, r1
 8000946:	4641      	mov	r1, r8
 8000948:	4361      	muls	r1, r4
 800094a:	437c      	muls	r4, r7
 800094c:	0c13      	lsrs	r3, r2, #16
 800094e:	0412      	lsls	r2, r2, #16
 8000950:	444b      	add	r3, r9
 8000952:	4452      	add	r2, sl
 8000954:	46a1      	mov	r9, r4
 8000956:	468a      	mov	sl, r1
 8000958:	003c      	movs	r4, r7
 800095a:	4641      	mov	r1, r8
 800095c:	436c      	muls	r4, r5
 800095e:	434d      	muls	r5, r1
 8000960:	4651      	mov	r1, sl
 8000962:	444d      	add	r5, r9
 8000964:	0c0f      	lsrs	r7, r1, #16
 8000966:	197d      	adds	r5, r7, r5
 8000968:	45a9      	cmp	r9, r5
 800096a:	d903      	bls.n	8000974 <__aeabi_dmul+0x2fc>
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	0249      	lsls	r1, r1, #9
 8000970:	4688      	mov	r8, r1
 8000972:	4444      	add	r4, r8
 8000974:	9f04      	ldr	r7, [sp, #16]
 8000976:	9903      	ldr	r1, [sp, #12]
 8000978:	46b8      	mov	r8, r7
 800097a:	4441      	add	r1, r8
 800097c:	468b      	mov	fp, r1
 800097e:	4583      	cmp	fp, r0
 8000980:	4180      	sbcs	r0, r0
 8000982:	4241      	negs	r1, r0
 8000984:	4688      	mov	r8, r1
 8000986:	4651      	mov	r1, sl
 8000988:	0408      	lsls	r0, r1, #16
 800098a:	042f      	lsls	r7, r5, #16
 800098c:	0c00      	lsrs	r0, r0, #16
 800098e:	183f      	adds	r7, r7, r0
 8000990:	4658      	mov	r0, fp
 8000992:	9902      	ldr	r1, [sp, #8]
 8000994:	1810      	adds	r0, r2, r0
 8000996:	4689      	mov	r9, r1
 8000998:	4290      	cmp	r0, r2
 800099a:	4192      	sbcs	r2, r2
 800099c:	444f      	add	r7, r9
 800099e:	46ba      	mov	sl, r7
 80009a0:	4252      	negs	r2, r2
 80009a2:	4699      	mov	r9, r3
 80009a4:	4693      	mov	fp, r2
 80009a6:	44c2      	add	sl, r8
 80009a8:	44d1      	add	r9, sl
 80009aa:	44cb      	add	fp, r9
 80009ac:	428f      	cmp	r7, r1
 80009ae:	41bf      	sbcs	r7, r7
 80009b0:	45c2      	cmp	sl, r8
 80009b2:	4189      	sbcs	r1, r1
 80009b4:	4599      	cmp	r9, r3
 80009b6:	419b      	sbcs	r3, r3
 80009b8:	4593      	cmp	fp, r2
 80009ba:	4192      	sbcs	r2, r2
 80009bc:	427f      	negs	r7, r7
 80009be:	4249      	negs	r1, r1
 80009c0:	0c2d      	lsrs	r5, r5, #16
 80009c2:	4252      	negs	r2, r2
 80009c4:	430f      	orrs	r7, r1
 80009c6:	425b      	negs	r3, r3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	197f      	adds	r7, r7, r5
 80009cc:	18ff      	adds	r7, r7, r3
 80009ce:	465b      	mov	r3, fp
 80009d0:	193c      	adds	r4, r7, r4
 80009d2:	0ddb      	lsrs	r3, r3, #23
 80009d4:	9a05      	ldr	r2, [sp, #20]
 80009d6:	0264      	lsls	r4, r4, #9
 80009d8:	431c      	orrs	r4, r3
 80009da:	0243      	lsls	r3, r0, #9
 80009dc:	4313      	orrs	r3, r2
 80009de:	1e5d      	subs	r5, r3, #1
 80009e0:	41ab      	sbcs	r3, r5
 80009e2:	465a      	mov	r2, fp
 80009e4:	0dc0      	lsrs	r0, r0, #23
 80009e6:	4303      	orrs	r3, r0
 80009e8:	0252      	lsls	r2, r2, #9
 80009ea:	4313      	orrs	r3, r2
 80009ec:	01e2      	lsls	r2, r4, #7
 80009ee:	d556      	bpl.n	8000a9e <__aeabi_dmul+0x426>
 80009f0:	2001      	movs	r0, #1
 80009f2:	085a      	lsrs	r2, r3, #1
 80009f4:	4003      	ands	r3, r0
 80009f6:	4313      	orrs	r3, r2
 80009f8:	07e2      	lsls	r2, r4, #31
 80009fa:	4313      	orrs	r3, r2
 80009fc:	0864      	lsrs	r4, r4, #1
 80009fe:	485a      	ldr	r0, [pc, #360]	; (8000b68 <__aeabi_dmul+0x4f0>)
 8000a00:	4460      	add	r0, ip
 8000a02:	2800      	cmp	r0, #0
 8000a04:	dd4d      	ble.n	8000aa2 <__aeabi_dmul+0x42a>
 8000a06:	075a      	lsls	r2, r3, #29
 8000a08:	d009      	beq.n	8000a1e <__aeabi_dmul+0x3a6>
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	2a04      	cmp	r2, #4
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dmul+0x3a6>
 8000a12:	1d1a      	adds	r2, r3, #4
 8000a14:	429a      	cmp	r2, r3
 8000a16:	419b      	sbcs	r3, r3
 8000a18:	425b      	negs	r3, r3
 8000a1a:	18e4      	adds	r4, r4, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	01e2      	lsls	r2, r4, #7
 8000a20:	d504      	bpl.n	8000a2c <__aeabi_dmul+0x3b4>
 8000a22:	2080      	movs	r0, #128	; 0x80
 8000a24:	4a51      	ldr	r2, [pc, #324]	; (8000b6c <__aeabi_dmul+0x4f4>)
 8000a26:	00c0      	lsls	r0, r0, #3
 8000a28:	4014      	ands	r4, r2
 8000a2a:	4460      	add	r0, ip
 8000a2c:	4a50      	ldr	r2, [pc, #320]	; (8000b70 <__aeabi_dmul+0x4f8>)
 8000a2e:	4290      	cmp	r0, r2
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dmul+0x3bc>
 8000a32:	e6e3      	b.n	80007fc <__aeabi_dmul+0x184>
 8000a34:	2501      	movs	r5, #1
 8000a36:	08db      	lsrs	r3, r3, #3
 8000a38:	0762      	lsls	r2, r4, #29
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	0264      	lsls	r4, r4, #9
 8000a3e:	9b01      	ldr	r3, [sp, #4]
 8000a40:	4691      	mov	r9, r2
 8000a42:	0b22      	lsrs	r2, r4, #12
 8000a44:	0544      	lsls	r4, r0, #21
 8000a46:	0d64      	lsrs	r4, r4, #21
 8000a48:	401d      	ands	r5, r3
 8000a4a:	e67c      	b.n	8000746 <__aeabi_dmul+0xce>
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	4659      	mov	r1, fp
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4211      	tst	r1, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dmul+0x3f0>
 8000a56:	4214      	tst	r4, r2
 8000a58:	d106      	bne.n	8000a68 <__aeabi_dmul+0x3f0>
 8000a5a:	4322      	orrs	r2, r4
 8000a5c:	0312      	lsls	r2, r2, #12
 8000a5e:	0b12      	lsrs	r2, r2, #12
 8000a60:	4645      	mov	r5, r8
 8000a62:	4699      	mov	r9, r3
 8000a64:	4c43      	ldr	r4, [pc, #268]	; (8000b74 <__aeabi_dmul+0x4fc>)
 8000a66:	e66e      	b.n	8000746 <__aeabi_dmul+0xce>
 8000a68:	465b      	mov	r3, fp
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	0312      	lsls	r2, r2, #12
 8000a6e:	0b12      	lsrs	r2, r2, #12
 8000a70:	4c40      	ldr	r4, [pc, #256]	; (8000b74 <__aeabi_dmul+0x4fc>)
 8000a72:	e668      	b.n	8000746 <__aeabi_dmul+0xce>
 8000a74:	0003      	movs	r3, r0
 8000a76:	4654      	mov	r4, sl
 8000a78:	3b28      	subs	r3, #40	; 0x28
 8000a7a:	409c      	lsls	r4, r3
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e6b9      	b.n	80007f4 <__aeabi_dmul+0x17c>
 8000a80:	f000 fc16 	bl	80012b0 <__clzsi2>
 8000a84:	3020      	adds	r0, #32
 8000a86:	e6a6      	b.n	80007d6 <__aeabi_dmul+0x15e>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	3b28      	subs	r3, #40	; 0x28
 8000a8c:	409f      	lsls	r7, r3
 8000a8e:	2300      	movs	r3, #0
 8000a90:	46bb      	mov	fp, r7
 8000a92:	4699      	mov	r9, r3
 8000a94:	e68a      	b.n	80007ac <__aeabi_dmul+0x134>
 8000a96:	f000 fc0b 	bl	80012b0 <__clzsi2>
 8000a9a:	3020      	adds	r0, #32
 8000a9c:	e674      	b.n	8000788 <__aeabi_dmul+0x110>
 8000a9e:	46b4      	mov	ip, r6
 8000aa0:	e7ad      	b.n	80009fe <__aeabi_dmul+0x386>
 8000aa2:	2501      	movs	r5, #1
 8000aa4:	1a2a      	subs	r2, r5, r0
 8000aa6:	2a38      	cmp	r2, #56	; 0x38
 8000aa8:	dd06      	ble.n	8000ab8 <__aeabi_dmul+0x440>
 8000aaa:	9b01      	ldr	r3, [sp, #4]
 8000aac:	2400      	movs	r4, #0
 8000aae:	401d      	ands	r5, r3
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4699      	mov	r9, r3
 8000ab6:	e646      	b.n	8000746 <__aeabi_dmul+0xce>
 8000ab8:	2a1f      	cmp	r2, #31
 8000aba:	dc21      	bgt.n	8000b00 <__aeabi_dmul+0x488>
 8000abc:	2520      	movs	r5, #32
 8000abe:	0020      	movs	r0, r4
 8000ac0:	1aad      	subs	r5, r5, r2
 8000ac2:	001e      	movs	r6, r3
 8000ac4:	40ab      	lsls	r3, r5
 8000ac6:	40a8      	lsls	r0, r5
 8000ac8:	40d6      	lsrs	r6, r2
 8000aca:	1e5d      	subs	r5, r3, #1
 8000acc:	41ab      	sbcs	r3, r5
 8000ace:	4330      	orrs	r0, r6
 8000ad0:	4318      	orrs	r0, r3
 8000ad2:	40d4      	lsrs	r4, r2
 8000ad4:	0743      	lsls	r3, r0, #29
 8000ad6:	d009      	beq.n	8000aec <__aeabi_dmul+0x474>
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4003      	ands	r3, r0
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d005      	beq.n	8000aec <__aeabi_dmul+0x474>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	1d18      	adds	r0, r3, #4
 8000ae4:	4298      	cmp	r0, r3
 8000ae6:	419b      	sbcs	r3, r3
 8000ae8:	425b      	negs	r3, r3
 8000aea:	18e4      	adds	r4, r4, r3
 8000aec:	0223      	lsls	r3, r4, #8
 8000aee:	d521      	bpl.n	8000b34 <__aeabi_dmul+0x4bc>
 8000af0:	2501      	movs	r5, #1
 8000af2:	9b01      	ldr	r3, [sp, #4]
 8000af4:	2401      	movs	r4, #1
 8000af6:	401d      	ands	r5, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	2200      	movs	r2, #0
 8000afc:	4699      	mov	r9, r3
 8000afe:	e622      	b.n	8000746 <__aeabi_dmul+0xce>
 8000b00:	251f      	movs	r5, #31
 8000b02:	0021      	movs	r1, r4
 8000b04:	426d      	negs	r5, r5
 8000b06:	1a28      	subs	r0, r5, r0
 8000b08:	40c1      	lsrs	r1, r0
 8000b0a:	0008      	movs	r0, r1
 8000b0c:	2a20      	cmp	r2, #32
 8000b0e:	d01d      	beq.n	8000b4c <__aeabi_dmul+0x4d4>
 8000b10:	355f      	adds	r5, #95	; 0x5f
 8000b12:	1aaa      	subs	r2, r5, r2
 8000b14:	4094      	lsls	r4, r2
 8000b16:	4323      	orrs	r3, r4
 8000b18:	1e5c      	subs	r4, r3, #1
 8000b1a:	41a3      	sbcs	r3, r4
 8000b1c:	2507      	movs	r5, #7
 8000b1e:	4303      	orrs	r3, r0
 8000b20:	401d      	ands	r5, r3
 8000b22:	2200      	movs	r2, #0
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d009      	beq.n	8000b3c <__aeabi_dmul+0x4c4>
 8000b28:	220f      	movs	r2, #15
 8000b2a:	2400      	movs	r4, #0
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2a04      	cmp	r2, #4
 8000b32:	d1d6      	bne.n	8000ae2 <__aeabi_dmul+0x46a>
 8000b34:	0003      	movs	r3, r0
 8000b36:	0765      	lsls	r5, r4, #29
 8000b38:	0264      	lsls	r4, r4, #9
 8000b3a:	0b22      	lsrs	r2, r4, #12
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	432b      	orrs	r3, r5
 8000b40:	2501      	movs	r5, #1
 8000b42:	4699      	mov	r9, r3
 8000b44:	9b01      	ldr	r3, [sp, #4]
 8000b46:	2400      	movs	r4, #0
 8000b48:	401d      	ands	r5, r3
 8000b4a:	e5fc      	b.n	8000746 <__aeabi_dmul+0xce>
 8000b4c:	2400      	movs	r4, #0
 8000b4e:	e7e2      	b.n	8000b16 <__aeabi_dmul+0x49e>
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	2501      	movs	r5, #1
 8000b54:	0312      	lsls	r2, r2, #12
 8000b56:	4322      	orrs	r2, r4
 8000b58:	9901      	ldr	r1, [sp, #4]
 8000b5a:	0312      	lsls	r2, r2, #12
 8000b5c:	0b12      	lsrs	r2, r2, #12
 8000b5e:	400d      	ands	r5, r1
 8000b60:	4699      	mov	r9, r3
 8000b62:	4c04      	ldr	r4, [pc, #16]	; (8000b74 <__aeabi_dmul+0x4fc>)
 8000b64:	e5ef      	b.n	8000746 <__aeabi_dmul+0xce>
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	000003ff 	.word	0x000003ff
 8000b6c:	feffffff 	.word	0xfeffffff
 8000b70:	000007fe 	.word	0x000007fe
 8000b74:	000007ff 	.word	0x000007ff

08000b78 <__aeabi_dsub>:
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	4646      	mov	r6, r8
 8000b7c:	46d6      	mov	lr, sl
 8000b7e:	464f      	mov	r7, r9
 8000b80:	030c      	lsls	r4, r1, #12
 8000b82:	b5c0      	push	{r6, r7, lr}
 8000b84:	0fcd      	lsrs	r5, r1, #31
 8000b86:	004e      	lsls	r6, r1, #1
 8000b88:	0a61      	lsrs	r1, r4, #9
 8000b8a:	0f44      	lsrs	r4, r0, #29
 8000b8c:	430c      	orrs	r4, r1
 8000b8e:	00c1      	lsls	r1, r0, #3
 8000b90:	0058      	lsls	r0, r3, #1
 8000b92:	0d40      	lsrs	r0, r0, #21
 8000b94:	4684      	mov	ip, r0
 8000b96:	468a      	mov	sl, r1
 8000b98:	000f      	movs	r7, r1
 8000b9a:	0319      	lsls	r1, r3, #12
 8000b9c:	0f50      	lsrs	r0, r2, #29
 8000b9e:	0a49      	lsrs	r1, r1, #9
 8000ba0:	4301      	orrs	r1, r0
 8000ba2:	48c6      	ldr	r0, [pc, #792]	; (8000ebc <__aeabi_dsub+0x344>)
 8000ba4:	0d76      	lsrs	r6, r6, #21
 8000ba6:	46a8      	mov	r8, r5
 8000ba8:	0fdb      	lsrs	r3, r3, #31
 8000baa:	00d2      	lsls	r2, r2, #3
 8000bac:	4584      	cmp	ip, r0
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dsub+0x3a>
 8000bb0:	e0d8      	b.n	8000d64 <__aeabi_dsub+0x1ec>
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4043      	eors	r3, r0
 8000bb6:	42ab      	cmp	r3, r5
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dsub+0x44>
 8000bba:	e0a6      	b.n	8000d0a <__aeabi_dsub+0x192>
 8000bbc:	4660      	mov	r0, ip
 8000bbe:	1a35      	subs	r5, r6, r0
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	dc00      	bgt.n	8000bc6 <__aeabi_dsub+0x4e>
 8000bc4:	e105      	b.n	8000dd2 <__aeabi_dsub+0x25a>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d110      	bne.n	8000bec <__aeabi_dsub+0x74>
 8000bca:	000b      	movs	r3, r1
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dsub+0x5a>
 8000bd0:	e0d7      	b.n	8000d82 <__aeabi_dsub+0x20a>
 8000bd2:	1e6b      	subs	r3, r5, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dsub+0x62>
 8000bd8:	e14b      	b.n	8000e72 <__aeabi_dsub+0x2fa>
 8000bda:	4653      	mov	r3, sl
 8000bdc:	1a9f      	subs	r7, r3, r2
 8000bde:	45ba      	cmp	sl, r7
 8000be0:	4180      	sbcs	r0, r0
 8000be2:	1a64      	subs	r4, r4, r1
 8000be4:	4240      	negs	r0, r0
 8000be6:	1a24      	subs	r4, r4, r0
 8000be8:	2601      	movs	r6, #1
 8000bea:	e01e      	b.n	8000c2a <__aeabi_dsub+0xb2>
 8000bec:	4bb3      	ldr	r3, [pc, #716]	; (8000ebc <__aeabi_dsub+0x344>)
 8000bee:	429e      	cmp	r6, r3
 8000bf0:	d048      	beq.n	8000c84 <__aeabi_dsub+0x10c>
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	041b      	lsls	r3, r3, #16
 8000bf6:	4319      	orrs	r1, r3
 8000bf8:	2d38      	cmp	r5, #56	; 0x38
 8000bfa:	dd00      	ble.n	8000bfe <__aeabi_dsub+0x86>
 8000bfc:	e119      	b.n	8000e32 <__aeabi_dsub+0x2ba>
 8000bfe:	2d1f      	cmp	r5, #31
 8000c00:	dd00      	ble.n	8000c04 <__aeabi_dsub+0x8c>
 8000c02:	e14c      	b.n	8000e9e <__aeabi_dsub+0x326>
 8000c04:	2320      	movs	r3, #32
 8000c06:	000f      	movs	r7, r1
 8000c08:	1b5b      	subs	r3, r3, r5
 8000c0a:	0010      	movs	r0, r2
 8000c0c:	409a      	lsls	r2, r3
 8000c0e:	409f      	lsls	r7, r3
 8000c10:	40e8      	lsrs	r0, r5
 8000c12:	1e53      	subs	r3, r2, #1
 8000c14:	419a      	sbcs	r2, r3
 8000c16:	40e9      	lsrs	r1, r5
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	4317      	orrs	r7, r2
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	1bdf      	subs	r7, r3, r7
 8000c20:	1a61      	subs	r1, r4, r1
 8000c22:	45ba      	cmp	sl, r7
 8000c24:	41a4      	sbcs	r4, r4
 8000c26:	4264      	negs	r4, r4
 8000c28:	1b0c      	subs	r4, r1, r4
 8000c2a:	0223      	lsls	r3, r4, #8
 8000c2c:	d400      	bmi.n	8000c30 <__aeabi_dsub+0xb8>
 8000c2e:	e0c5      	b.n	8000dbc <__aeabi_dsub+0x244>
 8000c30:	0264      	lsls	r4, r4, #9
 8000c32:	0a65      	lsrs	r5, r4, #9
 8000c34:	2d00      	cmp	r5, #0
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dsub+0xc2>
 8000c38:	e0f6      	b.n	8000e28 <__aeabi_dsub+0x2b0>
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	f000 fb38 	bl	80012b0 <__clzsi2>
 8000c40:	0003      	movs	r3, r0
 8000c42:	3b08      	subs	r3, #8
 8000c44:	2b1f      	cmp	r3, #31
 8000c46:	dd00      	ble.n	8000c4a <__aeabi_dsub+0xd2>
 8000c48:	e0e9      	b.n	8000e1e <__aeabi_dsub+0x2a6>
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	003c      	movs	r4, r7
 8000c4e:	1ad2      	subs	r2, r2, r3
 8000c50:	409d      	lsls	r5, r3
 8000c52:	40d4      	lsrs	r4, r2
 8000c54:	409f      	lsls	r7, r3
 8000c56:	4325      	orrs	r5, r4
 8000c58:	429e      	cmp	r6, r3
 8000c5a:	dd00      	ble.n	8000c5e <__aeabi_dsub+0xe6>
 8000c5c:	e0db      	b.n	8000e16 <__aeabi_dsub+0x29e>
 8000c5e:	1b9e      	subs	r6, r3, r6
 8000c60:	1c73      	adds	r3, r6, #1
 8000c62:	2b1f      	cmp	r3, #31
 8000c64:	dd00      	ble.n	8000c68 <__aeabi_dsub+0xf0>
 8000c66:	e10a      	b.n	8000e7e <__aeabi_dsub+0x306>
 8000c68:	2220      	movs	r2, #32
 8000c6a:	0038      	movs	r0, r7
 8000c6c:	1ad2      	subs	r2, r2, r3
 8000c6e:	0029      	movs	r1, r5
 8000c70:	4097      	lsls	r7, r2
 8000c72:	002c      	movs	r4, r5
 8000c74:	4091      	lsls	r1, r2
 8000c76:	40d8      	lsrs	r0, r3
 8000c78:	1e7a      	subs	r2, r7, #1
 8000c7a:	4197      	sbcs	r7, r2
 8000c7c:	40dc      	lsrs	r4, r3
 8000c7e:	2600      	movs	r6, #0
 8000c80:	4301      	orrs	r1, r0
 8000c82:	430f      	orrs	r7, r1
 8000c84:	077b      	lsls	r3, r7, #29
 8000c86:	d009      	beq.n	8000c9c <__aeabi_dsub+0x124>
 8000c88:	230f      	movs	r3, #15
 8000c8a:	403b      	ands	r3, r7
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d005      	beq.n	8000c9c <__aeabi_dsub+0x124>
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	42bb      	cmp	r3, r7
 8000c94:	41bf      	sbcs	r7, r7
 8000c96:	427f      	negs	r7, r7
 8000c98:	19e4      	adds	r4, r4, r7
 8000c9a:	001f      	movs	r7, r3
 8000c9c:	0223      	lsls	r3, r4, #8
 8000c9e:	d525      	bpl.n	8000cec <__aeabi_dsub+0x174>
 8000ca0:	4b86      	ldr	r3, [pc, #536]	; (8000ebc <__aeabi_dsub+0x344>)
 8000ca2:	3601      	adds	r6, #1
 8000ca4:	429e      	cmp	r6, r3
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dsub+0x132>
 8000ca8:	e0af      	b.n	8000e0a <__aeabi_dsub+0x292>
 8000caa:	4b85      	ldr	r3, [pc, #532]	; (8000ec0 <__aeabi_dsub+0x348>)
 8000cac:	2501      	movs	r5, #1
 8000cae:	401c      	ands	r4, r3
 8000cb0:	4643      	mov	r3, r8
 8000cb2:	0762      	lsls	r2, r4, #29
 8000cb4:	08ff      	lsrs	r7, r7, #3
 8000cb6:	0264      	lsls	r4, r4, #9
 8000cb8:	0576      	lsls	r6, r6, #21
 8000cba:	4317      	orrs	r7, r2
 8000cbc:	0b24      	lsrs	r4, r4, #12
 8000cbe:	0d76      	lsrs	r6, r6, #21
 8000cc0:	401d      	ands	r5, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	0324      	lsls	r4, r4, #12
 8000cc6:	0b23      	lsrs	r3, r4, #12
 8000cc8:	0d0c      	lsrs	r4, r1, #20
 8000cca:	4a7e      	ldr	r2, [pc, #504]	; (8000ec4 <__aeabi_dsub+0x34c>)
 8000ccc:	0524      	lsls	r4, r4, #20
 8000cce:	431c      	orrs	r4, r3
 8000cd0:	4014      	ands	r4, r2
 8000cd2:	0533      	lsls	r3, r6, #20
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	07ed      	lsls	r5, r5, #31
 8000cda:	085b      	lsrs	r3, r3, #1
 8000cdc:	432b      	orrs	r3, r5
 8000cde:	0038      	movs	r0, r7
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	bc1c      	pop	{r2, r3, r4}
 8000ce4:	4690      	mov	r8, r2
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	46a2      	mov	sl, r4
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cec:	2501      	movs	r5, #1
 8000cee:	4643      	mov	r3, r8
 8000cf0:	0762      	lsls	r2, r4, #29
 8000cf2:	08ff      	lsrs	r7, r7, #3
 8000cf4:	4317      	orrs	r7, r2
 8000cf6:	08e4      	lsrs	r4, r4, #3
 8000cf8:	401d      	ands	r5, r3
 8000cfa:	4b70      	ldr	r3, [pc, #448]	; (8000ebc <__aeabi_dsub+0x344>)
 8000cfc:	429e      	cmp	r6, r3
 8000cfe:	d036      	beq.n	8000d6e <__aeabi_dsub+0x1f6>
 8000d00:	0324      	lsls	r4, r4, #12
 8000d02:	0576      	lsls	r6, r6, #21
 8000d04:	0b24      	lsrs	r4, r4, #12
 8000d06:	0d76      	lsrs	r6, r6, #21
 8000d08:	e7db      	b.n	8000cc2 <__aeabi_dsub+0x14a>
 8000d0a:	4663      	mov	r3, ip
 8000d0c:	1af3      	subs	r3, r6, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	dc00      	bgt.n	8000d14 <__aeabi_dsub+0x19c>
 8000d12:	e094      	b.n	8000e3e <__aeabi_dsub+0x2c6>
 8000d14:	4660      	mov	r0, ip
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d035      	beq.n	8000d86 <__aeabi_dsub+0x20e>
 8000d1a:	4868      	ldr	r0, [pc, #416]	; (8000ebc <__aeabi_dsub+0x344>)
 8000d1c:	4286      	cmp	r6, r0
 8000d1e:	d0b1      	beq.n	8000c84 <__aeabi_dsub+0x10c>
 8000d20:	2780      	movs	r7, #128	; 0x80
 8000d22:	043f      	lsls	r7, r7, #16
 8000d24:	4339      	orrs	r1, r7
 8000d26:	2b38      	cmp	r3, #56	; 0x38
 8000d28:	dc00      	bgt.n	8000d2c <__aeabi_dsub+0x1b4>
 8000d2a:	e0fd      	b.n	8000f28 <__aeabi_dsub+0x3b0>
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	0017      	movs	r7, r2
 8000d30:	2100      	movs	r1, #0
 8000d32:	1e7a      	subs	r2, r7, #1
 8000d34:	4197      	sbcs	r7, r2
 8000d36:	4457      	add	r7, sl
 8000d38:	4557      	cmp	r7, sl
 8000d3a:	4180      	sbcs	r0, r0
 8000d3c:	1909      	adds	r1, r1, r4
 8000d3e:	4244      	negs	r4, r0
 8000d40:	190c      	adds	r4, r1, r4
 8000d42:	0223      	lsls	r3, r4, #8
 8000d44:	d53a      	bpl.n	8000dbc <__aeabi_dsub+0x244>
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <__aeabi_dsub+0x344>)
 8000d48:	3601      	adds	r6, #1
 8000d4a:	429e      	cmp	r6, r3
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dsub+0x1d8>
 8000d4e:	e14b      	b.n	8000fe8 <__aeabi_dsub+0x470>
 8000d50:	2201      	movs	r2, #1
 8000d52:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <__aeabi_dsub+0x348>)
 8000d54:	401c      	ands	r4, r3
 8000d56:	087b      	lsrs	r3, r7, #1
 8000d58:	4017      	ands	r7, r2
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	07e2      	lsls	r2, r4, #31
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	0864      	lsrs	r4, r4, #1
 8000d62:	e78f      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000d64:	0008      	movs	r0, r1
 8000d66:	4310      	orrs	r0, r2
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dsub+0x1f4>
 8000d6a:	e724      	b.n	8000bb6 <__aeabi_dsub+0x3e>
 8000d6c:	e721      	b.n	8000bb2 <__aeabi_dsub+0x3a>
 8000d6e:	0023      	movs	r3, r4
 8000d70:	433b      	orrs	r3, r7
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dsub+0x1fe>
 8000d74:	e1b9      	b.n	80010ea <__aeabi_dsub+0x572>
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	0312      	lsls	r2, r2, #12
 8000d7a:	4314      	orrs	r4, r2
 8000d7c:	0324      	lsls	r4, r4, #12
 8000d7e:	0b24      	lsrs	r4, r4, #12
 8000d80:	e79f      	b.n	8000cc2 <__aeabi_dsub+0x14a>
 8000d82:	002e      	movs	r6, r5
 8000d84:	e77e      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000d86:	0008      	movs	r0, r1
 8000d88:	4310      	orrs	r0, r2
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dsub+0x216>
 8000d8c:	e0ca      	b.n	8000f24 <__aeabi_dsub+0x3ac>
 8000d8e:	1e58      	subs	r0, r3, #1
 8000d90:	4684      	mov	ip, r0
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d000      	beq.n	8000d98 <__aeabi_dsub+0x220>
 8000d96:	e0e7      	b.n	8000f68 <__aeabi_dsub+0x3f0>
 8000d98:	4452      	add	r2, sl
 8000d9a:	4552      	cmp	r2, sl
 8000d9c:	4180      	sbcs	r0, r0
 8000d9e:	1864      	adds	r4, r4, r1
 8000da0:	4240      	negs	r0, r0
 8000da2:	1824      	adds	r4, r4, r0
 8000da4:	0017      	movs	r7, r2
 8000da6:	2601      	movs	r6, #1
 8000da8:	0223      	lsls	r3, r4, #8
 8000daa:	d507      	bpl.n	8000dbc <__aeabi_dsub+0x244>
 8000dac:	2602      	movs	r6, #2
 8000dae:	e7cf      	b.n	8000d50 <__aeabi_dsub+0x1d8>
 8000db0:	4664      	mov	r4, ip
 8000db2:	432c      	orrs	r4, r5
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dsub+0x240>
 8000db6:	e1b3      	b.n	8001120 <__aeabi_dsub+0x5a8>
 8000db8:	002c      	movs	r4, r5
 8000dba:	4667      	mov	r7, ip
 8000dbc:	077b      	lsls	r3, r7, #29
 8000dbe:	d000      	beq.n	8000dc2 <__aeabi_dsub+0x24a>
 8000dc0:	e762      	b.n	8000c88 <__aeabi_dsub+0x110>
 8000dc2:	0763      	lsls	r3, r4, #29
 8000dc4:	08ff      	lsrs	r7, r7, #3
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	2501      	movs	r5, #1
 8000dca:	4643      	mov	r3, r8
 8000dcc:	08e4      	lsrs	r4, r4, #3
 8000dce:	401d      	ands	r5, r3
 8000dd0:	e793      	b.n	8000cfa <__aeabi_dsub+0x182>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d178      	bne.n	8000ec8 <__aeabi_dsub+0x350>
 8000dd6:	1c75      	adds	r5, r6, #1
 8000dd8:	056d      	lsls	r5, r5, #21
 8000dda:	0d6d      	lsrs	r5, r5, #21
 8000ddc:	2d01      	cmp	r5, #1
 8000dde:	dc00      	bgt.n	8000de2 <__aeabi_dsub+0x26a>
 8000de0:	e0f2      	b.n	8000fc8 <__aeabi_dsub+0x450>
 8000de2:	4650      	mov	r0, sl
 8000de4:	1a80      	subs	r0, r0, r2
 8000de6:	4582      	cmp	sl, r0
 8000de8:	41bf      	sbcs	r7, r7
 8000dea:	1a65      	subs	r5, r4, r1
 8000dec:	427f      	negs	r7, r7
 8000dee:	1bed      	subs	r5, r5, r7
 8000df0:	4684      	mov	ip, r0
 8000df2:	0228      	lsls	r0, r5, #8
 8000df4:	d400      	bmi.n	8000df8 <__aeabi_dsub+0x280>
 8000df6:	e08c      	b.n	8000f12 <__aeabi_dsub+0x39a>
 8000df8:	4650      	mov	r0, sl
 8000dfa:	1a17      	subs	r7, r2, r0
 8000dfc:	42ba      	cmp	r2, r7
 8000dfe:	4192      	sbcs	r2, r2
 8000e00:	1b0c      	subs	r4, r1, r4
 8000e02:	4255      	negs	r5, r2
 8000e04:	1b65      	subs	r5, r4, r5
 8000e06:	4698      	mov	r8, r3
 8000e08:	e714      	b.n	8000c34 <__aeabi_dsub+0xbc>
 8000e0a:	2501      	movs	r5, #1
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	2400      	movs	r4, #0
 8000e10:	401d      	ands	r5, r3
 8000e12:	2700      	movs	r7, #0
 8000e14:	e755      	b.n	8000cc2 <__aeabi_dsub+0x14a>
 8000e16:	4c2a      	ldr	r4, [pc, #168]	; (8000ec0 <__aeabi_dsub+0x348>)
 8000e18:	1af6      	subs	r6, r6, r3
 8000e1a:	402c      	ands	r4, r5
 8000e1c:	e732      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000e1e:	003d      	movs	r5, r7
 8000e20:	3828      	subs	r0, #40	; 0x28
 8000e22:	4085      	lsls	r5, r0
 8000e24:	2700      	movs	r7, #0
 8000e26:	e717      	b.n	8000c58 <__aeabi_dsub+0xe0>
 8000e28:	0038      	movs	r0, r7
 8000e2a:	f000 fa41 	bl	80012b0 <__clzsi2>
 8000e2e:	3020      	adds	r0, #32
 8000e30:	e706      	b.n	8000c40 <__aeabi_dsub+0xc8>
 8000e32:	430a      	orrs	r2, r1
 8000e34:	0017      	movs	r7, r2
 8000e36:	2100      	movs	r1, #0
 8000e38:	1e7a      	subs	r2, r7, #1
 8000e3a:	4197      	sbcs	r7, r2
 8000e3c:	e6ee      	b.n	8000c1c <__aeabi_dsub+0xa4>
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d000      	beq.n	8000e44 <__aeabi_dsub+0x2cc>
 8000e42:	e0e5      	b.n	8001010 <__aeabi_dsub+0x498>
 8000e44:	1c73      	adds	r3, r6, #1
 8000e46:	469c      	mov	ip, r3
 8000e48:	055b      	lsls	r3, r3, #21
 8000e4a:	0d5b      	lsrs	r3, r3, #21
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_dsub+0x2da>
 8000e50:	e09f      	b.n	8000f92 <__aeabi_dsub+0x41a>
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <__aeabi_dsub+0x344>)
 8000e54:	459c      	cmp	ip, r3
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dsub+0x2e2>
 8000e58:	e0c5      	b.n	8000fe6 <__aeabi_dsub+0x46e>
 8000e5a:	4452      	add	r2, sl
 8000e5c:	4552      	cmp	r2, sl
 8000e5e:	4180      	sbcs	r0, r0
 8000e60:	1864      	adds	r4, r4, r1
 8000e62:	4240      	negs	r0, r0
 8000e64:	1824      	adds	r4, r4, r0
 8000e66:	07e7      	lsls	r7, r4, #31
 8000e68:	0852      	lsrs	r2, r2, #1
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	0864      	lsrs	r4, r4, #1
 8000e6e:	4666      	mov	r6, ip
 8000e70:	e708      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <__aeabi_dsub+0x344>)
 8000e74:	4285      	cmp	r5, r0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dsub+0x302>
 8000e78:	e085      	b.n	8000f86 <__aeabi_dsub+0x40e>
 8000e7a:	001d      	movs	r5, r3
 8000e7c:	e6bc      	b.n	8000bf8 <__aeabi_dsub+0x80>
 8000e7e:	0029      	movs	r1, r5
 8000e80:	3e1f      	subs	r6, #31
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	2b20      	cmp	r3, #32
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dsub+0x312>
 8000e88:	e07f      	b.n	8000f8a <__aeabi_dsub+0x412>
 8000e8a:	2240      	movs	r2, #64	; 0x40
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	409d      	lsls	r5, r3
 8000e90:	432f      	orrs	r7, r5
 8000e92:	1e7d      	subs	r5, r7, #1
 8000e94:	41af      	sbcs	r7, r5
 8000e96:	2400      	movs	r4, #0
 8000e98:	430f      	orrs	r7, r1
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	e78e      	b.n	8000dbc <__aeabi_dsub+0x244>
 8000e9e:	002b      	movs	r3, r5
 8000ea0:	000f      	movs	r7, r1
 8000ea2:	3b20      	subs	r3, #32
 8000ea4:	40df      	lsrs	r7, r3
 8000ea6:	2d20      	cmp	r5, #32
 8000ea8:	d071      	beq.n	8000f8e <__aeabi_dsub+0x416>
 8000eaa:	2340      	movs	r3, #64	; 0x40
 8000eac:	1b5d      	subs	r5, r3, r5
 8000eae:	40a9      	lsls	r1, r5
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	1e51      	subs	r1, r2, #1
 8000eb4:	418a      	sbcs	r2, r1
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4317      	orrs	r7, r2
 8000eba:	e6af      	b.n	8000c1c <__aeabi_dsub+0xa4>
 8000ebc:	000007ff 	.word	0x000007ff
 8000ec0:	ff7fffff 	.word	0xff7fffff
 8000ec4:	800fffff 	.word	0x800fffff
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d03e      	beq.n	8000f4a <__aeabi_dsub+0x3d2>
 8000ecc:	4eb3      	ldr	r6, [pc, #716]	; (800119c <__aeabi_dsub+0x624>)
 8000ece:	45b4      	cmp	ip, r6
 8000ed0:	d045      	beq.n	8000f5e <__aeabi_dsub+0x3e6>
 8000ed2:	2680      	movs	r6, #128	; 0x80
 8000ed4:	0436      	lsls	r6, r6, #16
 8000ed6:	426d      	negs	r5, r5
 8000ed8:	4334      	orrs	r4, r6
 8000eda:	2d38      	cmp	r5, #56	; 0x38
 8000edc:	dd00      	ble.n	8000ee0 <__aeabi_dsub+0x368>
 8000ede:	e0a8      	b.n	8001032 <__aeabi_dsub+0x4ba>
 8000ee0:	2d1f      	cmp	r5, #31
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_dsub+0x36e>
 8000ee4:	e11f      	b.n	8001126 <__aeabi_dsub+0x5ae>
 8000ee6:	2620      	movs	r6, #32
 8000ee8:	0027      	movs	r7, r4
 8000eea:	4650      	mov	r0, sl
 8000eec:	1b76      	subs	r6, r6, r5
 8000eee:	40b7      	lsls	r7, r6
 8000ef0:	40e8      	lsrs	r0, r5
 8000ef2:	4307      	orrs	r7, r0
 8000ef4:	4650      	mov	r0, sl
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	1e46      	subs	r6, r0, #1
 8000efa:	41b0      	sbcs	r0, r6
 8000efc:	40ec      	lsrs	r4, r5
 8000efe:	4338      	orrs	r0, r7
 8000f00:	1a17      	subs	r7, r2, r0
 8000f02:	42ba      	cmp	r2, r7
 8000f04:	4192      	sbcs	r2, r2
 8000f06:	1b0c      	subs	r4, r1, r4
 8000f08:	4252      	negs	r2, r2
 8000f0a:	1aa4      	subs	r4, r4, r2
 8000f0c:	4666      	mov	r6, ip
 8000f0e:	4698      	mov	r8, r3
 8000f10:	e68b      	b.n	8000c2a <__aeabi_dsub+0xb2>
 8000f12:	4664      	mov	r4, ip
 8000f14:	4667      	mov	r7, ip
 8000f16:	432c      	orrs	r4, r5
 8000f18:	d000      	beq.n	8000f1c <__aeabi_dsub+0x3a4>
 8000f1a:	e68b      	b.n	8000c34 <__aeabi_dsub+0xbc>
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	2600      	movs	r6, #0
 8000f20:	2700      	movs	r7, #0
 8000f22:	e6ea      	b.n	8000cfa <__aeabi_dsub+0x182>
 8000f24:	001e      	movs	r6, r3
 8000f26:	e6ad      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	dc60      	bgt.n	8000fee <__aeabi_dsub+0x476>
 8000f2c:	2720      	movs	r7, #32
 8000f2e:	1af8      	subs	r0, r7, r3
 8000f30:	000f      	movs	r7, r1
 8000f32:	4684      	mov	ip, r0
 8000f34:	4087      	lsls	r7, r0
 8000f36:	0010      	movs	r0, r2
 8000f38:	40d8      	lsrs	r0, r3
 8000f3a:	4307      	orrs	r7, r0
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	4082      	lsls	r2, r0
 8000f40:	1e50      	subs	r0, r2, #1
 8000f42:	4182      	sbcs	r2, r0
 8000f44:	40d9      	lsrs	r1, r3
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e6f5      	b.n	8000d36 <__aeabi_dsub+0x1be>
 8000f4a:	0026      	movs	r6, r4
 8000f4c:	4650      	mov	r0, sl
 8000f4e:	4306      	orrs	r6, r0
 8000f50:	d005      	beq.n	8000f5e <__aeabi_dsub+0x3e6>
 8000f52:	43ed      	mvns	r5, r5
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d0d3      	beq.n	8000f00 <__aeabi_dsub+0x388>
 8000f58:	4e90      	ldr	r6, [pc, #576]	; (800119c <__aeabi_dsub+0x624>)
 8000f5a:	45b4      	cmp	ip, r6
 8000f5c:	d1bd      	bne.n	8000eda <__aeabi_dsub+0x362>
 8000f5e:	000c      	movs	r4, r1
 8000f60:	0017      	movs	r7, r2
 8000f62:	4666      	mov	r6, ip
 8000f64:	4698      	mov	r8, r3
 8000f66:	e68d      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000f68:	488c      	ldr	r0, [pc, #560]	; (800119c <__aeabi_dsub+0x624>)
 8000f6a:	4283      	cmp	r3, r0
 8000f6c:	d00b      	beq.n	8000f86 <__aeabi_dsub+0x40e>
 8000f6e:	4663      	mov	r3, ip
 8000f70:	e6d9      	b.n	8000d26 <__aeabi_dsub+0x1ae>
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	d000      	beq.n	8000f78 <__aeabi_dsub+0x400>
 8000f76:	e096      	b.n	80010a6 <__aeabi_dsub+0x52e>
 8000f78:	0008      	movs	r0, r1
 8000f7a:	4310      	orrs	r0, r2
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dsub+0x408>
 8000f7e:	e0e2      	b.n	8001146 <__aeabi_dsub+0x5ce>
 8000f80:	000c      	movs	r4, r1
 8000f82:	0017      	movs	r7, r2
 8000f84:	4698      	mov	r8, r3
 8000f86:	4e85      	ldr	r6, [pc, #532]	; (800119c <__aeabi_dsub+0x624>)
 8000f88:	e67c      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000f8a:	2500      	movs	r5, #0
 8000f8c:	e780      	b.n	8000e90 <__aeabi_dsub+0x318>
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e78e      	b.n	8000eb0 <__aeabi_dsub+0x338>
 8000f92:	0023      	movs	r3, r4
 8000f94:	4650      	mov	r0, sl
 8000f96:	4303      	orrs	r3, r0
 8000f98:	2e00      	cmp	r6, #0
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_dsub+0x426>
 8000f9c:	e0a8      	b.n	80010f0 <__aeabi_dsub+0x578>
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dsub+0x42c>
 8000fa2:	e0de      	b.n	8001162 <__aeabi_dsub+0x5ea>
 8000fa4:	000b      	movs	r3, r1
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dsub+0x434>
 8000faa:	e66b      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000fac:	4452      	add	r2, sl
 8000fae:	4552      	cmp	r2, sl
 8000fb0:	4180      	sbcs	r0, r0
 8000fb2:	1864      	adds	r4, r4, r1
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	1824      	adds	r4, r4, r0
 8000fb8:	0017      	movs	r7, r2
 8000fba:	0223      	lsls	r3, r4, #8
 8000fbc:	d400      	bmi.n	8000fc0 <__aeabi_dsub+0x448>
 8000fbe:	e6fd      	b.n	8000dbc <__aeabi_dsub+0x244>
 8000fc0:	4b77      	ldr	r3, [pc, #476]	; (80011a0 <__aeabi_dsub+0x628>)
 8000fc2:	4666      	mov	r6, ip
 8000fc4:	401c      	ands	r4, r3
 8000fc6:	e65d      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000fc8:	0025      	movs	r5, r4
 8000fca:	4650      	mov	r0, sl
 8000fcc:	4305      	orrs	r5, r0
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	d1cf      	bne.n	8000f72 <__aeabi_dsub+0x3fa>
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	d14f      	bne.n	8001076 <__aeabi_dsub+0x4fe>
 8000fd6:	000c      	movs	r4, r1
 8000fd8:	4314      	orrs	r4, r2
 8000fda:	d100      	bne.n	8000fde <__aeabi_dsub+0x466>
 8000fdc:	e0a0      	b.n	8001120 <__aeabi_dsub+0x5a8>
 8000fde:	000c      	movs	r4, r1
 8000fe0:	0017      	movs	r7, r2
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	e64e      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8000fe6:	4666      	mov	r6, ip
 8000fe8:	2400      	movs	r4, #0
 8000fea:	2700      	movs	r7, #0
 8000fec:	e685      	b.n	8000cfa <__aeabi_dsub+0x182>
 8000fee:	001f      	movs	r7, r3
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	3f20      	subs	r7, #32
 8000ff4:	40f8      	lsrs	r0, r7
 8000ff6:	0007      	movs	r7, r0
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dsub+0x486>
 8000ffc:	e08e      	b.n	800111c <__aeabi_dsub+0x5a4>
 8000ffe:	2040      	movs	r0, #64	; 0x40
 8001000:	1ac3      	subs	r3, r0, r3
 8001002:	4099      	lsls	r1, r3
 8001004:	430a      	orrs	r2, r1
 8001006:	1e51      	subs	r1, r2, #1
 8001008:	418a      	sbcs	r2, r1
 800100a:	2100      	movs	r1, #0
 800100c:	4317      	orrs	r7, r2
 800100e:	e692      	b.n	8000d36 <__aeabi_dsub+0x1be>
 8001010:	2e00      	cmp	r6, #0
 8001012:	d114      	bne.n	800103e <__aeabi_dsub+0x4c6>
 8001014:	0026      	movs	r6, r4
 8001016:	4650      	mov	r0, sl
 8001018:	4306      	orrs	r6, r0
 800101a:	d062      	beq.n	80010e2 <__aeabi_dsub+0x56a>
 800101c:	43db      	mvns	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d15c      	bne.n	80010dc <__aeabi_dsub+0x564>
 8001022:	1887      	adds	r7, r0, r2
 8001024:	4297      	cmp	r7, r2
 8001026:	4192      	sbcs	r2, r2
 8001028:	1864      	adds	r4, r4, r1
 800102a:	4252      	negs	r2, r2
 800102c:	18a4      	adds	r4, r4, r2
 800102e:	4666      	mov	r6, ip
 8001030:	e687      	b.n	8000d42 <__aeabi_dsub+0x1ca>
 8001032:	4650      	mov	r0, sl
 8001034:	4320      	orrs	r0, r4
 8001036:	1e44      	subs	r4, r0, #1
 8001038:	41a0      	sbcs	r0, r4
 800103a:	2400      	movs	r4, #0
 800103c:	e760      	b.n	8000f00 <__aeabi_dsub+0x388>
 800103e:	4e57      	ldr	r6, [pc, #348]	; (800119c <__aeabi_dsub+0x624>)
 8001040:	45b4      	cmp	ip, r6
 8001042:	d04e      	beq.n	80010e2 <__aeabi_dsub+0x56a>
 8001044:	2680      	movs	r6, #128	; 0x80
 8001046:	0436      	lsls	r6, r6, #16
 8001048:	425b      	negs	r3, r3
 800104a:	4334      	orrs	r4, r6
 800104c:	2b38      	cmp	r3, #56	; 0x38
 800104e:	dd00      	ble.n	8001052 <__aeabi_dsub+0x4da>
 8001050:	e07f      	b.n	8001152 <__aeabi_dsub+0x5da>
 8001052:	2b1f      	cmp	r3, #31
 8001054:	dd00      	ble.n	8001058 <__aeabi_dsub+0x4e0>
 8001056:	e08b      	b.n	8001170 <__aeabi_dsub+0x5f8>
 8001058:	2620      	movs	r6, #32
 800105a:	0027      	movs	r7, r4
 800105c:	4650      	mov	r0, sl
 800105e:	1af6      	subs	r6, r6, r3
 8001060:	40b7      	lsls	r7, r6
 8001062:	40d8      	lsrs	r0, r3
 8001064:	4307      	orrs	r7, r0
 8001066:	4650      	mov	r0, sl
 8001068:	40b0      	lsls	r0, r6
 800106a:	1e46      	subs	r6, r0, #1
 800106c:	41b0      	sbcs	r0, r6
 800106e:	4307      	orrs	r7, r0
 8001070:	40dc      	lsrs	r4, r3
 8001072:	18bf      	adds	r7, r7, r2
 8001074:	e7d6      	b.n	8001024 <__aeabi_dsub+0x4ac>
 8001076:	000d      	movs	r5, r1
 8001078:	4315      	orrs	r5, r2
 800107a:	d100      	bne.n	800107e <__aeabi_dsub+0x506>
 800107c:	e602      	b.n	8000c84 <__aeabi_dsub+0x10c>
 800107e:	4650      	mov	r0, sl
 8001080:	1a80      	subs	r0, r0, r2
 8001082:	4582      	cmp	sl, r0
 8001084:	41bf      	sbcs	r7, r7
 8001086:	1a65      	subs	r5, r4, r1
 8001088:	427f      	negs	r7, r7
 800108a:	1bed      	subs	r5, r5, r7
 800108c:	4684      	mov	ip, r0
 800108e:	0228      	lsls	r0, r5, #8
 8001090:	d400      	bmi.n	8001094 <__aeabi_dsub+0x51c>
 8001092:	e68d      	b.n	8000db0 <__aeabi_dsub+0x238>
 8001094:	4650      	mov	r0, sl
 8001096:	1a17      	subs	r7, r2, r0
 8001098:	42ba      	cmp	r2, r7
 800109a:	4192      	sbcs	r2, r2
 800109c:	1b0c      	subs	r4, r1, r4
 800109e:	4252      	negs	r2, r2
 80010a0:	1aa4      	subs	r4, r4, r2
 80010a2:	4698      	mov	r8, r3
 80010a4:	e5ee      	b.n	8000c84 <__aeabi_dsub+0x10c>
 80010a6:	000d      	movs	r5, r1
 80010a8:	4315      	orrs	r5, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dsub+0x536>
 80010ac:	e76b      	b.n	8000f86 <__aeabi_dsub+0x40e>
 80010ae:	4650      	mov	r0, sl
 80010b0:	0767      	lsls	r7, r4, #29
 80010b2:	08c0      	lsrs	r0, r0, #3
 80010b4:	4307      	orrs	r7, r0
 80010b6:	2080      	movs	r0, #128	; 0x80
 80010b8:	08e4      	lsrs	r4, r4, #3
 80010ba:	0300      	lsls	r0, r0, #12
 80010bc:	4204      	tst	r4, r0
 80010be:	d007      	beq.n	80010d0 <__aeabi_dsub+0x558>
 80010c0:	08cd      	lsrs	r5, r1, #3
 80010c2:	4205      	tst	r5, r0
 80010c4:	d104      	bne.n	80010d0 <__aeabi_dsub+0x558>
 80010c6:	002c      	movs	r4, r5
 80010c8:	4698      	mov	r8, r3
 80010ca:	08d7      	lsrs	r7, r2, #3
 80010cc:	0749      	lsls	r1, r1, #29
 80010ce:	430f      	orrs	r7, r1
 80010d0:	0f7b      	lsrs	r3, r7, #29
 80010d2:	00e4      	lsls	r4, r4, #3
 80010d4:	431c      	orrs	r4, r3
 80010d6:	00ff      	lsls	r7, r7, #3
 80010d8:	4e30      	ldr	r6, [pc, #192]	; (800119c <__aeabi_dsub+0x624>)
 80010da:	e5d3      	b.n	8000c84 <__aeabi_dsub+0x10c>
 80010dc:	4e2f      	ldr	r6, [pc, #188]	; (800119c <__aeabi_dsub+0x624>)
 80010de:	45b4      	cmp	ip, r6
 80010e0:	d1b4      	bne.n	800104c <__aeabi_dsub+0x4d4>
 80010e2:	000c      	movs	r4, r1
 80010e4:	0017      	movs	r7, r2
 80010e6:	4666      	mov	r6, ip
 80010e8:	e5cc      	b.n	8000c84 <__aeabi_dsub+0x10c>
 80010ea:	2700      	movs	r7, #0
 80010ec:	2400      	movs	r4, #0
 80010ee:	e5e8      	b.n	8000cc2 <__aeabi_dsub+0x14a>
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d039      	beq.n	8001168 <__aeabi_dsub+0x5f0>
 80010f4:	000b      	movs	r3, r1
 80010f6:	4313      	orrs	r3, r2
 80010f8:	d100      	bne.n	80010fc <__aeabi_dsub+0x584>
 80010fa:	e744      	b.n	8000f86 <__aeabi_dsub+0x40e>
 80010fc:	08c0      	lsrs	r0, r0, #3
 80010fe:	0767      	lsls	r7, r4, #29
 8001100:	4307      	orrs	r7, r0
 8001102:	2080      	movs	r0, #128	; 0x80
 8001104:	08e4      	lsrs	r4, r4, #3
 8001106:	0300      	lsls	r0, r0, #12
 8001108:	4204      	tst	r4, r0
 800110a:	d0e1      	beq.n	80010d0 <__aeabi_dsub+0x558>
 800110c:	08cb      	lsrs	r3, r1, #3
 800110e:	4203      	tst	r3, r0
 8001110:	d1de      	bne.n	80010d0 <__aeabi_dsub+0x558>
 8001112:	08d7      	lsrs	r7, r2, #3
 8001114:	0749      	lsls	r1, r1, #29
 8001116:	430f      	orrs	r7, r1
 8001118:	001c      	movs	r4, r3
 800111a:	e7d9      	b.n	80010d0 <__aeabi_dsub+0x558>
 800111c:	2100      	movs	r1, #0
 800111e:	e771      	b.n	8001004 <__aeabi_dsub+0x48c>
 8001120:	2500      	movs	r5, #0
 8001122:	2700      	movs	r7, #0
 8001124:	e5e9      	b.n	8000cfa <__aeabi_dsub+0x182>
 8001126:	002e      	movs	r6, r5
 8001128:	0027      	movs	r7, r4
 800112a:	3e20      	subs	r6, #32
 800112c:	40f7      	lsrs	r7, r6
 800112e:	2d20      	cmp	r5, #32
 8001130:	d02f      	beq.n	8001192 <__aeabi_dsub+0x61a>
 8001132:	2640      	movs	r6, #64	; 0x40
 8001134:	1b75      	subs	r5, r6, r5
 8001136:	40ac      	lsls	r4, r5
 8001138:	4650      	mov	r0, sl
 800113a:	4320      	orrs	r0, r4
 800113c:	1e44      	subs	r4, r0, #1
 800113e:	41a0      	sbcs	r0, r4
 8001140:	2400      	movs	r4, #0
 8001142:	4338      	orrs	r0, r7
 8001144:	e6dc      	b.n	8000f00 <__aeabi_dsub+0x388>
 8001146:	2480      	movs	r4, #128	; 0x80
 8001148:	2500      	movs	r5, #0
 800114a:	0324      	lsls	r4, r4, #12
 800114c:	4e13      	ldr	r6, [pc, #76]	; (800119c <__aeabi_dsub+0x624>)
 800114e:	2700      	movs	r7, #0
 8001150:	e5d3      	b.n	8000cfa <__aeabi_dsub+0x182>
 8001152:	4650      	mov	r0, sl
 8001154:	4320      	orrs	r0, r4
 8001156:	0007      	movs	r7, r0
 8001158:	1e78      	subs	r0, r7, #1
 800115a:	4187      	sbcs	r7, r0
 800115c:	2400      	movs	r4, #0
 800115e:	18bf      	adds	r7, r7, r2
 8001160:	e760      	b.n	8001024 <__aeabi_dsub+0x4ac>
 8001162:	000c      	movs	r4, r1
 8001164:	0017      	movs	r7, r2
 8001166:	e58d      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8001168:	000c      	movs	r4, r1
 800116a:	0017      	movs	r7, r2
 800116c:	4e0b      	ldr	r6, [pc, #44]	; (800119c <__aeabi_dsub+0x624>)
 800116e:	e589      	b.n	8000c84 <__aeabi_dsub+0x10c>
 8001170:	001e      	movs	r6, r3
 8001172:	0027      	movs	r7, r4
 8001174:	3e20      	subs	r6, #32
 8001176:	40f7      	lsrs	r7, r6
 8001178:	2b20      	cmp	r3, #32
 800117a:	d00c      	beq.n	8001196 <__aeabi_dsub+0x61e>
 800117c:	2640      	movs	r6, #64	; 0x40
 800117e:	1af3      	subs	r3, r6, r3
 8001180:	409c      	lsls	r4, r3
 8001182:	4650      	mov	r0, sl
 8001184:	4320      	orrs	r0, r4
 8001186:	1e44      	subs	r4, r0, #1
 8001188:	41a0      	sbcs	r0, r4
 800118a:	4307      	orrs	r7, r0
 800118c:	2400      	movs	r4, #0
 800118e:	18bf      	adds	r7, r7, r2
 8001190:	e748      	b.n	8001024 <__aeabi_dsub+0x4ac>
 8001192:	2400      	movs	r4, #0
 8001194:	e7d0      	b.n	8001138 <__aeabi_dsub+0x5c0>
 8001196:	2400      	movs	r4, #0
 8001198:	e7f3      	b.n	8001182 <__aeabi_dsub+0x60a>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	000007ff 	.word	0x000007ff
 80011a0:	ff7fffff 	.word	0xff7fffff

080011a4 <__aeabi_d2iz>:
 80011a4:	b530      	push	{r4, r5, lr}
 80011a6:	4d13      	ldr	r5, [pc, #76]	; (80011f4 <__aeabi_d2iz+0x50>)
 80011a8:	030a      	lsls	r2, r1, #12
 80011aa:	004b      	lsls	r3, r1, #1
 80011ac:	0b12      	lsrs	r2, r2, #12
 80011ae:	0d5b      	lsrs	r3, r3, #21
 80011b0:	0fc9      	lsrs	r1, r1, #31
 80011b2:	2400      	movs	r4, #0
 80011b4:	42ab      	cmp	r3, r5
 80011b6:	dd10      	ble.n	80011da <__aeabi_d2iz+0x36>
 80011b8:	4c0f      	ldr	r4, [pc, #60]	; (80011f8 <__aeabi_d2iz+0x54>)
 80011ba:	42a3      	cmp	r3, r4
 80011bc:	dc0f      	bgt.n	80011de <__aeabi_d2iz+0x3a>
 80011be:	2480      	movs	r4, #128	; 0x80
 80011c0:	4d0e      	ldr	r5, [pc, #56]	; (80011fc <__aeabi_d2iz+0x58>)
 80011c2:	0364      	lsls	r4, r4, #13
 80011c4:	4322      	orrs	r2, r4
 80011c6:	1aed      	subs	r5, r5, r3
 80011c8:	2d1f      	cmp	r5, #31
 80011ca:	dd0b      	ble.n	80011e4 <__aeabi_d2iz+0x40>
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <__aeabi_d2iz+0x5c>)
 80011ce:	1ac3      	subs	r3, r0, r3
 80011d0:	40da      	lsrs	r2, r3
 80011d2:	4254      	negs	r4, r2
 80011d4:	2900      	cmp	r1, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_d2iz+0x36>
 80011d8:	0014      	movs	r4, r2
 80011da:	0020      	movs	r0, r4
 80011dc:	bd30      	pop	{r4, r5, pc}
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <__aeabi_d2iz+0x60>)
 80011e0:	18cc      	adds	r4, r1, r3
 80011e2:	e7fa      	b.n	80011da <__aeabi_d2iz+0x36>
 80011e4:	4c08      	ldr	r4, [pc, #32]	; (8001208 <__aeabi_d2iz+0x64>)
 80011e6:	40e8      	lsrs	r0, r5
 80011e8:	46a4      	mov	ip, r4
 80011ea:	4463      	add	r3, ip
 80011ec:	409a      	lsls	r2, r3
 80011ee:	4302      	orrs	r2, r0
 80011f0:	e7ef      	b.n	80011d2 <__aeabi_d2iz+0x2e>
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	000003fe 	.word	0x000003fe
 80011f8:	0000041d 	.word	0x0000041d
 80011fc:	00000433 	.word	0x00000433
 8001200:	00000413 	.word	0x00000413
 8001204:	7fffffff 	.word	0x7fffffff
 8001208:	fffffbed 	.word	0xfffffbed

0800120c <__aeabi_f2d>:
 800120c:	0041      	lsls	r1, r0, #1
 800120e:	0e09      	lsrs	r1, r1, #24
 8001210:	1c4b      	adds	r3, r1, #1
 8001212:	b570      	push	{r4, r5, r6, lr}
 8001214:	b2db      	uxtb	r3, r3
 8001216:	0246      	lsls	r6, r0, #9
 8001218:	0a75      	lsrs	r5, r6, #9
 800121a:	0fc4      	lsrs	r4, r0, #31
 800121c:	2b01      	cmp	r3, #1
 800121e:	dd14      	ble.n	800124a <__aeabi_f2d+0x3e>
 8001220:	23e0      	movs	r3, #224	; 0xe0
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	076d      	lsls	r5, r5, #29
 8001226:	0b36      	lsrs	r6, r6, #12
 8001228:	18cb      	adds	r3, r1, r3
 800122a:	2100      	movs	r1, #0
 800122c:	0d0a      	lsrs	r2, r1, #20
 800122e:	0028      	movs	r0, r5
 8001230:	0512      	lsls	r2, r2, #20
 8001232:	4d1c      	ldr	r5, [pc, #112]	; (80012a4 <__aeabi_f2d+0x98>)
 8001234:	4332      	orrs	r2, r6
 8001236:	055b      	lsls	r3, r3, #21
 8001238:	402a      	ands	r2, r5
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	4313      	orrs	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	07e4      	lsls	r4, r4, #31
 8001242:	085b      	lsrs	r3, r3, #1
 8001244:	4323      	orrs	r3, r4
 8001246:	0019      	movs	r1, r3
 8001248:	bd70      	pop	{r4, r5, r6, pc}
 800124a:	2900      	cmp	r1, #0
 800124c:	d114      	bne.n	8001278 <__aeabi_f2d+0x6c>
 800124e:	2d00      	cmp	r5, #0
 8001250:	d01e      	beq.n	8001290 <__aeabi_f2d+0x84>
 8001252:	0028      	movs	r0, r5
 8001254:	f000 f82c 	bl	80012b0 <__clzsi2>
 8001258:	280a      	cmp	r0, #10
 800125a:	dc1c      	bgt.n	8001296 <__aeabi_f2d+0x8a>
 800125c:	230b      	movs	r3, #11
 800125e:	002a      	movs	r2, r5
 8001260:	1a1b      	subs	r3, r3, r0
 8001262:	40da      	lsrs	r2, r3
 8001264:	0003      	movs	r3, r0
 8001266:	3315      	adds	r3, #21
 8001268:	409d      	lsls	r5, r3
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <__aeabi_f2d+0x9c>)
 800126c:	0312      	lsls	r2, r2, #12
 800126e:	1a1b      	subs	r3, r3, r0
 8001270:	055b      	lsls	r3, r3, #21
 8001272:	0b16      	lsrs	r6, r2, #12
 8001274:	0d5b      	lsrs	r3, r3, #21
 8001276:	e7d8      	b.n	800122a <__aeabi_f2d+0x1e>
 8001278:	2d00      	cmp	r5, #0
 800127a:	d006      	beq.n	800128a <__aeabi_f2d+0x7e>
 800127c:	0b32      	lsrs	r2, r6, #12
 800127e:	2680      	movs	r6, #128	; 0x80
 8001280:	0336      	lsls	r6, r6, #12
 8001282:	076d      	lsls	r5, r5, #29
 8001284:	4316      	orrs	r6, r2
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <__aeabi_f2d+0xa0>)
 8001288:	e7cf      	b.n	800122a <__aeabi_f2d+0x1e>
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <__aeabi_f2d+0xa0>)
 800128c:	2600      	movs	r6, #0
 800128e:	e7cc      	b.n	800122a <__aeabi_f2d+0x1e>
 8001290:	2300      	movs	r3, #0
 8001292:	2600      	movs	r6, #0
 8001294:	e7c9      	b.n	800122a <__aeabi_f2d+0x1e>
 8001296:	0003      	movs	r3, r0
 8001298:	002a      	movs	r2, r5
 800129a:	3b0b      	subs	r3, #11
 800129c:	409a      	lsls	r2, r3
 800129e:	2500      	movs	r5, #0
 80012a0:	e7e3      	b.n	800126a <__aeabi_f2d+0x5e>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	800fffff 	.word	0x800fffff
 80012a8:	00000389 	.word	0x00000389
 80012ac:	000007ff 	.word	0x000007ff

080012b0 <__clzsi2>:
 80012b0:	211c      	movs	r1, #28
 80012b2:	2301      	movs	r3, #1
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	4298      	cmp	r0, r3
 80012b8:	d301      	bcc.n	80012be <__clzsi2+0xe>
 80012ba:	0c00      	lsrs	r0, r0, #16
 80012bc:	3910      	subs	r1, #16
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	4298      	cmp	r0, r3
 80012c2:	d301      	bcc.n	80012c8 <__clzsi2+0x18>
 80012c4:	0a00      	lsrs	r0, r0, #8
 80012c6:	3908      	subs	r1, #8
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d301      	bcc.n	80012d2 <__clzsi2+0x22>
 80012ce:	0900      	lsrs	r0, r0, #4
 80012d0:	3904      	subs	r1, #4
 80012d2:	a202      	add	r2, pc, #8	; (adr r2, 80012dc <__clzsi2+0x2c>)
 80012d4:	5c10      	ldrb	r0, [r2, r0]
 80012d6:	1840      	adds	r0, r0, r1
 80012d8:	4770      	bx	lr
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	02020304 	.word	0x02020304
 80012e0:	01010101 	.word	0x01010101
	...

080012ec <__clzdi2>:
 80012ec:	b510      	push	{r4, lr}
 80012ee:	2900      	cmp	r1, #0
 80012f0:	d103      	bne.n	80012fa <__clzdi2+0xe>
 80012f2:	f7ff ffdd 	bl	80012b0 <__clzsi2>
 80012f6:	3020      	adds	r0, #32
 80012f8:	e002      	b.n	8001300 <__clzdi2+0x14>
 80012fa:	1c08      	adds	r0, r1, #0
 80012fc:	f7ff ffd8 	bl	80012b0 <__clzsi2>
 8001300:	bd10      	pop	{r4, pc}
 8001302:	46c0      	nop			; (mov r8, r8)

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b570      	push	{r4, r5, r6, lr}
 8001306:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	20fa      	movs	r0, #250	; 0xfa
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_InitTick+0x3c>)
 800130c:	0080      	lsls	r0, r0, #2
 800130e:	7819      	ldrb	r1, [r3, #0]
 8001310:	f7fe ff16 	bl	8000140 <__udivsi3>
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_InitTick+0x40>)
 8001316:	0001      	movs	r1, r0
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	f7fe ff11 	bl	8000140 <__udivsi3>
 800131e:	f000 f897 	bl	8001450 <HAL_SYSTICK_Config>
 8001322:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001326:	2c00      	cmp	r4, #0
 8001328:	d109      	bne.n	800133e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	2d03      	cmp	r5, #3
 800132c:	d807      	bhi.n	800133e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132e:	3802      	subs	r0, #2
 8001330:	0022      	movs	r2, r4
 8001332:	0029      	movs	r1, r5
 8001334:	f000 f852 	bl	80013dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	0020      	movs	r0, r4
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_InitTick+0x44>)
 800133c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800133e:	bd70      	pop	{r4, r5, r6, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	2000000c 	.word	0x2000000c
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800134c:	2340      	movs	r3, #64	; 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_Init+0x24>)
{
 8001350:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001352:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001354:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001356:	430b      	orrs	r3, r1
 8001358:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135a:	f7ff ffd3 	bl	8001304 <HAL_InitTick>
 800135e:	1e04      	subs	r4, r0, #0
 8001360:	d103      	bne.n	800136a <HAL_Init+0x1e>
    HAL_MspInit();
 8001362:	f002 f8af 	bl	80034c4 <HAL_MspInit>
}
 8001366:	0020      	movs	r0, r4
 8001368:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800136a:	2401      	movs	r4, #1
 800136c:	e7fb      	b.n	8001366 <HAL_Init+0x1a>
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40022000 	.word	0x40022000

08001374 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_IncTick+0x10>)
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <HAL_IncTick+0x14>)
 8001378:	6811      	ldr	r1, [r2, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	185b      	adds	r3, r3, r1
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	4770      	bx	lr
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	20000288 	.word	0x20000288
 8001388:	20000000 	.word	0x20000000

0800138c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800138c:	4b01      	ldr	r3, [pc, #4]	; (8001394 <HAL_GetTick+0x8>)
 800138e:	6818      	ldr	r0, [r3, #0]
}
 8001390:	4770      	bx	lr
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	20000288 	.word	0x20000288

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff6 	bl	800138c <HAL_GetTick>
 80013a0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	1c63      	adds	r3, r4, #1
 80013a4:	d002      	beq.n	80013ac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_Delay+0x20>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ac:	f7ff ffee 	bl	800138c <HAL_GetTick>
 80013b0:	1b40      	subs	r0, r0, r5
 80013b2:	4284      	cmp	r4, r0
 80013b4:	d8fa      	bhi.n	80013ac <HAL_Delay+0x14>
  {
  }
}
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
 80013b8:	20000000 	.word	0x20000000

080013bc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80013bc:	2102      	movs	r1, #2
 80013be:	4a02      	ldr	r2, [pc, #8]	; (80013c8 <HAL_SuspendTick+0xc>)
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	438b      	bics	r3, r1
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	4770      	bx	lr
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80013cc:	2302      	movs	r3, #2
 80013ce:	4a02      	ldr	r2, [pc, #8]	; (80013d8 <HAL_ResumeTick+0xc>)
 80013d0:	6811      	ldr	r1, [r2, #0]
 80013d2:	430b      	orrs	r3, r1
 80013d4:	6013      	str	r3, [r2, #0]
}
 80013d6:	4770      	bx	lr
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80013e0:	2800      	cmp	r0, #0
 80013e2:	da14      	bge.n	800140e <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e4:	230f      	movs	r3, #15
 80013e6:	b2c0      	uxtb	r0, r0
 80013e8:	4003      	ands	r3, r0
 80013ea:	3b08      	subs	r3, #8
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_NVIC_SetPriority+0x58>)
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	189b      	adds	r3, r3, r2
 80013f4:	2203      	movs	r2, #3
 80013f6:	4010      	ands	r0, r2
 80013f8:	4090      	lsls	r0, r2
 80013fa:	32fc      	adds	r2, #252	; 0xfc
 80013fc:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013fe:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001400:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001402:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001404:	69dc      	ldr	r4, [r3, #28]
 8001406:	43ac      	bics	r4, r5
 8001408:	4321      	orrs	r1, r4
 800140a:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800140c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140e:	2503      	movs	r5, #3
 8001410:	0883      	lsrs	r3, r0, #2
 8001412:	4028      	ands	r0, r5
 8001414:	40a8      	lsls	r0, r5
 8001416:	35fc      	adds	r5, #252	; 0xfc
 8001418:	002e      	movs	r6, r5
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_NVIC_SetPriority+0x5c>)
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	189b      	adds	r3, r3, r2
 8001420:	22c0      	movs	r2, #192	; 0xc0
 8001422:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001424:	4029      	ands	r1, r5
 8001426:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	589c      	ldr	r4, [r3, r2]
 800142c:	43b4      	bics	r4, r6
 800142e:	4321      	orrs	r1, r4
 8001430:	5099      	str	r1, [r3, r2]
 8001432:	e7eb      	b.n	800140c <HAL_NVIC_SetPriority+0x30>
 8001434:	e000ed00 	.word	0xe000ed00
 8001438:	e000e100 	.word	0xe000e100

0800143c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800143c:	231f      	movs	r3, #31
 800143e:	4018      	ands	r0, r3
 8001440:	3b1e      	subs	r3, #30
 8001442:	4083      	lsls	r3, r0
 8001444:	4a01      	ldr	r2, [pc, #4]	; (800144c <HAL_NVIC_EnableIRQ+0x10>)
 8001446:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001448:	4770      	bx	lr
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	e000e100 	.word	0xe000e100

08001450 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	4a09      	ldr	r2, [pc, #36]	; (8001478 <HAL_SYSTICK_Config+0x28>)
 8001452:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001454:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001456:	4293      	cmp	r3, r2
 8001458:	d80d      	bhi.n	8001476 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800145a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800145e:	4808      	ldr	r0, [pc, #32]	; (8001480 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001460:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001462:	6a03      	ldr	r3, [r0, #32]
 8001464:	0609      	lsls	r1, r1, #24
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	430b      	orrs	r3, r1
 800146c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001470:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001472:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001474:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001476:	4770      	bx	lr
 8001478:	00ffffff 	.word	0x00ffffff
 800147c:	e000e010 	.word	0xe000e010
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001486:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_GPIO_Init+0x160>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001488:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800148a:	1882      	adds	r2, r0, r2
 800148c:	1e54      	subs	r4, r2, #1
 800148e:	41a2      	sbcs	r2, r4
{
 8001490:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8001492:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 8001494:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001496:	3205      	adds	r2, #5
{
 8001498:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800149a:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800149c:	9a04      	ldr	r2, [sp, #16]
 800149e:	40da      	lsrs	r2, r3
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80014a2:	b007      	add	sp, #28
 80014a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014a6:	2601      	movs	r6, #1
 80014a8:	0037      	movs	r7, r6
 80014aa:	409f      	lsls	r7, r3
 80014ac:	9a04      	ldr	r2, [sp, #16]
 80014ae:	403a      	ands	r2, r7
 80014b0:	9202      	str	r2, [sp, #8]
    if (iocurrent)
 80014b2:	d100      	bne.n	80014b6 <HAL_GPIO_Init+0x32>
 80014b4:	e093      	b.n	80015de <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b6:	9a03      	ldr	r2, [sp, #12]
 80014b8:	6852      	ldr	r2, [r2, #4]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	2210      	movs	r2, #16
 80014be:	9d01      	ldr	r5, [sp, #4]
 80014c0:	4395      	bics	r5, r2
 80014c2:	1e6a      	subs	r2, r5, #1
 80014c4:	42b2      	cmp	r2, r6
 80014c6:	d813      	bhi.n	80014f0 <HAL_GPIO_Init+0x6c>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014c8:	2403      	movs	r4, #3
 80014ca:	0059      	lsls	r1, r3, #1
 80014cc:	408c      	lsls	r4, r1
 80014ce:	468c      	mov	ip, r1
        temp = GPIOx->OSPEEDR;
 80014d0:	6882      	ldr	r2, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d2:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014d4:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d6:	68cc      	ldr	r4, [r1, #12]
 80014d8:	4661      	mov	r1, ip
 80014da:	408c      	lsls	r4, r1
 80014dc:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80014de:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014e0:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OTYPER;
 80014e2:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014e4:	0912      	lsrs	r2, r2, #4
 80014e6:	4032      	ands	r2, r6
 80014e8:	409a      	lsls	r2, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ea:	43bc      	bics	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014ec:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80014ee:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f0:	2203      	movs	r2, #3
 80014f2:	005f      	lsls	r7, r3, #1
 80014f4:	40ba      	lsls	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	9903      	ldr	r1, [sp, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f8:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fa:	688c      	ldr	r4, [r1, #8]
      temp = GPIOx->PUPDR;
 80014fc:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fe:	40bc      	lsls	r4, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001500:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001502:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8001504:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001506:	2d02      	cmp	r5, #2
 8001508:	d10e      	bne.n	8001528 <HAL_GPIO_Init+0xa4>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800150a:	210f      	movs	r1, #15
 800150c:	3505      	adds	r5, #5
 800150e:	401d      	ands	r5, r3
 8001510:	00ad      	lsls	r5, r5, #2
 8001512:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8001514:	08dc      	lsrs	r4, r3, #3
 8001516:	00a4      	lsls	r4, r4, #2
 8001518:	1904      	adds	r4, r0, r4
 800151a:	6a26      	ldr	r6, [r4, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800151c:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800151e:	9903      	ldr	r1, [sp, #12]
 8001520:	6909      	ldr	r1, [r1, #16]
 8001522:	40a9      	lsls	r1, r5
 8001524:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8001526:	6226      	str	r6, [r4, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 800152a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800152c:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152e:	9c01      	ldr	r4, [sp, #4]
 8001530:	4034      	ands	r4, r6
 8001532:	40bc      	lsls	r4, r7
 8001534:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001536:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001538:	9a01      	ldr	r2, [sp, #4]
 800153a:	00d2      	lsls	r2, r2, #3
 800153c:	d54f      	bpl.n	80015de <HAL_GPIO_Init+0x15a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2701      	movs	r7, #1
 8001540:	4c29      	ldr	r4, [pc, #164]	; (80015e8 <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001542:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001544:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001546:	4035      	ands	r5, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001548:	433a      	orrs	r2, r7
 800154a:	6362      	str	r2, [r4, #52]	; 0x34
 800154c:	4a27      	ldr	r2, [pc, #156]	; (80015ec <HAL_GPIO_Init+0x168>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800154e:	089c      	lsrs	r4, r3, #2
 8001550:	00a4      	lsls	r4, r4, #2
 8001552:	18a4      	adds	r4, r4, r2
 8001554:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001556:	00ad      	lsls	r5, r5, #2
        temp = SYSCFG->EXTICR[position >> 2U];
 8001558:	4694      	mov	ip, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800155a:	220f      	movs	r2, #15
 800155c:	4661      	mov	r1, ip
 800155e:	40aa      	lsls	r2, r5
 8001560:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001562:	22a0      	movs	r2, #160	; 0xa0
 8001564:	05d2      	lsls	r2, r2, #23
 8001566:	4694      	mov	ip, r2
 8001568:	2200      	movs	r2, #0
 800156a:	4560      	cmp	r0, ip
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x106>
 800156e:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <HAL_GPIO_Init+0x16c>)
 8001570:	4694      	mov	ip, r2
 8001572:	003a      	movs	r2, r7
 8001574:	4560      	cmp	r0, ip
 8001576:	d008      	beq.n	800158a <HAL_GPIO_Init+0x106>
 8001578:	4f1e      	ldr	r7, [pc, #120]	; (80015f4 <HAL_GPIO_Init+0x170>)
 800157a:	1892      	adds	r2, r2, r2
 800157c:	42b8      	cmp	r0, r7
 800157e:	d004      	beq.n	800158a <HAL_GPIO_Init+0x106>
 8001580:	4f1d      	ldr	r7, [pc, #116]	; (80015f8 <HAL_GPIO_Init+0x174>)
 8001582:	0032      	movs	r2, r6
 8001584:	42b8      	cmp	r0, r7
 8001586:	d000      	beq.n	800158a <HAL_GPIO_Init+0x106>
 8001588:	9a05      	ldr	r2, [sp, #20]
 800158a:	40aa      	lsls	r2, r5
 800158c:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 800158e:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001590:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8001592:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_GPIO_Init+0x178>)
        temp &= ~((uint32_t)iocurrent);
 8001596:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 8001598:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159a:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800159c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159e:	03c9      	lsls	r1, r1, #15
 80015a0:	d401      	bmi.n	80015a6 <HAL_GPIO_Init+0x122>
        temp &= ~((uint32_t)iocurrent);
 80015a2:	0035      	movs	r5, r6
 80015a4:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80015a6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80015a8:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80015aa:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ac:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80015ae:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b0:	0389      	lsls	r1, r1, #14
 80015b2:	d401      	bmi.n	80015b8 <HAL_GPIO_Init+0x134>
        temp &= ~((uint32_t)iocurrent);
 80015b4:	0035      	movs	r5, r6
 80015b6:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80015b8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80015ba:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80015bc:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015be:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80015c0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c2:	02c9      	lsls	r1, r1, #11
 80015c4:	d401      	bmi.n	80015ca <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 80015c6:	0035      	movs	r5, r6
 80015c8:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80015ca:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80015cc:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80015ce:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d0:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80015d2:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d4:	0289      	lsls	r1, r1, #10
 80015d6:	d401      	bmi.n	80015dc <HAL_GPIO_Init+0x158>
        temp &= ~((uint32_t)iocurrent);
 80015d8:	4025      	ands	r5, r4
 80015da:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80015dc:	60d6      	str	r6, [r2, #12]
    position++;
 80015de:	3301      	adds	r3, #1
 80015e0:	e75c      	b.n	800149c <HAL_GPIO_Init+0x18>
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	afffe400 	.word	0xafffe400
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	50000400 	.word	0x50000400
 80015f4:	50000800 	.word	0x50000800
 80015f8:	50000c00 	.word	0x50000c00
 80015fc:	40010400 	.word	0x40010400

08001600 <HAL_GPIO_DeInit>:
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001600:	4a34      	ldr	r2, [pc, #208]	; (80016d4 <HAL_GPIO_DeInit+0xd4>)
{
 8001602:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001604:	1882      	adds	r2, r0, r2
 8001606:	1e54      	subs	r4, r2, #1
 8001608:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800160a:	2300      	movs	r3, #0
{
 800160c:	b085      	sub	sp, #20
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800160e:	3205      	adds	r2, #5
 8001610:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0)
 8001612:	000a      	movs	r2, r1
 8001614:	40da      	lsrs	r2, r3
 8001616:	d101      	bne.n	800161c <HAL_GPIO_DeInit+0x1c>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8001618:	b005      	add	sp, #20
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800161c:	2201      	movs	r2, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	0016      	movs	r6, r2
 8001622:	9200      	str	r2, [sp, #0]
 8001624:	400e      	ands	r6, r1
    if (iocurrent)
 8001626:	d053      	beq.n	80016d0 <HAL_GPIO_DeInit+0xd0>
 8001628:	4c2b      	ldr	r4, [pc, #172]	; (80016d8 <HAL_GPIO_DeInit+0xd8>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 800162a:	089a      	lsrs	r2, r3, #2
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	1912      	adds	r2, r2, r4
 8001630:	6894      	ldr	r4, [r2, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001632:	2503      	movs	r5, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001634:	0027      	movs	r7, r4
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001636:	240f      	movs	r4, #15
 8001638:	401d      	ands	r5, r3
 800163a:	00ad      	lsls	r5, r5, #2
 800163c:	40ac      	lsls	r4, r5
 800163e:	9401      	str	r4, [sp, #4]
 8001640:	403c      	ands	r4, r7
 8001642:	9402      	str	r4, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001644:	24a0      	movs	r4, #160	; 0xa0
 8001646:	05e4      	lsls	r4, r4, #23
 8001648:	46a4      	mov	ip, r4
 800164a:	2400      	movs	r4, #0
 800164c:	4560      	cmp	r0, ip
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_DeInit+0x6c>
 8001650:	4c22      	ldr	r4, [pc, #136]	; (80016dc <HAL_GPIO_DeInit+0xdc>)
 8001652:	46a4      	mov	ip, r4
 8001654:	2401      	movs	r4, #1
 8001656:	4560      	cmp	r0, ip
 8001658:	d008      	beq.n	800166c <HAL_GPIO_DeInit+0x6c>
 800165a:	4f21      	ldr	r7, [pc, #132]	; (80016e0 <HAL_GPIO_DeInit+0xe0>)
 800165c:	1924      	adds	r4, r4, r4
 800165e:	42b8      	cmp	r0, r7
 8001660:	d004      	beq.n	800166c <HAL_GPIO_DeInit+0x6c>
 8001662:	4f20      	ldr	r7, [pc, #128]	; (80016e4 <HAL_GPIO_DeInit+0xe4>)
 8001664:	3401      	adds	r4, #1
 8001666:	42b8      	cmp	r0, r7
 8001668:	d000      	beq.n	800166c <HAL_GPIO_DeInit+0x6c>
 800166a:	9c03      	ldr	r4, [sp, #12]
 800166c:	40ac      	lsls	r4, r5
 800166e:	9d02      	ldr	r5, [sp, #8]
 8001670:	42a5      	cmp	r5, r4
 8001672:	d111      	bne.n	8001698 <HAL_GPIO_DeInit+0x98>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001674:	43f6      	mvns	r6, r6
 8001676:	4c1c      	ldr	r4, [pc, #112]	; (80016e8 <HAL_GPIO_DeInit+0xe8>)
 8001678:	6825      	ldr	r5, [r4, #0]
 800167a:	4035      	ands	r5, r6
 800167c:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800167e:	6865      	ldr	r5, [r4, #4]
 8001680:	4035      	ands	r5, r6
 8001682:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001684:	68a5      	ldr	r5, [r4, #8]
 8001686:	4035      	ands	r5, r6
 8001688:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800168a:	68e5      	ldr	r5, [r4, #12]
 800168c:	402e      	ands	r6, r5
 800168e:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001690:	6894      	ldr	r4, [r2, #8]
 8001692:	9d01      	ldr	r5, [sp, #4]
 8001694:	43ac      	bics	r4, r5
 8001696:	6094      	str	r4, [r2, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001698:	2203      	movs	r2, #3
 800169a:	005d      	lsls	r5, r3, #1
 800169c:	40aa      	lsls	r2, r5
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800169e:	2507      	movs	r5, #7
 80016a0:	270f      	movs	r7, #15
 80016a2:	401d      	ands	r5, r3
 80016a4:	00ad      	lsls	r5, r5, #2
 80016a6:	40af      	lsls	r7, r5
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a8:	43d5      	mvns	r5, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80016aa:	6804      	ldr	r4, [r0, #0]
 80016ac:	4314      	orrs	r4, r2
 80016ae:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80016b0:	08dc      	lsrs	r4, r3, #3
 80016b2:	00a4      	lsls	r4, r4, #2
 80016b4:	1904      	adds	r4, r0, r4
 80016b6:	6a26      	ldr	r6, [r4, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80016b8:	9a00      	ldr	r2, [sp, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80016ba:	43be      	bics	r6, r7
 80016bc:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016be:	68c4      	ldr	r4, [r0, #12]
 80016c0:	402c      	ands	r4, r5
 80016c2:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80016c4:	6844      	ldr	r4, [r0, #4]
 80016c6:	4394      	bics	r4, r2
 80016c8:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016ca:	6882      	ldr	r2, [r0, #8]
 80016cc:	402a      	ands	r2, r5
 80016ce:	6082      	str	r2, [r0, #8]
    position++;
 80016d0:	3301      	adds	r3, #1
 80016d2:	e79e      	b.n	8001612 <HAL_GPIO_DeInit+0x12>
 80016d4:	afffe400 	.word	0xafffe400
 80016d8:	40010000 	.word	0x40010000
 80016dc:	50000400 	.word	0x50000400
 80016e0:	50000800 	.word	0x50000800
 80016e4:	50000c00 	.word	0x50000c00
 80016e8:	40010400 	.word	0x40010400

080016ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016ec:	6803      	ldr	r3, [r0, #0]
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	0792      	lsls	r2, r2, #30
 80016f2:	d501      	bpl.n	80016f8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016f8:	2201      	movs	r2, #1
 80016fa:	6999      	ldr	r1, [r3, #24]
 80016fc:	4211      	tst	r1, r2
 80016fe:	d102      	bne.n	8001706 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001700:	6999      	ldr	r1, [r3, #24]
 8001702:	430a      	orrs	r2, r1
 8001704:	619a      	str	r2, [r3, #24]
  }
}
 8001706:	4770      	bx	lr

08001708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001708:	b570      	push	{r4, r5, r6, lr}
 800170a:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800170c:	0589      	lsls	r1, r1, #22
 800170e:	4333      	orrs	r3, r6
 8001710:	0d89      	lsrs	r1, r1, #22
 8001712:	4319      	orrs	r1, r3
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	6804      	ldr	r4, [r0, #0]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	0d70      	lsrs	r0, r6, #21
 800171c:	4018      	ands	r0, r3
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <I2C_TransferConfig+0x28>)
 8001720:	6865      	ldr	r5, [r4, #4]
 8001722:	0412      	lsls	r2, r2, #16
 8001724:	4318      	orrs	r0, r3
 8001726:	4385      	bics	r5, r0
 8001728:	4311      	orrs	r1, r2
 800172a:	4329      	orrs	r1, r5
 800172c:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800172e:	bd70      	pop	{r4, r5, r6, pc}
 8001730:	03ff63ff 	.word	0x03ff63ff

08001734 <I2C_WaitOnFlagUntilTimeout>:
{
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001736:	0004      	movs	r4, r0
 8001738:	000e      	movs	r6, r1
 800173a:	0017      	movs	r7, r2
 800173c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	6993      	ldr	r3, [r2, #24]
 8001742:	4033      	ands	r3, r6
 8001744:	1b9b      	subs	r3, r3, r6
 8001746:	4259      	negs	r1, r3
 8001748:	414b      	adcs	r3, r1
 800174a:	42bb      	cmp	r3, r7
 800174c:	d001      	beq.n	8001752 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800174e:	2000      	movs	r0, #0
 8001750:	e017      	b.n	8001782 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001752:	1c6b      	adds	r3, r5, #1
 8001754:	d0f4      	beq.n	8001740 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001756:	f7ff fe19 	bl	800138c <HAL_GetTick>
 800175a:	9b06      	ldr	r3, [sp, #24]
 800175c:	1ac0      	subs	r0, r0, r3
 800175e:	4285      	cmp	r5, r0
 8001760:	d301      	bcc.n	8001766 <I2C_WaitOnFlagUntilTimeout+0x32>
 8001762:	2d00      	cmp	r5, #0
 8001764:	d1eb      	bne.n	800173e <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001766:	2220      	movs	r2, #32
 8001768:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800176a:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800176c:	4313      	orrs	r3, r2
 800176e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001770:	0023      	movs	r3, r4
 8001772:	3341      	adds	r3, #65	; 0x41
 8001774:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001776:	0022      	movs	r2, r4
 8001778:	2300      	movs	r3, #0
 800177a:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800177c:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800177e:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8001780:	7023      	strb	r3, [r4, #0]
}
 8001782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001784 <I2C_IsAcknowledgeFailed>:
{
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001786:	6803      	ldr	r3, [r0, #0]
{
 8001788:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800178a:	6998      	ldr	r0, [r3, #24]
 800178c:	2310      	movs	r3, #16
{
 800178e:	000e      	movs	r6, r1
 8001790:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001792:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001794:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001796:	2800      	cmp	r0, #0
 8001798:	d118      	bne.n	80017cc <I2C_IsAcknowledgeFailed+0x48>
}
 800179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 800179c:	1c72      	adds	r2, r6, #1
 800179e:	d016      	beq.n	80017ce <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a0:	f7ff fdf4 	bl	800138c <HAL_GetTick>
 80017a4:	1bc0      	subs	r0, r0, r7
 80017a6:	4286      	cmp	r6, r0
 80017a8:	d301      	bcc.n	80017ae <I2C_IsAcknowledgeFailed+0x2a>
 80017aa:	2e00      	cmp	r6, #0
 80017ac:	d10e      	bne.n	80017cc <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ae:	2220      	movs	r2, #32
 80017b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017b2:	4313      	orrs	r3, r2
 80017b4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017b6:	0023      	movs	r3, r4
 80017b8:	3341      	adds	r3, #65	; 0x41
 80017ba:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017bc:	0022      	movs	r2, r4
 80017be:	2300      	movs	r3, #0
 80017c0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80017c2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80017c6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80017c8:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80017ca:	e7e6      	b.n	800179a <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	699a      	ldr	r2, [r3, #24]
 80017d0:	422a      	tst	r2, r5
 80017d2:	d0e3      	beq.n	800179c <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d4:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80017d6:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017da:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80017dc:	f7ff ff86 	bl	80016ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80017e0:	6822      	ldr	r2, [r4, #0]
 80017e2:	4906      	ldr	r1, [pc, #24]	; (80017fc <I2C_IsAcknowledgeFailed+0x78>)
 80017e4:	6853      	ldr	r3, [r2, #4]
 80017e6:	400b      	ands	r3, r1
 80017e8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017ea:	2304      	movs	r3, #4
 80017ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80017ee:	4313      	orrs	r3, r2
 80017f0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	0023      	movs	r3, r4
 80017f4:	3341      	adds	r3, #65	; 0x41
 80017f6:	701d      	strb	r5, [r3, #0]
 80017f8:	e7e0      	b.n	80017bc <I2C_IsAcknowledgeFailed+0x38>
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	fe00e800 	.word	0xfe00e800

08001800 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	0004      	movs	r4, r0
 8001804:	000d      	movs	r5, r1
 8001806:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001808:	2702      	movs	r7, #2
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	423b      	tst	r3, r7
 8001810:	d001      	beq.n	8001816 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001812:	2000      	movs	r0, #0
}
 8001814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001816:	0032      	movs	r2, r6
 8001818:	0029      	movs	r1, r5
 800181a:	0020      	movs	r0, r4
 800181c:	f7ff ffb2 	bl	8001784 <I2C_IsAcknowledgeFailed>
 8001820:	2800      	cmp	r0, #0
 8001822:	d115      	bne.n	8001850 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001824:	1c6b      	adds	r3, r5, #1
 8001826:	d0f0      	beq.n	800180a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001828:	f7ff fdb0 	bl	800138c <HAL_GetTick>
 800182c:	1b80      	subs	r0, r0, r6
 800182e:	4285      	cmp	r5, r0
 8001830:	d301      	bcc.n	8001836 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8001832:	2d00      	cmp	r5, #0
 8001834:	d1e9      	bne.n	800180a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001836:	2220      	movs	r2, #32
 8001838:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800183a:	4313      	orrs	r3, r2
 800183c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800183e:	0023      	movs	r3, r4
 8001840:	3341      	adds	r3, #65	; 0x41
 8001842:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001844:	0022      	movs	r2, r4
 8001846:	2300      	movs	r3, #0
 8001848:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800184a:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800184c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800184e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001850:	2001      	movs	r0, #1
 8001852:	e7df      	b.n	8001814 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08001854 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001856:	0004      	movs	r4, r0
 8001858:	000d      	movs	r5, r1
 800185a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800185c:	2720      	movs	r7, #32
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	423b      	tst	r3, r7
 8001864:	d001      	beq.n	800186a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001866:	2000      	movs	r0, #0
}
 8001868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800186a:	0032      	movs	r2, r6
 800186c:	0029      	movs	r1, r5
 800186e:	0020      	movs	r0, r4
 8001870:	f7ff ff88 	bl	8001784 <I2C_IsAcknowledgeFailed>
 8001874:	2800      	cmp	r0, #0
 8001876:	d113      	bne.n	80018a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001878:	f7ff fd88 	bl	800138c <HAL_GetTick>
 800187c:	1b80      	subs	r0, r0, r6
 800187e:	4285      	cmp	r5, r0
 8001880:	d301      	bcc.n	8001886 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8001882:	2d00      	cmp	r5, #0
 8001884:	d1eb      	bne.n	800185e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001886:	2220      	movs	r2, #32
 8001888:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800188a:	4313      	orrs	r3, r2
 800188c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800188e:	0023      	movs	r3, r4
 8001890:	3341      	adds	r3, #65	; 0x41
 8001892:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	0022      	movs	r2, r4
 8001896:	2300      	movs	r3, #0
 8001898:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800189a:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800189c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800189e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80018a0:	2001      	movs	r0, #1
 80018a2:	e7e1      	b.n	8001868 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080018a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	0004      	movs	r4, r0
 80018a8:	000d      	movs	r5, r1
 80018aa:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018ac:	2604      	movs	r6, #4
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	4233      	tst	r3, r6
 80018b4:	d111      	bne.n	80018da <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b6:	003a      	movs	r2, r7
 80018b8:	0029      	movs	r1, r5
 80018ba:	0020      	movs	r0, r4
 80018bc:	f7ff ff62 	bl	8001784 <I2C_IsAcknowledgeFailed>
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d11a      	bne.n	80018fa <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80018c4:	2120      	movs	r1, #32
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	420a      	tst	r2, r1
 80018cc:	d017      	beq.n	80018fe <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	4232      	tst	r2, r6
 80018d2:	d004      	beq.n	80018de <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80018d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d001      	beq.n	80018de <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 80018da:	2000      	movs	r0, #0
}
 80018dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018de:	2120      	movs	r1, #32
 80018e0:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	480e      	ldr	r0, [pc, #56]	; (8001920 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 80018e6:	4002      	ands	r2, r0
 80018e8:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80018ea:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ec:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018f2:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80018f4:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f6:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 80018f8:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80018fa:	2001      	movs	r0, #1
 80018fc:	e7ee      	b.n	80018dc <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fe:	f7ff fd45 	bl	800138c <HAL_GetTick>
 8001902:	1bc0      	subs	r0, r0, r7
 8001904:	4285      	cmp	r5, r0
 8001906:	d301      	bcc.n	800190c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8001908:	2d00      	cmp	r5, #0
 800190a:	d1d0      	bne.n	80018ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800190c:	2220      	movs	r2, #32
 800190e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001910:	4313      	orrs	r3, r2
 8001912:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001914:	0023      	movs	r3, r4
 8001916:	3341      	adds	r3, #65	; 0x41
 8001918:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800191a:	3440      	adds	r4, #64	; 0x40
 800191c:	2300      	movs	r3, #0
 800191e:	e7eb      	b.n	80018f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001920:	fe00e800 	.word	0xfe00e800

08001924 <HAL_I2C_Init>:
{
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800192a:	2c00      	cmp	r4, #0
 800192c:	d03f      	beq.n	80019ae <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192e:	0025      	movs	r5, r4
 8001930:	3541      	adds	r5, #65	; 0x41
 8001932:	782b      	ldrb	r3, [r5, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800193a:	0022      	movs	r2, r4
 800193c:	3240      	adds	r2, #64	; 0x40
 800193e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8001940:	0020      	movs	r0, r4
 8001942:	f001 fdcd 	bl	80034e0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001946:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001948:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800194a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800194c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800194e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68a6      	ldr	r6, [r4, #8]
 8001954:	438a      	bics	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001958:	6861      	ldr	r1, [r4, #4]
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_I2C_Init+0xa0>)
 800195c:	400a      	ands	r2, r1
 800195e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <HAL_I2C_Init+0xa4>)
 8001964:	4011      	ands	r1, r2
 8001966:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001968:	2801      	cmp	r0, #1
 800196a:	d121      	bne.n	80019b0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0209      	lsls	r1, r1, #8
 8001970:	4331      	orrs	r1, r6
 8001972:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001974:	6858      	ldr	r0, [r3, #4]
 8001976:	4915      	ldr	r1, [pc, #84]	; (80019cc <HAL_I2C_Init+0xa8>)
 8001978:	4301      	orrs	r1, r0
 800197a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800197c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001980:	400a      	ands	r2, r1
 8001982:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001984:	6961      	ldr	r1, [r4, #20]
 8001986:	6922      	ldr	r2, [r4, #16]
 8001988:	430a      	orrs	r2, r1
 800198a:	69a1      	ldr	r1, [r4, #24]
 800198c:	0209      	lsls	r1, r1, #8
 800198e:	430a      	orrs	r2, r1
 8001990:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001992:	6a21      	ldr	r1, [r4, #32]
 8001994:	69e2      	ldr	r2, [r4, #28]
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800199a:	2201      	movs	r2, #1
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80019a2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019aa:	3442      	adds	r4, #66	; 0x42
 80019ac:	7020      	strb	r0, [r4, #0]
}
 80019ae:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019b0:	2184      	movs	r1, #132	; 0x84
 80019b2:	0209      	lsls	r1, r1, #8
 80019b4:	4331      	orrs	r1, r6
 80019b6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019b8:	2802      	cmp	r0, #2
 80019ba:	d1db      	bne.n	8001974 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	0109      	lsls	r1, r1, #4
 80019c0:	6059      	str	r1, [r3, #4]
 80019c2:	e7d7      	b.n	8001974 <HAL_I2C_Init+0x50>
 80019c4:	f0ffffff 	.word	0xf0ffffff
 80019c8:	ffff7fff 	.word	0xffff7fff
 80019cc:	02008000 	.word	0x02008000

080019d0 <HAL_I2C_DeInit>:
{
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80019d4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80019d6:	2c00      	cmp	r4, #0
 80019d8:	d013      	beq.n	8001a02 <HAL_I2C_DeInit+0x32>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019da:	0025      	movs	r5, r4
 80019dc:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80019de:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	3541      	adds	r5, #65	; 0x41
 80019e2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80019e4:	6813      	ldr	r3, [r2, #0]
 80019e6:	4383      	bics	r3, r0
 80019e8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80019ea:	0020      	movs	r0, r4
 80019ec:	f001 fdaa 	bl	8003544 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f0:	2000      	movs	r0, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	0023      	movs	r3, r4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f6:	3342      	adds	r3, #66	; 0x42
  hi2c->State = HAL_I2C_STATE_RESET;
 80019f8:	7028      	strb	r0, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fa:	6320      	str	r0, [r4, #48]	; 0x30
  __HAL_UNLOCK(hi2c);
 80019fc:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	7018      	strb	r0, [r3, #0]
  __HAL_UNLOCK(hi2c);
 8001a00:	7020      	strb	r0, [r4, #0]
}
 8001a02:	bd70      	pop	{r4, r5, r6, pc}

08001a04 <HAL_I2C_Master_Transmit>:
{
 8001a04:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a06:	0005      	movs	r5, r0
{
 8001a08:	b087      	sub	sp, #28
 8001a0a:	9103      	str	r1, [sp, #12]
 8001a0c:	9204      	str	r2, [sp, #16]
 8001a0e:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	3541      	adds	r5, #65	; 0x41
 8001a12:	782b      	ldrb	r3, [r5, #0]
{
 8001a14:	0004      	movs	r4, r0
    return HAL_BUSY;
 8001a16:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d114      	bne.n	8001a46 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8001a1c:	0023      	movs	r3, r4
 8001a1e:	3340      	adds	r3, #64	; 0x40
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	2a01      	cmp	r2, #1
 8001a24:	d00f      	beq.n	8001a46 <HAL_I2C_Master_Transmit+0x42>
 8001a26:	2601      	movs	r6, #1
 8001a28:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8001a2a:	f7ff fcaf 	bl	800138c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a2e:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001a30:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a32:	9000      	str	r0, [sp, #0]
 8001a34:	2319      	movs	r3, #25
 8001a36:	0032      	movs	r2, r6
 8001a38:	0209      	lsls	r1, r1, #8
 8001a3a:	0020      	movs	r0, r4
 8001a3c:	f7ff fe7a 	bl	8001734 <I2C_WaitOnFlagUntilTimeout>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8001a44:	2001      	movs	r0, #1
}
 8001a46:	b007      	add	sp, #28
 8001a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a4a:	2321      	movs	r3, #33	; 0x21
 8001a4c:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a4e:	0025      	movs	r5, r4
 8001a50:	3b11      	subs	r3, #17
 8001a52:	3542      	adds	r5, #66	; 0x42
 8001a54:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8001a56:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001a5a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a5c:	466b      	mov	r3, sp
 8001a5e:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8001a60:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001a62:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a64:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <HAL_I2C_Master_Transmit+0x124>)
 8001a68:	2aff      	cmp	r2, #255	; 0xff
 8001a6a:	d921      	bls.n	8001ab0 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6c:	22ff      	movs	r2, #255	; 0xff
 8001a6e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	045b      	lsls	r3, r3, #17
 8001a76:	9903      	ldr	r1, [sp, #12]
 8001a78:	0020      	movs	r0, r4
 8001a7a:	f7ff fe45 	bl	8001708 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a7e:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8001a80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a82:	003a      	movs	r2, r7
 8001a84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001a86:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d119      	bne.n	8001ac0 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a8c:	f7ff fee2 	bl	8001854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d1d7      	bne.n	8001a44 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a94:	2120      	movs	r1, #32
 8001a96:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001a98:	4e24      	ldr	r6, [pc, #144]	; (8001b2c <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a9a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4032      	ands	r2, r6
 8001aa0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001aa2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8001aa4:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001aa6:	3341      	adds	r3, #65	; 0x41
 8001aa8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aaa:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001aac:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001aae:	e7ca      	b.n	8001a46 <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8001ab0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	049b      	lsls	r3, r3, #18
 8001abe:	e7da      	b.n	8001a76 <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac0:	f7ff fe9e 	bl	8001800 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d1bd      	bne.n	8001a44 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001ace:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ad0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001ad2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ad4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ad6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ade:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ae0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0ca      	beq.n	8001a80 <HAL_I2C_Master_Transmit+0x7c>
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d1c8      	bne.n	8001a80 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001aee:	9700      	str	r7, [sp, #0]
 8001af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0020      	movs	r0, r4
 8001af6:	f7ff fe1d 	bl	8001734 <I2C_WaitOnFlagUntilTimeout>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d1a2      	bne.n	8001a44 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001afe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b00:	2bff      	cmp	r3, #255	; 0xff
 8001b02:	d909      	bls.n	8001b18 <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b08:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b0a:	045b      	lsls	r3, r3, #17
 8001b0c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b0e:	9903      	ldr	r1, [sp, #12]
 8001b10:	0020      	movs	r0, r4
 8001b12:	f7ff fdf9 	bl	8001708 <I2C_TransferConfig>
 8001b16:	e7b3      	b.n	8001a80 <HAL_I2C_Master_Transmit+0x7c>
 8001b18:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001b1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b1c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001b1e:	b292      	uxth	r2, r2
 8001b20:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	9000      	str	r0, [sp, #0]
 8001b26:	e7f2      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x10a>
 8001b28:	80002000 	.word	0x80002000
 8001b2c:	fe00e800 	.word	0xfe00e800

08001b30 <HAL_I2C_Master_Receive>:
{
 8001b30:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b32:	0005      	movs	r5, r0
{
 8001b34:	b087      	sub	sp, #28
 8001b36:	9103      	str	r1, [sp, #12]
 8001b38:	9204      	str	r2, [sp, #16]
 8001b3a:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3c:	3541      	adds	r5, #65	; 0x41
 8001b3e:	782b      	ldrb	r3, [r5, #0]
{
 8001b40:	0004      	movs	r4, r0
    return HAL_BUSY;
 8001b42:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d114      	bne.n	8001b72 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8001b48:	0023      	movs	r3, r4
 8001b4a:	3340      	adds	r3, #64	; 0x40
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	2a01      	cmp	r2, #1
 8001b50:	d00f      	beq.n	8001b72 <HAL_I2C_Master_Receive+0x42>
 8001b52:	2601      	movs	r6, #1
 8001b54:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8001b56:	f7ff fc19 	bl	800138c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b5a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001b5c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b5e:	9000      	str	r0, [sp, #0]
 8001b60:	2319      	movs	r3, #25
 8001b62:	0032      	movs	r2, r6
 8001b64:	0209      	lsls	r1, r1, #8
 8001b66:	0020      	movs	r0, r4
 8001b68:	f7ff fde4 	bl	8001734 <I2C_WaitOnFlagUntilTimeout>
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
}
 8001b72:	b007      	add	sp, #28
 8001b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b76:	2322      	movs	r3, #34	; 0x22
 8001b78:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b7a:	0025      	movs	r5, r4
 8001b7c:	3b12      	subs	r3, #18
 8001b7e:	3542      	adds	r5, #66	; 0x42
 8001b80:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8001b82:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001b86:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b88:	466b      	mov	r3, sp
 8001b8a:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8001b8c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001b8e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_I2C_Master_Receive+0x128>)
 8001b94:	2aff      	cmp	r2, #255	; 0xff
 8001b96:	d921      	bls.n	8001bdc <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b98:	22ff      	movs	r2, #255	; 0xff
 8001b9a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	045b      	lsls	r3, r3, #17
 8001ba2:	9903      	ldr	r1, [sp, #12]
 8001ba4:	0020      	movs	r0, r4
 8001ba6:	f7ff fdaf 	bl	8001708 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001baa:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8001bac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bae:	003a      	movs	r2, r7
 8001bb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001bb2:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d119      	bne.n	8001bec <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb8:	f7ff fe4c 	bl	8001854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d1d7      	bne.n	8001b70 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc0:	2120      	movs	r1, #32
 8001bc2:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001bc4:	4e25      	ldr	r6, [pc, #148]	; (8001c5c <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4032      	ands	r2, r6
 8001bcc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8001bd0:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	3341      	adds	r3, #65	; 0x41
 8001bd4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bd6:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001bd8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001bda:	e7ca      	b.n	8001b72 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8001bdc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bde:	b292      	uxth	r2, r2
 8001be0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	049b      	lsls	r3, r3, #18
 8001bea:	e7da      	b.n	8001ba2 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bec:	f7ff fe5a 	bl	80018a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d1bd      	bne.n	8001b70 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001bfe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001c00:	3301      	adds	r3, #1
 8001c02:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001c04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c06:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c10:	b292      	uxth	r2, r2
 8001c12:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0c9      	beq.n	8001bac <HAL_I2C_Master_Receive+0x7c>
 8001c18:	2a00      	cmp	r2, #0
 8001c1a:	d1c7      	bne.n	8001bac <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c1c:	9700      	str	r7, [sp, #0]
 8001c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0020      	movs	r0, r4
 8001c24:	f7ff fd86 	bl	8001734 <I2C_WaitOnFlagUntilTimeout>
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d1a1      	bne.n	8001b70 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d909      	bls.n	8001c46 <HAL_I2C_Master_Receive+0x116>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c36:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c38:	045b      	lsls	r3, r3, #17
 8001c3a:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c3c:	9903      	ldr	r1, [sp, #12]
 8001c3e:	0020      	movs	r0, r4
 8001c40:	f7ff fd62 	bl	8001708 <I2C_TransferConfig>
 8001c44:	e7b2      	b.n	8001bac <HAL_I2C_Master_Receive+0x7c>
 8001c46:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001c48:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c4a:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	9000      	str	r0, [sp, #0]
 8001c54:	e7f2      	b.n	8001c3c <HAL_I2C_Master_Receive+0x10c>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	80002400 	.word	0x80002400
 8001c5c:	fe00e800 	.word	0xfe00e800

08001c60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c62:	0004      	movs	r4, r0
 8001c64:	3441      	adds	r4, #65	; 0x41
 8001c66:	7822      	ldrb	r2, [r4, #0]
{
 8001c68:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001c6c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6e:	2a20      	cmp	r2, #32
 8001c70:	d118      	bne.n	8001ca4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8001c72:	001d      	movs	r5, r3
 8001c74:	3540      	adds	r5, #64	; 0x40
 8001c76:	782e      	ldrb	r6, [r5, #0]
 8001c78:	2e01      	cmp	r6, #1
 8001c7a:	d013      	beq.n	8001ca4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001c7c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c7e:	3022      	adds	r0, #34	; 0x22
 8001c80:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001c82:	681e      	ldr	r6, [r3, #0]
 8001c84:	3823      	subs	r0, #35	; 0x23
 8001c86:	4386      	bics	r6, r0
 8001c88:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c8a:	681e      	ldr	r6, [r3, #0]
 8001c8c:	4f06      	ldr	r7, [pc, #24]	; (8001ca8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8001c8e:	403e      	ands	r6, r7
 8001c90:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c92:	681e      	ldr	r6, [r3, #0]
 8001c94:	4331      	orrs	r1, r6
 8001c96:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	4308      	orrs	r0, r1
 8001c9c:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001c9e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001ca2:	7028      	strb	r0, [r5, #0]
  }
}
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	ffffefff 	.word	0xffffefff

08001cac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cac:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cae:	0005      	movs	r5, r0
 8001cb0:	3541      	adds	r5, #65	; 0x41
 8001cb2:	782a      	ldrb	r2, [r5, #0]
{
 8001cb4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb6:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cba:	2a20      	cmp	r2, #32
 8001cbc:	d117      	bne.n	8001cee <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001cbe:	001c      	movs	r4, r3
 8001cc0:	3440      	adds	r4, #64	; 0x40
 8001cc2:	7826      	ldrb	r6, [r4, #0]
 8001cc4:	2e01      	cmp	r6, #1
 8001cc6:	d012      	beq.n	8001cee <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8001cc8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cca:	3022      	adds	r0, #34	; 0x22
 8001ccc:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001cce:	681e      	ldr	r6, [r3, #0]
 8001cd0:	3823      	subs	r0, #35	; 0x23
 8001cd2:	4386      	bics	r6, r0
 8001cd4:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001cd6:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001cd8:	4f05      	ldr	r7, [pc, #20]	; (8001cf0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8001cda:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001cdc:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001cde:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8001ce0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	4308      	orrs	r0, r1
 8001ce6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001ce8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001cec:	7020      	strb	r0, [r4, #0]
  }
}
 8001cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf0:	fffff0ff 	.word	0xfffff0ff

08001cf4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_PWR_EnableBkUpAccess+0x10>)
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	6811      	ldr	r1, [r2, #0]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	4770      	bx	lr
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	40007000 	.word	0x40007000

08001d08 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8001d08:	2110      	movs	r1, #16
 8001d0a:	4a02      	ldr	r2, [pc, #8]	; (8001d14 <HAL_PWR_DisablePVD+0xc>)
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	438b      	bics	r3, r1
 8001d10:	6013      	str	r3, [r2, #0]
}
 8001d12:	4770      	bx	lr
 8001d14:	40007000 	.word	0x40007000

08001d18 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001d18:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001d1a:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <HAL_PWR_EnterSTOPMode+0x30>)
 8001d1e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001d20:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001d22:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8001d24:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001d26:	2204      	movs	r2, #4
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_PWR_EnterSTOPMode+0x34>)
 8001d2a:	6918      	ldr	r0, [r3, #16]
 8001d2c:	4302      	orrs	r2, r0
 8001d2e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001d30:	2901      	cmp	r1, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_PWR_EnterSTOPMode+0x28>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001d34:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001d36:	2104      	movs	r1, #4
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	611a      	str	r2, [r3, #16]

}
 8001d3e:	bd10      	pop	{r4, pc}
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8001d40:	bf40      	sev
  __ASM volatile ("wfe");
 8001d42:	bf20      	wfe
 8001d44:	bf20      	wfe
 8001d46:	e7f6      	b.n	8001d36 <HAL_PWR_EnterSTOPMode+0x1e>
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	6811      	ldr	r1, [r2, #0]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	4770      	bx	lr
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	40007000 	.word	0x40007000

08001d64 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d64:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001d68:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001d6a:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	2a08      	cmp	r2, #8
 8001d70:	d026      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x5c>
 8001d72:	2a0c      	cmp	r2, #12
 8001d74:	d006      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x20>
 8001d76:	2a04      	cmp	r2, #4
 8001d78:	d11a      	bne.n	8001db0 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	06db      	lsls	r3, r3, #27
 8001d7e:	d421      	bmi.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8001d80:	4812      	ldr	r0, [pc, #72]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001d82:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d84:	028a      	lsls	r2, r1, #10
 8001d86:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d88:	0f12      	lsrs	r2, r2, #28
 8001d8a:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d8c:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8e:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d90:	0f89      	lsrs	r1, r1, #30
 8001d92:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d94:	03c0      	lsls	r0, r0, #15
 8001d96:	d504      	bpl.n	8001da2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001d98:	480e      	ldr	r0, [pc, #56]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001d9a:	4350      	muls	r0, r2
 8001d9c:	f7fe f9d0 	bl	8000140 <__udivsi3>
 8001da0:	e7ef      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	06db      	lsls	r3, r3, #27
 8001da6:	d501      	bpl.n	8001dac <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x74>)
 8001daa:	e7f6      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x68>)
 8001dae:	e7f4      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001db0:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001db2:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001db4:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001db6:	041b      	lsls	r3, r3, #16
 8001db8:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001dba:	3301      	adds	r3, #1
 8001dbc:	4098      	lsls	r0, r3
 8001dbe:	e7e0      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x70>)
 8001dc2:	e7de      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8001dc6:	e7dc      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1e>
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	08005b73 	.word	0x08005b73
 8001dd4:	007a1200 	.word	0x007a1200
 8001dd8:	003d0900 	.word	0x003d0900

08001ddc <HAL_RCC_OscConfig>:
{
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	0005      	movs	r5, r0
 8001de0:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001de6:	2001      	movs	r0, #1
}
 8001de8:	b007      	add	sp, #28
 8001dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dec:	230c      	movs	r3, #12
 8001dee:	4cbe      	ldr	r4, [pc, #760]	; (80020e8 <HAL_RCC_OscConfig+0x30c>)
 8001df0:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df2:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df4:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	025b      	lsls	r3, r3, #9
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfe:	6802      	ldr	r2, [r0, #0]
 8001e00:	07d2      	lsls	r2, r2, #31
 8001e02:	d441      	bmi.n	8001e88 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	079b      	lsls	r3, r3, #30
 8001e08:	d500      	bpl.n	8001e0c <HAL_RCC_OscConfig+0x30>
 8001e0a:	e087      	b.n	8001f1c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e0c:	682b      	ldr	r3, [r5, #0]
 8001e0e:	06db      	lsls	r3, r3, #27
 8001e10:	d528      	bpl.n	8001e64 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001e12:	2e00      	cmp	r6, #0
 8001e14:	d000      	beq.n	8001e18 <HAL_RCC_OscConfig+0x3c>
 8001e16:	e0d9      	b.n	8001fcc <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	059b      	lsls	r3, r3, #22
 8001e1c:	d502      	bpl.n	8001e24 <HAL_RCC_OscConfig+0x48>
 8001e1e:	69eb      	ldr	r3, [r5, #28]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0e0      	beq.n	8001de6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e24:	6862      	ldr	r2, [r4, #4]
 8001e26:	49b1      	ldr	r1, [pc, #708]	; (80020ec <HAL_RCC_OscConfig+0x310>)
 8001e28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e30:	6861      	ldr	r1, [r4, #4]
 8001e32:	6a2a      	ldr	r2, [r5, #32]
 8001e34:	0209      	lsls	r1, r1, #8
 8001e36:	0a09      	lsrs	r1, r1, #8
 8001e38:	0612      	lsls	r2, r2, #24
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	0b5b      	lsrs	r3, r3, #13
 8001e42:	3301      	adds	r3, #1
 8001e44:	0212      	lsls	r2, r2, #8
 8001e46:	409a      	lsls	r2, r3
 8001e48:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e4a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001e4c:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e4e:	060a      	lsls	r2, r1, #24
 8001e50:	49a7      	ldr	r1, [pc, #668]	; (80020f0 <HAL_RCC_OscConfig+0x314>)
 8001e52:	0f12      	lsrs	r2, r2, #28
 8001e54:	5c8a      	ldrb	r2, [r1, r2]
 8001e56:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e58:	4aa6      	ldr	r2, [pc, #664]	; (80020f4 <HAL_RCC_OscConfig+0x318>)
 8001e5a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001e5c:	f7ff fa52 	bl	8001304 <HAL_InitTick>
        if(status != HAL_OK)
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d1c1      	bne.n	8001de8 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	071b      	lsls	r3, r3, #28
 8001e68:	d500      	bpl.n	8001e6c <HAL_RCC_OscConfig+0x90>
 8001e6a:	e0e6      	b.n	800203a <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6c:	682b      	ldr	r3, [r5, #0]
 8001e6e:	075b      	lsls	r3, r3, #29
 8001e70:	d500      	bpl.n	8001e74 <HAL_RCC_OscConfig+0x98>
 8001e72:	e108      	b.n	8002086 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	069b      	lsls	r3, r3, #26
 8001e78:	d500      	bpl.n	8001e7c <HAL_RCC_OscConfig+0xa0>
 8001e7a:	e18d      	b.n	8002198 <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d000      	beq.n	8001e84 <HAL_RCC_OscConfig+0xa8>
 8001e82:	e1bc      	b.n	80021fe <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8001e84:	2000      	movs	r0, #0
 8001e86:	e7af      	b.n	8001de8 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e88:	2e08      	cmp	r6, #8
 8001e8a:	d004      	beq.n	8001e96 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e8c:	2e0c      	cmp	r6, #12
 8001e8e:	d109      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xc8>
 8001e90:	9a01      	ldr	r2, [sp, #4]
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	039b      	lsls	r3, r3, #14
 8001e9a:	d5b3      	bpl.n	8001e04 <HAL_RCC_OscConfig+0x28>
 8001e9c:	686b      	ldr	r3, [r5, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1b0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x28>
 8001ea2:	e7a0      	b.n	8001de6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea4:	686a      	ldr	r2, [r5, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d111      	bne.n	8001ece <HAL_RCC_OscConfig+0xf2>
 8001eaa:	6822      	ldr	r2, [r4, #0]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fa6c 	bl	800138c <HAL_GetTick>
 8001eb4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	0292      	lsls	r2, r2, #10
 8001ebc:	4213      	tst	r3, r2
 8001ebe:	d1a1      	bne.n	8001e04 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fa64 	bl	800138c <HAL_GetTick>
 8001ec4:	1bc0      	subs	r0, r0, r7
 8001ec6:	2864      	cmp	r0, #100	; 0x64
 8001ec8:	d9f5      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8001eca:	2003      	movs	r0, #3
 8001ecc:	e78c      	b.n	8001de8 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ece:	21a0      	movs	r1, #160	; 0xa0
 8001ed0:	02c9      	lsls	r1, r1, #11
 8001ed2:	428a      	cmp	r2, r1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x106>
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	6821      	ldr	r1, [r4, #0]
 8001eda:	02d2      	lsls	r2, r2, #11
 8001edc:	430a      	orrs	r2, r1
 8001ede:	6022      	str	r2, [r4, #0]
 8001ee0:	e7e3      	b.n	8001eaa <HAL_RCC_OscConfig+0xce>
 8001ee2:	6821      	ldr	r1, [r4, #0]
 8001ee4:	4884      	ldr	r0, [pc, #528]	; (80020f8 <HAL_RCC_OscConfig+0x31c>)
 8001ee6:	4001      	ands	r1, r0
 8001ee8:	6021      	str	r1, [r4, #0]
 8001eea:	6821      	ldr	r1, [r4, #0]
 8001eec:	400b      	ands	r3, r1
 8001eee:	9305      	str	r3, [sp, #20]
 8001ef0:	9b05      	ldr	r3, [sp, #20]
 8001ef2:	4982      	ldr	r1, [pc, #520]	; (80020fc <HAL_RCC_OscConfig+0x320>)
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	d1d8      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8001efe:	f7ff fa45 	bl	800138c <HAL_GetTick>
 8001f02:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	0292      	lsls	r2, r2, #10
 8001f0a:	4213      	tst	r3, r2
 8001f0c:	d100      	bne.n	8001f10 <HAL_RCC_OscConfig+0x134>
 8001f0e:	e779      	b.n	8001e04 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fa3c 	bl	800138c <HAL_GetTick>
 8001f14:	1bc0      	subs	r0, r0, r7
 8001f16:	2864      	cmp	r0, #100	; 0x64
 8001f18:	d9f4      	bls.n	8001f04 <HAL_RCC_OscConfig+0x128>
 8001f1a:	e7d6      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001f1c:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1e:	2e04      	cmp	r6, #4
 8001f20:	d004      	beq.n	8001f2c <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f22:	2e0c      	cmp	r6, #12
 8001f24:	d125      	bne.n	8001f72 <HAL_RCC_OscConfig+0x196>
 8001f26:	9b01      	ldr	r3, [sp, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d122      	bne.n	8001f72 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	075b      	lsls	r3, r3, #29
 8001f30:	d502      	bpl.n	8001f38 <HAL_RCC_OscConfig+0x15c>
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	d100      	bne.n	8001f38 <HAL_RCC_OscConfig+0x15c>
 8001f36:	e756      	b.n	8001de6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	6861      	ldr	r1, [r4, #4]
 8001f3a:	692b      	ldr	r3, [r5, #16]
 8001f3c:	4870      	ldr	r0, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x324>)
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4001      	ands	r1, r0
 8001f42:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f44:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	438b      	bics	r3, r1
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f50:	f7ff ff08 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001f54:	68e3      	ldr	r3, [r4, #12]
 8001f56:	4a66      	ldr	r2, [pc, #408]	; (80020f0 <HAL_RCC_OscConfig+0x314>)
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	0f1b      	lsrs	r3, r3, #28
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	40d8      	lsrs	r0, r3
 8001f60:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_RCC_OscConfig+0x318>)
 8001f62:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff f9cd 	bl	8001304 <HAL_InitTick>
      if(status != HAL_OK)
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	d100      	bne.n	8001f70 <HAL_RCC_OscConfig+0x194>
 8001f6e:	e74d      	b.n	8001e0c <HAL_RCC_OscConfig+0x30>
 8001f70:	e73a      	b.n	8001de8 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f72:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d018      	beq.n	8001faa <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f78:	2109      	movs	r1, #9
 8001f7a:	438b      	bics	r3, r1
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f80:	f7ff fa04 	bl	800138c <HAL_GetTick>
 8001f84:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f86:	2204      	movs	r2, #4
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	4213      	tst	r3, r2
 8001f8c:	d007      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	6862      	ldr	r2, [r4, #4]
 8001f90:	692b      	ldr	r3, [r5, #16]
 8001f92:	495b      	ldr	r1, [pc, #364]	; (8002100 <HAL_RCC_OscConfig+0x324>)
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	400a      	ands	r2, r1
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	6063      	str	r3, [r4, #4]
 8001f9c:	e736      	b.n	8001e0c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff f9f5 	bl	800138c <HAL_GetTick>
 8001fa2:	1bc0      	subs	r0, r0, r7
 8001fa4:	2802      	cmp	r0, #2
 8001fa6:	d9ee      	bls.n	8001f86 <HAL_RCC_OscConfig+0x1aa>
 8001fa8:	e78f      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8001faa:	2201      	movs	r2, #1
 8001fac:	4393      	bics	r3, r2
 8001fae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f9ec 	bl	800138c <HAL_GetTick>
 8001fb4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	4213      	tst	r3, r2
 8001fbc:	d100      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1e4>
 8001fbe:	e725      	b.n	8001e0c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f9e4 	bl	800138c <HAL_GetTick>
 8001fc4:	1bc0      	subs	r0, r0, r7
 8001fc6:	2802      	cmp	r0, #2
 8001fc8:	d9f5      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1da>
 8001fca:	e77e      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fcc:	69eb      	ldr	r3, [r5, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f9d6 	bl	800138c <HAL_GetTick>
 8001fe0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	0092      	lsls	r2, r2, #2
 8001fe8:	4213      	tst	r3, r2
 8001fea:	d00d      	beq.n	8002008 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fec:	6863      	ldr	r3, [r4, #4]
 8001fee:	4a3f      	ldr	r2, [pc, #252]	; (80020ec <HAL_RCC_OscConfig+0x310>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff8:	6862      	ldr	r2, [r4, #4]
 8001ffa:	6a2b      	ldr	r3, [r5, #32]
 8001ffc:	0212      	lsls	r2, r2, #8
 8001ffe:	061b      	lsls	r3, r3, #24
 8002000:	0a12      	lsrs	r2, r2, #8
 8002002:	4313      	orrs	r3, r2
 8002004:	6063      	str	r3, [r4, #4]
 8002006:	e72d      	b.n	8001e64 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002008:	f7ff f9c0 	bl	800138c <HAL_GetTick>
 800200c:	1bc0      	subs	r0, r0, r7
 800200e:	2802      	cmp	r0, #2
 8002010:	d9e7      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x206>
 8002012:	e75a      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	4a3b      	ldr	r2, [pc, #236]	; (8002104 <HAL_RCC_OscConfig+0x328>)
 8002018:	4013      	ands	r3, r2
 800201a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800201c:	f7ff f9b6 	bl	800138c <HAL_GetTick>
 8002020:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	0092      	lsls	r2, r2, #2
 8002028:	4213      	tst	r3, r2
 800202a:	d100      	bne.n	800202e <HAL_RCC_OscConfig+0x252>
 800202c:	e71a      	b.n	8001e64 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800202e:	f7ff f9ad 	bl	800138c <HAL_GetTick>
 8002032:	1bc0      	subs	r0, r0, r7
 8002034:	2802      	cmp	r0, #2
 8002036:	d9f4      	bls.n	8002022 <HAL_RCC_OscConfig+0x246>
 8002038:	e747      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203a:	696a      	ldr	r2, [r5, #20]
 800203c:	2301      	movs	r3, #1
 800203e:	2a00      	cmp	r2, #0
 8002040:	d010      	beq.n	8002064 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8002042:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002044:	4313      	orrs	r3, r2
 8002046:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002048:	f7ff f9a0 	bl	800138c <HAL_GetTick>
 800204c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204e:	2202      	movs	r2, #2
 8002050:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002052:	4213      	tst	r3, r2
 8002054:	d000      	beq.n	8002058 <HAL_RCC_OscConfig+0x27c>
 8002056:	e709      	b.n	8001e6c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002058:	f7ff f998 	bl	800138c <HAL_GetTick>
 800205c:	1bc0      	subs	r0, r0, r7
 800205e:	2802      	cmp	r0, #2
 8002060:	d9f5      	bls.n	800204e <HAL_RCC_OscConfig+0x272>
 8002062:	e732      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8002064:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002066:	439a      	bics	r2, r3
 8002068:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800206a:	f7ff f98f 	bl	800138c <HAL_GetTick>
 800206e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002070:	2202      	movs	r2, #2
 8002072:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002074:	4213      	tst	r3, r2
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0x29e>
 8002078:	e6f8      	b.n	8001e6c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff f987 	bl	800138c <HAL_GetTick>
 800207e:	1bc0      	subs	r0, r0, r7
 8002080:	2802      	cmp	r0, #2
 8002082:	d9f5      	bls.n	8002070 <HAL_RCC_OscConfig+0x294>
 8002084:	e721      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002088:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800208c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800208e:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002090:	421a      	tst	r2, r3
 8002092:	d104      	bne.n	800209e <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002094:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002096:	4313      	orrs	r3, r2
 8002098:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	4f19      	ldr	r7, [pc, #100]	; (8002108 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	0052      	lsls	r2, r2, #1
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4213      	tst	r3, r2
 80020a8:	d008      	beq.n	80020bc <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020aa:	2280      	movs	r2, #128	; 0x80
 80020ac:	68ab      	ldr	r3, [r5, #8]
 80020ae:	0052      	lsls	r2, r2, #1
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d12b      	bne.n	800210c <HAL_RCC_OscConfig+0x330>
 80020b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80020b6:	4313      	orrs	r3, r2
 80020b8:	6523      	str	r3, [r4, #80]	; 0x50
 80020ba:	e04c      	b.n	8002156 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	4313      	orrs	r3, r2
 80020c4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80020c6:	f7ff f961 	bl	800138c <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80020ce:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	9303      	str	r3, [sp, #12]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	9a03      	ldr	r2, [sp, #12]
 80020d6:	4213      	tst	r3, r2
 80020d8:	d1e7      	bne.n	80020aa <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7ff f957 	bl	800138c <HAL_GetTick>
 80020de:	9b02      	ldr	r3, [sp, #8]
 80020e0:	1ac0      	subs	r0, r0, r3
 80020e2:	2864      	cmp	r0, #100	; 0x64
 80020e4:	d9f5      	bls.n	80020d2 <HAL_RCC_OscConfig+0x2f6>
 80020e6:	e6f0      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
 80020e8:	40021000 	.word	0x40021000
 80020ec:	ffff1fff 	.word	0xffff1fff
 80020f0:	08005b5b 	.word	0x08005b5b
 80020f4:	2000000c 	.word	0x2000000c
 80020f8:	fffeffff 	.word	0xfffeffff
 80020fc:	fffbffff 	.word	0xfffbffff
 8002100:	ffffe0ff 	.word	0xffffe0ff
 8002104:	fffffeff 	.word	0xfffffeff
 8002108:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210c:	2b00      	cmp	r3, #0
 800210e:	d116      	bne.n	800213e <HAL_RCC_OscConfig+0x362>
 8002110:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002112:	4a6c      	ldr	r2, [pc, #432]	; (80022c4 <HAL_RCC_OscConfig+0x4e8>)
 8002114:	4013      	ands	r3, r2
 8002116:	6523      	str	r3, [r4, #80]	; 0x50
 8002118:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800211a:	4a6b      	ldr	r2, [pc, #428]	; (80022c8 <HAL_RCC_OscConfig+0x4ec>)
 800211c:	4013      	ands	r3, r2
 800211e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002120:	f7ff f934 	bl	800138c <HAL_GetTick>
 8002124:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4213      	tst	r3, r2
 800212e:	d02a      	beq.n	8002186 <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7ff f92c 	bl	800138c <HAL_GetTick>
 8002134:	4b65      	ldr	r3, [pc, #404]	; (80022cc <HAL_RCC_OscConfig+0x4f0>)
 8002136:	1bc0      	subs	r0, r0, r7
 8002138:	4298      	cmp	r0, r3
 800213a:	d9f4      	bls.n	8002126 <HAL_RCC_OscConfig+0x34a>
 800213c:	e6c5      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213e:	21a0      	movs	r1, #160	; 0xa0
 8002140:	00c9      	lsls	r1, r1, #3
 8002142:	428b      	cmp	r3, r1
 8002144:	d10b      	bne.n	800215e <HAL_RCC_OscConfig+0x382>
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	430b      	orrs	r3, r1
 800214e:	6523      	str	r3, [r4, #80]	; 0x50
 8002150:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002152:	431a      	orrs	r2, r3
 8002154:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002156:	f7ff f919 	bl	800138c <HAL_GetTick>
 800215a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800215c:	e00e      	b.n	800217c <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002160:	4a58      	ldr	r2, [pc, #352]	; (80022c4 <HAL_RCC_OscConfig+0x4e8>)
 8002162:	4013      	ands	r3, r2
 8002164:	6523      	str	r3, [r4, #80]	; 0x50
 8002166:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002168:	4a57      	ldr	r2, [pc, #348]	; (80022c8 <HAL_RCC_OscConfig+0x4ec>)
 800216a:	4013      	ands	r3, r2
 800216c:	e7a4      	b.n	80020b8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7ff f90d 	bl	800138c <HAL_GetTick>
 8002172:	4b56      	ldr	r3, [pc, #344]	; (80022cc <HAL_RCC_OscConfig+0x4f0>)
 8002174:	1bc0      	subs	r0, r0, r7
 8002176:	4298      	cmp	r0, r3
 8002178:	d900      	bls.n	800217c <HAL_RCC_OscConfig+0x3a0>
 800217a:	e6a6      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	4213      	tst	r3, r2
 8002184:	d0f3      	beq.n	800216e <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8002186:	9b01      	ldr	r3, [sp, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d000      	beq.n	800218e <HAL_RCC_OscConfig+0x3b2>
 800218c:	e672      	b.n	8001e74 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002190:	4a4f      	ldr	r2, [pc, #316]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	4013      	ands	r3, r2
 8002194:	63a3      	str	r3, [r4, #56]	; 0x38
 8002196:	e66d      	b.n	8001e74 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002198:	69a9      	ldr	r1, [r5, #24]
 800219a:	2301      	movs	r3, #1
 800219c:	4a4d      	ldr	r2, [pc, #308]	; (80022d4 <HAL_RCC_OscConfig+0x4f8>)
 800219e:	2900      	cmp	r1, #0
 80021a0:	d018      	beq.n	80021d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 80021a2:	68a1      	ldr	r1, [r4, #8]
 80021a4:	4319      	orrs	r1, r3
 80021a6:	60a1      	str	r1, [r4, #8]
 80021a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021aa:	430b      	orrs	r3, r1
 80021ac:	6363      	str	r3, [r4, #52]	; 0x34
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	6a11      	ldr	r1, [r2, #32]
 80021b2:	019b      	lsls	r3, r3, #6
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80021b8:	f7ff f8e8 	bl	800138c <HAL_GetTick>
 80021bc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021be:	2202      	movs	r2, #2
 80021c0:	68a3      	ldr	r3, [r4, #8]
 80021c2:	4213      	tst	r3, r2
 80021c4:	d000      	beq.n	80021c8 <HAL_RCC_OscConfig+0x3ec>
 80021c6:	e659      	b.n	8001e7c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c8:	f7ff f8e0 	bl	800138c <HAL_GetTick>
 80021cc:	1bc0      	subs	r0, r0, r7
 80021ce:	2802      	cmp	r0, #2
 80021d0:	d9f5      	bls.n	80021be <HAL_RCC_OscConfig+0x3e2>
 80021d2:	e67a      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 80021d4:	68a1      	ldr	r1, [r4, #8]
 80021d6:	4399      	bics	r1, r3
 80021d8:	60a1      	str	r1, [r4, #8]
 80021da:	6a13      	ldr	r3, [r2, #32]
 80021dc:	493e      	ldr	r1, [pc, #248]	; (80022d8 <HAL_RCC_OscConfig+0x4fc>)
 80021de:	400b      	ands	r3, r1
 80021e0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80021e2:	f7ff f8d3 	bl	800138c <HAL_GetTick>
 80021e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021e8:	2202      	movs	r2, #2
 80021ea:	68a3      	ldr	r3, [r4, #8]
 80021ec:	4213      	tst	r3, r2
 80021ee:	d100      	bne.n	80021f2 <HAL_RCC_OscConfig+0x416>
 80021f0:	e644      	b.n	8001e7c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f2:	f7ff f8cb 	bl	800138c <HAL_GetTick>
 80021f6:	1bc0      	subs	r0, r0, r7
 80021f8:	2802      	cmp	r0, #2
 80021fa:	d9f5      	bls.n	80021e8 <HAL_RCC_OscConfig+0x40c>
 80021fc:	e665      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fe:	2e0c      	cmp	r6, #12
 8002200:	d043      	beq.n	800228a <HAL_RCC_OscConfig+0x4ae>
 8002202:	4a36      	ldr	r2, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	2b02      	cmp	r3, #2
 8002206:	d12e      	bne.n	8002266 <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 8002208:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800220a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800220c:	4013      	ands	r3, r2
 800220e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002210:	f7ff f8bc 	bl	800138c <HAL_GetTick>
 8002214:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002216:	04b6      	lsls	r6, r6, #18
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	4233      	tst	r3, r6
 800221c:	d11d      	bne.n	800225a <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002220:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002222:	68e2      	ldr	r2, [r4, #12]
 8002224:	430b      	orrs	r3, r1
 8002226:	492e      	ldr	r1, [pc, #184]	; (80022e0 <HAL_RCC_OscConfig+0x504>)
 8002228:	400a      	ands	r2, r1
 800222a:	4313      	orrs	r3, r2
 800222c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800222e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002230:	4313      	orrs	r3, r2
 8002232:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	6822      	ldr	r2, [r4, #0]
 8002238:	045b      	lsls	r3, r3, #17
 800223a:	4313      	orrs	r3, r2
 800223c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800223e:	f7ff f8a5 	bl	800138c <HAL_GetTick>
 8002242:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002244:	04ad      	lsls	r5, r5, #18
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	422b      	tst	r3, r5
 800224a:	d000      	beq.n	800224e <HAL_RCC_OscConfig+0x472>
 800224c:	e61a      	b.n	8001e84 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff f89d 	bl	800138c <HAL_GetTick>
 8002252:	1b80      	subs	r0, r0, r6
 8002254:	2802      	cmp	r0, #2
 8002256:	d9f6      	bls.n	8002246 <HAL_RCC_OscConfig+0x46a>
 8002258:	e637      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff f897 	bl	800138c <HAL_GetTick>
 800225e:	1bc0      	subs	r0, r0, r7
 8002260:	2802      	cmp	r0, #2
 8002262:	d9d9      	bls.n	8002218 <HAL_RCC_OscConfig+0x43c>
 8002264:	e631      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8002266:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002268:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800226a:	4013      	ands	r3, r2
 800226c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800226e:	f7ff f88d 	bl	800138c <HAL_GetTick>
 8002272:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002274:	04ad      	lsls	r5, r5, #18
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	422b      	tst	r3, r5
 800227a:	d100      	bne.n	800227e <HAL_RCC_OscConfig+0x4a2>
 800227c:	e602      	b.n	8001e84 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff f885 	bl	800138c <HAL_GetTick>
 8002282:	1b80      	subs	r0, r0, r6
 8002284:	2802      	cmp	r0, #2
 8002286:	d9f6      	bls.n	8002276 <HAL_RCC_OscConfig+0x49a>
 8002288:	e61f      	b.n	8001eca <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 800228a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	2b01      	cmp	r3, #1
 800228e:	d100      	bne.n	8002292 <HAL_RCC_OscConfig+0x4b6>
 8002290:	e5aa      	b.n	8001de8 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002294:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002298:	0252      	lsls	r2, r2, #9
 800229a:	401a      	ands	r2, r3
        return HAL_ERROR;
 800229c:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	428a      	cmp	r2, r1
 80022a0:	d000      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4c8>
 80022a2:	e5a1      	b.n	8001de8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022a4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022a8:	0392      	lsls	r2, r2, #14
 80022aa:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ac:	428a      	cmp	r2, r1
 80022ae:	d000      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4d6>
 80022b0:	e59a      	b.n	8001de8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022b2:	20c0      	movs	r0, #192	; 0xc0
 80022b4:	0400      	lsls	r0, r0, #16
 80022b6:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022b8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80022ba:	1a18      	subs	r0, r3, r0
 80022bc:	1e43      	subs	r3, r0, #1
 80022be:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80022c0:	b2c0      	uxtb	r0, r0
 80022c2:	e591      	b.n	8001de8 <HAL_RCC_OscConfig+0xc>
 80022c4:	fffffeff 	.word	0xfffffeff
 80022c8:	fffffbff 	.word	0xfffffbff
 80022cc:	00001388 	.word	0x00001388
 80022d0:	efffffff 	.word	0xefffffff
 80022d4:	40010000 	.word	0x40010000
 80022d8:	ffffdfff 	.word	0xffffdfff
 80022dc:	feffffff 	.word	0xfeffffff
 80022e0:	ff02ffff 	.word	0xff02ffff

080022e4 <HAL_RCC_ClockConfig>:
{
 80022e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022e6:	1e06      	subs	r6, r0, #0
 80022e8:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80022ec:	2001      	movs	r0, #1
}
 80022ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	2201      	movs	r2, #1
 80022f2:	4c51      	ldr	r4, [pc, #324]	; (8002438 <HAL_RCC_ClockConfig+0x154>)
 80022f4:	9901      	ldr	r1, [sp, #4]
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	4013      	ands	r3, r2
 80022fa:	428b      	cmp	r3, r1
 80022fc:	d327      	bcc.n	800234e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fe:	6832      	ldr	r2, [r6, #0]
 8002300:	0793      	lsls	r3, r2, #30
 8002302:	d42f      	bmi.n	8002364 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002304:	07d3      	lsls	r3, r2, #31
 8002306:	d435      	bmi.n	8002374 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	2301      	movs	r3, #1
 800230a:	6822      	ldr	r2, [r4, #0]
 800230c:	9901      	ldr	r1, [sp, #4]
 800230e:	401a      	ands	r2, r3
 8002310:	4291      	cmp	r1, r2
 8002312:	d200      	bcs.n	8002316 <HAL_RCC_ClockConfig+0x32>
 8002314:	e081      	b.n	800241a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002316:	6832      	ldr	r2, [r6, #0]
 8002318:	4c48      	ldr	r4, [pc, #288]	; (800243c <HAL_RCC_ClockConfig+0x158>)
 800231a:	0753      	lsls	r3, r2, #29
 800231c:	d500      	bpl.n	8002320 <HAL_RCC_ClockConfig+0x3c>
 800231e:	e084      	b.n	800242a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	0713      	lsls	r3, r2, #28
 8002322:	d506      	bpl.n	8002332 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002324:	68e2      	ldr	r2, [r4, #12]
 8002326:	6933      	ldr	r3, [r6, #16]
 8002328:	4945      	ldr	r1, [pc, #276]	; (8002440 <HAL_RCC_ClockConfig+0x15c>)
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	400a      	ands	r2, r1
 800232e:	4313      	orrs	r3, r2
 8002330:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002332:	f7ff fd17 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8002336:	68e3      	ldr	r3, [r4, #12]
 8002338:	4a42      	ldr	r2, [pc, #264]	; (8002444 <HAL_RCC_ClockConfig+0x160>)
 800233a:	061b      	lsls	r3, r3, #24
 800233c:	0f1b      	lsrs	r3, r3, #28
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	40d8      	lsrs	r0, r3
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_RCC_ClockConfig+0x164>)
 8002344:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe ffdc 	bl	8001304 <HAL_InitTick>
 800234c:	e7cf      	b.n	80022ee <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	9901      	ldr	r1, [sp, #4]
 8002352:	4393      	bics	r3, r2
 8002354:	430b      	orrs	r3, r1
 8002356:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	4013      	ands	r3, r2
 800235c:	9a01      	ldr	r2, [sp, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d1c4      	bne.n	80022ec <HAL_RCC_ClockConfig+0x8>
 8002362:	e7cc      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	20f0      	movs	r0, #240	; 0xf0
 8002366:	4935      	ldr	r1, [pc, #212]	; (800243c <HAL_RCC_ClockConfig+0x158>)
 8002368:	68cb      	ldr	r3, [r1, #12]
 800236a:	4383      	bics	r3, r0
 800236c:	68b0      	ldr	r0, [r6, #8]
 800236e:	4303      	orrs	r3, r0
 8002370:	60cb      	str	r3, [r1, #12]
 8002372:	e7c7      	b.n	8002304 <HAL_RCC_ClockConfig+0x20>
 8002374:	4d31      	ldr	r5, [pc, #196]	; (800243c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002376:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002378:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237a:	2a02      	cmp	r2, #2
 800237c:	d119      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800237e:	039b      	lsls	r3, r3, #14
 8002380:	d5b4      	bpl.n	80022ec <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002382:	2103      	movs	r1, #3
 8002384:	68eb      	ldr	r3, [r5, #12]
 8002386:	438b      	bics	r3, r1
 8002388:	4313      	orrs	r3, r2
 800238a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800238c:	f7fe fffe 	bl	800138c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002390:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002392:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002394:	2b02      	cmp	r3, #2
 8002396:	d119      	bne.n	80023cc <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002398:	220c      	movs	r2, #12
 800239a:	68eb      	ldr	r3, [r5, #12]
 800239c:	4013      	ands	r3, r2
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d0b2      	beq.n	8002308 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a2:	f7fe fff3 	bl	800138c <HAL_GetTick>
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_RCC_ClockConfig+0x168>)
 80023a8:	1bc0      	subs	r0, r0, r7
 80023aa:	4298      	cmp	r0, r3
 80023ac:	d9f4      	bls.n	8002398 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80023ae:	2003      	movs	r0, #3
 80023b0:	e79d      	b.n	80022ee <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	2a03      	cmp	r2, #3
 80023b4:	d102      	bne.n	80023bc <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023b6:	019b      	lsls	r3, r3, #6
 80023b8:	d4e3      	bmi.n	8002382 <HAL_RCC_ClockConfig+0x9e>
 80023ba:	e797      	b.n	80022ec <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023bc:	2a01      	cmp	r2, #1
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c0:	075b      	lsls	r3, r3, #29
 80023c2:	d4de      	bmi.n	8002382 <HAL_RCC_ClockConfig+0x9e>
 80023c4:	e792      	b.n	80022ec <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023c6:	059b      	lsls	r3, r3, #22
 80023c8:	d4db      	bmi.n	8002382 <HAL_RCC_ClockConfig+0x9e>
 80023ca:	e78f      	b.n	80022ec <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d0:	220c      	movs	r2, #12
 80023d2:	68eb      	ldr	r3, [r5, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d096      	beq.n	8002308 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023da:	f7fe ffd7 	bl	800138c <HAL_GetTick>
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_ClockConfig+0x168>)
 80023e0:	1bc0      	subs	r0, r0, r7
 80023e2:	4298      	cmp	r0, r3
 80023e4:	d9f4      	bls.n	80023d0 <HAL_RCC_ClockConfig+0xec>
 80023e6:	e7e2      	b.n	80023ae <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d010      	beq.n	800240e <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023ec:	220c      	movs	r2, #12
 80023ee:	68eb      	ldr	r3, [r5, #12]
 80023f0:	4213      	tst	r3, r2
 80023f2:	d089      	beq.n	8002308 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe ffca 	bl	800138c <HAL_GetTick>
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_RCC_ClockConfig+0x168>)
 80023fa:	1bc0      	subs	r0, r0, r7
 80023fc:	4298      	cmp	r0, r3
 80023fe:	d9f5      	bls.n	80023ec <HAL_RCC_ClockConfig+0x108>
 8002400:	e7d5      	b.n	80023ae <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002402:	f7fe ffc3 	bl	800138c <HAL_GetTick>
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_ClockConfig+0x168>)
 8002408:	1bc0      	subs	r0, r0, r7
 800240a:	4298      	cmp	r0, r3
 800240c:	d8cf      	bhi.n	80023ae <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800240e:	220c      	movs	r2, #12
 8002410:	68eb      	ldr	r3, [r5, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b04      	cmp	r3, #4
 8002416:	d1f4      	bne.n	8002402 <HAL_RCC_ClockConfig+0x11e>
 8002418:	e776      	b.n	8002308 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	439a      	bics	r2, r3
 800241e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	421a      	tst	r2, r3
 8002424:	d000      	beq.n	8002428 <HAL_RCC_ClockConfig+0x144>
 8002426:	e761      	b.n	80022ec <HAL_RCC_ClockConfig+0x8>
 8002428:	e775      	b.n	8002316 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242a:	68e3      	ldr	r3, [r4, #12]
 800242c:	4908      	ldr	r1, [pc, #32]	; (8002450 <HAL_RCC_ClockConfig+0x16c>)
 800242e:	400b      	ands	r3, r1
 8002430:	68f1      	ldr	r1, [r6, #12]
 8002432:	430b      	orrs	r3, r1
 8002434:	60e3      	str	r3, [r4, #12]
 8002436:	e773      	b.n	8002320 <HAL_RCC_ClockConfig+0x3c>
 8002438:	40022000 	.word	0x40022000
 800243c:	40021000 	.word	0x40021000
 8002440:	ffffc7ff 	.word	0xffffc7ff
 8002444:	08005b5b 	.word	0x08005b5b
 8002448:	2000000c 	.word	0x2000000c
 800244c:	00001388 	.word	0x00001388
 8002450:	fffff8ff 	.word	0xfffff8ff

08002454 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	055b      	lsls	r3, r3, #21
 800245c:	0f5b      	lsrs	r3, r3, #29
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	4a03      	ldr	r2, [pc, #12]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002462:	6810      	ldr	r0, [r2, #0]
 8002464:	40d8      	lsrs	r0, r3
}
 8002466:	4770      	bx	lr
 8002468:	40021000 	.word	0x40021000
 800246c:	08005b6b 	.word	0x08005b6b
 8002470:	2000000c 	.word	0x2000000c

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	049b      	lsls	r3, r3, #18
 800247c:	0f5b      	lsrs	r3, r3, #29
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	4a03      	ldr	r2, [pc, #12]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002482:	6810      	ldr	r0, [r2, #0]
 8002484:	40d8      	lsrs	r0, r3
}
 8002486:	4770      	bx	lr
 8002488:	40021000 	.word	0x40021000
 800248c:	08005b6b 	.word	0x08005b6b
 8002490:	2000000c 	.word	0x2000000c

08002494 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002494:	2382      	movs	r3, #130	; 0x82
{
 8002496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002498:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800249a:	011b      	lsls	r3, r3, #4
{
 800249c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800249e:	421a      	tst	r2, r3
 80024a0:	d047      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80024a4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4c5f      	ldr	r4, [pc, #380]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80024a8:	055b      	lsls	r3, r3, #21
 80024aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80024ac:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	421a      	tst	r2, r3
 80024b0:	d104      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024b4:	4313      	orrs	r3, r2
 80024b6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	2780      	movs	r7, #128	; 0x80
 80024be:	4e5a      	ldr	r6, [pc, #360]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80024c0:	007f      	lsls	r7, r7, #1
 80024c2:	6833      	ldr	r3, [r6, #0]
 80024c4:	423b      	tst	r3, r7
 80024c6:	d06d      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024c8:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024ca:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024cc:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	0392      	lsls	r2, r2, #14
 80024d2:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024d4:	4010      	ands	r0, r2
 80024d6:	4283      	cmp	r3, r0
 80024d8:	d103      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80024da:	68a8      	ldr	r0, [r5, #8]
 80024dc:	4002      	ands	r2, r0
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024e2:	23c0      	movs	r3, #192	; 0xc0
 80024e4:	000a      	movs	r2, r1
 80024e6:	029b      	lsls	r3, r3, #10
 80024e8:	401a      	ands	r2, r3
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d103      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024ee:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80024f0:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024f2:	039b      	lsls	r3, r3, #14
 80024f4:	d466      	bmi.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80024f6:	22c0      	movs	r2, #192	; 0xc0
 80024f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024fa:	0292      	lsls	r2, r2, #10
 80024fc:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024fe:	d162      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002500:	6869      	ldr	r1, [r5, #4]
 8002502:	23c0      	movs	r3, #192	; 0xc0
 8002504:	000a      	movs	r2, r1
 8002506:	029b      	lsls	r3, r3, #10
 8002508:	401a      	ands	r2, r3
 800250a:	429a      	cmp	r2, r3
 800250c:	d107      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	4846      	ldr	r0, [pc, #280]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002512:	4003      	ands	r3, r0
 8002514:	20c0      	movs	r0, #192	; 0xc0
 8002516:	0380      	lsls	r0, r0, #14
 8002518:	4001      	ands	r1, r0
 800251a:	430b      	orrs	r3, r1
 800251c:	6023      	str	r3, [r4, #0]
 800251e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002520:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002522:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002524:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8002526:	2b01      	cmp	r3, #1
 8002528:	d103      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800252c:	4a40      	ldr	r2, [pc, #256]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800252e:	4013      	ands	r3, r2
 8002530:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002532:	682b      	ldr	r3, [r5, #0]
 8002534:	07da      	lsls	r2, r3, #31
 8002536:	d506      	bpl.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002538:	2003      	movs	r0, #3
 800253a:	493a      	ldr	r1, [pc, #232]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800253c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800253e:	4382      	bics	r2, r0
 8002540:	68e8      	ldr	r0, [r5, #12]
 8002542:	4302      	orrs	r2, r0
 8002544:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002546:	079a      	lsls	r2, r3, #30
 8002548:	d506      	bpl.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800254a:	200c      	movs	r0, #12
 800254c:	4935      	ldr	r1, [pc, #212]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800254e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002550:	4382      	bics	r2, r0
 8002552:	6928      	ldr	r0, [r5, #16]
 8002554:	4302      	orrs	r2, r0
 8002556:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002558:	075a      	lsls	r2, r3, #29
 800255a:	d506      	bpl.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800255c:	4931      	ldr	r1, [pc, #196]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800255e:	4835      	ldr	r0, [pc, #212]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002560:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002562:	4002      	ands	r2, r0
 8002564:	6968      	ldr	r0, [r5, #20]
 8002566:	4302      	orrs	r2, r0
 8002568:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256a:	071a      	lsls	r2, r3, #28
 800256c:	d506      	bpl.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800256e:	492d      	ldr	r1, [pc, #180]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002570:	4831      	ldr	r0, [pc, #196]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002572:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002574:	4002      	ands	r2, r0
 8002576:	69a8      	ldr	r0, [r5, #24]
 8002578:	4302      	orrs	r2, r0
 800257a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800257c:	065a      	lsls	r2, r3, #25
 800257e:	d506      	bpl.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002580:	4928      	ldr	r1, [pc, #160]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002582:	482e      	ldr	r0, [pc, #184]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002584:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002586:	4002      	ands	r2, r0
 8002588:	6a28      	ldr	r0, [r5, #32]
 800258a:	4302      	orrs	r2, r0
 800258c:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800258e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	d517      	bpl.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002596:	492a      	ldr	r1, [pc, #168]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002598:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800259a:	400b      	ands	r3, r1
 800259c:	69e9      	ldr	r1, [r5, #28]
 800259e:	430b      	orrs	r3, r1
 80025a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a2:	e00f      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a4:	6833      	ldr	r3, [r6, #0]
 80025a6:	433b      	orrs	r3, r7
 80025a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80025aa:	f7fe feef 	bl	800138c <HAL_GetTick>
 80025ae:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	423b      	tst	r3, r7
 80025b4:	d188      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe fee9 	bl	800138c <HAL_GetTick>
 80025ba:	9b01      	ldr	r3, [sp, #4]
 80025bc:	1ac0      	subs	r0, r0, r3
 80025be:	2864      	cmp	r0, #100	; 0x64
 80025c0:	d9f6      	bls.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 80025c2:	2003      	movs	r0, #3
}
 80025c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80025c6:	4011      	ands	r1, r2
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d002      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025cc:	6829      	ldr	r1, [r5, #0]
 80025ce:	0689      	lsls	r1, r1, #26
 80025d0:	d408      	bmi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80025d2:	68a9      	ldr	r1, [r5, #8]
 80025d4:	400a      	ands	r2, r1
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d100      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x148>
 80025da:	e791      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80025dc:	682b      	ldr	r3, [r5, #0]
 80025de:	051b      	lsls	r3, r3, #20
 80025e0:	d400      	bmi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80025e2:	e78d      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e4:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80025e6:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80025ea:	0312      	lsls	r2, r2, #12
 80025ec:	4302      	orrs	r2, r0
 80025ee:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f4:	4814      	ldr	r0, [pc, #80]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80025f6:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f8:	4002      	ands	r2, r0
 80025fa:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80025fc:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80025fe:	05cb      	lsls	r3, r1, #23
 8002600:	d400      	bmi.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8002602:	e77d      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8002604:	f7fe fec2 	bl	800138c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002608:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800260a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800260c:	00bf      	lsls	r7, r7, #2
 800260e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002610:	423b      	tst	r3, r7
 8002612:	d000      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002614:	e774      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe feb9 	bl	800138c <HAL_GetTick>
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800261c:	1b80      	subs	r0, r0, r6
 800261e:	4298      	cmp	r0, r3
 8002620:	d9f5      	bls.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002622:	e7ce      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8002624:	40021000 	.word	0x40021000
 8002628:	40007000 	.word	0x40007000
 800262c:	ffcfffff 	.word	0xffcfffff
 8002630:	efffffff 	.word	0xefffffff
 8002634:	fffff3ff 	.word	0xfffff3ff
 8002638:	ffffcfff 	.word	0xffffcfff
 800263c:	fbffffff 	.word	0xfbffffff
 8002640:	fff3ffff 	.word	0xfff3ffff
 8002644:	fffcffff 	.word	0xfffcffff
 8002648:	fff7ffff 	.word	0xfff7ffff
 800264c:	00001388 	.word	0x00001388

08002650 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002652:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002654:	1c45      	adds	r5, r0, #1
 8002656:	7feb      	ldrb	r3, [r5, #31]
{
 8002658:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800265a:	0038      	movs	r0, r7
 800265c:	2b01      	cmp	r3, #1
 800265e:	d024      	beq.n	80026aa <HAL_RTC_DeactivateAlarm+0x5a>
 8002660:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002662:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 8002664:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002666:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002668:	19e6      	adds	r6, r4, r7
 800266a:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
 800266e:	3a77      	subs	r2, #119	; 0x77
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002672:	32ad      	adds	r2, #173	; 0xad
 8002674:	4291      	cmp	r1, r2
 8002676:	d128      	bne.n	80026ca <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	4921      	ldr	r1, [pc, #132]	; (8002700 <HAL_RTC_DeactivateAlarm+0xb0>)
 800267c:	400a      	ands	r2, r1
 800267e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	4920      	ldr	r1, [pc, #128]	; (8002704 <HAL_RTC_DeactivateAlarm+0xb4>)
 8002684:	400a      	ands	r2, r1
 8002686:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002688:	f7fe fe80 	bl	800138c <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800268c:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 800268e:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	68df      	ldr	r7, [r3, #12]
 8002696:	9b01      	ldr	r3, [sp, #4]
 8002698:	401f      	ands	r7, r3
 800269a:	d007      	beq.n	80026ac <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800269c:	22ff      	movs	r2, #255	; 0xff
 800269e:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026a0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80026a4:	2301      	movs	r3, #1
 80026a6:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 80026a8:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 80026aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80026ac:	f7fe fe6e 	bl	800138c <HAL_GetTick>
 80026b0:	9b00      	ldr	r3, [sp, #0]
 80026b2:	1ac0      	subs	r0, r0, r3
 80026b4:	23fa      	movs	r3, #250	; 0xfa
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4298      	cmp	r0, r3
 80026ba:	d9ea      	bls.n	8002692 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026bc:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026be:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026c4:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80026c6:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 80026c8:	e7ef      	b.n	80026aa <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RTC_DeactivateAlarm+0xb8>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	490d      	ldr	r1, [pc, #52]	; (800270c <HAL_RTC_DeactivateAlarm+0xbc>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80026da:	f7fe fe57 	bl	800138c <HAL_GetTick>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80026de:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 80026e0:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	68df      	ldr	r7, [r3, #12]
 80026e6:	9b01      	ldr	r3, [sp, #4]
 80026e8:	401f      	ands	r7, r3
 80026ea:	d1d7      	bne.n	800269c <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026ec:	f7fe fe4e 	bl	800138c <HAL_GetTick>
 80026f0:	9b00      	ldr	r3, [sp, #0]
 80026f2:	1ac0      	subs	r0, r0, r3
 80026f4:	23fa      	movs	r3, #250	; 0xfa
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4298      	cmp	r0, r3
 80026fa:	d9f2      	bls.n	80026e2 <HAL_RTC_DeactivateAlarm+0x92>
 80026fc:	e7de      	b.n	80026bc <HAL_RTC_DeactivateAlarm+0x6c>
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	fffffeff 	.word	0xfffffeff
 8002704:	ffffefff 	.word	0xffffefff
 8002708:	fffffdff 	.word	0xfffffdff
 800270c:	ffffdfff 	.word	0xffffdfff

08002710 <HAL_RTC_AlarmAEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002710:	4770      	bx	lr
	...

08002714 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002714:	6803      	ldr	r3, [r0, #0]
{
 8002716:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002718:	689a      	ldr	r2, [r3, #8]
{
 800271a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800271c:	04d2      	lsls	r2, r2, #19
 800271e:	d50a      	bpl.n	8002736 <HAL_RTC_AlarmIRQHandler+0x22>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	05db      	lsls	r3, r3, #23
 8002724:	d507      	bpl.n	8002736 <HAL_RTC_AlarmIRQHandler+0x22>
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002726:	f7ff fff3 	bl	8002710 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800272a:	6821      	ldr	r1, [r4, #0]
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_RTC_AlarmIRQHandler+0x54>)
 800272e:	68ca      	ldr	r2, [r1, #12]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	4313      	orrs	r3, r2
 8002734:	60cb      	str	r3, [r1, #12]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	0492      	lsls	r2, r2, #18
 800273c:	d50b      	bpl.n	8002756 <HAL_RTC_AlarmIRQHandler+0x42>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	059b      	lsls	r3, r3, #22
 8002742:	d508      	bpl.n	8002756 <HAL_RTC_AlarmIRQHandler+0x42>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002744:	0020      	movs	r0, r4
 8002746:	f000 fabb 	bl	8002cc0 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800274a:	6821      	ldr	r1, [r4, #0]
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_RTC_AlarmIRQHandler+0x58>)
 800274e:	68ca      	ldr	r2, [r1, #12]
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	4313      	orrs	r3, r2
 8002754:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RTC_AlarmIRQHandler+0x5c>)
 800275a:	0292      	lsls	r2, r2, #10
 800275c:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 800275e:	2301      	movs	r3, #1
 8002760:	3402      	adds	r4, #2
 8002762:	77e3      	strb	r3, [r4, #31]
}
 8002764:	bd10      	pop	{r4, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	fffffe7f 	.word	0xfffffe7f
 800276c:	fffffd7f 	.word	0xfffffd7f
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002774:	21a0      	movs	r1, #160	; 0xa0
 8002776:	6802      	ldr	r2, [r0, #0]
{
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800277a:	68d3      	ldr	r3, [r2, #12]
{
 800277c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800277e:	438b      	bics	r3, r1
 8002780:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002782:	f7fe fe03 	bl	800138c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002786:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8002788:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800278a:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800278c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	422b      	tst	r3, r5
 8002794:	d001      	beq.n	800279a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002796:	2000      	movs	r0, #0
}
 8002798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800279a:	f7fe fdf7 	bl	800138c <HAL_GetTick>
 800279e:	1b80      	subs	r0, r0, r6
 80027a0:	42b8      	cmp	r0, r7
 80027a2:	d9f4      	bls.n	800278e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80027a4:	2003      	movs	r0, #3
 80027a6:	e7f7      	b.n	8002798 <HAL_RTC_WaitForSynchro+0x24>

080027a8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80027aa:	2440      	movs	r4, #64	; 0x40
 80027ac:	6803      	ldr	r3, [r0, #0]
{
 80027ae:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	4222      	tst	r2, r4
 80027b4:	d001      	beq.n	80027ba <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80027b6:	2000      	movs	r0, #0
}
 80027b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80027ba:	2201      	movs	r2, #1
 80027bc:	4252      	negs	r2, r2
 80027be:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80027c0:	f7fe fde4 	bl	800138c <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80027c4:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80027c6:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80027c8:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80027ca:	682b      	ldr	r3, [r5, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4223      	tst	r3, r4
 80027d0:	d1f1      	bne.n	80027b6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80027d2:	f7fe fddb 	bl	800138c <HAL_GetTick>
 80027d6:	1b80      	subs	r0, r0, r6
 80027d8:	42b8      	cmp	r0, r7
 80027da:	d9f6      	bls.n	80027ca <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80027dc:	2003      	movs	r0, #3
 80027de:	e7eb      	b.n	80027b8 <RTC_EnterInitMode+0x10>

080027e0 <HAL_RTC_Init>:
{
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80027e4:	2501      	movs	r5, #1
  if (hrtc == NULL)
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d01a      	beq.n	8002820 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80027ea:	1c86      	adds	r6, r0, #2
 80027ec:	7ff3      	ldrb	r3, [r6, #31]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 80027f4:	1942      	adds	r2, r0, r5
 80027f6:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 80027f8:	f000 febc 	bl	8003574 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027fc:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027fe:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002800:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002802:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002804:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
 8002808:	3a77      	subs	r2, #119	; 0x77
 800280a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800280c:	f7ff ffcc 	bl	80027a8 <RTC_EnterInitMode>
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	1e05      	subs	r5, r0, #0
 8002814:	d006      	beq.n	8002824 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800281a:	2304      	movs	r3, #4
 800281c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800281e:	2501      	movs	r5, #1
}
 8002820:	0028      	movs	r0, r5
 8002822:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	491b      	ldr	r1, [pc, #108]	; (8002894 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002828:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800282a:	400a      	ands	r2, r1
 800282c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800282e:	6862      	ldr	r2, [r4, #4]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	4302      	orrs	r2, r0
 8002834:	69a0      	ldr	r0, [r4, #24]
 8002836:	4302      	orrs	r2, r0
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800283c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800283e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002840:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002842:	68a2      	ldr	r2, [r4, #8]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	0412      	lsls	r2, r2, #16
 8002848:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800284a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800284c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	438a      	bics	r2, r1
 8002852:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002856:	397d      	subs	r1, #125	; 0x7d
 8002858:	438a      	bics	r2, r1
 800285a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800285c:	69e2      	ldr	r2, [r4, #28]
 800285e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002860:	4302      	orrs	r2, r0
 8002862:	430a      	orrs	r2, r1
 8002864:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	d40c      	bmi.n	8002886 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800286c:	0020      	movs	r0, r4
 800286e:	f7ff ff81 	bl	8002774 <HAL_RTC_WaitForSynchro>
 8002872:	2800      	cmp	r0, #0
 8002874:	d007      	beq.n	8002886 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002876:	22ff      	movs	r2, #255	; 0xff
 8002878:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 800287a:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800287c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800287e:	2304      	movs	r3, #4
 8002880:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8002882:	77e5      	strb	r5, [r4, #31]
 8002884:	e7cb      	b.n	800281e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002886:	22ff      	movs	r2, #255	; 0xff
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800288c:	2301      	movs	r3, #1
 800288e:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8002890:	e7c6      	b.n	8002820 <HAL_RTC_Init+0x40>
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	ff8fffbf 	.word	0xff8fffbf

08002898 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002898:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 800289a:	2809      	cmp	r0, #9
 800289c:	d803      	bhi.n	80028a6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4318      	orrs	r0, r3
 80028a2:	b2c0      	uxtb	r0, r0
}
 80028a4:	4770      	bx	lr
    Param -= 10U;
 80028a6:	380a      	subs	r0, #10
    bcdhigh++;
 80028a8:	3301      	adds	r3, #1
    Param -= 10U;
 80028aa:	b2c0      	uxtb	r0, r0
 80028ac:	e7f5      	b.n	800289a <RTC_ByteToBcd2+0x2>
	...

080028b0 <HAL_RTC_SetTime>:
{
 80028b0:	2302      	movs	r3, #2
 80028b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80028b4:	1c47      	adds	r7, r0, #1
{
 80028b6:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80028b8:	7ff9      	ldrb	r1, [r7, #31]
{
 80028ba:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80028bc:	001e      	movs	r6, r3
 80028be:	2901      	cmp	r1, #1
 80028c0:	d036      	beq.n	8002930 <HAL_RTC_SetTime+0x80>
 80028c2:	2101      	movs	r1, #1
 80028c4:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028c6:	18c1      	adds	r1, r0, r3
 80028c8:	77cb      	strb	r3, [r1, #31]
 80028ca:	9100      	str	r1, [sp, #0]
 80028cc:	2140      	movs	r1, #64	; 0x40
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	7866      	ldrb	r6, [r4, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	7820      	ldrb	r0, [r4, #0]
 80028d6:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 80028d8:	2a00      	cmp	r2, #0
 80028da:	d12b      	bne.n	8002934 <HAL_RTC_SetTime+0x84>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d100      	bne.n	80028e2 <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 80028e0:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80028e2:	f7ff ffd9 	bl	8002898 <RTC_ByteToBcd2>
 80028e6:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80028e8:	0030      	movs	r0, r6
 80028ea:	f7ff ffd5 	bl	8002898 <RTC_ByteToBcd2>
 80028ee:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80028f0:	78a0      	ldrb	r0, [r4, #2]
 80028f2:	f7ff ffd1 	bl	8002898 <RTC_ByteToBcd2>
 80028f6:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80028f8:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80028fa:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80028fc:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80028fe:	4318      	orrs	r0, r3
 8002900:	9b01      	ldr	r3, [sp, #4]
 8002902:	041b      	lsls	r3, r3, #16
 8002904:	4318      	orrs	r0, r3
 8002906:	4330      	orrs	r0, r6
 8002908:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800290a:	22ca      	movs	r2, #202	; 0xca
 800290c:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800290e:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
 8002912:	3a77      	subs	r2, #119	; 0x77
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002916:	f7ff ff47 	bl	80027a8 <RTC_EnterInitMode>
 800291a:	682b      	ldr	r3, [r5, #0]
 800291c:	1e06      	subs	r6, r0, #0
 800291e:	d016      	beq.n	800294e <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002924:	2304      	movs	r3, #4
 8002926:	9a00      	ldr	r2, [sp, #0]
 8002928:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800292a:	2300      	movs	r3, #0
 800292c:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800292e:	2601      	movs	r6, #1
}
 8002930:	0030      	movs	r0, r6
 8002932:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002934:	2b00      	cmp	r3, #0
 8002936:	d100      	bne.n	800293a <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 8002938:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800293a:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800293c:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800293e:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 8002940:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002942:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002944:	78e0      	ldrb	r0, [r4, #3]
 8002946:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002948:	4306      	orrs	r6, r0
 800294a:	9601      	str	r6, [sp, #4]
 800294c:	e7dd      	b.n	800290a <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800294e:	4815      	ldr	r0, [pc, #84]	; (80029a4 <HAL_RTC_SetTime+0xf4>)
 8002950:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002952:	4915      	ldr	r1, [pc, #84]	; (80029a8 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002954:	4002      	ands	r2, r0
 8002956:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002958:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800295a:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800295c:	400a      	ands	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002960:	68e2      	ldr	r2, [r4, #12]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	4302      	orrs	r2, r0
 8002966:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002968:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800296a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	438a      	bics	r2, r1
 8002970:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	069b      	lsls	r3, r3, #26
 8002976:	d40c      	bmi.n	8002992 <HAL_RTC_SetTime+0xe2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002978:	0028      	movs	r0, r5
 800297a:	f7ff fefb 	bl	8002774 <HAL_RTC_WaitForSynchro>
 800297e:	2800      	cmp	r0, #0
 8002980:	d007      	beq.n	8002992 <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002982:	22ff      	movs	r2, #255	; 0xff
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002988:	2304      	movs	r3, #4
 800298a:	9a00      	ldr	r2, [sp, #0]
 800298c:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800298e:	77fe      	strb	r6, [r7, #31]
 8002990:	e7cd      	b.n	800292e <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	682b      	ldr	r3, [r5, #0]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002998:	2301      	movs	r3, #1
 800299a:	9a00      	ldr	r2, [sp, #0]
 800299c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800299e:	2300      	movs	r3, #0
 80029a0:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80029a2:	e7c5      	b.n	8002930 <HAL_RTC_SetTime+0x80>
 80029a4:	007f7f7f 	.word	0x007f7f7f
 80029a8:	fffbffff 	.word	0xfffbffff

080029ac <HAL_RTC_SetDate>:
{
 80029ac:	2302      	movs	r3, #2
 80029ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80029b0:	1c47      	adds	r7, r0, #1
{
 80029b2:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80029b4:	7ff9      	ldrb	r1, [r7, #31]
{
 80029b6:	b085      	sub	sp, #20
 80029b8:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80029ba:	001e      	movs	r6, r3
 80029bc:	2901      	cmp	r1, #1
 80029be:	d035      	beq.n	8002a2c <HAL_RTC_SetDate+0x80>
 80029c0:	2101      	movs	r1, #1
 80029c2:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029c4:	18c1      	adds	r1, r0, r3
 80029c6:	9101      	str	r1, [sp, #4]
 80029c8:	77cb      	strb	r3, [r1, #31]
 80029ca:	786b      	ldrb	r3, [r5, #1]
 80029cc:	78e8      	ldrb	r0, [r5, #3]
 80029ce:	78ae      	ldrb	r6, [r5, #2]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029d0:	2a00      	cmp	r2, #0
 80029d2:	d14e      	bne.n	8002a72 <HAL_RTC_SetDate+0xc6>
 80029d4:	3210      	adds	r2, #16
 80029d6:	4213      	tst	r3, r2
 80029d8:	d002      	beq.n	80029e0 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029da:	4393      	bics	r3, r2
 80029dc:	330a      	adds	r3, #10
 80029de:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029e0:	f7ff ff5a 	bl	8002898 <RTC_ByteToBcd2>
 80029e4:	9002      	str	r0, [sp, #8]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80029e6:	7868      	ldrb	r0, [r5, #1]
 80029e8:	f7ff ff56 	bl	8002898 <RTC_ByteToBcd2>
 80029ec:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80029ee:	0030      	movs	r0, r6
 80029f0:	f7ff ff52 	bl	8002898 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029f4:	9b02      	ldr	r3, [sp, #8]
                  ((uint32_t)sDate->WeekDay << 13U));
 80029f6:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029f8:	041e      	lsls	r6, r3, #16
                  ((uint32_t)sDate->WeekDay << 13U));
 80029fa:	036d      	lsls	r5, r5, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80029fc:	9b03      	ldr	r3, [sp, #12]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029fe:	4305      	orrs	r5, r0
 8002a00:	4335      	orrs	r5, r6
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a02:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a04:	22ca      	movs	r2, #202	; 0xca
 8002a06:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a08:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8002a0c:	3a77      	subs	r2, #119	; 0x77
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a10:	f7ff feca 	bl	80027a8 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a14:	4335      	orrs	r5, r6
 8002a16:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a18:	1e06      	subs	r6, r0, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a20:	2304      	movs	r3, #4
 8002a22:	9a01      	ldr	r2, [sp, #4]
 8002a24:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002a26:	2300      	movs	r3, #0
 8002a28:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8002a2a:	2601      	movs	r6, #1
}
 8002a2c:	0030      	movs	r0, r6
 8002a2e:	b005      	add	sp, #20
 8002a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a32:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a34:	4812      	ldr	r0, [pc, #72]	; (8002a80 <HAL_RTC_SetDate+0xd4>)
 8002a36:	4005      	ands	r5, r0
 8002a38:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	069b      	lsls	r3, r3, #26
 8002a44:	d40c      	bmi.n	8002a60 <HAL_RTC_SetDate+0xb4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a46:	0020      	movs	r0, r4
 8002a48:	f7ff fe94 	bl	8002774 <HAL_RTC_WaitForSynchro>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a50:	22ff      	movs	r2, #255	; 0xff
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a56:	2304      	movs	r3, #4
 8002a58:	9a01      	ldr	r2, [sp, #4]
 8002a5a:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8002a5c:	77fe      	strb	r6, [r7, #31]
 8002a5e:	e7e4      	b.n	8002a2a <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a60:	22ff      	movs	r2, #255	; 0xff
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002a66:	2301      	movs	r3, #1
 8002a68:	9a01      	ldr	r2, [sp, #4]
 8002a6a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8002a70:	e7dc      	b.n	8002a2c <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a72:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a74:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002a76:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a78:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a7a:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002a7c:	036d      	lsls	r5, r5, #13
 8002a7e:	e7c1      	b.n	8002a04 <HAL_RTC_SetDate+0x58>
 8002a80:	00ffff3f 	.word	0x00ffff3f

08002a84 <HAL_RTC_SetAlarm_IT>:
{
 8002a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002a86:	1c43      	adds	r3, r0, #1
 8002a88:	9300      	str	r3, [sp, #0]
{
 8002a8a:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8002a8c:	7fd9      	ldrb	r1, [r3, #31]
 8002a8e:	2302      	movs	r3, #2
{
 8002a90:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8002a92:	0018      	movs	r0, r3
 8002a94:	2901      	cmp	r1, #1
 8002a96:	d100      	bne.n	8002a9a <HAL_RTC_SetAlarm_IT+0x16>
 8002a98:	e08d      	b.n	8002bb6 <HAL_RTC_SetAlarm_IT+0x132>
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	1860      	adds	r0, r4, r1
 8002a9e:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aa0:	18e1      	adds	r1, r4, r3
 8002aa2:	77cb      	strb	r3, [r1, #31]
 8002aa4:	2140      	movs	r1, #64	; 0x40
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	7828      	ldrb	r0, [r5, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	786e      	ldrb	r6, [r5, #1]
 8002aae:	78af      	ldrb	r7, [r5, #2]
 8002ab0:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8002ab2:	2a00      	cmp	r2, #0
 8002ab4:	d15d      	bne.n	8002b72 <HAL_RTC_SetAlarm_IT+0xee>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d100      	bne.n	8002abc <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002aba:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002abc:	f7ff feec 	bl	8002898 <RTC_ByteToBcd2>
 8002ac0:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ac2:	0030      	movs	r0, r6
 8002ac4:	f7ff fee8 	bl	8002898 <RTC_ByteToBcd2>
 8002ac8:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002aca:	0038      	movs	r0, r7
 8002acc:	f7ff fee4 	bl	8002898 <RTC_ByteToBcd2>
 8002ad0:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002ad2:	1c6b      	adds	r3, r5, #1
 8002ad4:	7fd8      	ldrb	r0, [r3, #31]
 8002ad6:	f7ff fedf 	bl	8002898 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ada:	696a      	ldr	r2, [r5, #20]
 8002adc:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ade:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ae0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002ae2:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002ae4:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002ae6:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	431f      	orrs	r7, r3
 8002aec:	9b01      	ldr	r3, [sp, #4]
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	431f      	orrs	r7, r3
 8002af2:	4337      	orrs	r7, r6
 8002af4:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002af6:	69aa      	ldr	r2, [r5, #24]
 8002af8:	686b      	ldr	r3, [r5, #4]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002afa:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002afc:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002afe:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002b00:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
 8002b06:	3a77      	subs	r2, #119	; 0x77
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002b0a:	32ad      	adds	r2, #173	; 0xad
 8002b0c:	4291      	cmp	r1, r2
 8002b0e:	d153      	bne.n	8002bb8 <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	493c      	ldr	r1, [pc, #240]	; (8002c04 <HAL_RTC_SetAlarm_IT+0x180>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <HAL_RTC_SetAlarm_IT+0x184>)
 8002b1c:	b2c9      	uxtb	r1, r1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002b22:	f7fe fc33 	bl	800138c <HAL_GetTick>
 8002b26:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	68dd      	ldr	r5, [r3, #12]
 8002b2e:	4015      	ands	r5, r2
 8002b30:	d032      	beq.n	8002b98 <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002b32:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002b34:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	6899      	ldr	r1, [r3, #8]
 8002b3c:	0052      	lsls	r2, r2, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	6899      	ldr	r1, [r3, #8]
 8002b46:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <HAL_RTC_SetAlarm_IT+0x188>)
 8002b50:	0292      	lsls	r2, r2, #10
 8002b52:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8002b54:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b56:	4311      	orrs	r1, r2
 8002b58:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b60:	22ff      	movs	r2, #255	; 0xff
 8002b62:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY;
 8002b64:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 8002b6c:	9b00      	ldr	r3, [sp, #0]
 8002b6e:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 8002b70:	e021      	b.n	8002bb6 <HAL_RTC_SetAlarm_IT+0x132>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d100      	bne.n	8002b78 <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b76:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b78:	69eb      	ldr	r3, [r5, #28]
 8002b7a:	696a      	ldr	r2, [r5, #20]
 8002b7c:	0400      	lsls	r0, r0, #16
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002b82:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b84:	4307      	orrs	r7, r0
 8002b86:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002b88:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002b8a:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002b8c:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b8e:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002b90:	7fde      	ldrb	r6, [r3, #31]
 8002b92:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b94:	4337      	orrs	r7, r6
 8002b96:	e7ae      	b.n	8002af6 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b98:	f7fe fbf8 	bl	800138c <HAL_GetTick>
 8002b9c:	23fa      	movs	r3, #250	; 0xfa
 8002b9e:	1b80      	subs	r0, r0, r6
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4298      	cmp	r0, r3
 8002ba4:	d9c0      	bls.n	8002b28 <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ba6:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ba8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002baa:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bac:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002bb0:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bb2:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 8002bb4:	77dd      	strb	r5, [r3, #31]
}
 8002bb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	4915      	ldr	r1, [pc, #84]	; (8002c10 <HAL_RTC_SetAlarm_IT+0x18c>)
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <HAL_RTC_SetAlarm_IT+0x190>)
 8002bc4:	b2c9      	uxtb	r1, r1
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002bca:	f7fe fbdf 	bl	800138c <HAL_GetTick>
 8002bce:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	68dd      	ldr	r5, [r3, #12]
 8002bd6:	4015      	ands	r5, r2
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002bda:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002bdc:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002bde:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	6899      	ldr	r1, [r3, #8]
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	430a      	orrs	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	6899      	ldr	r1, [r3, #8]
 8002bee:	0192      	lsls	r2, r2, #6
 8002bf0:	e7aa      	b.n	8002b48 <HAL_RTC_SetAlarm_IT+0xc4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bf2:	f7fe fbcb 	bl	800138c <HAL_GetTick>
 8002bf6:	23fa      	movs	r3, #250	; 0xfa
 8002bf8:	1b80      	subs	r0, r0, r6
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4298      	cmp	r0, r3
 8002bfe:	d9e7      	bls.n	8002bd0 <HAL_RTC_SetAlarm_IT+0x14c>
 8002c00:	e7d1      	b.n	8002ba6 <HAL_RTC_SetAlarm_IT+0x122>
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	fffffeff 	.word	0xfffffeff
 8002c08:	fffffe7f 	.word	0xfffffe7f
 8002c0c:	40010400 	.word	0x40010400
 8002c10:	fffffdff 	.word	0xfffffdff
 8002c14:	fffffd7f 	.word	0xfffffd7f

08002c18 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002c18:	230a      	movs	r3, #10
 8002c1a:	0902      	lsrs	r2, r0, #4
 8002c1c:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002c1e:	220f      	movs	r2, #15
 8002c20:	4010      	ands	r0, r2
 8002c22:	1818      	adds	r0, r3, r0
 8002c24:	b2c0      	uxtb	r0, r0
}
 8002c26:	4770      	bx	lr

08002c28 <HAL_RTC_GetTime>:
{
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002c2c:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c2e:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002c30:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c32:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002c34:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c36:	690b      	ldr	r3, [r1, #16]
 8002c38:	045b      	lsls	r3, r3, #17
 8002c3a:	0c5b      	lsrs	r3, r3, #17
 8002c3c:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002c3e:	680b      	ldr	r3, [r1, #0]
 8002c40:	490d      	ldr	r1, [pc, #52]	; (8002c78 <HAL_RTC_GetTime+0x50>)
 8002c42:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002c44:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002c46:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002c48:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002c4a:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002c4c:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002c4e:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002c50:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002c52:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002c54:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002c56:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002c58:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	d10a      	bne.n	8002c74 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c5e:	f7ff ffdb 	bl	8002c18 <RTC_Bcd2ToByte>
 8002c62:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c64:	0030      	movs	r0, r6
 8002c66:	f7ff ffd7 	bl	8002c18 <RTC_Bcd2ToByte>
 8002c6a:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c6c:	0028      	movs	r0, r5
 8002c6e:	f7ff ffd3 	bl	8002c18 <RTC_Bcd2ToByte>
 8002c72:	70a0      	strb	r0, [r4, #2]
}
 8002c74:	2000      	movs	r0, #0
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	007f7f7f 	.word	0x007f7f7f

08002c7c <HAL_RTC_GetDate>:
{
 8002c7c:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002c7e:	253f      	movs	r5, #63	; 0x3f
{
 8002c80:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002c82:	6803      	ldr	r3, [r0, #0]
 8002c84:	490d      	ldr	r1, [pc, #52]	; (8002cbc <HAL_RTC_GetDate+0x40>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002c8a:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002c8c:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002c8e:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002c90:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002c92:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002c94:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002c96:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002c98:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002c9a:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002c9c:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002ca2:	f7ff ffb9 	bl	8002c18 <RTC_Bcd2ToByte>
 8002ca6:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002ca8:	0030      	movs	r0, r6
 8002caa:	f7ff ffb5 	bl	8002c18 <RTC_Bcd2ToByte>
 8002cae:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002cb0:	0028      	movs	r0, r5
 8002cb2:	f7ff ffb1 	bl	8002c18 <RTC_Bcd2ToByte>
 8002cb6:	70a0      	strb	r0, [r4, #2]
}
 8002cb8:	2000      	movs	r0, #0
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	00ffff3f 	.word	0x00ffff3f

08002cc0 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8002cc8:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d037      	beq.n	8002d3e <HAL_SPI_Init+0x7a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cce:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd0:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd4:	3551      	adds	r5, #81	; 0x51
 8002cd6:	782b      	ldrb	r3, [r5, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cde:	0022      	movs	r2, r4
 8002ce0:	3250      	adds	r2, #80	; 0x50
 8002ce2:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ce4:	0020      	movs	r0, r4
 8002ce6:	f000 fc5d 	bl	80035a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cea:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cec:	2240      	movs	r2, #64	; 0x40
 8002cee:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002cf2:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002cf4:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002cfa:	6863      	ldr	r3, [r4, #4]
 8002cfc:	69a2      	ldr	r2, [r4, #24]
 8002cfe:	4303      	orrs	r3, r0
 8002d00:	68e0      	ldr	r0, [r4, #12]
 8002d02:	4303      	orrs	r3, r0
 8002d04:	6920      	ldr	r0, [r4, #16]
 8002d06:	4303      	orrs	r3, r0
 8002d08:	6960      	ldr	r0, [r4, #20]
 8002d0a:	4303      	orrs	r3, r0
 8002d0c:	69e0      	ldr	r0, [r4, #28]
 8002d0e:	4303      	orrs	r3, r0
 8002d10:	6a20      	ldr	r0, [r4, #32]
 8002d12:	4303      	orrs	r3, r0
 8002d14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002d16:	4303      	orrs	r3, r0
 8002d18:	2080      	movs	r0, #128	; 0x80
 8002d1a:	0080      	lsls	r0, r0, #2
 8002d1c:	4010      	ands	r0, r2
 8002d1e:	4303      	orrs	r3, r0
 8002d20:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d22:	2304      	movs	r3, #4
 8002d24:	0c12      	lsrs	r2, r2, #16
 8002d26:	401a      	ands	r2, r3
 8002d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d2a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d30:	69cb      	ldr	r3, [r1, #28]
 8002d32:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_SPI_Init+0x7c>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002d38:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d3a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d3c:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
 8002d40:	fffff7ff 	.word	0xfffff7ff

08002d44 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8002d48:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002d4a:	2c00      	cmp	r4, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_SPI_DeInit+0x2c>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d4e:	0025      	movs	r5, r4
 8002d50:	2302      	movs	r3, #2

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d56:	3551      	adds	r5, #81	; 0x51
 8002d58:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002d5a:	6813      	ldr	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002d5c:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 8002d5e:	438b      	bics	r3, r1
 8002d60:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002d62:	f000 fc4b 	bl	80035fc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d66:	2000      	movs	r0, #0
  hspi->State = HAL_SPI_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002d68:	3450      	adds	r4, #80	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d6a:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 8002d6c:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8002d6e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002d70:	bd70      	pop	{r4, r5, r6, pc}

08002d72 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002d72:	b570      	push	{r4, r5, r6, lr}
 8002d74:	0005      	movs	r5, r0
  /* Check the UART handle allocation */
  if (huart == NULL)
  {
    return HAL_ERROR;
 8002d76:	2001      	movs	r0, #1
  if (huart == NULL)
 8002d78:	2d00      	cmp	r5, #0
 8002d7a:	d012      	beq.n	8002da2 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8002d7c:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 8002d7e:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8002d80:	676b      	str	r3, [r5, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002d82:	682b      	ldr	r3, [r5, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4382      	bics	r2, r0
 8002d88:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002d8a:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 8002d8c:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002d8e:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002d90:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8002d92:	f000 fc77 	bl	8003684 <HAL_UART_MspDeInit>
  huart->RxState = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8002d96:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d98:	67ec      	str	r4, [r5, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8002d9a:	676c      	str	r4, [r5, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8002d9c:	67ac      	str	r4, [r5, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002d9e:	3570      	adds	r5, #112	; 0x70
 8002da0:	702c      	strb	r4, [r5, #0]
}
 8002da2:	bd70      	pop	{r4, r5, r6, pc}

08002da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da8:	6925      	ldr	r5, [r4, #16]
 8002daa:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dac:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dae:	432a      	orrs	r2, r5
 8002db0:	6965      	ldr	r5, [r4, #20]
 8002db2:	69c1      	ldr	r1, [r0, #28]
 8002db4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	4d79      	ldr	r5, [pc, #484]	; (8002fa0 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dbc:	4028      	ands	r0, r5
 8002dbe:	4302      	orrs	r2, r0
 8002dc0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	4877      	ldr	r0, [pc, #476]	; (8002fa4 <UART_SetConfig+0x200>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dc6:	4d78      	ldr	r5, [pc, #480]	; (8002fa8 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc8:	4002      	ands	r2, r0
 8002dca:	68e0      	ldr	r0, [r4, #12]
 8002dcc:	4302      	orrs	r2, r0
 8002dce:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dd2:	42ab      	cmp	r3, r5
 8002dd4:	d001      	beq.n	8002dda <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dd6:	6a22      	ldr	r2, [r4, #32]
 8002dd8:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4e73      	ldr	r6, [pc, #460]	; (8002fac <UART_SetConfig+0x208>)
 8002dde:	4032      	ands	r2, r6
 8002de0:	4302      	orrs	r2, r0
 8002de2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de4:	4a72      	ldr	r2, [pc, #456]	; (8002fb0 <UART_SetConfig+0x20c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d113      	bne.n	8002e12 <UART_SetConfig+0x6e>
 8002dea:	2203      	movs	r2, #3
 8002dec:	4b71      	ldr	r3, [pc, #452]	; (8002fb4 <UART_SetConfig+0x210>)
 8002dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df0:	4013      	ands	r3, r2
 8002df2:	4a71      	ldr	r2, [pc, #452]	; (8002fb8 <UART_SetConfig+0x214>)
 8002df4:	5cd0      	ldrb	r0, [r2, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	4299      	cmp	r1, r3
 8002dfc:	d000      	beq.n	8002e00 <UART_SetConfig+0x5c>
 8002dfe:	e092      	b.n	8002f26 <UART_SetConfig+0x182>
  {
    switch (clocksource)
 8002e00:	2808      	cmp	r0, #8
 8002e02:	d81e      	bhi.n	8002e42 <UART_SetConfig+0x9e>
 8002e04:	f7fd f992 	bl	800012c <__gnu_thumb1_case_uqi>
 8002e08:	1d636058 	.word	0x1d636058
 8002e0c:	1d1d1d84 	.word	0x1d1d1d84
 8002e10:	87          	.byte	0x87
 8002e11:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e12:	4a6a      	ldr	r2, [pc, #424]	; (8002fbc <UART_SetConfig+0x218>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d105      	bne.n	8002e24 <UART_SetConfig+0x80>
 8002e18:	220c      	movs	r2, #12
 8002e1a:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <UART_SetConfig+0x210>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	4013      	ands	r3, r2
 8002e20:	4a67      	ldr	r2, [pc, #412]	; (8002fc0 <UART_SetConfig+0x21c>)
 8002e22:	e7e7      	b.n	8002df4 <UART_SetConfig+0x50>
 8002e24:	42ab      	cmp	r3, r5
 8002e26:	d000      	beq.n	8002e2a <UART_SetConfig+0x86>
 8002e28:	e0b3      	b.n	8002f92 <UART_SetConfig+0x1ee>
 8002e2a:	21c0      	movs	r1, #192	; 0xc0
 8002e2c:	2080      	movs	r0, #128	; 0x80
 8002e2e:	4a61      	ldr	r2, [pc, #388]	; (8002fb4 <UART_SetConfig+0x210>)
 8002e30:	0109      	lsls	r1, r1, #4
 8002e32:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002e34:	00c0      	lsls	r0, r0, #3
 8002e36:	400b      	ands	r3, r1
 8002e38:	4283      	cmp	r3, r0
 8002e3a:	d038      	beq.n	8002eae <UART_SetConfig+0x10a>
 8002e3c:	d803      	bhi.n	8002e46 <UART_SetConfig+0xa2>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <UART_SetConfig+0xb4>
        ret = HAL_ERROR;
 8002e42:	2501      	movs	r5, #1
 8002e44:	e00d      	b.n	8002e62 <UART_SetConfig+0xbe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e46:	2080      	movs	r0, #128	; 0x80
 8002e48:	0100      	lsls	r0, r0, #4
 8002e4a:	4283      	cmp	r3, r0
 8002e4c:	d00e      	beq.n	8002e6c <UART_SetConfig+0xc8>
 8002e4e:	428b      	cmp	r3, r1
 8002e50:	d1f7      	bne.n	8002e42 <UART_SetConfig+0x9e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002e52:	2080      	movs	r0, #128	; 0x80
 8002e54:	0200      	lsls	r0, r0, #8
 8002e56:	e00d      	b.n	8002e74 <UART_SetConfig+0xd0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002e58:	f7ff fafc 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8002e5c:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8002e5e:	42a8      	cmp	r0, r5
 8002e60:	d108      	bne.n	8002e74 <UART_SetConfig+0xd0>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e62:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8002e64:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8002e66:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002e68:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e6c:	6813      	ldr	r3, [r2, #0]
 8002e6e:	06db      	lsls	r3, r3, #27
 8002e70:	d520      	bpl.n	8002eb4 <UART_SetConfig+0x110>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002e72:	4854      	ldr	r0, [pc, #336]	; (8002fc4 <UART_SetConfig+0x220>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e74:	2203      	movs	r2, #3
 8002e76:	6863      	ldr	r3, [r4, #4]
 8002e78:	435a      	muls	r2, r3
 8002e7a:	4282      	cmp	r2, r0
 8002e7c:	d8e1      	bhi.n	8002e42 <UART_SetConfig+0x9e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e7e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e80:	4282      	cmp	r2, r0
 8002e82:	d3de      	bcc.n	8002e42 <UART_SetConfig+0x9e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002e84:	2700      	movs	r7, #0
 8002e86:	0e02      	lsrs	r2, r0, #24
 8002e88:	0201      	lsls	r1, r0, #8
 8002e8a:	085e      	lsrs	r6, r3, #1
 8002e8c:	1989      	adds	r1, r1, r6
 8002e8e:	417a      	adcs	r2, r7
 8002e90:	0008      	movs	r0, r1
 8002e92:	0011      	movs	r1, r2
 8002e94:	001a      	movs	r2, r3
 8002e96:	003b      	movs	r3, r7
 8002e98:	f7fd fac8 	bl	800042c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e9c:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <UART_SetConfig+0x224>)
 8002e9e:	18c2      	adds	r2, r0, r3
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <UART_SetConfig+0x228>)
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d8cd      	bhi.n	8002e42 <UART_SetConfig+0x9e>
          huart->Instance->BRR = usartdiv;
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	003d      	movs	r5, r7
 8002eaa:	60d8      	str	r0, [r3, #12]
 8002eac:	e7d9      	b.n	8002e62 <UART_SetConfig+0xbe>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002eae:	f7fe ff59 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
        break;
 8002eb2:	e7d3      	b.n	8002e5c <UART_SetConfig+0xb8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002eb4:	4846      	ldr	r0, [pc, #280]	; (8002fd0 <UART_SetConfig+0x22c>)
 8002eb6:	e7dd      	b.n	8002e74 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002eb8:	f7ff facc 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ebc:	6863      	ldr	r3, [r4, #4]
 8002ebe:	0040      	lsls	r0, r0, #1
 8002ec0:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ec2:	18c0      	adds	r0, r0, r3
 8002ec4:	6861      	ldr	r1, [r4, #4]
 8002ec6:	e00b      	b.n	8002ee0 <UART_SetConfig+0x13c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ec8:	f7ff fad4 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8002ecc:	e7f6      	b.n	8002ebc <UART_SetConfig+0x118>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ece:	2510      	movs	r5, #16
 8002ed0:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <UART_SetConfig+0x210>)
 8002ed2:	6861      	ldr	r1, [r4, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002ed6:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ed8:	4015      	ands	r5, r2
 8002eda:	d006      	beq.n	8002eea <UART_SetConfig+0x146>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002edc:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <UART_SetConfig+0x230>)
 8002ede:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ee0:	f7fd f92e 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	b283      	uxth	r3, r0
        break;
 8002ee8:	e004      	b.n	8002ef4 <UART_SetConfig+0x150>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002eea:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <UART_SetConfig+0x234>)
 8002eec:	18c0      	adds	r0, r0, r3
 8002eee:	f7fd f927 	bl	8000140 <__udivsi3>
 8002ef2:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	4839      	ldr	r0, [pc, #228]	; (8002fdc <UART_SetConfig+0x238>)
 8002ef8:	3910      	subs	r1, #16
 8002efa:	4281      	cmp	r1, r0
 8002efc:	d8a1      	bhi.n	8002e42 <UART_SetConfig+0x9e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002efe:	210f      	movs	r1, #15
 8002f00:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f02:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f04:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f06:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8002f08:	6821      	ldr	r1, [r4, #0]
 8002f0a:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8002f0c:	60cb      	str	r3, [r1, #12]
 8002f0e:	e7a8      	b.n	8002e62 <UART_SetConfig+0xbe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f10:	f7fe ff28 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8002f14:	e7d2      	b.n	8002ebc <UART_SetConfig+0x118>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f16:	6863      	ldr	r3, [r4, #4]
 8002f18:	0858      	lsrs	r0, r3, #1
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	025b      	lsls	r3, r3, #9
 8002f1e:	e7d0      	b.n	8002ec2 <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8002f20:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e7e6      	b.n	8002ef4 <UART_SetConfig+0x150>
    switch (clocksource)
 8002f26:	2808      	cmp	r0, #8
 8002f28:	d837      	bhi.n	8002f9a <UART_SetConfig+0x1f6>
 8002f2a:	f7fd f8ff 	bl	800012c <__gnu_thumb1_case_uqi>
 8002f2e:	0c05      	.short	0x0c05
 8002f30:	362a360f 	.word	0x362a360f
 8002f34:	3636      	.short	0x3636
 8002f36:	2d          	.byte	0x2d
 8002f37:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f38:	f7ff fa8c 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f3c:	6863      	ldr	r3, [r4, #4]
 8002f3e:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f40:	18c0      	adds	r0, r0, r3
 8002f42:	6861      	ldr	r1, [r4, #4]
 8002f44:	e00b      	b.n	8002f5e <UART_SetConfig+0x1ba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f46:	f7ff fa95 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8002f4a:	e7f7      	b.n	8002f3c <UART_SetConfig+0x198>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f4c:	2510      	movs	r5, #16
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <UART_SetConfig+0x210>)
 8002f50:	6861      	ldr	r1, [r4, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002f54:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f56:	4015      	ands	r5, r2
 8002f58:	d00d      	beq.n	8002f76 <UART_SetConfig+0x1d2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <UART_SetConfig+0x220>)
 8002f5c:	18c0      	adds	r0, r0, r3
 8002f5e:	f7fd f8ef 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f62:	2500      	movs	r5, #0
 8002f64:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f66:	0019      	movs	r1, r3
 8002f68:	481c      	ldr	r0, [pc, #112]	; (8002fdc <UART_SetConfig+0x238>)
 8002f6a:	3910      	subs	r1, #16
 8002f6c:	4281      	cmp	r1, r0
 8002f6e:	d900      	bls.n	8002f72 <UART_SetConfig+0x1ce>
 8002f70:	e767      	b.n	8002e42 <UART_SetConfig+0x9e>
      huart->Instance->BRR = usartdiv;
 8002f72:	6821      	ldr	r1, [r4, #0]
 8002f74:	e7ca      	b.n	8002f0c <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <UART_SetConfig+0x22c>)
 8002f78:	18c0      	adds	r0, r0, r3
 8002f7a:	f7fd f8e1 	bl	8000140 <__udivsi3>
 8002f7e:	b283      	uxth	r3, r0
 8002f80:	e7f1      	b.n	8002f66 <UART_SetConfig+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f82:	f7fe feef 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8002f86:	e7d9      	b.n	8002f3c <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f88:	6863      	ldr	r3, [r4, #4]
 8002f8a:	0858      	lsrs	r0, r3, #1
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	e7d6      	b.n	8002f40 <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	4299      	cmp	r1, r3
 8002f98:	d0c2      	beq.n	8002f20 <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 8002f9a:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e7e2      	b.n	8002f66 <UART_SetConfig+0x1c2>
 8002fa0:	efff69f3 	.word	0xefff69f3
 8002fa4:	ffffcfff 	.word	0xffffcfff
 8002fa8:	40004800 	.word	0x40004800
 8002fac:	fffff4ff 	.word	0xfffff4ff
 8002fb0:	40013800 	.word	0x40013800
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08005b30 	.word	0x08005b30
 8002fbc:	40004400 	.word	0x40004400
 8002fc0:	08005b34 	.word	0x08005b34
 8002fc4:	003d0900 	.word	0x003d0900
 8002fc8:	fffffd00 	.word	0xfffffd00
 8002fcc:	000ffcff 	.word	0x000ffcff
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	007a1200 	.word	0x007a1200
 8002fd8:	01e84800 	.word	0x01e84800
 8002fdc:	0000ffef 	.word	0x0000ffef

08002fe0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002fe2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe4:	07da      	lsls	r2, r3, #31
 8002fe6:	d506      	bpl.n	8002ff6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fe8:	6801      	ldr	r1, [r0, #0]
 8002fea:	4c28      	ldr	r4, [pc, #160]	; (800308c <UART_AdvFeatureConfig+0xac>)
 8002fec:	684a      	ldr	r2, [r1, #4]
 8002fee:	4022      	ands	r2, r4
 8002ff0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002ff2:	4322      	orrs	r2, r4
 8002ff4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ff6:	079a      	lsls	r2, r3, #30
 8002ff8:	d506      	bpl.n	8003008 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ffa:	6801      	ldr	r1, [r0, #0]
 8002ffc:	4c24      	ldr	r4, [pc, #144]	; (8003090 <UART_AdvFeatureConfig+0xb0>)
 8002ffe:	684a      	ldr	r2, [r1, #4]
 8003000:	4022      	ands	r2, r4
 8003002:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003004:	4322      	orrs	r2, r4
 8003006:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003008:	075a      	lsls	r2, r3, #29
 800300a:	d506      	bpl.n	800301a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800300c:	6801      	ldr	r1, [r0, #0]
 800300e:	4c21      	ldr	r4, [pc, #132]	; (8003094 <UART_AdvFeatureConfig+0xb4>)
 8003010:	684a      	ldr	r2, [r1, #4]
 8003012:	4022      	ands	r2, r4
 8003014:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003016:	4322      	orrs	r2, r4
 8003018:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800301a:	071a      	lsls	r2, r3, #28
 800301c:	d506      	bpl.n	800302c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800301e:	6801      	ldr	r1, [r0, #0]
 8003020:	4c1d      	ldr	r4, [pc, #116]	; (8003098 <UART_AdvFeatureConfig+0xb8>)
 8003022:	684a      	ldr	r2, [r1, #4]
 8003024:	4022      	ands	r2, r4
 8003026:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003028:	4322      	orrs	r2, r4
 800302a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800302c:	06da      	lsls	r2, r3, #27
 800302e:	d506      	bpl.n	800303e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003030:	6801      	ldr	r1, [r0, #0]
 8003032:	4c1a      	ldr	r4, [pc, #104]	; (800309c <UART_AdvFeatureConfig+0xbc>)
 8003034:	688a      	ldr	r2, [r1, #8]
 8003036:	4022      	ands	r2, r4
 8003038:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800303a:	4322      	orrs	r2, r4
 800303c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800303e:	069a      	lsls	r2, r3, #26
 8003040:	d506      	bpl.n	8003050 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003042:	6801      	ldr	r1, [r0, #0]
 8003044:	4c16      	ldr	r4, [pc, #88]	; (80030a0 <UART_AdvFeatureConfig+0xc0>)
 8003046:	688a      	ldr	r2, [r1, #8]
 8003048:	4022      	ands	r2, r4
 800304a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800304c:	4322      	orrs	r2, r4
 800304e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003050:	065a      	lsls	r2, r3, #25
 8003052:	d510      	bpl.n	8003076 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003054:	6801      	ldr	r1, [r0, #0]
 8003056:	4d13      	ldr	r5, [pc, #76]	; (80030a4 <UART_AdvFeatureConfig+0xc4>)
 8003058:	684a      	ldr	r2, [r1, #4]
 800305a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800305c:	402a      	ands	r2, r5
 800305e:	4322      	orrs	r2, r4
 8003060:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	0352      	lsls	r2, r2, #13
 8003066:	4294      	cmp	r4, r2
 8003068:	d105      	bne.n	8003076 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800306a:	684a      	ldr	r2, [r1, #4]
 800306c:	4c0e      	ldr	r4, [pc, #56]	; (80030a8 <UART_AdvFeatureConfig+0xc8>)
 800306e:	4022      	ands	r2, r4
 8003070:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003072:	4322      	orrs	r2, r4
 8003074:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003076:	061b      	lsls	r3, r3, #24
 8003078:	d506      	bpl.n	8003088 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800307a:	6802      	ldr	r2, [r0, #0]
 800307c:	490b      	ldr	r1, [pc, #44]	; (80030ac <UART_AdvFeatureConfig+0xcc>)
 800307e:	6853      	ldr	r3, [r2, #4]
 8003080:	400b      	ands	r3, r1
 8003082:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003084:	430b      	orrs	r3, r1
 8003086:	6053      	str	r3, [r2, #4]
  }
}
 8003088:	bd30      	pop	{r4, r5, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	fffdffff 	.word	0xfffdffff
 8003090:	fffeffff 	.word	0xfffeffff
 8003094:	fffbffff 	.word	0xfffbffff
 8003098:	ffff7fff 	.word	0xffff7fff
 800309c:	ffffefff 	.word	0xffffefff
 80030a0:	ffffdfff 	.word	0xffffdfff
 80030a4:	ffefffff 	.word	0xffefffff
 80030a8:	ff9fffff 	.word	0xff9fffff
 80030ac:	fff7ffff 	.word	0xfff7ffff

080030b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	0004      	movs	r4, r0
 80030b4:	000e      	movs	r6, r1
 80030b6:	0015      	movs	r5, r2
 80030b8:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ba:	6822      	ldr	r2, [r4, #0]
 80030bc:	69d3      	ldr	r3, [r2, #28]
 80030be:	4033      	ands	r3, r6
 80030c0:	1b9b      	subs	r3, r3, r6
 80030c2:	4259      	negs	r1, r3
 80030c4:	414b      	adcs	r3, r1
 80030c6:	42ab      	cmp	r3, r5
 80030c8:	d001      	beq.n	80030ce <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80030ca:	2000      	movs	r0, #0
 80030cc:	e01b      	b.n	8003106 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	9b06      	ldr	r3, [sp, #24]
 80030d0:	3301      	adds	r3, #1
 80030d2:	d0f3      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d4:	f7fe f95a 	bl	800138c <HAL_GetTick>
 80030d8:	9b06      	ldr	r3, [sp, #24]
 80030da:	1bc0      	subs	r0, r0, r7
 80030dc:	4283      	cmp	r3, r0
 80030de:	d301      	bcc.n	80030e4 <UART_WaitOnFlagUntilTimeout+0x34>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ea      	bne.n	80030ba <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	4908      	ldr	r1, [pc, #32]	; (8003108 <UART_WaitOnFlagUntilTimeout+0x58>)
 80030e8:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80030ea:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ec:	400a      	ands	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	31a3      	adds	r1, #163	; 0xa3
 80030f4:	31ff      	adds	r1, #255	; 0xff
 80030f6:	438a      	bics	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80030fa:	2320      	movs	r3, #32
 80030fc:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80030fe:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003100:	2300      	movs	r3, #0
 8003102:	3470      	adds	r4, #112	; 0x70
 8003104:	7023      	strb	r3, [r4, #0]
}
 8003106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003108:	fffffe5f 	.word	0xfffffe5f

0800310c <UART_CheckIdleState>:
{
 800310c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	2600      	movs	r6, #0
{
 8003110:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003114:	f7fe f93a 	bl	800138c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003118:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800311a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	071b      	lsls	r3, r3, #28
 8003120:	d415      	bmi.n	800314e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	075b      	lsls	r3, r3, #29
 8003128:	d50a      	bpl.n	8003140 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <UART_CheckIdleState+0x5c>)
 800312e:	2200      	movs	r2, #0
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	03c9      	lsls	r1, r1, #15
 8003134:	002b      	movs	r3, r5
 8003136:	0020      	movs	r0, r4
 8003138:	f7ff ffba 	bl	80030b0 <UART_WaitOnFlagUntilTimeout>
 800313c:	2800      	cmp	r0, #0
 800313e:	d111      	bne.n	8003164 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8003140:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003142:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003144:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003146:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003148:	3470      	adds	r4, #112	; 0x70
 800314a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800314c:	e00b      	b.n	8003166 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <UART_CheckIdleState+0x5c>)
 8003152:	0032      	movs	r2, r6
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	0389      	lsls	r1, r1, #14
 8003158:	0003      	movs	r3, r0
 800315a:	0020      	movs	r0, r4
 800315c:	f7ff ffa8 	bl	80030b0 <UART_WaitOnFlagUntilTimeout>
 8003160:	2800      	cmp	r0, #0
 8003162:	d0de      	beq.n	8003122 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003164:	2003      	movs	r0, #3
}
 8003166:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003168:	01ffffff 	.word	0x01ffffff

0800316c <HAL_UART_Init>:
{
 800316c:	b510      	push	{r4, lr}
 800316e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003172:	2001      	movs	r0, #1
}
 8003174:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800317c:	0002      	movs	r2, r0
 800317e:	3270      	adds	r2, #112	; 0x70
 8003180:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003182:	f000 fa51 	bl	8003628 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003186:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003188:	2101      	movs	r1, #1
 800318a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800318c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800318e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003190:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003192:	438b      	bics	r3, r1
 8003194:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003196:	f7ff fe05 	bl	8002da4 <UART_SetConfig>
 800319a:	2801      	cmp	r0, #1
 800319c:	d0e9      	beq.n	8003172 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800319e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80031a4:	0020      	movs	r0, r4
 80031a6:	f7ff ff1b 	bl	8002fe0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <HAL_UART_Init+0x60>)
 80031ae:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80031b0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	438a      	bics	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031be:	2201      	movs	r2, #1
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80031c6:	f7ff ffa1 	bl	800310c <UART_CheckIdleState>
 80031ca:	e7d3      	b.n	8003174 <HAL_UART_Init+0x8>
 80031cc:	ffffb7ff 	.word	0xffffb7ff

080031d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d0:	b530      	push	{r4, r5, lr}
 80031d2:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031d4:	2238      	movs	r2, #56	; 0x38
 80031d6:	2100      	movs	r1, #0
 80031d8:	a80e      	add	r0, sp, #56	; 0x38
 80031da:	f000 fdf5 	bl	8003dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031de:	2214      	movs	r2, #20
 80031e0:	2100      	movs	r1, #0
 80031e2:	4668      	mov	r0, sp
 80031e4:	f000 fdf0 	bl	8003dc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031e8:	2224      	movs	r2, #36	; 0x24
 80031ea:	2100      	movs	r1, #0
 80031ec:	a805      	add	r0, sp, #20
 80031ee:	f000 fdeb 	bl	8003dc8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	4917      	ldr	r1, [pc, #92]	; (8003254 <SystemClock_Config+0x84>)
 80031f6:	4c18      	ldr	r4, [pc, #96]	; (8003258 <SystemClock_Config+0x88>)
 80031f8:	680a      	ldr	r2, [r1, #0]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	4022      	ands	r2, r4
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003202:	f7fe fd77 	bl	8001cf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <SystemClock_Config+0x8c>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003208:	2501      	movs	r5, #1
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800320a:	6d13      	ldr	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800320c:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800320e:	4023      	ands	r3, r4
 8003210:	6513      	str	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003212:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003214:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003216:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003218:	33fa      	adds	r3, #250	; 0xfa
 800321a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800321c:	3bf0      	subs	r3, #240	; 0xf0
 800321e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003220:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003222:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003224:	f7fe fdda 	bl	8001ddc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003228:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800322a:	0021      	movs	r1, r4
 800322c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800322e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003230:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003232:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003234:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003236:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003238:	f7ff f854 	bl	80022e4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800323c:	232a      	movs	r3, #42	; 0x2a
 800323e:	9305      	str	r3, [sp, #20]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003240:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003242:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003244:	025b      	lsls	r3, r3, #9
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003246:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003248:	940b      	str	r4, [sp, #44]	; 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800324a:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800324c:	f7ff f922 	bl	8002494 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003250:	b01d      	add	sp, #116	; 0x74
 8003252:	bd30      	pop	{r4, r5, pc}
 8003254:	40007000 	.word	0x40007000
 8003258:	ffffe7ff 	.word	0xffffe7ff
 800325c:	40021000 	.word	0x40021000

08003260 <main>:
{
 8003260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003262:	b099      	sub	sp, #100	; 0x64
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	af0e      	add	r7, sp, #56	; 0x38
  HAL_Init();
 8003266:	f7fe f871 	bl	800134c <HAL_Init>
  SystemClock_Config();
 800326a:	f7ff ffb1 	bl	80031d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326e:	2214      	movs	r2, #20
 8003270:	2100      	movs	r1, #0
 8003272:	0038      	movs	r0, r7
 8003274:	f000 fda8 	bl	8003dc8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003278:	2104      	movs	r1, #4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800327a:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800327c:	4b83      	ldr	r3, [pc, #524]	; (800348c <main+0x22c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hi2c1.Init.OwnAddress1 = 0;
 8003282:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003284:	430a      	orrs	r2, r1
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	400a      	ands	r2, r1
 800328c:	9205      	str	r2, [sp, #20]
 800328e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003292:	4301      	orrs	r1, r0
 8003294:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003296:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	4002      	ands	r2, r0
 800329c:	9206      	str	r2, [sp, #24]
 800329e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032a2:	487b      	ldr	r0, [pc, #492]	; (8003490 <main+0x230>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a4:	4332      	orrs	r2, r6
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80032a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032aa:	4032      	ands	r2, r6
 80032ac:	9207      	str	r2, [sp, #28]
 80032ae:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b2:	430a      	orrs	r2, r1
 80032b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	400b      	ands	r3, r1
 80032ba:	9308      	str	r3, [sp, #32]
 80032bc:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Pin = B1_Pin;
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	019b      	lsls	r3, r3, #6
 80032c2:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032c4:	4b73      	ldr	r3, [pc, #460]	; (8003494 <main+0x234>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032c6:	0039      	movs	r1, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032c8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032ca:	f7fe f8db 	bl	8001484 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80032ce:	4d72      	ldr	r5, [pc, #456]	; (8003498 <main+0x238>)
 80032d0:	4b72      	ldr	r3, [pc, #456]	; (800349c <main+0x23c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032d2:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 80032d4:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80032d6:	4b72      	ldr	r3, [pc, #456]	; (80034a0 <main+0x240>)
  hi2c1.Init.OwnAddress1 = 0;
 80032d8:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x0010061A;
 80032da:	606b      	str	r3, [r5, #4]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032dc:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032de:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032e0:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032e2:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032e4:	622c      	str	r4, [r5, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032e6:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032e8:	f7fe fb1c 	bl	8001924 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ec:	0021      	movs	r1, r4
 80032ee:	0028      	movs	r0, r5
 80032f0:	f7fe fcb6 	bl	8001c60 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032f4:	0021      	movs	r1, r4
 80032f6:	0028      	movs	r0, r5
 80032f8:	f7fe fcd8 	bl	8001cac <HAL_I2CEx_ConfigDigitalFilter>
  RTC_TimeTypeDef sTime = {0};
 80032fc:	0021      	movs	r1, r4
 80032fe:	2214      	movs	r2, #20
 8003300:	a809      	add	r0, sp, #36	; 0x24
 8003302:	f000 fd61 	bl	8003dc8 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8003306:	0021      	movs	r1, r4
 8003308:	2228      	movs	r2, #40	; 0x28
 800330a:	0038      	movs	r0, r7
  RTC_DateTypeDef sDate = {0};
 800330c:	9404      	str	r4, [sp, #16]
  RTC_AlarmTypeDef sAlarm = {0};
 800330e:	f000 fd5b 	bl	8003dc8 <memset>
  hrtc.Instance = RTC;
 8003312:	4d64      	ldr	r5, [pc, #400]	; (80034a4 <main+0x244>)
 8003314:	4b64      	ldr	r3, [pc, #400]	; (80034a8 <main+0x248>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003316:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 8003318:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = 127;
 800331a:	237f      	movs	r3, #127	; 0x7f
 800331c:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 800331e:	3380      	adds	r3, #128	; 0x80
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003320:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = 255;
 8003322:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003324:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003326:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003328:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800332a:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800332c:	f7ff fa58 	bl	80027e0 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8003330:	ab02      	add	r3, sp, #8
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003332:	0032      	movs	r2, r6
 8003334:	a909      	add	r1, sp, #36	; 0x24
 8003336:	0028      	movs	r0, r5
  sTime.Hours = 0x0;
 8003338:	771c      	strb	r4, [r3, #28]
  sTime.Minutes = 0x0;
 800333a:	775c      	strb	r4, [r3, #29]
  sTime.Seconds = 0x0;
 800333c:	779c      	strb	r4, [r3, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800333e:	940c      	str	r4, [sp, #48]	; 0x30
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003340:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003342:	f7ff fab5 	bl	80028b0 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003346:	ab02      	add	r3, sp, #8
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003348:	0032      	movs	r2, r6
 800334a:	a904      	add	r1, sp, #16
 800334c:	0028      	movs	r0, r5
  sDate.Year = 0x0;
 800334e:	72dc      	strb	r4, [r3, #11]
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003350:	721e      	strb	r6, [r3, #8]
  sDate.Month = RTC_MONTH_JANUARY;
 8003352:	725e      	strb	r6, [r3, #9]
  sDate.Date = 0x1;
 8003354:	729e      	strb	r6, [r3, #10]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003356:	f7ff fb29 	bl	80029ac <HAL_RTC_SetDate>
  sAlarm.AlarmDateWeekDay = 0x1;
 800335a:	2331      	movs	r3, #49	; 0x31
 800335c:	aa02      	add	r2, sp, #8
 800335e:	189b      	adds	r3, r3, r2
 8003360:	77de      	strb	r6, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8003362:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003364:	0032      	movs	r2, r6
 8003366:	0039      	movs	r1, r7
  sAlarm.Alarm = RTC_ALARM_A;
 8003368:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800336a:	0028      	movs	r0, r5
  sAlarm.AlarmTime.Hours = 0x0;
 800336c:	703c      	strb	r4, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800336e:	707c      	strb	r4, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003370:	70bc      	strb	r4, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003372:	607c      	str	r4, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003374:	60fc      	str	r4, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003376:	613c      	str	r4, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003378:	617c      	str	r4, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800337a:	61bc      	str	r4, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800337c:	61fc      	str	r4, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003380:	f7ff fb80 	bl	8002a84 <HAL_RTC_SetAlarm_IT>
  hspi1.Instance = SPI1;
 8003384:	4849      	ldr	r0, [pc, #292]	; (80034ac <main+0x24c>)
 8003386:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <main+0x250>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003388:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 800338a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800338c:	2382      	movs	r3, #130	; 0x82
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	6043      	str	r3, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003392:	33fc      	adds	r3, #252	; 0xfc
 8003394:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8003396:	3bfa      	subs	r3, #250	; 0xfa
 8003398:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800339a:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800339c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800339e:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a0:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033a2:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033a4:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a6:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80033a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033aa:	f7ff fc8b 	bl	8002cc4 <HAL_SPI_Init>
  huart2.Instance = USART2;
 80033ae:	4841      	ldr	r0, [pc, #260]	; (80034b4 <main+0x254>)
 80033b0:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <main+0x258>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033b2:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 80033b4:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80033b6:	23e1      	movs	r3, #225	; 0xe1
 80033b8:	025b      	lsls	r3, r3, #9
 80033ba:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033bc:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033be:	60c4      	str	r4, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033c0:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033c2:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c4:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c6:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033c8:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033ca:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033cc:	f7ff fece 	bl	800316c <HAL_UART_Init>
  SHT21_Begin();
 80033d0:	f000 f9d6 	bl	8003780 <SHT21_Begin>
  glassLCD_Begin();
 80033d4:	f000 fad2 	bl	800397c <glassLCD_Begin>
  RTC_SetTime(TIME_HOURS(), TIME_MINUTES(), TIME_SECONDS());
 80033d8:	2213      	movs	r2, #19
 80033da:	2104      	movs	r1, #4
 80033dc:	2017      	movs	r0, #23
 80033de:	f000 fad7 	bl	8003990 <RTC_SetTime>
  glassLCD_WriteData(lcdTest);
 80033e2:	4836      	ldr	r0, [pc, #216]	; (80034bc <main+0x25c>)
 80033e4:	f000 fa38 	bl	8003858 <glassLCD_WriteData>
  glassLCD_SetDot(0b11111111);
 80033e8:	20ff      	movs	r0, #255	; 0xff
 80033ea:	f000 fa9d 	bl	8003928 <glassLCD_SetDot>
  glassLCD_WriteArrow(0, 1);
 80033ee:	0020      	movs	r0, r4
 80033f0:	0031      	movs	r1, r6
 80033f2:	f000 fa9f 	bl	8003934 <glassLCD_WriteArrow>
  glassLCD_Update();
 80033f6:	f000 fa47 	bl	8003888 <glassLCD_Update>
  HAL_Delay(2000);
 80033fa:	20fa      	movs	r0, #250	; 0xfa
 80033fc:	00c0      	lsls	r0, r0, #3
 80033fe:	f7fd ffcb 	bl	8001398 <HAL_Delay>
	  sprintf(text, "%2d%01dC %2d%01d", _t / 100, abs(_t / 10 % 10), _hum / 100, abs(_hum / 10 % 10));
 8003402:	340a      	adds	r4, #10
	  int16_t _hum = SHT21_ReadHumidity();
 8003404:	f000 f9e0 	bl	80037c8 <SHT21_ReadHumidity>
 8003408:	0005      	movs	r5, r0
	  int16_t _t = SHT21_ReadTemperature();
 800340a:	f000 f9ff 	bl	800380c <SHT21_ReadTemperature>
	  sprintf(text, "%2d%01dC %2d%01d", _t / 100, abs(_t / 10 % 10), _hum / 100, abs(_hum / 10 % 10));
 800340e:	0021      	movs	r1, r4
	  int16_t _t = SHT21_ReadTemperature();
 8003410:	0006      	movs	r6, r0
	  sprintf(text, "%2d%01dC %2d%01d", _t / 100, abs(_t / 10 % 10), _hum / 100, abs(_hum / 10 % 10));
 8003412:	f7fc ff1f 	bl	8000254 <__divsi3>
 8003416:	0021      	movs	r1, r4
 8003418:	b200      	sxth	r0, r0
 800341a:	f7fd f801 	bl	8000420 <__aeabi_idivmod>
 800341e:	b209      	sxth	r1, r1
 8003420:	17ca      	asrs	r2, r1, #31
 8003422:	188b      	adds	r3, r1, r2
 8003424:	4053      	eors	r3, r2
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	0030      	movs	r0, r6
 800342a:	9303      	str	r3, [sp, #12]
 800342c:	f7fc ff12 	bl	8000254 <__divsi3>
 8003430:	0021      	movs	r1, r4
 8003432:	b206      	sxth	r6, r0
 8003434:	0028      	movs	r0, r5
 8003436:	f7fc ff0d 	bl	8000254 <__divsi3>
 800343a:	0021      	movs	r1, r4
 800343c:	b200      	sxth	r0, r0
 800343e:	f7fc ffef 	bl	8000420 <__aeabi_idivmod>
 8003442:	b209      	sxth	r1, r1
 8003444:	17cb      	asrs	r3, r1, #31
 8003446:	18c9      	adds	r1, r1, r3
 8003448:	4059      	eors	r1, r3
 800344a:	9101      	str	r1, [sp, #4]
 800344c:	0028      	movs	r0, r5
 800344e:	2164      	movs	r1, #100	; 0x64
 8003450:	f7fc ff00 	bl	8000254 <__divsi3>
 8003454:	b200      	sxth	r0, r0
 8003456:	9b03      	ldr	r3, [sp, #12]
 8003458:	0032      	movs	r2, r6
 800345a:	4919      	ldr	r1, [pc, #100]	; (80034c0 <main+0x260>)
 800345c:	9000      	str	r0, [sp, #0]
 800345e:	0038      	movs	r0, r7
 8003460:	f000 ffca 	bl	80043f8 <siprintf>
	  glassLCD_Clear();
 8003464:	f000 fa52 	bl	800390c <glassLCD_Clear>
	  glassLCD_WriteData(text);
 8003468:	0038      	movs	r0, r7
 800346a:	f000 f9f5 	bl	8003858 <glassLCD_WriteData>
	  glassLCD_SetDot(0b01000010);
 800346e:	2042      	movs	r0, #66	; 0x42
 8003470:	f000 fa5a 	bl	8003928 <glassLCD_SetDot>
	  glassLCD_Update();
 8003474:	f000 fa08 	bl	8003888 <glassLCD_Update>
	  RTC_SetAlarmEpoch(RTC_GetEpoch() + 60, RTC_ALARMMASK_DATEWEEKDAY);
 8003478:	f000 fade 	bl	8003a38 <RTC_GetEpoch>
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	303c      	adds	r0, #60	; 0x3c
 8003480:	0609      	lsls	r1, r1, #24
 8003482:	f000 fb01 	bl	8003a88 <RTC_SetAlarmEpoch>
	  Sleep_LightSleep();
 8003486:	f000 fb3b 	bl	8003b00 <Sleep_LightSleep>
 800348a:	e7bb      	b.n	8003404 <main+0x1a4>
 800348c:	40021000 	.word	0x40021000
 8003490:	50000800 	.word	0x50000800
 8003494:	10210000 	.word	0x10210000
 8003498:	2000028c 	.word	0x2000028c
 800349c:	40005400 	.word	0x40005400
 80034a0:	0010061a 	.word	0x0010061a
 80034a4:	200002d8 	.word	0x200002d8
 80034a8:	40002800 	.word	0x40002800
 80034ac:	200002fc 	.word	0x200002fc
 80034b0:	40013000 	.word	0x40013000
 80034b4:	20000354 	.word	0x20000354
 80034b8:	40004400 	.word	0x40004400
 80034bc:	08005b41 	.word	0x08005b41
 80034c0:	08005b4a 	.word	0x08005b4a

080034c4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c4:	2201      	movs	r2, #1
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_MspInit+0x18>)
 80034c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ca:	430a      	orrs	r2, r1
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034d2:	0552      	lsls	r2, r2, #21
 80034d4:	430a      	orrs	r2, r1
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034d8:	4770      	bx	lr
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	40021000 	.word	0x40021000

080034e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034e0:	b510      	push	{r4, lr}
 80034e2:	0004      	movs	r4, r0
 80034e4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e6:	2214      	movs	r2, #20
 80034e8:	2100      	movs	r1, #0
 80034ea:	a801      	add	r0, sp, #4
 80034ec:	f000 fc6c 	bl	8003dc8 <memset>
  if(hi2c->Instance==I2C1)
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_I2C_MspInit+0x58>)
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d11c      	bne.n	8003532 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f8:	2102      	movs	r1, #2
 80034fa:	4c10      	ldr	r4, [pc, #64]	; (800353c <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fc:	4810      	ldr	r0, [pc, #64]	; (8003540 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003500:	430a      	orrs	r2, r1
 8003502:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003506:	400b      	ands	r3, r1
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800350c:	23c0      	movs	r3, #192	; 0xc0
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003512:	2312      	movs	r3, #18
 8003514:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003516:	3b11      	subs	r3, #17
 8003518:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351a:	185b      	adds	r3, r3, r1
 800351c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003520:	3301      	adds	r3, #1
 8003522:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003524:	f7fd ffae 	bl	8001484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800352c:	039b      	lsls	r3, r3, #14
 800352e:	4313      	orrs	r3, r2
 8003530:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003532:	b006      	add	sp, #24
 8003534:	bd10      	pop	{r4, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	40005400 	.word	0x40005400
 800353c:	40021000 	.word	0x40021000
 8003540:	50000400 	.word	0x50000400

08003544 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <HAL_I2C_MspDeInit+0x20>)
 8003546:	6802      	ldr	r2, [r0, #0]
{
 8003548:	b510      	push	{r4, lr}
  if(hi2c->Instance==I2C1)
 800354a:	429a      	cmp	r2, r3
 800354c:	d109      	bne.n	8003562 <HAL_I2C_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800354e:	4a06      	ldr	r2, [pc, #24]	; (8003568 <HAL_I2C_MspDeInit+0x24>)
 8003550:	4906      	ldr	r1, [pc, #24]	; (800356c <HAL_I2C_MspDeInit+0x28>)
 8003552:	6b93      	ldr	r3, [r2, #56]	; 0x38
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003554:	4806      	ldr	r0, [pc, #24]	; (8003570 <HAL_I2C_MspDeInit+0x2c>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003556:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003558:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_I2C1_CLK_DISABLE();
 800355a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 800355c:	0089      	lsls	r1, r1, #2
 800355e:	f7fe f84f 	bl	8001600 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003562:	bd10      	pop	{r4, pc}
 8003564:	40005400 	.word	0x40005400
 8003568:	40021000 	.word	0x40021000
 800356c:	ffdfffff 	.word	0xffdfffff
 8003570:	50000400 	.word	0x50000400

08003574 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RTC_MspInit+0x28>)
 8003576:	6802      	ldr	r2, [r0, #0]
{
 8003578:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 800357a:	429a      	cmp	r2, r3
 800357c:	d10d      	bne.n	800359a <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <HAL_RTC_MspInit+0x2c>)
 8003582:	02db      	lsls	r3, r3, #11
 8003584:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003586:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8003588:	430b      	orrs	r3, r1
 800358a:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800358c:	2200      	movs	r2, #0
 800358e:	0011      	movs	r1, r2
 8003590:	f7fd ff24 	bl	80013dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003594:	2002      	movs	r0, #2
 8003596:	f7fd ff51 	bl	800143c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800359a:	bd10      	pop	{r4, pc}
 800359c:	40002800 	.word	0x40002800
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035a4:	b510      	push	{r4, lr}
 80035a6:	0004      	movs	r4, r0
 80035a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035aa:	2214      	movs	r2, #20
 80035ac:	2100      	movs	r1, #0
 80035ae:	a801      	add	r0, sp, #4
 80035b0:	f000 fc0a 	bl	8003dc8 <memset>
  if(hspi->Instance==SPI1)
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_SPI_MspInit+0x50>)
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d118      	bne.n	80035ee <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_SPI_MspInit+0x54>)
 80035c0:	0152      	lsls	r2, r2, #5
 80035c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035c6:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c8:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035ca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ce:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d0:	430a      	orrs	r2, r1
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	400b      	ands	r3, r1
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035dc:	23e0      	movs	r3, #224	; 0xe0
 80035de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e0:	3bde      	subs	r3, #222	; 0xde
 80035e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e4:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	f7fd ff4b 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035ee:	b006      	add	sp, #24
 80035f0:	bd10      	pop	{r4, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	40013000 	.word	0x40013000
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <HAL_SPI_MspDeInit+0x20>)
 80035fe:	6802      	ldr	r2, [r0, #0]
{
 8003600:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 8003602:	429a      	cmp	r2, r3
 8003604:	d109      	bne.n	800361a <HAL_SPI_MspDeInit+0x1e>
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8003606:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003608:	4a05      	ldr	r2, [pc, #20]	; (8003620 <HAL_SPI_MspDeInit+0x24>)
 800360a:	4906      	ldr	r1, [pc, #24]	; (8003624 <HAL_SPI_MspDeInit+0x28>)
 800360c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800360e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003610:	400b      	ands	r3, r1
 8003612:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8003614:	21e0      	movs	r1, #224	; 0xe0
 8003616:	f7fd fff3 	bl	8001600 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800361a:	bd10      	pop	{r4, pc}
 800361c:	40013000 	.word	0x40013000
 8003620:	40021000 	.word	0x40021000
 8003624:	ffffefff 	.word	0xffffefff

08003628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003628:	b510      	push	{r4, lr}
 800362a:	0004      	movs	r4, r0
 800362c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362e:	2214      	movs	r2, #20
 8003630:	2100      	movs	r1, #0
 8003632:	a801      	add	r0, sp, #4
 8003634:	f000 fbc8 	bl	8003dc8 <memset>
  if(huart->Instance==USART2)
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_UART_MspInit+0x54>)
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d11a      	bne.n	8003676 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <HAL_UART_MspInit+0x58>)
 8003644:	0292      	lsls	r2, r2, #10
 8003646:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003648:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 800364a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364c:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003652:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003654:	430a      	orrs	r2, r1
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	400b      	ands	r3, r1
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003660:	230c      	movs	r3, #12
 8003662:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	3b0a      	subs	r3, #10
 8003666:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003668:	185b      	adds	r3, r3, r1
 800366a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800366c:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003670:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003672:	f7fd ff07 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003676:	b006      	add	sp, #24
 8003678:	bd10      	pop	{r4, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	40004400 	.word	0x40004400
 8003680:	40021000 	.word	0x40021000

08003684 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_UART_MspDeInit+0x20>)
 8003686:	6802      	ldr	r2, [r0, #0]
{
 8003688:	b510      	push	{r4, lr}
  if(huart->Instance==USART2)
 800368a:	429a      	cmp	r2, r3
 800368c:	d109      	bne.n	80036a2 <HAL_UART_MspDeInit+0x1e>
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 800368e:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8003690:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <HAL_UART_MspDeInit+0x24>)
 8003692:	4906      	ldr	r1, [pc, #24]	; (80036ac <HAL_UART_MspDeInit+0x28>)
 8003694:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8003696:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8003698:	400b      	ands	r3, r1
 800369a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 800369c:	210c      	movs	r1, #12
 800369e:	f7fd ffaf 	bl	8001600 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80036a2:	bd10      	pop	{r4, pc}
 80036a4:	40004400 	.word	0x40004400
 80036a8:	40021000 	.word	0x40021000
 80036ac:	fffdffff 	.word	0xfffdffff

080036b0 <NMI_Handler>:
 80036b0:	4770      	bx	lr

080036b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b2:	e7fe      	b.n	80036b2 <HardFault_Handler>

080036b4 <SVC_Handler>:
 80036b4:	4770      	bx	lr

080036b6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036b6:	4770      	bx	lr

080036b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ba:	f7fd fe5b 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036be:	bd10      	pop	{r4, pc}

080036c0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80036c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80036c2:	4802      	ldr	r0, [pc, #8]	; (80036cc <RTC_IRQHandler+0xc>)
 80036c4:	f7ff f826 	bl	8002714 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	200002d8 	.word	0x200002d8

080036d0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <_sbrk+0x2c>)
{
 80036d2:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80036d4:	6819      	ldr	r1, [r3, #0]
{
 80036d6:	0002      	movs	r2, r0
	if (heap_end == 0)
 80036d8:	2900      	cmp	r1, #0
 80036da:	d101      	bne.n	80036e0 <_sbrk+0x10>
		heap_end = &end;
 80036dc:	4908      	ldr	r1, [pc, #32]	; (8003700 <_sbrk+0x30>)
 80036de:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80036e0:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80036e2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80036e4:	1882      	adds	r2, r0, r2
 80036e6:	428a      	cmp	r2, r1
 80036e8:	d906      	bls.n	80036f8 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80036ea:	f000 fa5f 	bl	8003bac <__errno>
 80036ee:	230c      	movs	r3, #12
 80036f0:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80036f2:	2001      	movs	r0, #1
 80036f4:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80036f6:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80036f8:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80036fa:	e7fc      	b.n	80036f6 <_sbrk+0x26>
 80036fc:	20000248 	.word	0x20000248
 8003700:	200003d8 	.word	0x200003d8

08003704 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <SystemInit+0x44>)
 8003708:	0052      	lsls	r2, r2, #1
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	490e      	ldr	r1, [pc, #56]	; (800374c <SystemInit+0x48>)
 8003714:	400a      	ands	r2, r1
 8003716:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	490d      	ldr	r1, [pc, #52]	; (8003750 <SystemInit+0x4c>)
 800371c:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800371e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003720:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	438a      	bics	r2, r1
 8003726:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	490a      	ldr	r1, [pc, #40]	; (8003754 <SystemInit+0x50>)
 800372c:	400a      	ands	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	4909      	ldr	r1, [pc, #36]	; (8003758 <SystemInit+0x54>)
 8003734:	400a      	ands	r2, r1
 8003736:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <SystemInit+0x58>)
 8003740:	0512      	lsls	r2, r2, #20
 8003742:	609a      	str	r2, [r3, #8]
#endif
}
 8003744:	4770      	bx	lr
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	40021000 	.word	0x40021000
 800374c:	88ff400c 	.word	0x88ff400c
 8003750:	fef6fff6 	.word	0xfef6fff6
 8003754:	fffbffff 	.word	0xfffbffff
 8003758:	ff02ffff 	.word	0xff02ffff
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <SHT21_CheckSensor>:
	return SHT21_CheckSensor();
}

uint8_t SHT21_CheckSensor()
{
	return HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, NULL, 0, 1000) == HAL_OK? 1:0;
 8003760:	23fa      	movs	r3, #250	; 0xfa
{
 8003762:	b507      	push	{r0, r1, r2, lr}
	return HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, NULL, 0, 1000) == HAL_OK? 1:0;
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	2180      	movs	r1, #128	; 0x80
 800376c:	001a      	movs	r2, r3
 800376e:	4803      	ldr	r0, [pc, #12]	; (800377c <SHT21_CheckSensor+0x1c>)
 8003770:	f7fe f948 	bl	8001a04 <HAL_I2C_Master_Transmit>
 8003774:	4243      	negs	r3, r0
 8003776:	4158      	adcs	r0, r3
 8003778:	b2c0      	uxtb	r0, r0
}
 800377a:	bd0e      	pop	{r1, r2, r3, pc}
 800377c:	2000028c 	.word	0x2000028c

08003780 <SHT21_Begin>:
{
 8003780:	b510      	push	{r4, lr}
	return SHT21_CheckSensor();
 8003782:	f7ff ffed 	bl	8003760 <SHT21_CheckSensor>
}
 8003786:	bd10      	pop	{r4, pc}

08003788 <SHT21_ReadRegister>:
	// Return relative humidity multiplied by ten to avoid using float;
  	return (int16_t)((-46.85 + 175.72/65536 * (float)_t) * 100);
}

uint16_t SHT21_ReadRegister(uint8_t _reg)
{
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	220f      	movs	r2, #15
	uint8_t _data[3];

	// Use No Hold Master Mode - No Clock Streching!
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 800378c:	26fa      	movs	r6, #250	; 0xfa
{
 800378e:	b086      	sub	sp, #24
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8003790:	4d0c      	ldr	r5, [pc, #48]	; (80037c4 <SHT21_ReadRegister+0x3c>)
{
 8003792:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8003794:	00b6      	lsls	r6, r6, #2
{
 8003796:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8003798:	2301      	movs	r3, #1
 800379a:	2180      	movs	r1, #128	; 0x80
 800379c:	9600      	str	r6, [sp, #0]
 800379e:	0028      	movs	r0, r5
 80037a0:	f7fe f930 	bl	8001a04 <HAL_I2C_Master_Transmit>

	// Wait for measurment to be completed
	HAL_Delay(100);

	// Read the data
	HAL_I2C_Master_Receive(&hi2c1, SHT21_ADDRESS, _data, 3, 1000);
 80037a4:	ac05      	add	r4, sp, #20
	HAL_Delay(100);
 80037a6:	2064      	movs	r0, #100	; 0x64
 80037a8:	f7fd fdf6 	bl	8001398 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, SHT21_ADDRESS, _data, 3, 1000);
 80037ac:	9600      	str	r6, [sp, #0]
 80037ae:	2303      	movs	r3, #3
 80037b0:	0022      	movs	r2, r4
 80037b2:	2180      	movs	r1, #128	; 0x80
 80037b4:	0028      	movs	r0, r5
 80037b6:	f7fe f9bb 	bl	8001b30 <HAL_I2C_Master_Receive>
 80037ba:	8820      	ldrh	r0, [r4, #0]
 80037bc:	ba40      	rev16	r0, r0
 80037be:	b280      	uxth	r0, r0

	// Pack it!
	return (uint16_t)(_data[0] << 8) | _data[1];
}
 80037c0:	b006      	add	sp, #24
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	2000028c 	.word	0x2000028c

080037c8 <SHT21_ReadHumidity>:
int16_t SHT21_ReadHumidity() {
 80037c8:	b510      	push	{r4, lr}
	uint16_t _rh = SHT21_ReadRegister(SHT21_TRIG_HUM_MEAS_NO_HOLD);
 80037ca:	20f5      	movs	r0, #245	; 0xf5
 80037cc:	f7ff ffdc 	bl	8003788 <SHT21_ReadRegister>
	_rh &= ~0x0003;
 80037d0:	2303      	movs	r3, #3
 80037d2:	4398      	bics	r0, r3
  	return (int16_t)((-6.0 + 125.0/65536 * (float)_rh) * 100);
 80037d4:	b280      	uxth	r0, r0
 80037d6:	f7fc ff09 	bl	80005ec <__aeabi_ui2f>
 80037da:	f7fd fd17 	bl	800120c <__aeabi_f2d>
 80037de:	2200      	movs	r2, #0
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <SHT21_ReadHumidity+0x38>)
 80037e2:	f7fc ff49 	bl	8000678 <__aeabi_dmul>
 80037e6:	2200      	movs	r2, #0
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <SHT21_ReadHumidity+0x3c>)
 80037ea:	f7fd f9c5 	bl	8000b78 <__aeabi_dsub>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <SHT21_ReadHumidity+0x40>)
 80037f2:	f7fc ff41 	bl	8000678 <__aeabi_dmul>
 80037f6:	f7fd fcd5 	bl	80011a4 <__aeabi_d2iz>
 80037fa:	b200      	sxth	r0, r0
}
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	3f5f4000 	.word	0x3f5f4000
 8003804:	40180000 	.word	0x40180000
 8003808:	40590000 	.word	0x40590000

0800380c <SHT21_ReadTemperature>:
{
 800380c:	b510      	push	{r4, lr}
	uint16_t _t = SHT21_ReadRegister(SHT21_TRIG_TEMP_MEAS_NO_HOLD);
 800380e:	20f3      	movs	r0, #243	; 0xf3
 8003810:	f7ff ffba 	bl	8003788 <SHT21_ReadRegister>
	_t &= ~0x0003;
 8003814:	2303      	movs	r3, #3
 8003816:	4398      	bics	r0, r3
  	return (int16_t)((-46.85 + 175.72/65536 * (float)_t) * 100);
 8003818:	b280      	uxth	r0, r0
 800381a:	f7fc fee7 	bl	80005ec <__aeabi_ui2f>
 800381e:	f7fd fcf5 	bl	800120c <__aeabi_f2d>
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <SHT21_ReadTemperature+0x38>)
 8003824:	4b08      	ldr	r3, [pc, #32]	; (8003848 <SHT21_ReadTemperature+0x3c>)
 8003826:	f7fc ff27 	bl	8000678 <__aeabi_dmul>
 800382a:	4a08      	ldr	r2, [pc, #32]	; (800384c <SHT21_ReadTemperature+0x40>)
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <SHT21_ReadTemperature+0x44>)
 800382e:	f7fd f9a3 	bl	8000b78 <__aeabi_dsub>
 8003832:	2200      	movs	r2, #0
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <SHT21_ReadTemperature+0x48>)
 8003836:	f7fc ff1f 	bl	8000678 <__aeabi_dmul>
 800383a:	f7fd fcb3 	bl	80011a4 <__aeabi_d2iz>
 800383e:	b200      	sxth	r0, r0
}
 8003840:	bd10      	pop	{r4, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	3d70a3d7 	.word	0x3d70a3d7
 8003848:	3f65f70a 	.word	0x3f65f70a
 800384c:	cccccccd 	.word	0xcccccccd
 8003850:	40476ccc 	.word	0x40476ccc
 8003854:	40590000 	.word	0x40590000

08003858 <glassLCD_WriteData>:
	glassLCD_Clear();
	glassLCD_Update();
}

void glassLCD_WriteData(char* s)
{
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	0004      	movs	r4, r0
	// Get the size of string
	uint8_t _n = strlen(s) + 1;
 800385c:	f7fc fc54 	bl	8000108 <strlen>

	//Convert ASCII to segment data and save it to buffer
	for (int i = 0; i < _n; i++)
 8003860:	2300      	movs	r3, #0
	uint8_t _n = strlen(s) + 1;
 8003862:	3001      	adds	r0, #1
	{
		_lcdTemp[i] = asciiToSeg[s[i] - ' '];
 8003864:	4906      	ldr	r1, [pc, #24]	; (8003880 <glassLCD_WriteData+0x28>)
 8003866:	4d07      	ldr	r5, [pc, #28]	; (8003884 <glassLCD_WriteData+0x2c>)
	uint8_t _n = strlen(s) + 1;
 8003868:	b2c0      	uxtb	r0, r0
	for (int i = 0; i < _n; i++)
 800386a:	4283      	cmp	r3, r0
 800386c:	db00      	blt.n	8003870 <glassLCD_WriteData+0x18>
	}
}
 800386e:	bd70      	pop	{r4, r5, r6, pc}
		_lcdTemp[i] = asciiToSeg[s[i] - ' '];
 8003870:	5ce2      	ldrb	r2, [r4, r3]
 8003872:	3a20      	subs	r2, #32
 8003874:	0052      	lsls	r2, r2, #1
 8003876:	5b52      	ldrh	r2, [r2, r5]
 8003878:	545a      	strb	r2, [r3, r1]
	for (int i = 0; i < _n; i++)
 800387a:	3301      	adds	r3, #1
 800387c:	e7f5      	b.n	800386a <glassLCD_WriteData+0x12>
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	2000024d 	.word	0x2000024d
 8003884:	08005b7c 	.word	0x08005b7c

08003888 <glassLCD_Update>:

void glassLCD_Update()
{
 8003888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388a:	b087      	sub	sp, #28
	uint8_t _dotMask = 0;

	// Buffer for I2C data
	uint8_t _data[9] = {0};
 800388c:	ad03      	add	r5, sp, #12
 800388e:	2209      	movs	r2, #9
 8003890:	2100      	movs	r1, #0
 8003892:	0028      	movs	r0, r5
 8003894:	f000 fa98 	bl	8003dc8 <memset>

	//Write segments
	_data[0] = 0;
	for (int i = 0; i < 8; i++)
 8003898:	2300      	movs	r3, #0
	{
		_data[i + 1] = _lcdTemp[i];
 800389a:	4f19      	ldr	r7, [pc, #100]	; (8003900 <glassLCD_Update+0x78>)
 800389c:	3301      	adds	r3, #1
 800389e:	1e5a      	subs	r2, r3, #1
 80038a0:	5cba      	ldrb	r2, [r7, r2]
 80038a2:	54ea      	strb	r2, [r5, r3]
	for (int i = 0; i < 8; i++)
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d1f9      	bne.n	800389c <glassLCD_Update+0x14>
	}
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 9, 1000);
 80038a8:	23fa      	movs	r3, #250	; 0xfa
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	002a      	movs	r2, r5
 80038b0:	2309      	movs	r3, #9
 80038b2:	2170      	movs	r1, #112	; 0x70
 80038b4:	4813      	ldr	r0, [pc, #76]	; (8003904 <glassLCD_Update+0x7c>)
 80038b6:	f7fe f8a5 	bl	8001a04 <HAL_I2C_Master_Transmit>
 80038ba:	2602      	movs	r6, #2

	//Now write dots
	for (int i = 0; i < 8; i++)
 80038bc:	2400      	movs	r4, #0
	{
		_dotMask = (_dots & (1 << (7 - i))) ? 0b00100000 : 0b00000000;
 80038be:	2207      	movs	r2, #7
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <glassLCD_Update+0x80>)
 80038c2:	1b12      	subs	r2, r2, r4
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	0021      	movs	r1, r4
 80038c8:	4113      	asrs	r3, r2
 80038ca:	2201      	movs	r2, #1
	    _data[0] = 2 + (3 * i);
	    _data[1] = ((_lcdTemp[i] & 3) << 6) | _dotMask | (_lcdTemp[i + 1] >> 3);
 80038cc:	3401      	adds	r4, #1
		_dotMask = (_dots & (1 << (7 - i))) ? 0b00100000 : 0b00000000;
 80038ce:	4013      	ands	r3, r2
 80038d0:	015a      	lsls	r2, r3, #5
	    _data[1] = ((_lcdTemp[i] & 3) << 6) | _dotMask | (_lcdTemp[i + 1] >> 3);
 80038d2:	5c7b      	ldrb	r3, [r7, r1]
 80038d4:	5d39      	ldrb	r1, [r7, r4]
 80038d6:	019b      	lsls	r3, r3, #6
 80038d8:	08c9      	lsrs	r1, r1, #3
 80038da:	430b      	orrs	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	706b      	strb	r3, [r5, #1]
	    HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 2, 1000);
 80038e0:	23fa      	movs	r3, #250	; 0xfa
 80038e2:	009b      	lsls	r3, r3, #2
	    _data[0] = 2 + (3 * i);
 80038e4:	702e      	strb	r6, [r5, #0]
	    HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 2, 1000);
 80038e6:	002a      	movs	r2, r5
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2170      	movs	r1, #112	; 0x70
 80038ec:	2302      	movs	r3, #2
 80038ee:	4805      	ldr	r0, [pc, #20]	; (8003904 <glassLCD_Update+0x7c>)
 80038f0:	3603      	adds	r6, #3
 80038f2:	f7fe f887 	bl	8001a04 <HAL_I2C_Master_Transmit>
 80038f6:	b2f6      	uxtb	r6, r6
	for (int i = 0; i < 8; i++)
 80038f8:	2c08      	cmp	r4, #8
 80038fa:	d1e0      	bne.n	80038be <glassLCD_Update+0x36>
	}
}
 80038fc:	b007      	add	sp, #28
 80038fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003900:	2000024d 	.word	0x2000024d
 8003904:	2000028c 	.word	0x2000028c
 8003908:	2000024c 	.word	0x2000024c

0800390c <glassLCD_Clear>:

void glassLCD_Clear()
{
 800390c:	b510      	push	{r4, lr}
	memset(_lcdTemp, 0, 8);
 800390e:	2208      	movs	r2, #8
 8003910:	2100      	movs	r1, #0
 8003912:	4803      	ldr	r0, [pc, #12]	; (8003920 <glassLCD_Clear+0x14>)
 8003914:	f000 fa58 	bl	8003dc8 <memset>
	_dots = 0;
 8003918:	2200      	movs	r2, #0
 800391a:	4b02      	ldr	r3, [pc, #8]	; (8003924 <glassLCD_Clear+0x18>)
 800391c:	701a      	strb	r2, [r3, #0]
}
 800391e:	bd10      	pop	{r4, pc}
 8003920:	2000024d 	.word	0x2000024d
 8003924:	2000024c 	.word	0x2000024c

08003928 <glassLCD_SetDot>:
//	}
//}

void glassLCD_SetDot(uint8_t _dot)
{
	_dots = _dot;
 8003928:	4b01      	ldr	r3, [pc, #4]	; (8003930 <glassLCD_SetDot+0x8>)
 800392a:	7018      	strb	r0, [r3, #0]
}
 800392c:	4770      	bx	lr
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	2000024c 	.word	0x2000024c

08003934 <glassLCD_WriteArrow>:

void glassLCD_WriteArrow(uint8_t _n, uint8_t _en)
{
  _n &= 7;
 8003934:	2307      	movs	r3, #7
 8003936:	2220      	movs	r2, #32
 8003938:	4018      	ands	r0, r3
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <glassLCD_WriteArrow+0x1c>)
  if (_en)
 800393c:	2900      	cmp	r1, #0
 800393e:	d003      	beq.n	8003948 <glassLCD_WriteArrow+0x14>
  {
	  _lcdTemp[_n] |= SEGW;
 8003940:	5c19      	ldrb	r1, [r3, r0]
 8003942:	430a      	orrs	r2, r1
 8003944:	541a      	strb	r2, [r3, r0]
  }
  else
  {
	  _lcdTemp[_n] &= ~(SEGW);
  }
}
 8003946:	4770      	bx	lr
	  _lcdTemp[_n] &= ~(SEGW);
 8003948:	5c19      	ldrb	r1, [r3, r0]
 800394a:	4391      	bics	r1, r2
 800394c:	5419      	strb	r1, [r3, r0]
}
 800394e:	e7fa      	b.n	8003946 <glassLCD_WriteArrow+0x12>
 8003950:	2000024d 	.word	0x2000024d

08003954 <glassLCD_WriteCmd>:

void glassLCD_WriteCmd(uint8_t _comm)
{
 8003954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	_comm = _comm | 0b10000000;
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	425b      	negs	r3, r3
 800395a:	4318      	orrs	r0, r3
{
 800395c:	220f      	movs	r2, #15
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 800395e:	23fa      	movs	r3, #250	; 0xfa
{
 8003960:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 8003962:	009b      	lsls	r3, r3, #2
	_comm = _comm | 0b10000000;
 8003964:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 8003966:	2170      	movs	r1, #112	; 0x70
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	4803      	ldr	r0, [pc, #12]	; (8003978 <glassLCD_WriteCmd+0x24>)
 800396c:	2301      	movs	r3, #1
 800396e:	f7fe f849 	bl	8001a04 <HAL_I2C_Master_Transmit>
}
 8003972:	b005      	add	sp, #20
 8003974:	bd00      	pop	{pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	2000028c 	.word	0x2000028c

0800397c <glassLCD_Begin>:
{
 800397c:	b510      	push	{r4, lr}
	glassLCD_WriteCmd(LCD_CONFIG);
 800397e:	204b      	movs	r0, #75	; 0x4b
 8003980:	f7ff ffe8 	bl	8003954 <glassLCD_WriteCmd>
	glassLCD_Clear();
 8003984:	f7ff ffc2 	bl	800390c <glassLCD_Clear>
	glassLCD_Update();
 8003988:	f7ff ff7e 	bl	8003888 <glassLCD_Update>
}
 800398c:	bd10      	pop	{r4, pc}
	...

08003990 <RTC_SetTime>:
extern RTC_HandleTypeDef hrtc;
static time_t _epoch;
static const time_t* _epochHandler = &_epoch;

void RTC_SetTime(uint8_t _h, uint8_t _m, uint8_t _s)
{
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	0007      	movs	r7, r0
 8003994:	000e      	movs	r6, r1
 8003996:	0015      	movs	r5, r2
 8003998:	b087      	sub	sp, #28
	RTC_TimeTypeDef sTime = {0};
 800399a:	ac01      	add	r4, sp, #4
 800399c:	2214      	movs	r2, #20
 800399e:	2100      	movs	r1, #0
 80039a0:	0020      	movs	r0, r4
 80039a2:	f000 fa11 	bl	8003dc8 <memset>
	sTime.Hours = _h;
	sTime.Minutes = _m;
	sTime.Seconds = _s;
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80039a6:	2200      	movs	r2, #0
 80039a8:	0021      	movs	r1, r4
 80039aa:	4804      	ldr	r0, [pc, #16]	; (80039bc <RTC_SetTime+0x2c>)
	sTime.Hours = _h;
 80039ac:	7027      	strb	r7, [r4, #0]
	sTime.Minutes = _m;
 80039ae:	7066      	strb	r6, [r4, #1]
	sTime.Seconds = _s;
 80039b0:	70a5      	strb	r5, [r4, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80039b2:	f7fe ff7d 	bl	80028b0 <HAL_RTC_SetTime>
}
 80039b6:	b007      	add	sp, #28
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	200002d8 	.word	0x200002d8

080039c0 <RTC_GetData>:
	struct tm _t = RTC_GetData();
	return mktime(&_t);
}

struct tm RTC_GetData()
{
 80039c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct tm _t = {0};
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80039c2:	2500      	movs	r5, #0
{
 80039c4:	0004      	movs	r4, r0
 80039c6:	b08b      	sub	sp, #44	; 0x2c
  RTC_TimeTypeDef sTime = {0};
 80039c8:	ae05      	add	r6, sp, #20
 80039ca:	2214      	movs	r2, #20
 80039cc:	2100      	movs	r1, #0
 80039ce:	0030      	movs	r0, r6
 80039d0:	f000 f9fa 	bl	8003dc8 <memset>
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80039d4:	4f17      	ldr	r7, [pc, #92]	; (8003a34 <RTC_GetData+0x74>)
 80039d6:	002a      	movs	r2, r5
 80039d8:	0031      	movs	r1, r6
 80039da:	0038      	movs	r0, r7
  RTC_DateTypeDef sDate = {0};
 80039dc:	9504      	str	r5, [sp, #16]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80039de:	f7ff f923 	bl	8002c28 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80039e2:	002a      	movs	r2, r5
 80039e4:	a904      	add	r1, sp, #16
 80039e6:	0038      	movs	r0, r7
 80039e8:	f7ff f948 	bl	8002c7c <HAL_RTC_GetDate>
  _t.tm_sec = sTime.Seconds;;
  _t.tm_min = sTime.Minutes;
  _t.tm_hour = sTime.Hours;
 80039ec:	7833      	ldrb	r3, [r6, #0]
  _t.tm_min = sTime.Minutes;
 80039ee:	7877      	ldrb	r7, [r6, #1]
  _t.tm_hour = sTime.Hours;
 80039f0:	9301      	str	r3, [sp, #4]
  _t.tm_mday = sDate.Date;
 80039f2:	ab04      	add	r3, sp, #16
 80039f4:	789b      	ldrb	r3, [r3, #2]
  _t.tm_mon = (sDate.Month - 1);
  _t.tm_year = 100 + (sDate.Year % 100);
 80039f6:	2164      	movs	r1, #100	; 0x64
  _t.tm_mday = sDate.Date;
 80039f8:	9302      	str	r3, [sp, #8]
  _t.tm_mon = (sDate.Month - 1);
 80039fa:	ab04      	add	r3, sp, #16
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	9303      	str	r3, [sp, #12]
  _t.tm_year = 100 + (sDate.Year % 100);
 8003a02:	ab04      	add	r3, sp, #16
 8003a04:	78d8      	ldrb	r0, [r3, #3]
 8003a06:	f7fc fc21 	bl	800024c <__aeabi_uidivmod>
  _t.tm_sec = sTime.Seconds;;
 8003a0a:	78b3      	ldrb	r3, [r6, #2]
  _t.tm_isdst = -1;
  _t.tm_yday = 0;
  _t.tm_wday = 0;
  return _t;
}
 8003a0c:	0020      	movs	r0, r4
  _t.tm_sec = sTime.Seconds;;
 8003a0e:	6023      	str	r3, [r4, #0]
  return _t;
 8003a10:	9b01      	ldr	r3, [sp, #4]
  _t.tm_year = 100 + (sDate.Year % 100);
 8003a12:	b2c9      	uxtb	r1, r1
  return _t;
 8003a14:	60a3      	str	r3, [r4, #8]
 8003a16:	9b02      	ldr	r3, [sp, #8]
  _t.tm_year = 100 + (sDate.Year % 100);
 8003a18:	3164      	adds	r1, #100	; 0x64
  return _t;
 8003a1a:	60e3      	str	r3, [r4, #12]
 8003a1c:	9b03      	ldr	r3, [sp, #12]
 8003a1e:	6067      	str	r7, [r4, #4]
 8003a20:	6123      	str	r3, [r4, #16]
 8003a22:	2301      	movs	r3, #1
 8003a24:	425b      	negs	r3, r3
 8003a26:	6161      	str	r1, [r4, #20]
 8003a28:	61a5      	str	r5, [r4, #24]
 8003a2a:	61e5      	str	r5, [r4, #28]
 8003a2c:	6223      	str	r3, [r4, #32]
}
 8003a2e:	b00b      	add	sp, #44	; 0x2c
 8003a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	200002d8 	.word	0x200002d8

08003a38 <RTC_GetEpoch>:
{
 8003a38:	b500      	push	{lr}
 8003a3a:	b08b      	sub	sp, #44	; 0x2c
	struct tm _t = RTC_GetData();
 8003a3c:	a801      	add	r0, sp, #4
 8003a3e:	f7ff ffbf 	bl	80039c0 <RTC_GetData>
	return mktime(&_t);
 8003a42:	a801      	add	r0, sp, #4
 8003a44:	f000 fa94 	bl	8003f70 <mktime>
}
 8003a48:	b00b      	add	sp, #44	; 0x2c
 8003a4a:	bd00      	pop	{pc}

08003a4c <RTC_epochToTimeAndDate>:
    _sAlarm.Alarm = RTC_ALARM_A;
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
}

void RTC_epochToTimeAndDate(uint32_t _ep, uint8_t *_sec, uint8_t *_min, uint8_t *_hour, uint8_t *_day, uint8_t *_month, uint8_t *_year)
{
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	001c      	movs	r4, r3
  struct tm *_t;
  _epoch = _ep;
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <RTC_epochToTimeAndDate+0x38>)
{
 8003a52:	0015      	movs	r5, r2
  _epoch = _ep;
 8003a54:	6018      	str	r0, [r3, #0]
  _t = gmtime(_epochHandler);
 8003a56:	0018      	movs	r0, r3
{
 8003a58:	000e      	movs	r6, r1
  _t = gmtime(_epochHandler);
 8003a5a:	f000 f8ad 	bl	8003bb8 <gmtime>
  *_sec = _t->tm_sec;
 8003a5e:	7803      	ldrb	r3, [r0, #0]
 8003a60:	7033      	strb	r3, [r6, #0]
  *_min = _t->tm_min;
 8003a62:	7903      	ldrb	r3, [r0, #4]
 8003a64:	702b      	strb	r3, [r5, #0]
  *_hour = _t->tm_hour;
 8003a66:	7a03      	ldrb	r3, [r0, #8]
 8003a68:	7023      	strb	r3, [r4, #0]
  *_day = _t->tm_mday;
 8003a6a:	7b02      	ldrb	r2, [r0, #12]
 8003a6c:	9b04      	ldr	r3, [sp, #16]
 8003a6e:	701a      	strb	r2, [r3, #0]
  *_month = (_t->tm_mon) + 1;
 8003a70:	6903      	ldr	r3, [r0, #16]
 8003a72:	9a05      	ldr	r2, [sp, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	7013      	strb	r3, [r2, #0]
  *_year = (_t->tm_year) + 1900;
 8003a78:	6943      	ldr	r3, [r0, #20]
 8003a7a:	9a06      	ldr	r2, [sp, #24]
 8003a7c:	336c      	adds	r3, #108	; 0x6c
 8003a7e:	7013      	strb	r3, [r2, #0]
}
 8003a80:	bd70      	pop	{r4, r5, r6, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	20000258 	.word	0x20000258

08003a88 <RTC_SetAlarmEpoch>:
{
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003a8a:	2780      	movs	r7, #128	; 0x80
 8003a8c:	4e1b      	ldr	r6, [pc, #108]	; (8003afc <RTC_SetAlarmEpoch+0x74>)
{
 8003a8e:	b097      	sub	sp, #92	; 0x5c
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003a90:	007f      	lsls	r7, r7, #1
	RTC_AlarmTypeDef _sAlarm = {0};
 8003a92:	ad0c      	add	r5, sp, #48	; 0x30
{
 8003a94:	9004      	str	r0, [sp, #16]
 8003a96:	9105      	str	r1, [sp, #20]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003a98:	0030      	movs	r0, r6
 8003a9a:	0039      	movs	r1, r7
 8003a9c:	f7fe fdd8 	bl	8002650 <HAL_RTC_DeactivateAlarm>
	RTC_TimeTypeDef _sTime = {0};
 8003aa0:	ac07      	add	r4, sp, #28
	RTC_AlarmTypeDef _sAlarm = {0};
 8003aa2:	2228      	movs	r2, #40	; 0x28
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	0028      	movs	r0, r5
 8003aa8:	f000 f98e 	bl	8003dc8 <memset>
	RTC_TimeTypeDef _sTime = {0};
 8003aac:	2214      	movs	r2, #20
 8003aae:	2100      	movs	r1, #0
 8003ab0:	0020      	movs	r0, r4
 8003ab2:	f000 f989 	bl	8003dc8 <memset>
	RTC_epochToTimeAndDate(_alarmEpoch, &_sTime.Seconds, &_sTime.Minutes, &_sTime.Hours, &_sAlarm.AlarmDateWeekDay, &_dummy, &_dummy);
 8003ab6:	2313      	movs	r3, #19
 8003ab8:	aa02      	add	r2, sp, #8
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	2215      	movs	r2, #21
 8003abe:	a902      	add	r1, sp, #8
 8003ac0:	1852      	adds	r2, r2, r1
 8003ac2:	2116      	movs	r1, #22
 8003ac4:	9302      	str	r3, [sp, #8]
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	a802      	add	r0, sp, #8
 8003aca:	ab14      	add	r3, sp, #80	; 0x50
 8003acc:	1809      	adds	r1, r1, r0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	9804      	ldr	r0, [sp, #16]
 8003ad2:	0023      	movs	r3, r4
 8003ad4:	f7ff ffba 	bl	8003a4c <RTC_epochToTimeAndDate>
    _sAlarm.AlarmTime = _sTime;
 8003ad8:	002b      	movs	r3, r5
 8003ada:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003adc:	c307      	stmia	r3!, {r0, r1, r2}
 8003ade:	cc06      	ldmia	r4!, {r1, r2}
 8003ae0:	c306      	stmia	r3!, {r1, r2}
    _sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003ae2:	2200      	movs	r2, #0
    _sAlarm.AlarmMask = _mask;
 8003ae4:	9b05      	ldr	r3, [sp, #20]
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
 8003ae6:	0029      	movs	r1, r5
 8003ae8:	0030      	movs	r0, r6
    _sAlarm.AlarmMask = _mask;
 8003aea:	616b      	str	r3, [r5, #20]
    _sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003aec:	61aa      	str	r2, [r5, #24]
    _sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003aee:	61ea      	str	r2, [r5, #28]
    _sAlarm.Alarm = RTC_ALARM_A;
 8003af0:	626f      	str	r7, [r5, #36]	; 0x24
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
 8003af2:	f7fe ffc7 	bl	8002a84 <HAL_RTC_SetAlarm_IT>
}
 8003af6:	b017      	add	sp, #92	; 0x5c
 8003af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	200002d8 	.word	0x200002d8

08003b00 <Sleep_LightSleep>:
#include "sleep.h"

void Sleep_LightSleep()
{
 8003b00:	b570      	push	{r4, r5, r6, lr}
	HAL_PWR_DisablePVD();
 8003b02:	f7fe f901 	bl	8001d08 <HAL_PWR_DisablePVD>
	HAL_PWREx_EnableUltraLowPower();
 8003b06:	f7fe f923 	bl	8001d50 <HAL_PWREx_EnableUltraLowPower>

	// Disable HAL_Tick (it triggers every 1ms, even from sleep)
	HAL_SuspendTick();
 8003b0a:	f7fd fc57 	bl	80013bc <HAL_SuspendTick>

	// Disable all unused periph. in sleep mode
	HAL_I2C_DeInit(&hi2c1);
 8003b0e:	4e0f      	ldr	r6, [pc, #60]	; (8003b4c <Sleep_LightSleep+0x4c>)
 8003b10:	0030      	movs	r0, r6
 8003b12:	f7fd ff5d 	bl	80019d0 <HAL_I2C_DeInit>
	HAL_SPI_DeInit(&hspi1);
 8003b16:	4d0e      	ldr	r5, [pc, #56]	; (8003b50 <Sleep_LightSleep+0x50>)
 8003b18:	0028      	movs	r0, r5
 8003b1a:	f7ff f913 	bl	8002d44 <HAL_SPI_DeInit>
	HAL_UART_DeInit(&huart2);
 8003b1e:	4c0d      	ldr	r4, [pc, #52]	; (8003b54 <Sleep_LightSleep+0x54>)
 8003b20:	0020      	movs	r0, r4
 8003b22:	f7ff f926 	bl	8002d72 <HAL_UART_DeInit>

	// Enter "light sleep" mode and wait for Interrupt to wake up (WFI - Wait For Interrupt)
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003b26:	2101      	movs	r1, #1
 8003b28:	0008      	movs	r0, r1
 8003b2a:	f7fe f8f5 	bl	8001d18 <HAL_PWR_EnterSTOPMode>

	// Recover from "light sleep" mode

	// First set up all clock once again
	SystemClock_Config();
 8003b2e:	f7ff fb4f 	bl	80031d0 <SystemClock_Config>

	// Re-activate HAL_Tick
	HAL_ResumeTick();
 8003b32:	f7fd fc4b 	bl	80013cc <HAL_ResumeTick>

	// Re-Init all prev. disabled periph.
	HAL_I2C_Init(&hi2c1);
 8003b36:	0030      	movs	r0, r6
 8003b38:	f7fd fef4 	bl	8001924 <HAL_I2C_Init>
	HAL_SPI_Init(&hspi1);
 8003b3c:	0028      	movs	r0, r5
 8003b3e:	f7ff f8c1 	bl	8002cc4 <HAL_SPI_Init>
	HAL_UART_Init(&huart2);
 8003b42:	0020      	movs	r0, r4
 8003b44:	f7ff fb12 	bl	800316c <HAL_UART_Init>
}
 8003b48:	bd70      	pop	{r4, r5, r6, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	2000028c 	.word	0x2000028c
 8003b50:	200002fc 	.word	0x200002fc
 8003b54:	20000354 	.word	0x20000354

08003b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003b58:	480d      	ldr	r0, [pc, #52]	; (8003b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003b5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b5e:	e003      	b.n	8003b68 <LoopCopyDataInit>

08003b60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003b62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b66:	3104      	adds	r1, #4

08003b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b68:	480b      	ldr	r0, [pc, #44]	; (8003b98 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <LoopForever+0xe>)
  adds  r2, r0, r1
 8003b6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b70:	d3f6      	bcc.n	8003b60 <CopyDataInit>
  ldr  r2, =_sbss
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003b74:	e002      	b.n	8003b7c <LoopFillZerobss>

08003b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003b76:	2300      	movs	r3, #0
  str  r3, [r2]
 8003b78:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b7a:	3204      	adds	r2, #4

08003b7c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <LoopForever+0x16>)
  cmp  r2, r3
 8003b7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b80:	d3f9      	bcc.n	8003b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b82:	f7ff fdbf 	bl	8003704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b86:	f000 f8e7 	bl	8003d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b8a:	f7ff fb69 	bl	8003260 <main>

08003b8e <LoopForever>:

LoopForever:
    b LoopForever
 8003b8e:	e7fe      	b.n	8003b8e <LoopForever>
  ldr   r0, =_estack
 8003b90:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003b94:	08005e98 	.word	0x08005e98
  ldr  r0, =_sdata
 8003b98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b9c:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8003ba0:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8003ba4:	200003d8 	.word	0x200003d8

08003ba8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ba8:	e7fe      	b.n	8003ba8 <ADC1_COMP_IRQHandler>
	...

08003bac <__errno>:
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <__errno+0x8>)
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	4770      	bx	lr
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	20000010 	.word	0x20000010

08003bb8 <gmtime>:
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <gmtime+0x20>)
 8003bba:	b570      	push	{r4, r5, r6, lr}
 8003bbc:	681c      	ldr	r4, [r3, #0]
 8003bbe:	0005      	movs	r5, r0
 8003bc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <gmtime+0x16>
 8003bc6:	2024      	movs	r0, #36	; 0x24
 8003bc8:	f000 f8ea 	bl	8003da0 <malloc>
 8003bcc:	63e0      	str	r0, [r4, #60]	; 0x3c
 8003bce:	0028      	movs	r0, r5
 8003bd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003bd2:	f000 f803 	bl	8003bdc <gmtime_r>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	20000010 	.word	0x20000010

08003bdc <gmtime_r>:
 8003bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bde:	6805      	ldr	r5, [r0, #0]
 8003be0:	b085      	sub	sp, #20
 8003be2:	000c      	movs	r4, r1
 8003be4:	0028      	movs	r0, r5
 8003be6:	4952      	ldr	r1, [pc, #328]	; (8003d30 <gmtime_r+0x154>)
 8003be8:	f7fc fb34 	bl	8000254 <__divsi3>
 8003bec:	4950      	ldr	r1, [pc, #320]	; (8003d30 <gmtime_r+0x154>)
 8003bee:	0006      	movs	r6, r0
 8003bf0:	0028      	movs	r0, r5
 8003bf2:	f7fc fc15 	bl	8000420 <__aeabi_idivmod>
 8003bf6:	1e0f      	subs	r7, r1, #0
 8003bf8:	da00      	bge.n	8003bfc <gmtime_r+0x20>
 8003bfa:	e080      	b.n	8003cfe <gmtime_r+0x122>
 8003bfc:	4b4d      	ldr	r3, [pc, #308]	; (8003d34 <gmtime_r+0x158>)
 8003bfe:	21e1      	movs	r1, #225	; 0xe1
 8003c00:	0038      	movs	r0, r7
 8003c02:	0109      	lsls	r1, r1, #4
 8003c04:	18f5      	adds	r5, r6, r3
 8003c06:	f7fc fb25 	bl	8000254 <__divsi3>
 8003c0a:	21e1      	movs	r1, #225	; 0xe1
 8003c0c:	60a0      	str	r0, [r4, #8]
 8003c0e:	0109      	lsls	r1, r1, #4
 8003c10:	0038      	movs	r0, r7
 8003c12:	f7fc fc05 	bl	8000420 <__aeabi_idivmod>
 8003c16:	000e      	movs	r6, r1
 8003c18:	213c      	movs	r1, #60	; 0x3c
 8003c1a:	0030      	movs	r0, r6
 8003c1c:	f7fc fb1a 	bl	8000254 <__divsi3>
 8003c20:	213c      	movs	r1, #60	; 0x3c
 8003c22:	6060      	str	r0, [r4, #4]
 8003c24:	0030      	movs	r0, r6
 8003c26:	f7fc fbfb 	bl	8000420 <__aeabi_idivmod>
 8003c2a:	1ce8      	adds	r0, r5, #3
 8003c2c:	6021      	str	r1, [r4, #0]
 8003c2e:	2107      	movs	r1, #7
 8003c30:	f7fc fbf6 	bl	8000420 <__aeabi_idivmod>
 8003c34:	0028      	movs	r0, r5
 8003c36:	61a1      	str	r1, [r4, #24]
 8003c38:	493f      	ldr	r1, [pc, #252]	; (8003d38 <gmtime_r+0x15c>)
 8003c3a:	f7fc fb0b 	bl	8000254 <__divsi3>
 8003c3e:	4e3f      	ldr	r6, [pc, #252]	; (8003d3c <gmtime_r+0x160>)
 8003c40:	493f      	ldr	r1, [pc, #252]	; (8003d40 <gmtime_r+0x164>)
 8003c42:	4346      	muls	r6, r0
 8003c44:	1976      	adds	r6, r6, r5
 8003c46:	0007      	movs	r7, r0
 8003c48:	0030      	movs	r0, r6
 8003c4a:	f7fc fa79 	bl	8000140 <__udivsi3>
 8003c4e:	493d      	ldr	r1, [pc, #244]	; (8003d44 <gmtime_r+0x168>)
 8003c50:	1985      	adds	r5, r0, r6
 8003c52:	0030      	movs	r0, r6
 8003c54:	f7fc fa74 	bl	8000140 <__udivsi3>
 8003c58:	493b      	ldr	r1, [pc, #236]	; (8003d48 <gmtime_r+0x16c>)
 8003c5a:	1a2d      	subs	r5, r5, r0
 8003c5c:	0030      	movs	r0, r6
 8003c5e:	f7fc fa6f 	bl	8000140 <__udivsi3>
 8003c62:	216e      	movs	r1, #110	; 0x6e
 8003c64:	1a2d      	subs	r5, r5, r0
 8003c66:	31ff      	adds	r1, #255	; 0xff
 8003c68:	0028      	movs	r0, r5
 8003c6a:	f7fc fa69 	bl	8000140 <__udivsi3>
 8003c6e:	4937      	ldr	r1, [pc, #220]	; (8003d4c <gmtime_r+0x170>)
 8003c70:	9001      	str	r0, [sp, #4]
 8003c72:	0028      	movs	r0, r5
 8003c74:	f7fc fa64 	bl	8000140 <__udivsi3>
 8003c78:	4932      	ldr	r1, [pc, #200]	; (8003d44 <gmtime_r+0x168>)
 8003c7a:	1986      	adds	r6, r0, r6
 8003c7c:	0028      	movs	r0, r5
 8003c7e:	f7fc fa5f 	bl	8000140 <__udivsi3>
 8003c82:	216e      	movs	r1, #110	; 0x6e
 8003c84:	9b01      	ldr	r3, [sp, #4]
 8003c86:	31ff      	adds	r1, #255	; 0xff
 8003c88:	4359      	muls	r1, r3
 8003c8a:	1a36      	subs	r6, r6, r0
 8003c8c:	1a73      	subs	r3, r6, r1
 8003c8e:	0018      	movs	r0, r3
 8003c90:	2605      	movs	r6, #5
 8003c92:	4370      	muls	r0, r6
 8003c94:	2199      	movs	r1, #153	; 0x99
 8003c96:	3002      	adds	r0, #2
 8003c98:	9302      	str	r3, [sp, #8]
 8003c9a:	f7fc fa51 	bl	8000140 <__udivsi3>
 8003c9e:	0005      	movs	r5, r0
 8003ca0:	2099      	movs	r0, #153	; 0x99
 8003ca2:	4368      	muls	r0, r5
 8003ca4:	9b02      	ldr	r3, [sp, #8]
 8003ca6:	3002      	adds	r0, #2
 8003ca8:	3301      	adds	r3, #1
 8003caa:	0031      	movs	r1, r6
 8003cac:	9303      	str	r3, [sp, #12]
 8003cae:	f7fc fa47 	bl	8000140 <__udivsi3>
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	1a1b      	subs	r3, r3, r0
 8003cb6:	9303      	str	r3, [sp, #12]
 8003cb8:	2302      	movs	r3, #2
 8003cba:	2d09      	cmp	r5, #9
 8003cbc:	d900      	bls.n	8003cc0 <gmtime_r+0xe4>
 8003cbe:	3b0c      	subs	r3, #12
 8003cc0:	195d      	adds	r5, r3, r5
 8003cc2:	23c8      	movs	r3, #200	; 0xc8
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	435f      	muls	r7, r3
 8003cc8:	9b01      	ldr	r3, [sp, #4]
 8003cca:	2601      	movs	r6, #1
 8003ccc:	18ff      	adds	r7, r7, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	42ae      	cmp	r6, r5
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	18ff      	adds	r7, r7, r3
 8003cd6:	2332      	movs	r3, #50	; 0x32
 8003cd8:	9a02      	ldr	r2, [sp, #8]
 8003cda:	33ff      	adds	r3, #255	; 0xff
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d912      	bls.n	8003d06 <gmtime_r+0x12a>
 8003ce0:	0016      	movs	r6, r2
 8003ce2:	3e33      	subs	r6, #51	; 0x33
 8003ce4:	3eff      	subs	r6, #255	; 0xff
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <gmtime_r+0x174>)
 8003ce8:	0020      	movs	r0, r4
 8003cea:	18ff      	adds	r7, r7, r3
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	61e6      	str	r6, [r4, #28]
 8003cf0:	60e3      	str	r3, [r4, #12]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	6167      	str	r7, [r4, #20]
 8003cf6:	6125      	str	r5, [r4, #16]
 8003cf8:	6223      	str	r3, [r4, #32]
 8003cfa:	b005      	add	sp, #20
 8003cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <gmtime_r+0x154>)
 8003d00:	18cf      	adds	r7, r1, r3
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <gmtime_r+0x178>)
 8003d04:	e77b      	b.n	8003bfe <gmtime_r+0x22>
 8003d06:	9b01      	ldr	r3, [sp, #4]
 8003d08:	079b      	lsls	r3, r3, #30
 8003d0a:	d105      	bne.n	8003d18 <gmtime_r+0x13c>
 8003d0c:	2164      	movs	r1, #100	; 0x64
 8003d0e:	9801      	ldr	r0, [sp, #4]
 8003d10:	f7fc fa9c 	bl	800024c <__aeabi_uidivmod>
 8003d14:	2900      	cmp	r1, #0
 8003d16:	d106      	bne.n	8003d26 <gmtime_r+0x14a>
 8003d18:	21c8      	movs	r1, #200	; 0xc8
 8003d1a:	9801      	ldr	r0, [sp, #4]
 8003d1c:	0049      	lsls	r1, r1, #1
 8003d1e:	f7fc fa95 	bl	800024c <__aeabi_uidivmod>
 8003d22:	424e      	negs	r6, r1
 8003d24:	414e      	adcs	r6, r1
 8003d26:	9802      	ldr	r0, [sp, #8]
 8003d28:	303b      	adds	r0, #59	; 0x3b
 8003d2a:	1986      	adds	r6, r0, r6
 8003d2c:	e7db      	b.n	8003ce6 <gmtime_r+0x10a>
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	00015180 	.word	0x00015180
 8003d34:	000afa6c 	.word	0x000afa6c
 8003d38:	00023ab1 	.word	0x00023ab1
 8003d3c:	fffdc54f 	.word	0xfffdc54f
 8003d40:	00008eac 	.word	0x00008eac
 8003d44:	000005b4 	.word	0x000005b4
 8003d48:	00023ab0 	.word	0x00023ab0
 8003d4c:	00008e94 	.word	0x00008e94
 8003d50:	fffff894 	.word	0xfffff894
 8003d54:	000afa6b 	.word	0x000afa6b

08003d58 <__libc_init_array>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	2600      	movs	r6, #0
 8003d5c:	4d0c      	ldr	r5, [pc, #48]	; (8003d90 <__libc_init_array+0x38>)
 8003d5e:	4c0d      	ldr	r4, [pc, #52]	; (8003d94 <__libc_init_array+0x3c>)
 8003d60:	1b64      	subs	r4, r4, r5
 8003d62:	10a4      	asrs	r4, r4, #2
 8003d64:	42a6      	cmp	r6, r4
 8003d66:	d109      	bne.n	8003d7c <__libc_init_array+0x24>
 8003d68:	2600      	movs	r6, #0
 8003d6a:	f001 feaf 	bl	8005acc <_init>
 8003d6e:	4d0a      	ldr	r5, [pc, #40]	; (8003d98 <__libc_init_array+0x40>)
 8003d70:	4c0a      	ldr	r4, [pc, #40]	; (8003d9c <__libc_init_array+0x44>)
 8003d72:	1b64      	subs	r4, r4, r5
 8003d74:	10a4      	asrs	r4, r4, #2
 8003d76:	42a6      	cmp	r6, r4
 8003d78:	d105      	bne.n	8003d86 <__libc_init_array+0x2e>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	00b3      	lsls	r3, r6, #2
 8003d7e:	58eb      	ldr	r3, [r5, r3]
 8003d80:	4798      	blx	r3
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7ee      	b.n	8003d64 <__libc_init_array+0xc>
 8003d86:	00b3      	lsls	r3, r6, #2
 8003d88:	58eb      	ldr	r3, [r5, r3]
 8003d8a:	4798      	blx	r3
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	e7f2      	b.n	8003d76 <__libc_init_array+0x1e>
 8003d90:	08005e90 	.word	0x08005e90
 8003d94:	08005e90 	.word	0x08005e90
 8003d98:	08005e90 	.word	0x08005e90
 8003d9c:	08005e94 	.word	0x08005e94

08003da0 <malloc>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <malloc+0x10>)
 8003da4:	0001      	movs	r1, r0
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	f000 fab6 	bl	8004318 <_malloc_r>
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	20000010 	.word	0x20000010

08003db4 <free>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <free+0x10>)
 8003db8:	0001      	movs	r1, r0
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	f000 fa62 	bl	8004284 <_free_r>
 8003dc0:	bd10      	pop	{r4, pc}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	20000010 	.word	0x20000010

08003dc8 <memset>:
 8003dc8:	0003      	movs	r3, r0
 8003dca:	1882      	adds	r2, r0, r2
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <memset+0xa>
 8003dd0:	4770      	bx	lr
 8003dd2:	7019      	strb	r1, [r3, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	e7f9      	b.n	8003dcc <memset+0x4>

08003dd8 <validate_structure>:
 8003dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dda:	6801      	ldr	r1, [r0, #0]
 8003ddc:	0004      	movs	r4, r0
 8003dde:	293b      	cmp	r1, #59	; 0x3b
 8003de0:	d90b      	bls.n	8003dfa <validate_structure+0x22>
 8003de2:	223c      	movs	r2, #60	; 0x3c
 8003de4:	4668      	mov	r0, sp
 8003de6:	f000 fd5f 	bl	80048a8 <div>
 8003dea:	6863      	ldr	r3, [r4, #4]
 8003dec:	9900      	ldr	r1, [sp, #0]
 8003dee:	9a01      	ldr	r2, [sp, #4]
 8003df0:	185b      	adds	r3, r3, r1
 8003df2:	6063      	str	r3, [r4, #4]
 8003df4:	2a00      	cmp	r2, #0
 8003df6:	db6c      	blt.n	8003ed2 <validate_structure+0xfa>
 8003df8:	6022      	str	r2, [r4, #0]
 8003dfa:	6861      	ldr	r1, [r4, #4]
 8003dfc:	293b      	cmp	r1, #59	; 0x3b
 8003dfe:	d90b      	bls.n	8003e18 <validate_structure+0x40>
 8003e00:	223c      	movs	r2, #60	; 0x3c
 8003e02:	4668      	mov	r0, sp
 8003e04:	f000 fd50 	bl	80048a8 <div>
 8003e08:	68a3      	ldr	r3, [r4, #8]
 8003e0a:	9900      	ldr	r1, [sp, #0]
 8003e0c:	9a01      	ldr	r2, [sp, #4]
 8003e0e:	185b      	adds	r3, r3, r1
 8003e10:	60a3      	str	r3, [r4, #8]
 8003e12:	2a00      	cmp	r2, #0
 8003e14:	db62      	blt.n	8003edc <validate_structure+0x104>
 8003e16:	6062      	str	r2, [r4, #4]
 8003e18:	68a1      	ldr	r1, [r4, #8]
 8003e1a:	2917      	cmp	r1, #23
 8003e1c:	d90b      	bls.n	8003e36 <validate_structure+0x5e>
 8003e1e:	2218      	movs	r2, #24
 8003e20:	4668      	mov	r0, sp
 8003e22:	f000 fd41 	bl	80048a8 <div>
 8003e26:	68e3      	ldr	r3, [r4, #12]
 8003e28:	9900      	ldr	r1, [sp, #0]
 8003e2a:	9a01      	ldr	r2, [sp, #4]
 8003e2c:	185b      	adds	r3, r3, r1
 8003e2e:	60e3      	str	r3, [r4, #12]
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	db58      	blt.n	8003ee6 <validate_structure+0x10e>
 8003e34:	60a2      	str	r2, [r4, #8]
 8003e36:	6921      	ldr	r1, [r4, #16]
 8003e38:	290b      	cmp	r1, #11
 8003e3a:	d90b      	bls.n	8003e54 <validate_structure+0x7c>
 8003e3c:	220c      	movs	r2, #12
 8003e3e:	4668      	mov	r0, sp
 8003e40:	f000 fd32 	bl	80048a8 <div>
 8003e44:	6963      	ldr	r3, [r4, #20]
 8003e46:	9900      	ldr	r1, [sp, #0]
 8003e48:	9a01      	ldr	r2, [sp, #4]
 8003e4a:	185b      	adds	r3, r3, r1
 8003e4c:	6163      	str	r3, [r4, #20]
 8003e4e:	2a00      	cmp	r2, #0
 8003e50:	db4e      	blt.n	8003ef0 <validate_structure+0x118>
 8003e52:	6122      	str	r2, [r4, #16]
 8003e54:	6965      	ldr	r5, [r4, #20]
 8003e56:	231c      	movs	r3, #28
 8003e58:	07aa      	lsls	r2, r5, #30
 8003e5a:	d10f      	bne.n	8003e7c <validate_structure+0xa4>
 8003e5c:	2164      	movs	r1, #100	; 0x64
 8003e5e:	0028      	movs	r0, r5
 8003e60:	f7fc fade 	bl	8000420 <__aeabi_idivmod>
 8003e64:	231d      	movs	r3, #29
 8003e66:	2900      	cmp	r1, #0
 8003e68:	d108      	bne.n	8003e7c <validate_structure+0xa4>
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	; (8003f60 <validate_structure+0x188>)
 8003e6c:	3191      	adds	r1, #145	; 0x91
 8003e6e:	18e8      	adds	r0, r5, r3
 8003e70:	31ff      	adds	r1, #255	; 0xff
 8003e72:	f7fc fad5 	bl	8000420 <__aeabi_idivmod>
 8003e76:	424b      	negs	r3, r1
 8003e78:	414b      	adcs	r3, r1
 8003e7a:	331c      	adds	r3, #28
 8003e7c:	68e2      	ldr	r2, [r4, #12]
 8003e7e:	2a00      	cmp	r2, #0
 8003e80:	dd3b      	ble.n	8003efa <validate_structure+0x122>
 8003e82:	2602      	movs	r6, #2
 8003e84:	4f37      	ldr	r7, [pc, #220]	; (8003f64 <validate_structure+0x18c>)
 8003e86:	6921      	ldr	r1, [r4, #16]
 8003e88:	68e2      	ldr	r2, [r4, #12]
 8003e8a:	2901      	cmp	r1, #1
 8003e8c:	d061      	beq.n	8003f52 <validate_structure+0x17a>
 8003e8e:	0088      	lsls	r0, r1, #2
 8003e90:	59c0      	ldr	r0, [r0, r7]
 8003e92:	4282      	cmp	r2, r0
 8003e94:	dd35      	ble.n	8003f02 <validate_structure+0x12a>
 8003e96:	1a12      	subs	r2, r2, r0
 8003e98:	3101      	adds	r1, #1
 8003e9a:	60e2      	str	r2, [r4, #12]
 8003e9c:	6121      	str	r1, [r4, #16]
 8003e9e:	290c      	cmp	r1, #12
 8003ea0:	d1f1      	bne.n	8003e86 <validate_structure+0xae>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6965      	ldr	r5, [r4, #20]
 8003ea6:	6123      	str	r3, [r4, #16]
 8003ea8:	1c68      	adds	r0, r5, #1
 8003eaa:	6160      	str	r0, [r4, #20]
 8003eac:	331c      	adds	r3, #28
 8003eae:	0782      	lsls	r2, r0, #30
 8003eb0:	d1e9      	bne.n	8003e86 <validate_structure+0xae>
 8003eb2:	3158      	adds	r1, #88	; 0x58
 8003eb4:	f7fc fab4 	bl	8000420 <__aeabi_idivmod>
 8003eb8:	231d      	movs	r3, #29
 8003eba:	2900      	cmp	r1, #0
 8003ebc:	d1e3      	bne.n	8003e86 <validate_structure+0xae>
 8003ebe:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <validate_structure+0x190>)
 8003ec0:	3191      	adds	r1, #145	; 0x91
 8003ec2:	18e8      	adds	r0, r5, r3
 8003ec4:	31ff      	adds	r1, #255	; 0xff
 8003ec6:	f7fc faab 	bl	8000420 <__aeabi_idivmod>
 8003eca:	424b      	negs	r3, r1
 8003ecc:	414b      	adcs	r3, r1
 8003ece:	331c      	adds	r3, #28
 8003ed0:	e7d9      	b.n	8003e86 <validate_structure+0xae>
 8003ed2:	323c      	adds	r2, #60	; 0x3c
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	6022      	str	r2, [r4, #0]
 8003ed8:	6063      	str	r3, [r4, #4]
 8003eda:	e78e      	b.n	8003dfa <validate_structure+0x22>
 8003edc:	323c      	adds	r2, #60	; 0x3c
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	6062      	str	r2, [r4, #4]
 8003ee2:	60a3      	str	r3, [r4, #8]
 8003ee4:	e798      	b.n	8003e18 <validate_structure+0x40>
 8003ee6:	3218      	adds	r2, #24
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	60a2      	str	r2, [r4, #8]
 8003eec:	60e3      	str	r3, [r4, #12]
 8003eee:	e7a2      	b.n	8003e36 <validate_structure+0x5e>
 8003ef0:	320c      	adds	r2, #12
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6122      	str	r2, [r4, #16]
 8003ef6:	6163      	str	r3, [r4, #20]
 8003ef8:	e7ac      	b.n	8003e54 <validate_structure+0x7c>
 8003efa:	271d      	movs	r7, #29
 8003efc:	68e6      	ldr	r6, [r4, #12]
 8003efe:	2e00      	cmp	r6, #0
 8003f00:	dd00      	ble.n	8003f04 <validate_structure+0x12c>
 8003f02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003f04:	6922      	ldr	r2, [r4, #16]
 8003f06:	3a01      	subs	r2, #1
 8003f08:	6122      	str	r2, [r4, #16]
 8003f0a:	3201      	adds	r2, #1
 8003f0c:	d117      	bne.n	8003f3e <validate_structure+0x166>
 8003f0e:	230b      	movs	r3, #11
 8003f10:	2203      	movs	r2, #3
 8003f12:	6965      	ldr	r5, [r4, #20]
 8003f14:	6123      	str	r3, [r4, #16]
 8003f16:	1e68      	subs	r0, r5, #1
 8003f18:	6160      	str	r0, [r4, #20]
 8003f1a:	3311      	adds	r3, #17
 8003f1c:	4210      	tst	r0, r2
 8003f1e:	d10e      	bne.n	8003f3e <validate_structure+0x166>
 8003f20:	2164      	movs	r1, #100	; 0x64
 8003f22:	f7fc fa7d 	bl	8000420 <__aeabi_idivmod>
 8003f26:	003b      	movs	r3, r7
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d108      	bne.n	8003f3e <validate_structure+0x166>
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <validate_structure+0x194>)
 8003f2e:	3191      	adds	r1, #145	; 0x91
 8003f30:	18e8      	adds	r0, r5, r3
 8003f32:	31ff      	adds	r1, #255	; 0xff
 8003f34:	f7fc fa74 	bl	8000420 <__aeabi_idivmod>
 8003f38:	424b      	negs	r3, r1
 8003f3a:	414b      	adcs	r3, r1
 8003f3c:	331c      	adds	r3, #28
 8003f3e:	6921      	ldr	r1, [r4, #16]
 8003f40:	001a      	movs	r2, r3
 8003f42:	2901      	cmp	r1, #1
 8003f44:	d002      	beq.n	8003f4c <validate_structure+0x174>
 8003f46:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <validate_structure+0x18c>)
 8003f48:	0089      	lsls	r1, r1, #2
 8003f4a:	588a      	ldr	r2, [r1, r2]
 8003f4c:	1996      	adds	r6, r2, r6
 8003f4e:	60e6      	str	r6, [r4, #12]
 8003f50:	e7d4      	b.n	8003efc <validate_structure+0x124>
 8003f52:	4293      	cmp	r3, r2
 8003f54:	dad5      	bge.n	8003f02 <validate_structure+0x12a>
 8003f56:	1ad2      	subs	r2, r2, r3
 8003f58:	60e2      	str	r2, [r4, #12]
 8003f5a:	6126      	str	r6, [r4, #16]
 8003f5c:	e793      	b.n	8003e86 <validate_structure+0xae>
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	0000076c 	.word	0x0000076c
 8003f64:	08005bd0 	.word	0x08005bd0
 8003f68:	0000076d 	.word	0x0000076d
 8003f6c:	0000076b 	.word	0x0000076b

08003f70 <mktime>:
 8003f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f72:	b087      	sub	sp, #28
 8003f74:	0004      	movs	r4, r0
 8003f76:	f000 fcf5 	bl	8004964 <__gettzinfo>
 8003f7a:	9004      	str	r0, [sp, #16]
 8003f7c:	0020      	movs	r0, r4
 8003f7e:	f7ff ff2b 	bl	8003dd8 <validate_structure>
 8003f82:	233c      	movs	r3, #60	; 0x3c
 8003f84:	6862      	ldr	r2, [r4, #4]
 8003f86:	68a1      	ldr	r1, [r4, #8]
 8003f88:	4353      	muls	r3, r2
 8003f8a:	6822      	ldr	r2, [r4, #0]
 8003f8c:	6965      	ldr	r5, [r4, #20]
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	22e1      	movs	r2, #225	; 0xe1
 8003f92:	0112      	lsls	r2, r2, #4
 8003f94:	434a      	muls	r2, r1
 8003f96:	189b      	adds	r3, r3, r2
 8003f98:	68e2      	ldr	r2, [r4, #12]
 8003f9a:	9303      	str	r3, [sp, #12]
 8003f9c:	6923      	ldr	r3, [r4, #16]
 8003f9e:	1e50      	subs	r0, r2, #1
 8003fa0:	4ab1      	ldr	r2, [pc, #708]	; (8004268 <mktime+0x2f8>)
 8003fa2:	0099      	lsls	r1, r3, #2
 8003fa4:	588a      	ldr	r2, [r1, r2]
 8003fa6:	1882      	adds	r2, r0, r2
 8003fa8:	9201      	str	r2, [sp, #4]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	dd12      	ble.n	8003fd4 <mktime+0x64>
 8003fae:	07ab      	lsls	r3, r5, #30
 8003fb0:	d110      	bne.n	8003fd4 <mktime+0x64>
 8003fb2:	2164      	movs	r1, #100	; 0x64
 8003fb4:	0028      	movs	r0, r5
 8003fb6:	f7fc fa33 	bl	8000420 <__aeabi_idivmod>
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d107      	bne.n	8003fce <mktime+0x5e>
 8003fbe:	4bab      	ldr	r3, [pc, #684]	; (800426c <mktime+0x2fc>)
 8003fc0:	3191      	adds	r1, #145	; 0x91
 8003fc2:	31ff      	adds	r1, #255	; 0xff
 8003fc4:	18e8      	adds	r0, r5, r3
 8003fc6:	f7fc fa2b 	bl	8000420 <__aeabi_idivmod>
 8003fca:	2900      	cmp	r1, #0
 8003fcc:	d102      	bne.n	8003fd4 <mktime+0x64>
 8003fce:	9b01      	ldr	r3, [sp, #4]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	9b01      	ldr	r3, [sp, #4]
 8003fd6:	4aa6      	ldr	r2, [pc, #664]	; (8004270 <mktime+0x300>)
 8003fd8:	61e3      	str	r3, [r4, #28]
 8003fda:	4ba6      	ldr	r3, [pc, #664]	; (8004274 <mktime+0x304>)
 8003fdc:	18eb      	adds	r3, r5, r3
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d900      	bls.n	8003fe4 <mktime+0x74>
 8003fe2:	e0f8      	b.n	80041d6 <mktime+0x266>
 8003fe4:	2346      	movs	r3, #70	; 0x46
 8003fe6:	9302      	str	r3, [sp, #8]
 8003fe8:	2d46      	cmp	r5, #70	; 0x46
 8003fea:	dc00      	bgt.n	8003fee <mktime+0x7e>
 8003fec:	e072      	b.n	80040d4 <mktime+0x164>
 8003fee:	27b7      	movs	r7, #183	; 0xb7
 8003ff0:	26c8      	movs	r6, #200	; 0xc8
 8003ff2:	007f      	lsls	r7, r7, #1
 8003ff4:	0076      	lsls	r6, r6, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	9b02      	ldr	r3, [sp, #8]
 8003ffa:	4213      	tst	r3, r2
 8003ffc:	d168      	bne.n	80040d0 <mktime+0x160>
 8003ffe:	0018      	movs	r0, r3
 8004000:	2164      	movs	r1, #100	; 0x64
 8004002:	f7fc fa0d 	bl	8000420 <__aeabi_idivmod>
 8004006:	003b      	movs	r3, r7
 8004008:	2900      	cmp	r1, #0
 800400a:	d109      	bne.n	8004020 <mktime+0xb0>
 800400c:	9b02      	ldr	r3, [sp, #8]
 800400e:	4a97      	ldr	r2, [pc, #604]	; (800426c <mktime+0x2fc>)
 8004010:	0031      	movs	r1, r6
 8004012:	1898      	adds	r0, r3, r2
 8004014:	f7fc fa04 	bl	8000420 <__aeabi_idivmod>
 8004018:	424b      	negs	r3, r1
 800401a:	414b      	adcs	r3, r1
 800401c:	336e      	adds	r3, #110	; 0x6e
 800401e:	33ff      	adds	r3, #255	; 0xff
 8004020:	9a01      	ldr	r2, [sp, #4]
 8004022:	18d3      	adds	r3, r2, r3
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	9b02      	ldr	r3, [sp, #8]
 8004028:	3301      	adds	r3, #1
 800402a:	9302      	str	r3, [sp, #8]
 800402c:	429d      	cmp	r5, r3
 800402e:	d1e2      	bne.n	8003ff6 <mktime+0x86>
 8004030:	9a01      	ldr	r2, [sp, #4]
 8004032:	4b91      	ldr	r3, [pc, #580]	; (8004278 <mktime+0x308>)
 8004034:	4353      	muls	r3, r2
 8004036:	9a03      	ldr	r2, [sp, #12]
 8004038:	189b      	adds	r3, r3, r2
 800403a:	9303      	str	r3, [sp, #12]
 800403c:	f000 faac 	bl	8004598 <__tz_lock>
 8004040:	f000 faac 	bl	800459c <_tzset_unlocked>
 8004044:	4b8d      	ldr	r3, [pc, #564]	; (800427c <mktime+0x30c>)
 8004046:	681d      	ldr	r5, [r3, #0]
 8004048:	2d00      	cmp	r5, #0
 800404a:	d100      	bne.n	800404e <mktime+0xde>
 800404c:	e107      	b.n	800425e <mktime+0x2ee>
 800404e:	6963      	ldr	r3, [r4, #20]
 8004050:	4a86      	ldr	r2, [pc, #536]	; (800426c <mktime+0x2fc>)
 8004052:	6a26      	ldr	r6, [r4, #32]
 8004054:	1898      	adds	r0, r3, r2
 8004056:	2e00      	cmp	r6, #0
 8004058:	dd00      	ble.n	800405c <mktime+0xec>
 800405a:	2601      	movs	r6, #1
 800405c:	9b04      	ldr	r3, [sp, #16]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	9305      	str	r3, [sp, #20]
 8004062:	4298      	cmp	r0, r3
 8004064:	d000      	beq.n	8004068 <mktime+0xf8>
 8004066:	e073      	b.n	8004150 <mktime+0x1e0>
 8004068:	9b04      	ldr	r3, [sp, #16]
 800406a:	9d03      	ldr	r5, [sp, #12]
 800406c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	9305      	str	r3, [sp, #20]
 8004072:	1a1a      	subs	r2, r3, r0
 8004074:	9b04      	ldr	r3, [sp, #16]
 8004076:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	1acf      	subs	r7, r1, r3
 800407c:	42bd      	cmp	r5, r7
 800407e:	db00      	blt.n	8004082 <mktime+0x112>
 8004080:	e06d      	b.n	800415e <mktime+0x1ee>
 8004082:	9904      	ldr	r1, [sp, #16]
 8004084:	6809      	ldr	r1, [r1, #0]
 8004086:	2900      	cmp	r1, #0
 8004088:	d100      	bne.n	800408c <mktime+0x11c>
 800408a:	e06d      	b.n	8004168 <mktime+0x1f8>
 800408c:	9903      	ldr	r1, [sp, #12]
 800408e:	4291      	cmp	r1, r2
 8004090:	da00      	bge.n	8004094 <mktime+0x124>
 8004092:	e0e1      	b.n	8004258 <mktime+0x2e8>
 8004094:	2501      	movs	r5, #1
 8004096:	42b9      	cmp	r1, r7
 8004098:	db00      	blt.n	800409c <mktime+0x12c>
 800409a:	2500      	movs	r5, #0
 800409c:	2e00      	cmp	r6, #0
 800409e:	db00      	blt.n	80040a2 <mktime+0x132>
 80040a0:	e0a0      	b.n	80041e4 <mktime+0x274>
 80040a2:	2d01      	cmp	r5, #1
 80040a4:	d000      	beq.n	80040a8 <mktime+0x138>
 80040a6:	e0da      	b.n	800425e <mktime+0x2ee>
 80040a8:	2501      	movs	r5, #1
 80040aa:	9b04      	ldr	r3, [sp, #16]
 80040ac:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	199e      	adds	r6, r3, r6
 80040b2:	f000 fa72 	bl	800459a <__tz_unlock>
 80040b6:	9801      	ldr	r0, [sp, #4]
 80040b8:	6225      	str	r5, [r4, #32]
 80040ba:	3004      	adds	r0, #4
 80040bc:	2107      	movs	r1, #7
 80040be:	f7fc f9af 	bl	8000420 <__aeabi_idivmod>
 80040c2:	2900      	cmp	r1, #0
 80040c4:	da00      	bge.n	80040c8 <mktime+0x158>
 80040c6:	e084      	b.n	80041d2 <mktime+0x262>
 80040c8:	61a1      	str	r1, [r4, #24]
 80040ca:	0030      	movs	r0, r6
 80040cc:	b007      	add	sp, #28
 80040ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d0:	236e      	movs	r3, #110	; 0x6e
 80040d2:	e7a4      	b.n	800401e <mktime+0xae>
 80040d4:	429d      	cmp	r5, r3
 80040d6:	d0ab      	beq.n	8004030 <mktime+0xc0>
 80040d8:	2645      	movs	r6, #69	; 0x45
 80040da:	2703      	movs	r7, #3
 80040dc:	42ae      	cmp	r6, r5
 80040de:	dc17      	bgt.n	8004110 <mktime+0x1a0>
 80040e0:	423d      	tst	r5, r7
 80040e2:	d130      	bne.n	8004146 <mktime+0x1d6>
 80040e4:	2164      	movs	r1, #100	; 0x64
 80040e6:	0028      	movs	r0, r5
 80040e8:	f7fc f99a 	bl	8000420 <__aeabi_idivmod>
 80040ec:	2900      	cmp	r1, #0
 80040ee:	d12c      	bne.n	800414a <mktime+0x1da>
 80040f0:	4b5e      	ldr	r3, [pc, #376]	; (800426c <mktime+0x2fc>)
 80040f2:	3191      	adds	r1, #145	; 0x91
 80040f4:	18e8      	adds	r0, r5, r3
 80040f6:	31ff      	adds	r1, #255	; 0xff
 80040f8:	f7fc f992 	bl	8000420 <__aeabi_idivmod>
 80040fc:	000b      	movs	r3, r1
 80040fe:	4259      	negs	r1, r3
 8004100:	4159      	adcs	r1, r3
 8004102:	316e      	adds	r1, #110	; 0x6e
 8004104:	31ff      	adds	r1, #255	; 0xff
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	9502      	str	r5, [sp, #8]
 800410a:	1a5b      	subs	r3, r3, r1
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	e78f      	b.n	8004030 <mktime+0xc0>
 8004110:	423e      	tst	r6, r7
 8004112:	d116      	bne.n	8004142 <mktime+0x1d2>
 8004114:	2164      	movs	r1, #100	; 0x64
 8004116:	0030      	movs	r0, r6
 8004118:	f7fc f982 	bl	8000420 <__aeabi_idivmod>
 800411c:	23b7      	movs	r3, #183	; 0xb7
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2900      	cmp	r1, #0
 8004122:	d109      	bne.n	8004138 <mktime+0x1c8>
 8004124:	4b51      	ldr	r3, [pc, #324]	; (800426c <mktime+0x2fc>)
 8004126:	3191      	adds	r1, #145	; 0x91
 8004128:	18f0      	adds	r0, r6, r3
 800412a:	31ff      	adds	r1, #255	; 0xff
 800412c:	f7fc f978 	bl	8000420 <__aeabi_idivmod>
 8004130:	424b      	negs	r3, r1
 8004132:	414b      	adcs	r3, r1
 8004134:	336e      	adds	r3, #110	; 0x6e
 8004136:	33ff      	adds	r3, #255	; 0xff
 8004138:	9a01      	ldr	r2, [sp, #4]
 800413a:	3e01      	subs	r6, #1
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	e7cc      	b.n	80040dc <mktime+0x16c>
 8004142:	236e      	movs	r3, #110	; 0x6e
 8004144:	e7f7      	b.n	8004136 <mktime+0x1c6>
 8004146:	216e      	movs	r1, #110	; 0x6e
 8004148:	e7dc      	b.n	8004104 <mktime+0x194>
 800414a:	21b7      	movs	r1, #183	; 0xb7
 800414c:	0049      	lsls	r1, r1, #1
 800414e:	e7da      	b.n	8004106 <mktime+0x196>
 8004150:	f000 f974 	bl	800443c <__tzcalc_limits>
 8004154:	2800      	cmp	r0, #0
 8004156:	d000      	beq.n	800415a <mktime+0x1ea>
 8004158:	e786      	b.n	8004068 <mktime+0xf8>
 800415a:	0035      	movs	r5, r6
 800415c:	e7a1      	b.n	80040a2 <mktime+0x132>
 800415e:	9d03      	ldr	r5, [sp, #12]
 8004160:	1a09      	subs	r1, r1, r0
 8004162:	428d      	cmp	r5, r1
 8004164:	dbf9      	blt.n	800415a <mktime+0x1ea>
 8004166:	e78c      	b.n	8004082 <mktime+0x112>
 8004168:	9d03      	ldr	r5, [sp, #12]
 800416a:	4295      	cmp	r5, r2
 800416c:	da36      	bge.n	80041dc <mktime+0x26c>
 800416e:	9a03      	ldr	r2, [sp, #12]
 8004170:	2501      	movs	r5, #1
 8004172:	42ba      	cmp	r2, r7
 8004174:	da00      	bge.n	8004178 <mktime+0x208>
 8004176:	e791      	b.n	800409c <mktime+0x12c>
 8004178:	000d      	movs	r5, r1
 800417a:	e78f      	b.n	800409c <mktime+0x12c>
 800417c:	2701      	movs	r7, #1
 800417e:	427f      	negs	r7, r7
 8004180:	e04b      	b.n	800421a <mktime+0x2aa>
 8004182:	21b6      	movs	r1, #182	; 0xb6
 8004184:	0049      	lsls	r1, r1, #1
 8004186:	61e1      	str	r1, [r4, #28]
 8004188:	e78b      	b.n	80040a2 <mktime+0x132>
 800418a:	216e      	movs	r1, #110	; 0x6e
 800418c:	e062      	b.n	8004254 <mktime+0x2e4>
 800418e:	9a02      	ldr	r2, [sp, #8]
 8004190:	421a      	tst	r2, r3
 8004192:	d117      	bne.n	80041c4 <mktime+0x254>
 8004194:	2164      	movs	r1, #100	; 0x64
 8004196:	0010      	movs	r0, r2
 8004198:	f7fc f942 	bl	8000420 <__aeabi_idivmod>
 800419c:	2900      	cmp	r1, #0
 800419e:	d113      	bne.n	80041c8 <mktime+0x258>
 80041a0:	4a32      	ldr	r2, [pc, #200]	; (800426c <mktime+0x2fc>)
 80041a2:	9b02      	ldr	r3, [sp, #8]
 80041a4:	4694      	mov	ip, r2
 80041a6:	3191      	adds	r1, #145	; 0x91
 80041a8:	4463      	add	r3, ip
 80041aa:	0018      	movs	r0, r3
 80041ac:	31ff      	adds	r1, #255	; 0xff
 80041ae:	f7fc f937 	bl	8000420 <__aeabi_idivmod>
 80041b2:	000b      	movs	r3, r1
 80041b4:	4259      	negs	r1, r3
 80041b6:	4159      	adcs	r1, r3
 80041b8:	316e      	adds	r1, #110	; 0x6e
 80041ba:	31ff      	adds	r1, #255	; 0xff
 80041bc:	42b9      	cmp	r1, r7
 80041be:	dd06      	ble.n	80041ce <mktime+0x25e>
 80041c0:	61e7      	str	r7, [r4, #28]
 80041c2:	e76e      	b.n	80040a2 <mktime+0x132>
 80041c4:	216e      	movs	r1, #110	; 0x6e
 80041c6:	e7f8      	b.n	80041ba <mktime+0x24a>
 80041c8:	21b7      	movs	r1, #183	; 0xb7
 80041ca:	0049      	lsls	r1, r1, #1
 80041cc:	e7f6      	b.n	80041bc <mktime+0x24c>
 80041ce:	1a7f      	subs	r7, r7, r1
 80041d0:	e7f6      	b.n	80041c0 <mktime+0x250>
 80041d2:	3107      	adds	r1, #7
 80041d4:	e778      	b.n	80040c8 <mktime+0x158>
 80041d6:	2601      	movs	r6, #1
 80041d8:	4276      	negs	r6, r6
 80041da:	e776      	b.n	80040ca <mktime+0x15a>
 80041dc:	2501      	movs	r5, #1
 80041de:	2e00      	cmp	r6, #0
 80041e0:	da00      	bge.n	80041e4 <mktime+0x274>
 80041e2:	e761      	b.n	80040a8 <mktime+0x138>
 80041e4:	406e      	eors	r6, r5
 80041e6:	2e01      	cmp	r6, #1
 80041e8:	d000      	beq.n	80041ec <mktime+0x27c>
 80041ea:	e75a      	b.n	80040a2 <mktime+0x132>
 80041ec:	1a1b      	subs	r3, r3, r0
 80041ee:	2d00      	cmp	r5, #0
 80041f0:	d100      	bne.n	80041f4 <mktime+0x284>
 80041f2:	425b      	negs	r3, r3
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	0020      	movs	r0, r4
 80041f8:	18d2      	adds	r2, r2, r3
 80041fa:	6022      	str	r2, [r4, #0]
 80041fc:	9a03      	ldr	r2, [sp, #12]
 80041fe:	68e7      	ldr	r7, [r4, #12]
 8004200:	18d3      	adds	r3, r2, r3
 8004202:	9303      	str	r3, [sp, #12]
 8004204:	f7ff fde8 	bl	8003dd8 <validate_structure>
 8004208:	68e3      	ldr	r3, [r4, #12]
 800420a:	1bdf      	subs	r7, r3, r7
 800420c:	d100      	bne.n	8004210 <mktime+0x2a0>
 800420e:	e748      	b.n	80040a2 <mktime+0x132>
 8004210:	2f01      	cmp	r7, #1
 8004212:	dcb3      	bgt.n	800417c <mktime+0x20c>
 8004214:	1c7b      	adds	r3, r7, #1
 8004216:	da00      	bge.n	800421a <mktime+0x2aa>
 8004218:	0037      	movs	r7, r6
 800421a:	9b01      	ldr	r3, [sp, #4]
 800421c:	69e2      	ldr	r2, [r4, #28]
 800421e:	19db      	adds	r3, r3, r7
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	2303      	movs	r3, #3
 8004224:	18bf      	adds	r7, r7, r2
 8004226:	d5b2      	bpl.n	800418e <mktime+0x21e>
 8004228:	9a02      	ldr	r2, [sp, #8]
 800422a:	1e50      	subs	r0, r2, #1
 800422c:	4218      	tst	r0, r3
 800422e:	d1a8      	bne.n	8004182 <mktime+0x212>
 8004230:	2164      	movs	r1, #100	; 0x64
 8004232:	f7fc f8f5 	bl	8000420 <__aeabi_idivmod>
 8004236:	2900      	cmp	r1, #0
 8004238:	d1a7      	bne.n	800418a <mktime+0x21a>
 800423a:	4a11      	ldr	r2, [pc, #68]	; (8004280 <mktime+0x310>)
 800423c:	9b02      	ldr	r3, [sp, #8]
 800423e:	4694      	mov	ip, r2
 8004240:	3191      	adds	r1, #145	; 0x91
 8004242:	4463      	add	r3, ip
 8004244:	0018      	movs	r0, r3
 8004246:	31ff      	adds	r1, #255	; 0xff
 8004248:	f7fc f8ea 	bl	8000420 <__aeabi_idivmod>
 800424c:	000b      	movs	r3, r1
 800424e:	4259      	negs	r1, r3
 8004250:	4159      	adcs	r1, r3
 8004252:	316d      	adds	r1, #109	; 0x6d
 8004254:	31ff      	adds	r1, #255	; 0xff
 8004256:	e796      	b.n	8004186 <mktime+0x216>
 8004258:	2500      	movs	r5, #0
 800425a:	2e00      	cmp	r6, #0
 800425c:	dac2      	bge.n	80041e4 <mktime+0x274>
 800425e:	9b04      	ldr	r3, [sp, #16]
 8004260:	6a1e      	ldr	r6, [r3, #32]
 8004262:	9b03      	ldr	r3, [sp, #12]
 8004264:	199e      	adds	r6, r3, r6
 8004266:	e724      	b.n	80040b2 <mktime+0x142>
 8004268:	08005c00 	.word	0x08005c00
 800426c:	0000076c 	.word	0x0000076c
 8004270:	00004e20 	.word	0x00004e20
 8004274:	00002710 	.word	0x00002710
 8004278:	00015180 	.word	0x00015180
 800427c:	20000280 	.word	0x20000280
 8004280:	0000076b 	.word	0x0000076b

08004284 <_free_r>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	0005      	movs	r5, r0
 8004288:	2900      	cmp	r1, #0
 800428a:	d010      	beq.n	80042ae <_free_r+0x2a>
 800428c:	1f0c      	subs	r4, r1, #4
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	da00      	bge.n	8004296 <_free_r+0x12>
 8004294:	18e4      	adds	r4, r4, r3
 8004296:	0028      	movs	r0, r5
 8004298:	f000 fb68 	bl	800496c <__malloc_lock>
 800429c:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <_free_r+0x90>)
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <_free_r+0x2c>
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	6014      	str	r4, [r2, #0]
 80042a8:	0028      	movs	r0, r5
 80042aa:	f000 fb60 	bl	800496e <__malloc_unlock>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	42a3      	cmp	r3, r4
 80042b2:	d909      	bls.n	80042c8 <_free_r+0x44>
 80042b4:	6821      	ldr	r1, [r4, #0]
 80042b6:	1860      	adds	r0, r4, r1
 80042b8:	4283      	cmp	r3, r0
 80042ba:	d1f3      	bne.n	80042a4 <_free_r+0x20>
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	1841      	adds	r1, r0, r1
 80042c2:	6021      	str	r1, [r4, #0]
 80042c4:	e7ee      	b.n	80042a4 <_free_r+0x20>
 80042c6:	0013      	movs	r3, r2
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d001      	beq.n	80042d2 <_free_r+0x4e>
 80042ce:	42a2      	cmp	r2, r4
 80042d0:	d9f9      	bls.n	80042c6 <_free_r+0x42>
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	1858      	adds	r0, r3, r1
 80042d6:	42a0      	cmp	r0, r4
 80042d8:	d10b      	bne.n	80042f2 <_free_r+0x6e>
 80042da:	6820      	ldr	r0, [r4, #0]
 80042dc:	1809      	adds	r1, r1, r0
 80042de:	1858      	adds	r0, r3, r1
 80042e0:	6019      	str	r1, [r3, #0]
 80042e2:	4282      	cmp	r2, r0
 80042e4:	d1e0      	bne.n	80042a8 <_free_r+0x24>
 80042e6:	6810      	ldr	r0, [r2, #0]
 80042e8:	6852      	ldr	r2, [r2, #4]
 80042ea:	1841      	adds	r1, r0, r1
 80042ec:	6019      	str	r1, [r3, #0]
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	e7da      	b.n	80042a8 <_free_r+0x24>
 80042f2:	42a0      	cmp	r0, r4
 80042f4:	d902      	bls.n	80042fc <_free_r+0x78>
 80042f6:	230c      	movs	r3, #12
 80042f8:	602b      	str	r3, [r5, #0]
 80042fa:	e7d5      	b.n	80042a8 <_free_r+0x24>
 80042fc:	6821      	ldr	r1, [r4, #0]
 80042fe:	1860      	adds	r0, r4, r1
 8004300:	4282      	cmp	r2, r0
 8004302:	d103      	bne.n	800430c <_free_r+0x88>
 8004304:	6810      	ldr	r0, [r2, #0]
 8004306:	6852      	ldr	r2, [r2, #4]
 8004308:	1841      	adds	r1, r0, r1
 800430a:	6021      	str	r1, [r4, #0]
 800430c:	6062      	str	r2, [r4, #4]
 800430e:	605c      	str	r4, [r3, #4]
 8004310:	e7ca      	b.n	80042a8 <_free_r+0x24>
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	2000025c 	.word	0x2000025c

08004318 <_malloc_r>:
 8004318:	2303      	movs	r3, #3
 800431a:	b570      	push	{r4, r5, r6, lr}
 800431c:	1ccd      	adds	r5, r1, #3
 800431e:	439d      	bics	r5, r3
 8004320:	3508      	adds	r5, #8
 8004322:	0006      	movs	r6, r0
 8004324:	2d0c      	cmp	r5, #12
 8004326:	d21e      	bcs.n	8004366 <_malloc_r+0x4e>
 8004328:	250c      	movs	r5, #12
 800432a:	42a9      	cmp	r1, r5
 800432c:	d81d      	bhi.n	800436a <_malloc_r+0x52>
 800432e:	0030      	movs	r0, r6
 8004330:	f000 fb1c 	bl	800496c <__malloc_lock>
 8004334:	4a25      	ldr	r2, [pc, #148]	; (80043cc <_malloc_r+0xb4>)
 8004336:	6814      	ldr	r4, [r2, #0]
 8004338:	0021      	movs	r1, r4
 800433a:	2900      	cmp	r1, #0
 800433c:	d119      	bne.n	8004372 <_malloc_r+0x5a>
 800433e:	4c24      	ldr	r4, [pc, #144]	; (80043d0 <_malloc_r+0xb8>)
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <_malloc_r+0x36>
 8004346:	0030      	movs	r0, r6
 8004348:	f000 f844 	bl	80043d4 <_sbrk_r>
 800434c:	6020      	str	r0, [r4, #0]
 800434e:	0029      	movs	r1, r5
 8004350:	0030      	movs	r0, r6
 8004352:	f000 f83f 	bl	80043d4 <_sbrk_r>
 8004356:	1c43      	adds	r3, r0, #1
 8004358:	d12c      	bne.n	80043b4 <_malloc_r+0x9c>
 800435a:	230c      	movs	r3, #12
 800435c:	0030      	movs	r0, r6
 800435e:	6033      	str	r3, [r6, #0]
 8004360:	f000 fb05 	bl	800496e <__malloc_unlock>
 8004364:	e003      	b.n	800436e <_malloc_r+0x56>
 8004366:	2d00      	cmp	r5, #0
 8004368:	dadf      	bge.n	800432a <_malloc_r+0x12>
 800436a:	230c      	movs	r3, #12
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	2000      	movs	r0, #0
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	680b      	ldr	r3, [r1, #0]
 8004374:	1b5b      	subs	r3, r3, r5
 8004376:	d41a      	bmi.n	80043ae <_malloc_r+0x96>
 8004378:	2b0b      	cmp	r3, #11
 800437a:	d903      	bls.n	8004384 <_malloc_r+0x6c>
 800437c:	600b      	str	r3, [r1, #0]
 800437e:	18cc      	adds	r4, r1, r3
 8004380:	6025      	str	r5, [r4, #0]
 8004382:	e003      	b.n	800438c <_malloc_r+0x74>
 8004384:	428c      	cmp	r4, r1
 8004386:	d10e      	bne.n	80043a6 <_malloc_r+0x8e>
 8004388:	6863      	ldr	r3, [r4, #4]
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	0030      	movs	r0, r6
 800438e:	f000 faee 	bl	800496e <__malloc_unlock>
 8004392:	0020      	movs	r0, r4
 8004394:	2207      	movs	r2, #7
 8004396:	300b      	adds	r0, #11
 8004398:	1d23      	adds	r3, r4, #4
 800439a:	4390      	bics	r0, r2
 800439c:	1ac3      	subs	r3, r0, r3
 800439e:	d0e7      	beq.n	8004370 <_malloc_r+0x58>
 80043a0:	425a      	negs	r2, r3
 80043a2:	50e2      	str	r2, [r4, r3]
 80043a4:	e7e4      	b.n	8004370 <_malloc_r+0x58>
 80043a6:	684b      	ldr	r3, [r1, #4]
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	000c      	movs	r4, r1
 80043ac:	e7ee      	b.n	800438c <_malloc_r+0x74>
 80043ae:	000c      	movs	r4, r1
 80043b0:	6849      	ldr	r1, [r1, #4]
 80043b2:	e7c2      	b.n	800433a <_malloc_r+0x22>
 80043b4:	2303      	movs	r3, #3
 80043b6:	1cc4      	adds	r4, r0, #3
 80043b8:	439c      	bics	r4, r3
 80043ba:	42a0      	cmp	r0, r4
 80043bc:	d0e0      	beq.n	8004380 <_malloc_r+0x68>
 80043be:	1a21      	subs	r1, r4, r0
 80043c0:	0030      	movs	r0, r6
 80043c2:	f000 f807 	bl	80043d4 <_sbrk_r>
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	d1da      	bne.n	8004380 <_malloc_r+0x68>
 80043ca:	e7c6      	b.n	800435a <_malloc_r+0x42>
 80043cc:	2000025c 	.word	0x2000025c
 80043d0:	20000260 	.word	0x20000260

080043d4 <_sbrk_r>:
 80043d4:	2300      	movs	r3, #0
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	4c06      	ldr	r4, [pc, #24]	; (80043f4 <_sbrk_r+0x20>)
 80043da:	0005      	movs	r5, r0
 80043dc:	0008      	movs	r0, r1
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	f7ff f976 	bl	80036d0 <_sbrk>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d103      	bne.n	80043f0 <_sbrk_r+0x1c>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d000      	beq.n	80043f0 <_sbrk_r+0x1c>
 80043ee:	602b      	str	r3, [r5, #0]
 80043f0:	bd70      	pop	{r4, r5, r6, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	200003d4 	.word	0x200003d4

080043f8 <siprintf>:
 80043f8:	b40e      	push	{r1, r2, r3}
 80043fa:	b510      	push	{r4, lr}
 80043fc:	b09d      	sub	sp, #116	; 0x74
 80043fe:	a902      	add	r1, sp, #8
 8004400:	9002      	str	r0, [sp, #8]
 8004402:	6108      	str	r0, [r1, #16]
 8004404:	480b      	ldr	r0, [pc, #44]	; (8004434 <siprintf+0x3c>)
 8004406:	2482      	movs	r4, #130	; 0x82
 8004408:	6088      	str	r0, [r1, #8]
 800440a:	6148      	str	r0, [r1, #20]
 800440c:	2001      	movs	r0, #1
 800440e:	4240      	negs	r0, r0
 8004410:	ab1f      	add	r3, sp, #124	; 0x7c
 8004412:	81c8      	strh	r0, [r1, #14]
 8004414:	4808      	ldr	r0, [pc, #32]	; (8004438 <siprintf+0x40>)
 8004416:	cb04      	ldmia	r3!, {r2}
 8004418:	00a4      	lsls	r4, r4, #2
 800441a:	6800      	ldr	r0, [r0, #0]
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	818c      	strh	r4, [r1, #12]
 8004420:	f000 fb08 	bl	8004a34 <_svfiprintf_r>
 8004424:	2300      	movs	r3, #0
 8004426:	9a02      	ldr	r2, [sp, #8]
 8004428:	7013      	strb	r3, [r2, #0]
 800442a:	b01d      	add	sp, #116	; 0x74
 800442c:	bc10      	pop	{r4}
 800442e:	bc08      	pop	{r3}
 8004430:	b003      	add	sp, #12
 8004432:	4718      	bx	r3
 8004434:	7fffffff 	.word	0x7fffffff
 8004438:	20000010 	.word	0x20000010

0800443c <__tzcalc_limits>:
 800443c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443e:	b089      	sub	sp, #36	; 0x24
 8004440:	0004      	movs	r4, r0
 8004442:	f000 fa8f 	bl	8004964 <__gettzinfo>
 8004446:	4b4c      	ldr	r3, [pc, #304]	; (8004578 <__tzcalc_limits+0x13c>)
 8004448:	0007      	movs	r7, r0
 800444a:	2000      	movs	r0, #0
 800444c:	429c      	cmp	r4, r3
 800444e:	dd58      	ble.n	8004502 <__tzcalc_limits+0xc6>
 8004450:	256e      	movs	r5, #110	; 0x6e
 8004452:	2164      	movs	r1, #100	; 0x64
 8004454:	4b49      	ldr	r3, [pc, #292]	; (800457c <__tzcalc_limits+0x140>)
 8004456:	35ff      	adds	r5, #255	; 0xff
 8004458:	18e0      	adds	r0, r4, r3
 800445a:	4345      	muls	r5, r0
 800445c:	4b48      	ldr	r3, [pc, #288]	; (8004580 <__tzcalc_limits+0x144>)
 800445e:	607c      	str	r4, [r7, #4]
 8004460:	18e0      	adds	r0, r4, r3
 8004462:	4b48      	ldr	r3, [pc, #288]	; (8004584 <__tzcalc_limits+0x148>)
 8004464:	1080      	asrs	r0, r0, #2
 8004466:	182d      	adds	r5, r5, r0
 8004468:	4249      	negs	r1, r1
 800446a:	18e0      	adds	r0, r4, r3
 800446c:	f7fb fef2 	bl	8000254 <__divsi3>
 8004470:	21c8      	movs	r1, #200	; 0xc8
 8004472:	4b45      	ldr	r3, [pc, #276]	; (8004588 <__tzcalc_limits+0x14c>)
 8004474:	182d      	adds	r5, r5, r0
 8004476:	0049      	lsls	r1, r1, #1
 8004478:	18e0      	adds	r0, r4, r3
 800447a:	f7fb feeb 	bl	8000254 <__divsi3>
 800447e:	2164      	movs	r1, #100	; 0x64
 8004480:	182b      	adds	r3, r5, r0
 8004482:	0020      	movs	r0, r4
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	f7fb ffcb 	bl	8000420 <__aeabi_idivmod>
 800448a:	9102      	str	r1, [sp, #8]
 800448c:	21c8      	movs	r1, #200	; 0xc8
 800448e:	0020      	movs	r0, r4
 8004490:	0049      	lsls	r1, r1, #1
 8004492:	f7fb ffc5 	bl	8000420 <__aeabi_idivmod>
 8004496:	000a      	movs	r2, r1
 8004498:	4253      	negs	r3, r2
 800449a:	415a      	adcs	r2, r3
 800449c:	003b      	movs	r3, r7
 800449e:	3340      	adds	r3, #64	; 0x40
 80044a0:	9307      	str	r3, [sp, #28]
 80044a2:	2303      	movs	r3, #3
 80044a4:	003d      	movs	r5, r7
 80044a6:	401c      	ands	r4, r3
 80044a8:	9103      	str	r1, [sp, #12]
 80044aa:	9205      	str	r2, [sp, #20]
 80044ac:	3508      	adds	r5, #8
 80044ae:	9406      	str	r4, [sp, #24]
 80044b0:	782b      	ldrb	r3, [r5, #0]
 80044b2:	2b4a      	cmp	r3, #74	; 0x4a
 80044b4:	d127      	bne.n	8004506 <__tzcalc_limits+0xca>
 80044b6:	9a01      	ldr	r2, [sp, #4]
 80044b8:	68eb      	ldr	r3, [r5, #12]
 80044ba:	18d1      	adds	r1, r2, r3
 80044bc:	9a06      	ldr	r2, [sp, #24]
 80044be:	2a00      	cmp	r2, #0
 80044c0:	d102      	bne.n	80044c8 <__tzcalc_limits+0x8c>
 80044c2:	9a02      	ldr	r2, [sp, #8]
 80044c4:	2a00      	cmp	r2, #0
 80044c6:	d103      	bne.n	80044d0 <__tzcalc_limits+0x94>
 80044c8:	2400      	movs	r4, #0
 80044ca:	9a03      	ldr	r2, [sp, #12]
 80044cc:	42a2      	cmp	r2, r4
 80044ce:	d103      	bne.n	80044d8 <__tzcalc_limits+0x9c>
 80044d0:	2401      	movs	r4, #1
 80044d2:	2b3b      	cmp	r3, #59	; 0x3b
 80044d4:	dc00      	bgt.n	80044d8 <__tzcalc_limits+0x9c>
 80044d6:	2400      	movs	r4, #0
 80044d8:	1864      	adds	r4, r4, r1
 80044da:	3c01      	subs	r4, #1
 80044dc:	492b      	ldr	r1, [pc, #172]	; (800458c <__tzcalc_limits+0x150>)
 80044de:	692b      	ldr	r3, [r5, #16]
 80044e0:	434c      	muls	r4, r1
 80044e2:	18e4      	adds	r4, r4, r3
 80044e4:	69ab      	ldr	r3, [r5, #24]
 80044e6:	18e4      	adds	r4, r4, r3
 80044e8:	9b07      	ldr	r3, [sp, #28]
 80044ea:	616c      	str	r4, [r5, #20]
 80044ec:	351c      	adds	r5, #28
 80044ee:	42ab      	cmp	r3, r5
 80044f0:	d1de      	bne.n	80044b0 <__tzcalc_limits+0x74>
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f6:	2301      	movs	r3, #1
 80044f8:	428a      	cmp	r2, r1
 80044fa:	db00      	blt.n	80044fe <__tzcalc_limits+0xc2>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2001      	movs	r0, #1
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	b009      	add	sp, #36	; 0x24
 8004504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004506:	2b44      	cmp	r3, #68	; 0x44
 8004508:	d103      	bne.n	8004512 <__tzcalc_limits+0xd6>
 800450a:	9b01      	ldr	r3, [sp, #4]
 800450c:	68ea      	ldr	r2, [r5, #12]
 800450e:	189c      	adds	r4, r3, r2
 8004510:	e7e4      	b.n	80044dc <__tzcalc_limits+0xa0>
 8004512:	9a06      	ldr	r2, [sp, #24]
 8004514:	9b05      	ldr	r3, [sp, #20]
 8004516:	2a00      	cmp	r2, #0
 8004518:	d103      	bne.n	8004522 <__tzcalc_limits+0xe6>
 800451a:	9a02      	ldr	r2, [sp, #8]
 800451c:	2a00      	cmp	r2, #0
 800451e:	d000      	beq.n	8004522 <__tzcalc_limits+0xe6>
 8004520:	2301      	movs	r3, #1
 8004522:	2230      	movs	r2, #48	; 0x30
 8004524:	4353      	muls	r3, r2
 8004526:	4a1a      	ldr	r2, [pc, #104]	; (8004590 <__tzcalc_limits+0x154>)
 8004528:	686e      	ldr	r6, [r5, #4]
 800452a:	189b      	adds	r3, r3, r2
 800452c:	9304      	str	r3, [sp, #16]
 800452e:	001a      	movs	r2, r3
 8004530:	2301      	movs	r3, #1
 8004532:	9c01      	ldr	r4, [sp, #4]
 8004534:	42b3      	cmp	r3, r6
 8004536:	db18      	blt.n	800456a <__tzcalc_limits+0x12e>
 8004538:	2e00      	cmp	r6, #0
 800453a:	dc00      	bgt.n	800453e <__tzcalc_limits+0x102>
 800453c:	2601      	movs	r6, #1
 800453e:	1d20      	adds	r0, r4, #4
 8004540:	2107      	movs	r1, #7
 8004542:	f7fb ff6d 	bl	8000420 <__aeabi_idivmod>
 8004546:	68eb      	ldr	r3, [r5, #12]
 8004548:	1a5b      	subs	r3, r3, r1
 800454a:	d500      	bpl.n	800454e <__tzcalc_limits+0x112>
 800454c:	3307      	adds	r3, #7
 800454e:	2107      	movs	r1, #7
 8004550:	68aa      	ldr	r2, [r5, #8]
 8004552:	3a01      	subs	r2, #1
 8004554:	4351      	muls	r1, r2
 8004556:	18c9      	adds	r1, r1, r3
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <__tzcalc_limits+0x158>)
 800455a:	18f6      	adds	r6, r6, r3
 800455c:	9b04      	ldr	r3, [sp, #16]
 800455e:	00b6      	lsls	r6, r6, #2
 8004560:	58f3      	ldr	r3, [r6, r3]
 8004562:	4299      	cmp	r1, r3
 8004564:	da05      	bge.n	8004572 <__tzcalc_limits+0x136>
 8004566:	1864      	adds	r4, r4, r1
 8004568:	e7b8      	b.n	80044dc <__tzcalc_limits+0xa0>
 800456a:	ca02      	ldmia	r2!, {r1}
 800456c:	3301      	adds	r3, #1
 800456e:	1864      	adds	r4, r4, r1
 8004570:	e7e0      	b.n	8004534 <__tzcalc_limits+0xf8>
 8004572:	3907      	subs	r1, #7
 8004574:	e7f5      	b.n	8004562 <__tzcalc_limits+0x126>
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	000007b1 	.word	0x000007b1
 800457c:	fffff84e 	.word	0xfffff84e
 8004580:	fffff84f 	.word	0xfffff84f
 8004584:	fffff893 	.word	0xfffff893
 8004588:	fffff9bf 	.word	0xfffff9bf
 800458c:	00015180 	.word	0x00015180
 8004590:	08005c6c 	.word	0x08005c6c
 8004594:	3fffffff 	.word	0x3fffffff

08004598 <__tz_lock>:
 8004598:	4770      	bx	lr

0800459a <__tz_unlock>:
 800459a:	4770      	bx	lr

0800459c <_tzset_unlocked>:
 800459c:	b510      	push	{r4, lr}
 800459e:	4b02      	ldr	r3, [pc, #8]	; (80045a8 <_tzset_unlocked+0xc>)
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	f000 f803 	bl	80045ac <_tzset_unlocked_r>
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	20000010 	.word	0x20000010

080045ac <_tzset_unlocked_r>:
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b08d      	sub	sp, #52	; 0x34
 80045b0:	0007      	movs	r7, r0
 80045b2:	f000 f9d7 	bl	8004964 <__gettzinfo>
 80045b6:	49af      	ldr	r1, [pc, #700]	; (8004874 <_tzset_unlocked_r+0x2c8>)
 80045b8:	0006      	movs	r6, r0
 80045ba:	0038      	movs	r0, r7
 80045bc:	f000 f9cc 	bl	8004958 <_getenv_r>
 80045c0:	4dad      	ldr	r5, [pc, #692]	; (8004878 <_tzset_unlocked_r+0x2cc>)
 80045c2:	1e04      	subs	r4, r0, #0
 80045c4:	d10d      	bne.n	80045e2 <_tzset_unlocked_r+0x36>
 80045c6:	4bad      	ldr	r3, [pc, #692]	; (800487c <_tzset_unlocked_r+0x2d0>)
 80045c8:	4aad      	ldr	r2, [pc, #692]	; (8004880 <_tzset_unlocked_r+0x2d4>)
 80045ca:	6018      	str	r0, [r3, #0]
 80045cc:	4bad      	ldr	r3, [pc, #692]	; (8004884 <_tzset_unlocked_r+0x2d8>)
 80045ce:	6018      	str	r0, [r3, #0]
 80045d0:	4bad      	ldr	r3, [pc, #692]	; (8004888 <_tzset_unlocked_r+0x2dc>)
 80045d2:	6828      	ldr	r0, [r5, #0]
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	f7ff fbec 	bl	8003db4 <free>
 80045dc:	602c      	str	r4, [r5, #0]
 80045de:	b00d      	add	sp, #52	; 0x34
 80045e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e2:	6829      	ldr	r1, [r5, #0]
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d15a      	bne.n	800469e <_tzset_unlocked_r+0xf2>
 80045e8:	6828      	ldr	r0, [r5, #0]
 80045ea:	f7ff fbe3 	bl	8003db4 <free>
 80045ee:	0020      	movs	r0, r4
 80045f0:	f7fb fd8a 	bl	8000108 <strlen>
 80045f4:	1c41      	adds	r1, r0, #1
 80045f6:	0038      	movs	r0, r7
 80045f8:	f7ff fe8e 	bl	8004318 <_malloc_r>
 80045fc:	6028      	str	r0, [r5, #0]
 80045fe:	2800      	cmp	r0, #0
 8004600:	d152      	bne.n	80046a8 <_tzset_unlocked_r+0xfc>
 8004602:	7823      	ldrb	r3, [r4, #0]
 8004604:	3b3a      	subs	r3, #58	; 0x3a
 8004606:	4259      	negs	r1, r3
 8004608:	4159      	adcs	r1, r3
 800460a:	1864      	adds	r4, r4, r1
 800460c:	ab0a      	add	r3, sp, #40	; 0x28
 800460e:	4a9f      	ldr	r2, [pc, #636]	; (800488c <_tzset_unlocked_r+0x2e0>)
 8004610:	499f      	ldr	r1, [pc, #636]	; (8004890 <_tzset_unlocked_r+0x2e4>)
 8004612:	0020      	movs	r0, r4
 8004614:	f000 fc9a 	bl	8004f4c <siscanf>
 8004618:	2800      	cmp	r0, #0
 800461a:	dde0      	ble.n	80045de <_tzset_unlocked_r+0x32>
 800461c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800461e:	18e4      	adds	r4, r4, r3
 8004620:	7823      	ldrb	r3, [r4, #0]
 8004622:	2b2d      	cmp	r3, #45	; 0x2d
 8004624:	d144      	bne.n	80046b0 <_tzset_unlocked_r+0x104>
 8004626:	3b2e      	subs	r3, #46	; 0x2e
 8004628:	3401      	adds	r4, #1
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	2716      	movs	r7, #22
 800462e:	ab02      	add	r3, sp, #8
 8004630:	18ff      	adds	r7, r7, r3
 8004632:	2300      	movs	r3, #0
 8004634:	803b      	strh	r3, [r7, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	ad08      	add	r5, sp, #32
 800463a:	802b      	strh	r3, [r5, #0]
 800463c:	ab0a      	add	r3, sp, #40	; 0x28
 800463e:	9303      	str	r3, [sp, #12]
 8004640:	9502      	str	r5, [sp, #8]
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	9700      	str	r7, [sp, #0]
 8004646:	aa07      	add	r2, sp, #28
 8004648:	4992      	ldr	r1, [pc, #584]	; (8004894 <_tzset_unlocked_r+0x2e8>)
 800464a:	0020      	movs	r0, r4
 800464c:	f000 fc7e 	bl	8004f4c <siscanf>
 8004650:	2800      	cmp	r0, #0
 8004652:	ddc4      	ble.n	80045de <_tzset_unlocked_r+0x32>
 8004654:	233c      	movs	r3, #60	; 0x3c
 8004656:	883a      	ldrh	r2, [r7, #0]
 8004658:	4f8f      	ldr	r7, [pc, #572]	; (8004898 <_tzset_unlocked_r+0x2ec>)
 800465a:	4353      	muls	r3, r2
 800465c:	882a      	ldrh	r2, [r5, #0]
 800465e:	4d8a      	ldr	r5, [pc, #552]	; (8004888 <_tzset_unlocked_r+0x2dc>)
 8004660:	189b      	adds	r3, r3, r2
 8004662:	aa02      	add	r2, sp, #8
 8004664:	8a91      	ldrh	r1, [r2, #20]
 8004666:	22e1      	movs	r2, #225	; 0xe1
 8004668:	0112      	lsls	r2, r2, #4
 800466a:	434a      	muls	r2, r1
 800466c:	189b      	adds	r3, r3, r2
 800466e:	9a04      	ldr	r2, [sp, #16]
 8004670:	4987      	ldr	r1, [pc, #540]	; (8004890 <_tzset_unlocked_r+0x2e4>)
 8004672:	435a      	muls	r2, r3
 8004674:	4b85      	ldr	r3, [pc, #532]	; (800488c <_tzset_unlocked_r+0x2e0>)
 8004676:	6232      	str	r2, [r6, #32]
 8004678:	602b      	str	r3, [r5, #0]
 800467a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800467c:	003a      	movs	r2, r7
 800467e:	18e4      	adds	r4, r4, r3
 8004680:	0020      	movs	r0, r4
 8004682:	ab0a      	add	r3, sp, #40	; 0x28
 8004684:	f000 fc62 	bl	8004f4c <siscanf>
 8004688:	2800      	cmp	r0, #0
 800468a:	dc18      	bgt.n	80046be <_tzset_unlocked_r+0x112>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	6a32      	ldr	r2, [r6, #32]
 8004690:	606b      	str	r3, [r5, #4]
 8004692:	4b7a      	ldr	r3, [pc, #488]	; (800487c <_tzset_unlocked_r+0x2d0>)
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	4b7a      	ldr	r3, [pc, #488]	; (8004884 <_tzset_unlocked_r+0x2d8>)
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e79f      	b.n	80045de <_tzset_unlocked_r+0x32>
 800469e:	f7fb fd3a 	bl	8000116 <strcmp>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d09b      	beq.n	80045de <_tzset_unlocked_r+0x32>
 80046a6:	e79f      	b.n	80045e8 <_tzset_unlocked_r+0x3c>
 80046a8:	0021      	movs	r1, r4
 80046aa:	f000 fc79 	bl	8004fa0 <strcpy>
 80046ae:	e7a8      	b.n	8004602 <_tzset_unlocked_r+0x56>
 80046b0:	2201      	movs	r2, #1
 80046b2:	3b2b      	subs	r3, #43	; 0x2b
 80046b4:	9204      	str	r2, [sp, #16]
 80046b6:	4259      	negs	r1, r3
 80046b8:	4159      	adcs	r1, r3
 80046ba:	1864      	adds	r4, r4, r1
 80046bc:	e7b6      	b.n	800462c <_tzset_unlocked_r+0x80>
 80046be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c0:	606f      	str	r7, [r5, #4]
 80046c2:	18e4      	adds	r4, r4, r3
 80046c4:	7823      	ldrb	r3, [r4, #0]
 80046c6:	2b2d      	cmp	r3, #45	; 0x2d
 80046c8:	d000      	beq.n	80046cc <_tzset_unlocked_r+0x120>
 80046ca:	e08f      	b.n	80047ec <_tzset_unlocked_r+0x240>
 80046cc:	3b2e      	subs	r3, #46	; 0x2e
 80046ce:	3401      	adds	r4, #1
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	2716      	movs	r7, #22
 80046d4:	2300      	movs	r3, #0
 80046d6:	aa02      	add	r2, sp, #8
 80046d8:	18bf      	adds	r7, r7, r2
 80046da:	ad07      	add	r5, sp, #28
 80046dc:	8313      	strh	r3, [r2, #24]
 80046de:	802b      	strh	r3, [r5, #0]
 80046e0:	803b      	strh	r3, [r7, #0]
 80046e2:	aa08      	add	r2, sp, #32
 80046e4:	930a      	str	r3, [sp, #40]	; 0x28
 80046e6:	ab0a      	add	r3, sp, #40	; 0x28
 80046e8:	9202      	str	r2, [sp, #8]
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	9700      	str	r7, [sp, #0]
 80046f0:	002a      	movs	r2, r5
 80046f2:	4968      	ldr	r1, [pc, #416]	; (8004894 <_tzset_unlocked_r+0x2e8>)
 80046f4:	0020      	movs	r0, r4
 80046f6:	f000 fc29 	bl	8004f4c <siscanf>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	dd00      	ble.n	8004700 <_tzset_unlocked_r+0x154>
 80046fe:	e07c      	b.n	80047fa <_tzset_unlocked_r+0x24e>
 8004700:	6a33      	ldr	r3, [r6, #32]
 8004702:	4a66      	ldr	r2, [pc, #408]	; (800489c <_tzset_unlocked_r+0x2f0>)
 8004704:	189b      	adds	r3, r3, r2
 8004706:	63f3      	str	r3, [r6, #60]	; 0x3c
 8004708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800470a:	0037      	movs	r7, r6
 800470c:	18e4      	adds	r4, r4, r3
 800470e:	2300      	movs	r3, #0
 8004710:	3708      	adds	r7, #8
 8004712:	9304      	str	r3, [sp, #16]
 8004714:	7823      	ldrb	r3, [r4, #0]
 8004716:	3b2c      	subs	r3, #44	; 0x2c
 8004718:	4259      	negs	r1, r3
 800471a:	4159      	adcs	r1, r3
 800471c:	1864      	adds	r4, r4, r1
 800471e:	7825      	ldrb	r5, [r4, #0]
 8004720:	2d4d      	cmp	r5, #77	; 0x4d
 8004722:	d000      	beq.n	8004726 <_tzset_unlocked_r+0x17a>
 8004724:	e078      	b.n	8004818 <_tzset_unlocked_r+0x26c>
 8004726:	221e      	movs	r2, #30
 8004728:	a902      	add	r1, sp, #8
 800472a:	1852      	adds	r2, r2, r1
 800472c:	9202      	str	r2, [sp, #8]
 800472e:	aa09      	add	r2, sp, #36	; 0x24
 8004730:	9200      	str	r2, [sp, #0]
 8004732:	221a      	movs	r2, #26
 8004734:	ab0a      	add	r3, sp, #40	; 0x28
 8004736:	1852      	adds	r2, r2, r1
 8004738:	9303      	str	r3, [sp, #12]
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	4958      	ldr	r1, [pc, #352]	; (80048a0 <_tzset_unlocked_r+0x2f4>)
 800473e:	0020      	movs	r0, r4
 8004740:	f000 fc04 	bl	8004f4c <siscanf>
 8004744:	2803      	cmp	r0, #3
 8004746:	d000      	beq.n	800474a <_tzset_unlocked_r+0x19e>
 8004748:	e749      	b.n	80045de <_tzset_unlocked_r+0x32>
 800474a:	ab02      	add	r3, sp, #8
 800474c:	8b59      	ldrh	r1, [r3, #26]
 800474e:	1e4b      	subs	r3, r1, #1
 8004750:	2b0b      	cmp	r3, #11
 8004752:	d900      	bls.n	8004756 <_tzset_unlocked_r+0x1aa>
 8004754:	e743      	b.n	80045de <_tzset_unlocked_r+0x32>
 8004756:	ab02      	add	r3, sp, #8
 8004758:	8b9a      	ldrh	r2, [r3, #28]
 800475a:	1e53      	subs	r3, r2, #1
 800475c:	2b04      	cmp	r3, #4
 800475e:	d900      	bls.n	8004762 <_tzset_unlocked_r+0x1b6>
 8004760:	e73d      	b.n	80045de <_tzset_unlocked_r+0x32>
 8004762:	ab02      	add	r3, sp, #8
 8004764:	8bdb      	ldrh	r3, [r3, #30]
 8004766:	2b06      	cmp	r3, #6
 8004768:	d900      	bls.n	800476c <_tzset_unlocked_r+0x1c0>
 800476a:	e738      	b.n	80045de <_tzset_unlocked_r+0x32>
 800476c:	703d      	strb	r5, [r7, #0]
 800476e:	6079      	str	r1, [r7, #4]
 8004770:	60ba      	str	r2, [r7, #8]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004776:	18e5      	adds	r5, r4, r3
 8004778:	2302      	movs	r3, #2
 800477a:	aa07      	add	r2, sp, #28
 800477c:	8013      	strh	r3, [r2, #0]
 800477e:	2300      	movs	r3, #0
 8004780:	a902      	add	r1, sp, #8
 8004782:	ac08      	add	r4, sp, #32
 8004784:	82cb      	strh	r3, [r1, #22]
 8004786:	8023      	strh	r3, [r4, #0]
 8004788:	930a      	str	r3, [sp, #40]	; 0x28
 800478a:	782b      	ldrb	r3, [r5, #0]
 800478c:	2b2f      	cmp	r3, #47	; 0x2f
 800478e:	d10b      	bne.n	80047a8 <_tzset_unlocked_r+0x1fc>
 8004790:	2116      	movs	r1, #22
 8004792:	a802      	add	r0, sp, #8
 8004794:	1809      	adds	r1, r1, r0
 8004796:	ab0a      	add	r3, sp, #40	; 0x28
 8004798:	9100      	str	r1, [sp, #0]
 800479a:	9303      	str	r3, [sp, #12]
 800479c:	9402      	str	r4, [sp, #8]
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	4940      	ldr	r1, [pc, #256]	; (80048a4 <_tzset_unlocked_r+0x2f8>)
 80047a2:	0028      	movs	r0, r5
 80047a4:	f000 fbd2 	bl	8004f4c <siscanf>
 80047a8:	ab02      	add	r3, sp, #8
 80047aa:	8ada      	ldrh	r2, [r3, #22]
 80047ac:	233c      	movs	r3, #60	; 0x3c
 80047ae:	4353      	muls	r3, r2
 80047b0:	8822      	ldrh	r2, [r4, #0]
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	aa07      	add	r2, sp, #28
 80047b6:	8811      	ldrh	r1, [r2, #0]
 80047b8:	22e1      	movs	r2, #225	; 0xe1
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	434a      	muls	r2, r1
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047c4:	371c      	adds	r7, #28
 80047c6:	18ec      	adds	r4, r5, r3
 80047c8:	9b04      	ldr	r3, [sp, #16]
 80047ca:	3301      	adds	r3, #1
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d1a0      	bne.n	8004714 <_tzset_unlocked_r+0x168>
 80047d2:	6870      	ldr	r0, [r6, #4]
 80047d4:	f7ff fe32 	bl	800443c <__tzcalc_limits>
 80047d8:	6a32      	ldr	r2, [r6, #32]
 80047da:	4b28      	ldr	r3, [pc, #160]	; (800487c <_tzset_unlocked_r+0x2d0>)
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	1e5a      	subs	r2, r3, #1
 80047e4:	4193      	sbcs	r3, r2
 80047e6:	4a27      	ldr	r2, [pc, #156]	; (8004884 <_tzset_unlocked_r+0x2d8>)
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e6f8      	b.n	80045de <_tzset_unlocked_r+0x32>
 80047ec:	2201      	movs	r2, #1
 80047ee:	3b2b      	subs	r3, #43	; 0x2b
 80047f0:	9204      	str	r2, [sp, #16]
 80047f2:	4259      	negs	r1, r3
 80047f4:	4159      	adcs	r1, r3
 80047f6:	1864      	adds	r4, r4, r1
 80047f8:	e76b      	b.n	80046d2 <_tzset_unlocked_r+0x126>
 80047fa:	233c      	movs	r3, #60	; 0x3c
 80047fc:	883a      	ldrh	r2, [r7, #0]
 80047fe:	8829      	ldrh	r1, [r5, #0]
 8004800:	4353      	muls	r3, r2
 8004802:	aa02      	add	r2, sp, #8
 8004804:	8b12      	ldrh	r2, [r2, #24]
 8004806:	189b      	adds	r3, r3, r2
 8004808:	22e1      	movs	r2, #225	; 0xe1
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	434a      	muls	r2, r1
 800480e:	189b      	adds	r3, r3, r2
 8004810:	9a04      	ldr	r2, [sp, #16]
 8004812:	435a      	muls	r2, r3
 8004814:	0013      	movs	r3, r2
 8004816:	e776      	b.n	8004706 <_tzset_unlocked_r+0x15a>
 8004818:	2344      	movs	r3, #68	; 0x44
 800481a:	9305      	str	r3, [sp, #20]
 800481c:	2d4a      	cmp	r5, #74	; 0x4a
 800481e:	d101      	bne.n	8004824 <_tzset_unlocked_r+0x278>
 8004820:	3401      	adds	r4, #1
 8004822:	9505      	str	r5, [sp, #20]
 8004824:	220a      	movs	r2, #10
 8004826:	a90b      	add	r1, sp, #44	; 0x2c
 8004828:	0020      	movs	r0, r4
 800482a:	f000 fc69 	bl	8005100 <strtoul>
 800482e:	231e      	movs	r3, #30
 8004830:	aa02      	add	r2, sp, #8
 8004832:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004834:	189b      	adds	r3, r3, r2
 8004836:	8018      	strh	r0, [r3, #0]
 8004838:	42ac      	cmp	r4, r5
 800483a:	d115      	bne.n	8004868 <_tzset_unlocked_r+0x2bc>
 800483c:	9b04      	ldr	r3, [sp, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <_tzset_unlocked_r+0x2a8>
 8004842:	334d      	adds	r3, #77	; 0x4d
 8004844:	7233      	strb	r3, [r6, #8]
 8004846:	2303      	movs	r3, #3
 8004848:	60f3      	str	r3, [r6, #12]
 800484a:	3b01      	subs	r3, #1
 800484c:	6133      	str	r3, [r6, #16]
 800484e:	9b04      	ldr	r3, [sp, #16]
 8004850:	6173      	str	r3, [r6, #20]
 8004852:	e791      	b.n	8004778 <_tzset_unlocked_r+0x1cc>
 8004854:	224d      	movs	r2, #77	; 0x4d
 8004856:	1d73      	adds	r3, r6, #5
 8004858:	77da      	strb	r2, [r3, #31]
 800485a:	230b      	movs	r3, #11
 800485c:	62b3      	str	r3, [r6, #40]	; 0x28
 800485e:	3b0a      	subs	r3, #10
 8004860:	62f3      	str	r3, [r6, #44]	; 0x2c
 8004862:	2300      	movs	r3, #0
 8004864:	6333      	str	r3, [r6, #48]	; 0x30
 8004866:	e787      	b.n	8004778 <_tzset_unlocked_r+0x1cc>
 8004868:	466b      	mov	r3, sp
 800486a:	7d1b      	ldrb	r3, [r3, #20]
 800486c:	b280      	uxth	r0, r0
 800486e:	703b      	strb	r3, [r7, #0]
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	e781      	b.n	8004778 <_tzset_unlocked_r+0x1cc>
 8004874:	08005c30 	.word	0x08005c30
 8004878:	2000027c 	.word	0x2000027c
 800487c:	20000284 	.word	0x20000284
 8004880:	08005c33 	.word	0x08005c33
 8004884:	20000280 	.word	0x20000280
 8004888:	20000074 	.word	0x20000074
 800488c:	2000026f 	.word	0x2000026f
 8004890:	08005c37 	.word	0x08005c37
 8004894:	08005c5a 	.word	0x08005c5a
 8004898:	20000264 	.word	0x20000264
 800489c:	fffff1f0 	.word	0xfffff1f0
 80048a0:	08005c46 	.word	0x08005c46
 80048a4:	08005c59 	.word	0x08005c59

080048a8 <div>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	000f      	movs	r7, r1
 80048ac:	0006      	movs	r6, r0
 80048ae:	0011      	movs	r1, r2
 80048b0:	0038      	movs	r0, r7
 80048b2:	0015      	movs	r5, r2
 80048b4:	f7fb fcce 	bl	8000254 <__divsi3>
 80048b8:	0029      	movs	r1, r5
 80048ba:	0004      	movs	r4, r0
 80048bc:	0038      	movs	r0, r7
 80048be:	f7fb fdaf 	bl	8000420 <__aeabi_idivmod>
 80048c2:	2f00      	cmp	r7, #0
 80048c4:	db07      	blt.n	80048d6 <div+0x2e>
 80048c6:	2900      	cmp	r1, #0
 80048c8:	da01      	bge.n	80048ce <div+0x26>
 80048ca:	3401      	adds	r4, #1
 80048cc:	1b49      	subs	r1, r1, r5
 80048ce:	0030      	movs	r0, r6
 80048d0:	6034      	str	r4, [r6, #0]
 80048d2:	6071      	str	r1, [r6, #4]
 80048d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d6:	2900      	cmp	r1, #0
 80048d8:	ddf9      	ble.n	80048ce <div+0x26>
 80048da:	3c01      	subs	r4, #1
 80048dc:	1949      	adds	r1, r1, r5
 80048de:	e7f6      	b.n	80048ce <div+0x26>

080048e0 <_findenv_r>:
 80048e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e2:	000e      	movs	r6, r1
 80048e4:	b085      	sub	sp, #20
 80048e6:	0007      	movs	r7, r0
 80048e8:	9203      	str	r2, [sp, #12]
 80048ea:	f000 fc1d 	bl	8005128 <__env_lock>
 80048ee:	4c19      	ldr	r4, [pc, #100]	; (8004954 <_findenv_r+0x74>)
 80048f0:	0033      	movs	r3, r6
 80048f2:	6825      	ldr	r5, [r4, #0]
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	d106      	bne.n	8004906 <_findenv_r+0x26>
 80048f8:	0038      	movs	r0, r7
 80048fa:	f000 fc16 	bl	800512a <__env_unlock>
 80048fe:	2000      	movs	r0, #0
 8004900:	b005      	add	sp, #20
 8004902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004904:	3301      	adds	r3, #1
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	2a00      	cmp	r2, #0
 800490a:	d01f      	beq.n	800494c <_findenv_r+0x6c>
 800490c:	2a3d      	cmp	r2, #61	; 0x3d
 800490e:	d1f9      	bne.n	8004904 <_findenv_r+0x24>
 8004910:	e7f2      	b.n	80048f8 <_findenv_r+0x18>
 8004912:	3504      	adds	r5, #4
 8004914:	6828      	ldr	r0, [r5, #0]
 8004916:	2800      	cmp	r0, #0
 8004918:	d0ee      	beq.n	80048f8 <_findenv_r+0x18>
 800491a:	9a01      	ldr	r2, [sp, #4]
 800491c:	0031      	movs	r1, r6
 800491e:	f000 fb47 	bl	8004fb0 <strncmp>
 8004922:	2800      	cmp	r0, #0
 8004924:	d1f5      	bne.n	8004912 <_findenv_r+0x32>
 8004926:	9a01      	ldr	r2, [sp, #4]
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	4694      	mov	ip, r2
 800492c:	4463      	add	r3, ip
 800492e:	9302      	str	r3, [sp, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b3d      	cmp	r3, #61	; 0x3d
 8004934:	d1ed      	bne.n	8004912 <_findenv_r+0x32>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	0038      	movs	r0, r7
 800493a:	1aed      	subs	r5, r5, r3
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	10ad      	asrs	r5, r5, #2
 8004940:	601d      	str	r5, [r3, #0]
 8004942:	f000 fbf2 	bl	800512a <__env_unlock>
 8004946:	9802      	ldr	r0, [sp, #8]
 8004948:	3001      	adds	r0, #1
 800494a:	e7d9      	b.n	8004900 <_findenv_r+0x20>
 800494c:	1b9b      	subs	r3, r3, r6
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	e7e0      	b.n	8004914 <_findenv_r+0x34>
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	20000008 	.word	0x20000008

08004958 <_getenv_r>:
 8004958:	b507      	push	{r0, r1, r2, lr}
 800495a:	aa01      	add	r2, sp, #4
 800495c:	f7ff ffc0 	bl	80048e0 <_findenv_r>
 8004960:	bd0e      	pop	{r1, r2, r3, pc}
	...

08004964 <__gettzinfo>:
 8004964:	4800      	ldr	r0, [pc, #0]	; (8004968 <__gettzinfo+0x4>)
 8004966:	4770      	bx	lr
 8004968:	2000007c 	.word	0x2000007c

0800496c <__malloc_lock>:
 800496c:	4770      	bx	lr

0800496e <__malloc_unlock>:
 800496e:	4770      	bx	lr

08004970 <__ssputs_r>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	688e      	ldr	r6, [r1, #8]
 8004974:	b085      	sub	sp, #20
 8004976:	0007      	movs	r7, r0
 8004978:	000c      	movs	r4, r1
 800497a:	9203      	str	r2, [sp, #12]
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	429e      	cmp	r6, r3
 8004980:	d839      	bhi.n	80049f6 <__ssputs_r+0x86>
 8004982:	2390      	movs	r3, #144	; 0x90
 8004984:	898a      	ldrh	r2, [r1, #12]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	421a      	tst	r2, r3
 800498a:	d034      	beq.n	80049f6 <__ssputs_r+0x86>
 800498c:	2503      	movs	r5, #3
 800498e:	6909      	ldr	r1, [r1, #16]
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	1a5b      	subs	r3, r3, r1
 8004994:	9302      	str	r3, [sp, #8]
 8004996:	6963      	ldr	r3, [r4, #20]
 8004998:	9802      	ldr	r0, [sp, #8]
 800499a:	435d      	muls	r5, r3
 800499c:	0feb      	lsrs	r3, r5, #31
 800499e:	195d      	adds	r5, r3, r5
 80049a0:	9b01      	ldr	r3, [sp, #4]
 80049a2:	106d      	asrs	r5, r5, #1
 80049a4:	3301      	adds	r3, #1
 80049a6:	181b      	adds	r3, r3, r0
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	d900      	bls.n	80049ae <__ssputs_r+0x3e>
 80049ac:	001d      	movs	r5, r3
 80049ae:	0553      	lsls	r3, r2, #21
 80049b0:	d532      	bpl.n	8004a18 <__ssputs_r+0xa8>
 80049b2:	0029      	movs	r1, r5
 80049b4:	0038      	movs	r0, r7
 80049b6:	f7ff fcaf 	bl	8004318 <_malloc_r>
 80049ba:	1e06      	subs	r6, r0, #0
 80049bc:	d109      	bne.n	80049d2 <__ssputs_r+0x62>
 80049be:	230c      	movs	r3, #12
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	2340      	movs	r3, #64	; 0x40
 80049c4:	2001      	movs	r0, #1
 80049c6:	89a2      	ldrh	r2, [r4, #12]
 80049c8:	4240      	negs	r0, r0
 80049ca:	4313      	orrs	r3, r2
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	b005      	add	sp, #20
 80049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d2:	9a02      	ldr	r2, [sp, #8]
 80049d4:	6921      	ldr	r1, [r4, #16]
 80049d6:	f000 fbd8 	bl	800518a <memcpy>
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <__ssputs_r+0xc0>)
 80049de:	401a      	ands	r2, r3
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	4313      	orrs	r3, r2
 80049e4:	81a3      	strh	r3, [r4, #12]
 80049e6:	9b02      	ldr	r3, [sp, #8]
 80049e8:	6126      	str	r6, [r4, #16]
 80049ea:	18f6      	adds	r6, r6, r3
 80049ec:	6026      	str	r6, [r4, #0]
 80049ee:	6165      	str	r5, [r4, #20]
 80049f0:	9e01      	ldr	r6, [sp, #4]
 80049f2:	1aed      	subs	r5, r5, r3
 80049f4:	60a5      	str	r5, [r4, #8]
 80049f6:	9b01      	ldr	r3, [sp, #4]
 80049f8:	42b3      	cmp	r3, r6
 80049fa:	d200      	bcs.n	80049fe <__ssputs_r+0x8e>
 80049fc:	001e      	movs	r6, r3
 80049fe:	0032      	movs	r2, r6
 8004a00:	9903      	ldr	r1, [sp, #12]
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	f000 fbca 	bl	800519c <memmove>
 8004a08:	68a3      	ldr	r3, [r4, #8]
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	1b9b      	subs	r3, r3, r6
 8004a0e:	60a3      	str	r3, [r4, #8]
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	199e      	adds	r6, r3, r6
 8004a14:	6026      	str	r6, [r4, #0]
 8004a16:	e7da      	b.n	80049ce <__ssputs_r+0x5e>
 8004a18:	002a      	movs	r2, r5
 8004a1a:	0038      	movs	r0, r7
 8004a1c:	f000 fbd0 	bl	80051c0 <_realloc_r>
 8004a20:	1e06      	subs	r6, r0, #0
 8004a22:	d1e0      	bne.n	80049e6 <__ssputs_r+0x76>
 8004a24:	6921      	ldr	r1, [r4, #16]
 8004a26:	0038      	movs	r0, r7
 8004a28:	f7ff fc2c 	bl	8004284 <_free_r>
 8004a2c:	e7c7      	b.n	80049be <__ssputs_r+0x4e>
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	fffffb7f 	.word	0xfffffb7f

08004a34 <_svfiprintf_r>:
 8004a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a36:	b09f      	sub	sp, #124	; 0x7c
 8004a38:	9002      	str	r0, [sp, #8]
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	898b      	ldrh	r3, [r1, #12]
 8004a3e:	000f      	movs	r7, r1
 8004a40:	0016      	movs	r6, r2
 8004a42:	061b      	lsls	r3, r3, #24
 8004a44:	d511      	bpl.n	8004a6a <_svfiprintf_r+0x36>
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10e      	bne.n	8004a6a <_svfiprintf_r+0x36>
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	f7ff fc63 	bl	8004318 <_malloc_r>
 8004a52:	6038      	str	r0, [r7, #0]
 8004a54:	6138      	str	r0, [r7, #16]
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d105      	bne.n	8004a66 <_svfiprintf_r+0x32>
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	9a02      	ldr	r2, [sp, #8]
 8004a5e:	3801      	subs	r0, #1
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	b01f      	add	sp, #124	; 0x7c
 8004a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	ad06      	add	r5, sp, #24
 8004a6e:	616b      	str	r3, [r5, #20]
 8004a70:	3320      	adds	r3, #32
 8004a72:	766b      	strb	r3, [r5, #25]
 8004a74:	3310      	adds	r3, #16
 8004a76:	76ab      	strb	r3, [r5, #26]
 8004a78:	0034      	movs	r4, r6
 8004a7a:	7823      	ldrb	r3, [r4, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d147      	bne.n	8004b10 <_svfiprintf_r+0xdc>
 8004a80:	1ba3      	subs	r3, r4, r6
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	d00d      	beq.n	8004aa2 <_svfiprintf_r+0x6e>
 8004a86:	1ba3      	subs	r3, r4, r6
 8004a88:	0032      	movs	r2, r6
 8004a8a:	0039      	movs	r1, r7
 8004a8c:	9802      	ldr	r0, [sp, #8]
 8004a8e:	f7ff ff6f 	bl	8004970 <__ssputs_r>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	d100      	bne.n	8004a98 <_svfiprintf_r+0x64>
 8004a96:	e0b5      	b.n	8004c04 <_svfiprintf_r+0x1d0>
 8004a98:	696a      	ldr	r2, [r5, #20]
 8004a9a:	9b04      	ldr	r3, [sp, #16]
 8004a9c:	4694      	mov	ip, r2
 8004a9e:	4463      	add	r3, ip
 8004aa0:	616b      	str	r3, [r5, #20]
 8004aa2:	7823      	ldrb	r3, [r4, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d100      	bne.n	8004aaa <_svfiprintf_r+0x76>
 8004aa8:	e0ac      	b.n	8004c04 <_svfiprintf_r+0x1d0>
 8004aaa:	2201      	movs	r2, #1
 8004aac:	2300      	movs	r3, #0
 8004aae:	4252      	negs	r2, r2
 8004ab0:	606a      	str	r2, [r5, #4]
 8004ab2:	a902      	add	r1, sp, #8
 8004ab4:	3254      	adds	r2, #84	; 0x54
 8004ab6:	1852      	adds	r2, r2, r1
 8004ab8:	3401      	adds	r4, #1
 8004aba:	602b      	str	r3, [r5, #0]
 8004abc:	60eb      	str	r3, [r5, #12]
 8004abe:	60ab      	str	r3, [r5, #8]
 8004ac0:	7013      	strb	r3, [r2, #0]
 8004ac2:	65ab      	str	r3, [r5, #88]	; 0x58
 8004ac4:	4e58      	ldr	r6, [pc, #352]	; (8004c28 <_svfiprintf_r+0x1f4>)
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	7821      	ldrb	r1, [r4, #0]
 8004aca:	0030      	movs	r0, r6
 8004acc:	f000 fb52 	bl	8005174 <memchr>
 8004ad0:	1c62      	adds	r2, r4, #1
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d120      	bne.n	8004b18 <_svfiprintf_r+0xe4>
 8004ad6:	6829      	ldr	r1, [r5, #0]
 8004ad8:	06cb      	lsls	r3, r1, #27
 8004ada:	d504      	bpl.n	8004ae6 <_svfiprintf_r+0xb2>
 8004adc:	2353      	movs	r3, #83	; 0x53
 8004ade:	ae02      	add	r6, sp, #8
 8004ae0:	3020      	adds	r0, #32
 8004ae2:	199b      	adds	r3, r3, r6
 8004ae4:	7018      	strb	r0, [r3, #0]
 8004ae6:	070b      	lsls	r3, r1, #28
 8004ae8:	d504      	bpl.n	8004af4 <_svfiprintf_r+0xc0>
 8004aea:	2353      	movs	r3, #83	; 0x53
 8004aec:	202b      	movs	r0, #43	; 0x2b
 8004aee:	ae02      	add	r6, sp, #8
 8004af0:	199b      	adds	r3, r3, r6
 8004af2:	7018      	strb	r0, [r3, #0]
 8004af4:	7823      	ldrb	r3, [r4, #0]
 8004af6:	2b2a      	cmp	r3, #42	; 0x2a
 8004af8:	d016      	beq.n	8004b28 <_svfiprintf_r+0xf4>
 8004afa:	2000      	movs	r0, #0
 8004afc:	210a      	movs	r1, #10
 8004afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b00:	7822      	ldrb	r2, [r4, #0]
 8004b02:	3a30      	subs	r2, #48	; 0x30
 8004b04:	2a09      	cmp	r2, #9
 8004b06:	d955      	bls.n	8004bb4 <_svfiprintf_r+0x180>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d015      	beq.n	8004b38 <_svfiprintf_r+0x104>
 8004b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b0e:	e013      	b.n	8004b38 <_svfiprintf_r+0x104>
 8004b10:	2b25      	cmp	r3, #37	; 0x25
 8004b12:	d0b5      	beq.n	8004a80 <_svfiprintf_r+0x4c>
 8004b14:	3401      	adds	r4, #1
 8004b16:	e7b0      	b.n	8004a7a <_svfiprintf_r+0x46>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	1b80      	subs	r0, r0, r6
 8004b1c:	4083      	lsls	r3, r0
 8004b1e:	6829      	ldr	r1, [r5, #0]
 8004b20:	0014      	movs	r4, r2
 8004b22:	430b      	orrs	r3, r1
 8004b24:	602b      	str	r3, [r5, #0]
 8004b26:	e7cd      	b.n	8004ac4 <_svfiprintf_r+0x90>
 8004b28:	9b05      	ldr	r3, [sp, #20]
 8004b2a:	1d18      	adds	r0, r3, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	9005      	str	r0, [sp, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	db39      	blt.n	8004ba8 <_svfiprintf_r+0x174>
 8004b34:	9309      	str	r3, [sp, #36]	; 0x24
 8004b36:	0014      	movs	r4, r2
 8004b38:	7823      	ldrb	r3, [r4, #0]
 8004b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b3c:	d10b      	bne.n	8004b56 <_svfiprintf_r+0x122>
 8004b3e:	7863      	ldrb	r3, [r4, #1]
 8004b40:	1c62      	adds	r2, r4, #1
 8004b42:	2b2a      	cmp	r3, #42	; 0x2a
 8004b44:	d13e      	bne.n	8004bc4 <_svfiprintf_r+0x190>
 8004b46:	9b05      	ldr	r3, [sp, #20]
 8004b48:	3402      	adds	r4, #2
 8004b4a:	1d1a      	adds	r2, r3, #4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	9205      	str	r2, [sp, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	db34      	blt.n	8004bbe <_svfiprintf_r+0x18a>
 8004b54:	9307      	str	r3, [sp, #28]
 8004b56:	4e35      	ldr	r6, [pc, #212]	; (8004c2c <_svfiprintf_r+0x1f8>)
 8004b58:	7821      	ldrb	r1, [r4, #0]
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	0030      	movs	r0, r6
 8004b5e:	f000 fb09 	bl	8005174 <memchr>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d006      	beq.n	8004b74 <_svfiprintf_r+0x140>
 8004b66:	2340      	movs	r3, #64	; 0x40
 8004b68:	1b80      	subs	r0, r0, r6
 8004b6a:	4083      	lsls	r3, r0
 8004b6c:	682a      	ldr	r2, [r5, #0]
 8004b6e:	3401      	adds	r4, #1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	7821      	ldrb	r1, [r4, #0]
 8004b76:	2206      	movs	r2, #6
 8004b78:	482d      	ldr	r0, [pc, #180]	; (8004c30 <_svfiprintf_r+0x1fc>)
 8004b7a:	1c66      	adds	r6, r4, #1
 8004b7c:	7629      	strb	r1, [r5, #24]
 8004b7e:	f000 faf9 	bl	8005174 <memchr>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d046      	beq.n	8004c14 <_svfiprintf_r+0x1e0>
 8004b86:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <_svfiprintf_r+0x200>)
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d12f      	bne.n	8004bec <_svfiprintf_r+0x1b8>
 8004b8c:	6829      	ldr	r1, [r5, #0]
 8004b8e:	9b05      	ldr	r3, [sp, #20]
 8004b90:	2207      	movs	r2, #7
 8004b92:	05c9      	lsls	r1, r1, #23
 8004b94:	d528      	bpl.n	8004be8 <_svfiprintf_r+0x1b4>
 8004b96:	189b      	adds	r3, r3, r2
 8004b98:	4393      	bics	r3, r2
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	9305      	str	r3, [sp, #20]
 8004b9e:	696b      	ldr	r3, [r5, #20]
 8004ba0:	9a03      	ldr	r2, [sp, #12]
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	616b      	str	r3, [r5, #20]
 8004ba6:	e767      	b.n	8004a78 <_svfiprintf_r+0x44>
 8004ba8:	425b      	negs	r3, r3
 8004baa:	60eb      	str	r3, [r5, #12]
 8004bac:	2302      	movs	r3, #2
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	e7c0      	b.n	8004b36 <_svfiprintf_r+0x102>
 8004bb4:	434b      	muls	r3, r1
 8004bb6:	3401      	adds	r4, #1
 8004bb8:	189b      	adds	r3, r3, r2
 8004bba:	2001      	movs	r0, #1
 8004bbc:	e7a0      	b.n	8004b00 <_svfiprintf_r+0xcc>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	425b      	negs	r3, r3
 8004bc2:	e7c7      	b.n	8004b54 <_svfiprintf_r+0x120>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	0014      	movs	r4, r2
 8004bc8:	200a      	movs	r0, #10
 8004bca:	001a      	movs	r2, r3
 8004bcc:	606b      	str	r3, [r5, #4]
 8004bce:	7821      	ldrb	r1, [r4, #0]
 8004bd0:	3930      	subs	r1, #48	; 0x30
 8004bd2:	2909      	cmp	r1, #9
 8004bd4:	d903      	bls.n	8004bde <_svfiprintf_r+0x1aa>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0bd      	beq.n	8004b56 <_svfiprintf_r+0x122>
 8004bda:	9207      	str	r2, [sp, #28]
 8004bdc:	e7bb      	b.n	8004b56 <_svfiprintf_r+0x122>
 8004bde:	4342      	muls	r2, r0
 8004be0:	3401      	adds	r4, #1
 8004be2:	1852      	adds	r2, r2, r1
 8004be4:	2301      	movs	r3, #1
 8004be6:	e7f2      	b.n	8004bce <_svfiprintf_r+0x19a>
 8004be8:	3307      	adds	r3, #7
 8004bea:	e7d5      	b.n	8004b98 <_svfiprintf_r+0x164>
 8004bec:	ab05      	add	r3, sp, #20
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	003a      	movs	r2, r7
 8004bf2:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <_svfiprintf_r+0x204>)
 8004bf4:	0029      	movs	r1, r5
 8004bf6:	9802      	ldr	r0, [sp, #8]
 8004bf8:	e000      	b.n	8004bfc <_svfiprintf_r+0x1c8>
 8004bfa:	bf00      	nop
 8004bfc:	9003      	str	r0, [sp, #12]
 8004bfe:	9b03      	ldr	r3, [sp, #12]
 8004c00:	3301      	adds	r3, #1
 8004c02:	d1cc      	bne.n	8004b9e <_svfiprintf_r+0x16a>
 8004c04:	89bb      	ldrh	r3, [r7, #12]
 8004c06:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004c08:	065b      	lsls	r3, r3, #25
 8004c0a:	d400      	bmi.n	8004c0e <_svfiprintf_r+0x1da>
 8004c0c:	e729      	b.n	8004a62 <_svfiprintf_r+0x2e>
 8004c0e:	2001      	movs	r0, #1
 8004c10:	4240      	negs	r0, r0
 8004c12:	e726      	b.n	8004a62 <_svfiprintf_r+0x2e>
 8004c14:	ab05      	add	r3, sp, #20
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	003a      	movs	r2, r7
 8004c1a:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <_svfiprintf_r+0x204>)
 8004c1c:	0029      	movs	r1, r5
 8004c1e:	9802      	ldr	r0, [sp, #8]
 8004c20:	f000 f87a 	bl	8004d18 <_printf_i>
 8004c24:	e7ea      	b.n	8004bfc <_svfiprintf_r+0x1c8>
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	08005ccc 	.word	0x08005ccc
 8004c2c:	08005cd2 	.word	0x08005cd2
 8004c30:	08005cd6 	.word	0x08005cd6
 8004c34:	00000000 	.word	0x00000000
 8004c38:	08004971 	.word	0x08004971

08004c3c <_printf_common>:
 8004c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c3e:	0015      	movs	r5, r2
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	688a      	ldr	r2, [r1, #8]
 8004c44:	690b      	ldr	r3, [r1, #16]
 8004c46:	9000      	str	r0, [sp, #0]
 8004c48:	000c      	movs	r4, r1
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	da00      	bge.n	8004c50 <_printf_common+0x14>
 8004c4e:	0013      	movs	r3, r2
 8004c50:	0022      	movs	r2, r4
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	3243      	adds	r2, #67	; 0x43
 8004c56:	7812      	ldrb	r2, [r2, #0]
 8004c58:	2a00      	cmp	r2, #0
 8004c5a:	d001      	beq.n	8004c60 <_printf_common+0x24>
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	069b      	lsls	r3, r3, #26
 8004c64:	d502      	bpl.n	8004c6c <_printf_common+0x30>
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	2706      	movs	r7, #6
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	401f      	ands	r7, r3
 8004c72:	d027      	beq.n	8004cc4 <_printf_common+0x88>
 8004c74:	0023      	movs	r3, r4
 8004c76:	3343      	adds	r3, #67	; 0x43
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	1e5a      	subs	r2, r3, #1
 8004c7c:	4193      	sbcs	r3, r2
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	0692      	lsls	r2, r2, #26
 8004c82:	d430      	bmi.n	8004ce6 <_printf_common+0xaa>
 8004c84:	0022      	movs	r2, r4
 8004c86:	9901      	ldr	r1, [sp, #4]
 8004c88:	3243      	adds	r2, #67	; 0x43
 8004c8a:	9800      	ldr	r0, [sp, #0]
 8004c8c:	9e08      	ldr	r6, [sp, #32]
 8004c8e:	47b0      	blx	r6
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d025      	beq.n	8004ce0 <_printf_common+0xa4>
 8004c94:	2306      	movs	r3, #6
 8004c96:	6820      	ldr	r0, [r4, #0]
 8004c98:	682a      	ldr	r2, [r5, #0]
 8004c9a:	68e1      	ldr	r1, [r4, #12]
 8004c9c:	4003      	ands	r3, r0
 8004c9e:	2500      	movs	r5, #0
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d103      	bne.n	8004cac <_printf_common+0x70>
 8004ca4:	1a8d      	subs	r5, r1, r2
 8004ca6:	43eb      	mvns	r3, r5
 8004ca8:	17db      	asrs	r3, r3, #31
 8004caa:	401d      	ands	r5, r3
 8004cac:	68a3      	ldr	r3, [r4, #8]
 8004cae:	6922      	ldr	r2, [r4, #16]
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	dd01      	ble.n	8004cb8 <_printf_common+0x7c>
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	18ed      	adds	r5, r5, r3
 8004cb8:	2700      	movs	r7, #0
 8004cba:	42bd      	cmp	r5, r7
 8004cbc:	d120      	bne.n	8004d00 <_printf_common+0xc4>
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	e010      	b.n	8004ce4 <_printf_common+0xa8>
 8004cc2:	3701      	adds	r7, #1
 8004cc4:	68e3      	ldr	r3, [r4, #12]
 8004cc6:	682a      	ldr	r2, [r5, #0]
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	429f      	cmp	r7, r3
 8004ccc:	dad2      	bge.n	8004c74 <_printf_common+0x38>
 8004cce:	0022      	movs	r2, r4
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	3219      	adds	r2, #25
 8004cd4:	9901      	ldr	r1, [sp, #4]
 8004cd6:	9800      	ldr	r0, [sp, #0]
 8004cd8:	9e08      	ldr	r6, [sp, #32]
 8004cda:	47b0      	blx	r6
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d1f0      	bne.n	8004cc2 <_printf_common+0x86>
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	4240      	negs	r0, r0
 8004ce4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ce6:	2030      	movs	r0, #48	; 0x30
 8004ce8:	18e1      	adds	r1, r4, r3
 8004cea:	3143      	adds	r1, #67	; 0x43
 8004cec:	7008      	strb	r0, [r1, #0]
 8004cee:	0021      	movs	r1, r4
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	3145      	adds	r1, #69	; 0x45
 8004cf4:	7809      	ldrb	r1, [r1, #0]
 8004cf6:	18a2      	adds	r2, r4, r2
 8004cf8:	3243      	adds	r2, #67	; 0x43
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	7011      	strb	r1, [r2, #0]
 8004cfe:	e7c1      	b.n	8004c84 <_printf_common+0x48>
 8004d00:	0022      	movs	r2, r4
 8004d02:	2301      	movs	r3, #1
 8004d04:	321a      	adds	r2, #26
 8004d06:	9901      	ldr	r1, [sp, #4]
 8004d08:	9800      	ldr	r0, [sp, #0]
 8004d0a:	9e08      	ldr	r6, [sp, #32]
 8004d0c:	47b0      	blx	r6
 8004d0e:	1c43      	adds	r3, r0, #1
 8004d10:	d0e6      	beq.n	8004ce0 <_printf_common+0xa4>
 8004d12:	3701      	adds	r7, #1
 8004d14:	e7d1      	b.n	8004cba <_printf_common+0x7e>
	...

08004d18 <_printf_i>:
 8004d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1a:	b08b      	sub	sp, #44	; 0x2c
 8004d1c:	9206      	str	r2, [sp, #24]
 8004d1e:	000a      	movs	r2, r1
 8004d20:	3243      	adds	r2, #67	; 0x43
 8004d22:	9307      	str	r3, [sp, #28]
 8004d24:	9005      	str	r0, [sp, #20]
 8004d26:	9204      	str	r2, [sp, #16]
 8004d28:	7e0a      	ldrb	r2, [r1, #24]
 8004d2a:	000c      	movs	r4, r1
 8004d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d2e:	2a6e      	cmp	r2, #110	; 0x6e
 8004d30:	d100      	bne.n	8004d34 <_printf_i+0x1c>
 8004d32:	e08f      	b.n	8004e54 <_printf_i+0x13c>
 8004d34:	d817      	bhi.n	8004d66 <_printf_i+0x4e>
 8004d36:	2a63      	cmp	r2, #99	; 0x63
 8004d38:	d02c      	beq.n	8004d94 <_printf_i+0x7c>
 8004d3a:	d808      	bhi.n	8004d4e <_printf_i+0x36>
 8004d3c:	2a00      	cmp	r2, #0
 8004d3e:	d100      	bne.n	8004d42 <_printf_i+0x2a>
 8004d40:	e099      	b.n	8004e76 <_printf_i+0x15e>
 8004d42:	2a58      	cmp	r2, #88	; 0x58
 8004d44:	d054      	beq.n	8004df0 <_printf_i+0xd8>
 8004d46:	0026      	movs	r6, r4
 8004d48:	3642      	adds	r6, #66	; 0x42
 8004d4a:	7032      	strb	r2, [r6, #0]
 8004d4c:	e029      	b.n	8004da2 <_printf_i+0x8a>
 8004d4e:	2a64      	cmp	r2, #100	; 0x64
 8004d50:	d001      	beq.n	8004d56 <_printf_i+0x3e>
 8004d52:	2a69      	cmp	r2, #105	; 0x69
 8004d54:	d1f7      	bne.n	8004d46 <_printf_i+0x2e>
 8004d56:	6821      	ldr	r1, [r4, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	0608      	lsls	r0, r1, #24
 8004d5c:	d523      	bpl.n	8004da6 <_printf_i+0x8e>
 8004d5e:	1d11      	adds	r1, r2, #4
 8004d60:	6019      	str	r1, [r3, #0]
 8004d62:	6815      	ldr	r5, [r2, #0]
 8004d64:	e025      	b.n	8004db2 <_printf_i+0x9a>
 8004d66:	2a73      	cmp	r2, #115	; 0x73
 8004d68:	d100      	bne.n	8004d6c <_printf_i+0x54>
 8004d6a:	e088      	b.n	8004e7e <_printf_i+0x166>
 8004d6c:	d808      	bhi.n	8004d80 <_printf_i+0x68>
 8004d6e:	2a6f      	cmp	r2, #111	; 0x6f
 8004d70:	d029      	beq.n	8004dc6 <_printf_i+0xae>
 8004d72:	2a70      	cmp	r2, #112	; 0x70
 8004d74:	d1e7      	bne.n	8004d46 <_printf_i+0x2e>
 8004d76:	2220      	movs	r2, #32
 8004d78:	6809      	ldr	r1, [r1, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	e003      	b.n	8004d88 <_printf_i+0x70>
 8004d80:	2a75      	cmp	r2, #117	; 0x75
 8004d82:	d020      	beq.n	8004dc6 <_printf_i+0xae>
 8004d84:	2a78      	cmp	r2, #120	; 0x78
 8004d86:	d1de      	bne.n	8004d46 <_printf_i+0x2e>
 8004d88:	0022      	movs	r2, r4
 8004d8a:	2178      	movs	r1, #120	; 0x78
 8004d8c:	3245      	adds	r2, #69	; 0x45
 8004d8e:	7011      	strb	r1, [r2, #0]
 8004d90:	4a6c      	ldr	r2, [pc, #432]	; (8004f44 <_printf_i+0x22c>)
 8004d92:	e030      	b.n	8004df6 <_printf_i+0xde>
 8004d94:	000e      	movs	r6, r1
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	3642      	adds	r6, #66	; 0x42
 8004d9a:	1d11      	adds	r1, r2, #4
 8004d9c:	6019      	str	r1, [r3, #0]
 8004d9e:	6813      	ldr	r3, [r2, #0]
 8004da0:	7033      	strb	r3, [r6, #0]
 8004da2:	2301      	movs	r3, #1
 8004da4:	e079      	b.n	8004e9a <_printf_i+0x182>
 8004da6:	0649      	lsls	r1, r1, #25
 8004da8:	d5d9      	bpl.n	8004d5e <_printf_i+0x46>
 8004daa:	1d11      	adds	r1, r2, #4
 8004dac:	6019      	str	r1, [r3, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	5ed5      	ldrsh	r5, [r2, r3]
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	da03      	bge.n	8004dbe <_printf_i+0xa6>
 8004db6:	232d      	movs	r3, #45	; 0x2d
 8004db8:	9a04      	ldr	r2, [sp, #16]
 8004dba:	426d      	negs	r5, r5
 8004dbc:	7013      	strb	r3, [r2, #0]
 8004dbe:	4b62      	ldr	r3, [pc, #392]	; (8004f48 <_printf_i+0x230>)
 8004dc0:	270a      	movs	r7, #10
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	e02f      	b.n	8004e26 <_printf_i+0x10e>
 8004dc6:	6820      	ldr	r0, [r4, #0]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	0605      	lsls	r5, r0, #24
 8004dcc:	d503      	bpl.n	8004dd6 <_printf_i+0xbe>
 8004dce:	1d08      	adds	r0, r1, #4
 8004dd0:	6018      	str	r0, [r3, #0]
 8004dd2:	680d      	ldr	r5, [r1, #0]
 8004dd4:	e005      	b.n	8004de2 <_printf_i+0xca>
 8004dd6:	0640      	lsls	r0, r0, #25
 8004dd8:	d5f9      	bpl.n	8004dce <_printf_i+0xb6>
 8004dda:	680d      	ldr	r5, [r1, #0]
 8004ddc:	1d08      	adds	r0, r1, #4
 8004dde:	6018      	str	r0, [r3, #0]
 8004de0:	b2ad      	uxth	r5, r5
 8004de2:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <_printf_i+0x230>)
 8004de4:	2708      	movs	r7, #8
 8004de6:	9303      	str	r3, [sp, #12]
 8004de8:	2a6f      	cmp	r2, #111	; 0x6f
 8004dea:	d018      	beq.n	8004e1e <_printf_i+0x106>
 8004dec:	270a      	movs	r7, #10
 8004dee:	e016      	b.n	8004e1e <_printf_i+0x106>
 8004df0:	3145      	adds	r1, #69	; 0x45
 8004df2:	700a      	strb	r2, [r1, #0]
 8004df4:	4a54      	ldr	r2, [pc, #336]	; (8004f48 <_printf_i+0x230>)
 8004df6:	9203      	str	r2, [sp, #12]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	6821      	ldr	r1, [r4, #0]
 8004dfc:	1d10      	adds	r0, r2, #4
 8004dfe:	6018      	str	r0, [r3, #0]
 8004e00:	6815      	ldr	r5, [r2, #0]
 8004e02:	0608      	lsls	r0, r1, #24
 8004e04:	d522      	bpl.n	8004e4c <_printf_i+0x134>
 8004e06:	07cb      	lsls	r3, r1, #31
 8004e08:	d502      	bpl.n	8004e10 <_printf_i+0xf8>
 8004e0a:	2320      	movs	r3, #32
 8004e0c:	4319      	orrs	r1, r3
 8004e0e:	6021      	str	r1, [r4, #0]
 8004e10:	2710      	movs	r7, #16
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	d103      	bne.n	8004e1e <_printf_i+0x106>
 8004e16:	2320      	movs	r3, #32
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	439a      	bics	r2, r3
 8004e1c:	6022      	str	r2, [r4, #0]
 8004e1e:	0023      	movs	r3, r4
 8004e20:	2200      	movs	r2, #0
 8004e22:	3343      	adds	r3, #67	; 0x43
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	60a3      	str	r3, [r4, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	db5c      	blt.n	8004ee8 <_printf_i+0x1d0>
 8004e2e:	2204      	movs	r2, #4
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	4391      	bics	r1, r2
 8004e34:	6021      	str	r1, [r4, #0]
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	d158      	bne.n	8004eec <_printf_i+0x1d4>
 8004e3a:	9e04      	ldr	r6, [sp, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d064      	beq.n	8004f0a <_printf_i+0x1f2>
 8004e40:	0026      	movs	r6, r4
 8004e42:	9b03      	ldr	r3, [sp, #12]
 8004e44:	3642      	adds	r6, #66	; 0x42
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	7033      	strb	r3, [r6, #0]
 8004e4a:	e05e      	b.n	8004f0a <_printf_i+0x1f2>
 8004e4c:	0648      	lsls	r0, r1, #25
 8004e4e:	d5da      	bpl.n	8004e06 <_printf_i+0xee>
 8004e50:	b2ad      	uxth	r5, r5
 8004e52:	e7d8      	b.n	8004e06 <_printf_i+0xee>
 8004e54:	6809      	ldr	r1, [r1, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	0608      	lsls	r0, r1, #24
 8004e5a:	d505      	bpl.n	8004e68 <_printf_i+0x150>
 8004e5c:	1d11      	adds	r1, r2, #4
 8004e5e:	6019      	str	r1, [r3, #0]
 8004e60:	6813      	ldr	r3, [r2, #0]
 8004e62:	6962      	ldr	r2, [r4, #20]
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e006      	b.n	8004e76 <_printf_i+0x15e>
 8004e68:	0649      	lsls	r1, r1, #25
 8004e6a:	d5f7      	bpl.n	8004e5c <_printf_i+0x144>
 8004e6c:	1d11      	adds	r1, r2, #4
 8004e6e:	6019      	str	r1, [r3, #0]
 8004e70:	6813      	ldr	r3, [r2, #0]
 8004e72:	8aa2      	ldrh	r2, [r4, #20]
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	9e04      	ldr	r6, [sp, #16]
 8004e7a:	6123      	str	r3, [r4, #16]
 8004e7c:	e054      	b.n	8004f28 <_printf_i+0x210>
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	1d11      	adds	r1, r2, #4
 8004e82:	6019      	str	r1, [r3, #0]
 8004e84:	6816      	ldr	r6, [r2, #0]
 8004e86:	2100      	movs	r1, #0
 8004e88:	6862      	ldr	r2, [r4, #4]
 8004e8a:	0030      	movs	r0, r6
 8004e8c:	f000 f972 	bl	8005174 <memchr>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d001      	beq.n	8004e98 <_printf_i+0x180>
 8004e94:	1b80      	subs	r0, r0, r6
 8004e96:	6060      	str	r0, [r4, #4]
 8004e98:	6863      	ldr	r3, [r4, #4]
 8004e9a:	6123      	str	r3, [r4, #16]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	9a04      	ldr	r2, [sp, #16]
 8004ea0:	7013      	strb	r3, [r2, #0]
 8004ea2:	e041      	b.n	8004f28 <_printf_i+0x210>
 8004ea4:	6923      	ldr	r3, [r4, #16]
 8004ea6:	0032      	movs	r2, r6
 8004ea8:	9906      	ldr	r1, [sp, #24]
 8004eaa:	9805      	ldr	r0, [sp, #20]
 8004eac:	9d07      	ldr	r5, [sp, #28]
 8004eae:	47a8      	blx	r5
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d043      	beq.n	8004f3c <_printf_i+0x224>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	2500      	movs	r5, #0
 8004eb8:	079b      	lsls	r3, r3, #30
 8004eba:	d40f      	bmi.n	8004edc <_printf_i+0x1c4>
 8004ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ebe:	68e0      	ldr	r0, [r4, #12]
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	da3d      	bge.n	8004f40 <_printf_i+0x228>
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	e03b      	b.n	8004f40 <_printf_i+0x228>
 8004ec8:	0022      	movs	r2, r4
 8004eca:	2301      	movs	r3, #1
 8004ecc:	3219      	adds	r2, #25
 8004ece:	9906      	ldr	r1, [sp, #24]
 8004ed0:	9805      	ldr	r0, [sp, #20]
 8004ed2:	9e07      	ldr	r6, [sp, #28]
 8004ed4:	47b0      	blx	r6
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	d030      	beq.n	8004f3c <_printf_i+0x224>
 8004eda:	3501      	adds	r5, #1
 8004edc:	68e3      	ldr	r3, [r4, #12]
 8004ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	429d      	cmp	r5, r3
 8004ee4:	dbf0      	blt.n	8004ec8 <_printf_i+0x1b0>
 8004ee6:	e7e9      	b.n	8004ebc <_printf_i+0x1a4>
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	d0a9      	beq.n	8004e40 <_printf_i+0x128>
 8004eec:	9e04      	ldr	r6, [sp, #16]
 8004eee:	0028      	movs	r0, r5
 8004ef0:	0039      	movs	r1, r7
 8004ef2:	f7fb f9ab 	bl	800024c <__aeabi_uidivmod>
 8004ef6:	9b03      	ldr	r3, [sp, #12]
 8004ef8:	3e01      	subs	r6, #1
 8004efa:	5c5b      	ldrb	r3, [r3, r1]
 8004efc:	0028      	movs	r0, r5
 8004efe:	7033      	strb	r3, [r6, #0]
 8004f00:	0039      	movs	r1, r7
 8004f02:	f7fb f91d 	bl	8000140 <__udivsi3>
 8004f06:	1e05      	subs	r5, r0, #0
 8004f08:	d1f1      	bne.n	8004eee <_printf_i+0x1d6>
 8004f0a:	2f08      	cmp	r7, #8
 8004f0c:	d109      	bne.n	8004f22 <_printf_i+0x20a>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	07db      	lsls	r3, r3, #31
 8004f12:	d506      	bpl.n	8004f22 <_printf_i+0x20a>
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	6922      	ldr	r2, [r4, #16]
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	dc02      	bgt.n	8004f22 <_printf_i+0x20a>
 8004f1c:	2330      	movs	r3, #48	; 0x30
 8004f1e:	3e01      	subs	r6, #1
 8004f20:	7033      	strb	r3, [r6, #0]
 8004f22:	9b04      	ldr	r3, [sp, #16]
 8004f24:	1b9b      	subs	r3, r3, r6
 8004f26:	6123      	str	r3, [r4, #16]
 8004f28:	9b07      	ldr	r3, [sp, #28]
 8004f2a:	aa09      	add	r2, sp, #36	; 0x24
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	0021      	movs	r1, r4
 8004f30:	9b06      	ldr	r3, [sp, #24]
 8004f32:	9805      	ldr	r0, [sp, #20]
 8004f34:	f7ff fe82 	bl	8004c3c <_printf_common>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d1b3      	bne.n	8004ea4 <_printf_i+0x18c>
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	4240      	negs	r0, r0
 8004f40:	b00b      	add	sp, #44	; 0x2c
 8004f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f44:	08005cee 	.word	0x08005cee
 8004f48:	08005cdd 	.word	0x08005cdd

08004f4c <siscanf>:
 8004f4c:	b40e      	push	{r1, r2, r3}
 8004f4e:	2381      	movs	r3, #129	; 0x81
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	b09d      	sub	sp, #116	; 0x74
 8004f54:	ac02      	add	r4, sp, #8
 8004f56:	ad21      	add	r5, sp, #132	; 0x84
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	cd40      	ldmia	r5!, {r6}
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	9002      	str	r0, [sp, #8]
 8004f60:	9006      	str	r0, [sp, #24]
 8004f62:	f7fb f8d1 	bl	8000108 <strlen>
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <siscanf+0x48>)
 8004f68:	6060      	str	r0, [r4, #4]
 8004f6a:	6263      	str	r3, [r4, #36]	; 0x24
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6160      	str	r0, [r4, #20]
 8004f70:	4809      	ldr	r0, [pc, #36]	; (8004f98 <siscanf+0x4c>)
 8004f72:	6363      	str	r3, [r4, #52]	; 0x34
 8004f74:	64a3      	str	r3, [r4, #72]	; 0x48
 8004f76:	3b01      	subs	r3, #1
 8004f78:	81e3      	strh	r3, [r4, #14]
 8004f7a:	0032      	movs	r2, r6
 8004f7c:	002b      	movs	r3, r5
 8004f7e:	0021      	movs	r1, r4
 8004f80:	6800      	ldr	r0, [r0, #0]
 8004f82:	9501      	str	r5, [sp, #4]
 8004f84:	f000 f99e 	bl	80052c4 <__ssvfiscanf_r>
 8004f88:	b01d      	add	sp, #116	; 0x74
 8004f8a:	bc70      	pop	{r4, r5, r6}
 8004f8c:	bc08      	pop	{r3}
 8004f8e:	b003      	add	sp, #12
 8004f90:	4718      	bx	r3
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	08004f9d 	.word	0x08004f9d
 8004f98:	20000010 	.word	0x20000010

08004f9c <__seofread>:
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	4770      	bx	lr

08004fa0 <strcpy>:
 8004fa0:	1c03      	adds	r3, r0, #0
 8004fa2:	780a      	ldrb	r2, [r1, #0]
 8004fa4:	3101      	adds	r1, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	2a00      	cmp	r2, #0
 8004fac:	d1f9      	bne.n	8004fa2 <strcpy+0x2>
 8004fae:	4770      	bx	lr

08004fb0 <strncmp>:
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	b530      	push	{r4, r5, lr}
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d00a      	beq.n	8004fce <strncmp+0x1e>
 8004fb8:	3a01      	subs	r2, #1
 8004fba:	5cc4      	ldrb	r4, [r0, r3]
 8004fbc:	5ccd      	ldrb	r5, [r1, r3]
 8004fbe:	42ac      	cmp	r4, r5
 8004fc0:	d104      	bne.n	8004fcc <strncmp+0x1c>
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d002      	beq.n	8004fcc <strncmp+0x1c>
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	2c00      	cmp	r4, #0
 8004fca:	d1f6      	bne.n	8004fba <strncmp+0xa>
 8004fcc:	1b63      	subs	r3, r4, r5
 8004fce:	0018      	movs	r0, r3
 8004fd0:	bd30      	pop	{r4, r5, pc}

08004fd2 <_strtoul_l.isra.0>:
 8004fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd4:	001f      	movs	r7, r3
 8004fd6:	000e      	movs	r6, r1
 8004fd8:	b087      	sub	sp, #28
 8004fda:	9005      	str	r0, [sp, #20]
 8004fdc:	9103      	str	r1, [sp, #12]
 8004fde:	9201      	str	r2, [sp, #4]
 8004fe0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004fe2:	7834      	ldrb	r4, [r6, #0]
 8004fe4:	f000 f8a2 	bl	800512c <__locale_ctype_ptr_l>
 8004fe8:	2208      	movs	r2, #8
 8004fea:	1900      	adds	r0, r0, r4
 8004fec:	7843      	ldrb	r3, [r0, #1]
 8004fee:	1c75      	adds	r5, r6, #1
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d10c      	bne.n	800500e <_strtoul_l.isra.0+0x3c>
 8004ff4:	2c2d      	cmp	r4, #45	; 0x2d
 8004ff6:	d10c      	bne.n	8005012 <_strtoul_l.isra.0+0x40>
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	782c      	ldrb	r4, [r5, #0]
 8004ffc:	9302      	str	r3, [sp, #8]
 8004ffe:	1cb5      	adds	r5, r6, #2
 8005000:	2f00      	cmp	r7, #0
 8005002:	d00c      	beq.n	800501e <_strtoul_l.isra.0+0x4c>
 8005004:	2f10      	cmp	r7, #16
 8005006:	d114      	bne.n	8005032 <_strtoul_l.isra.0+0x60>
 8005008:	2c30      	cmp	r4, #48	; 0x30
 800500a:	d00a      	beq.n	8005022 <_strtoul_l.isra.0+0x50>
 800500c:	e011      	b.n	8005032 <_strtoul_l.isra.0+0x60>
 800500e:	002e      	movs	r6, r5
 8005010:	e7e6      	b.n	8004fe0 <_strtoul_l.isra.0+0xe>
 8005012:	9302      	str	r3, [sp, #8]
 8005014:	2c2b      	cmp	r4, #43	; 0x2b
 8005016:	d1f3      	bne.n	8005000 <_strtoul_l.isra.0+0x2e>
 8005018:	782c      	ldrb	r4, [r5, #0]
 800501a:	1cb5      	adds	r5, r6, #2
 800501c:	e7f0      	b.n	8005000 <_strtoul_l.isra.0+0x2e>
 800501e:	2c30      	cmp	r4, #48	; 0x30
 8005020:	d12f      	bne.n	8005082 <_strtoul_l.isra.0+0xb0>
 8005022:	2220      	movs	r2, #32
 8005024:	782b      	ldrb	r3, [r5, #0]
 8005026:	4393      	bics	r3, r2
 8005028:	2b58      	cmp	r3, #88	; 0x58
 800502a:	d154      	bne.n	80050d6 <_strtoul_l.isra.0+0x104>
 800502c:	2710      	movs	r7, #16
 800502e:	786c      	ldrb	r4, [r5, #1]
 8005030:	3502      	adds	r5, #2
 8005032:	2001      	movs	r0, #1
 8005034:	0039      	movs	r1, r7
 8005036:	4240      	negs	r0, r0
 8005038:	f7fb f882 	bl	8000140 <__udivsi3>
 800503c:	0006      	movs	r6, r0
 800503e:	2001      	movs	r0, #1
 8005040:	0039      	movs	r1, r7
 8005042:	4240      	negs	r0, r0
 8005044:	f7fb f902 	bl	800024c <__aeabi_uidivmod>
 8005048:	2300      	movs	r3, #0
 800504a:	9104      	str	r1, [sp, #16]
 800504c:	2101      	movs	r1, #1
 800504e:	2201      	movs	r2, #1
 8005050:	0018      	movs	r0, r3
 8005052:	468c      	mov	ip, r1
 8005054:	4252      	negs	r2, r2
 8005056:	0021      	movs	r1, r4
 8005058:	3930      	subs	r1, #48	; 0x30
 800505a:	2909      	cmp	r1, #9
 800505c:	d813      	bhi.n	8005086 <_strtoul_l.isra.0+0xb4>
 800505e:	000c      	movs	r4, r1
 8005060:	42a7      	cmp	r7, r4
 8005062:	dd1e      	ble.n	80050a2 <_strtoul_l.isra.0+0xd0>
 8005064:	2b00      	cmp	r3, #0
 8005066:	db1a      	blt.n	800509e <_strtoul_l.isra.0+0xcc>
 8005068:	0013      	movs	r3, r2
 800506a:	4286      	cmp	r6, r0
 800506c:	d306      	bcc.n	800507c <_strtoul_l.isra.0+0xaa>
 800506e:	d102      	bne.n	8005076 <_strtoul_l.isra.0+0xa4>
 8005070:	9904      	ldr	r1, [sp, #16]
 8005072:	42a1      	cmp	r1, r4
 8005074:	db02      	blt.n	800507c <_strtoul_l.isra.0+0xaa>
 8005076:	4663      	mov	r3, ip
 8005078:	4378      	muls	r0, r7
 800507a:	1820      	adds	r0, r4, r0
 800507c:	782c      	ldrb	r4, [r5, #0]
 800507e:	3501      	adds	r5, #1
 8005080:	e7e9      	b.n	8005056 <_strtoul_l.isra.0+0x84>
 8005082:	270a      	movs	r7, #10
 8005084:	e7d5      	b.n	8005032 <_strtoul_l.isra.0+0x60>
 8005086:	0021      	movs	r1, r4
 8005088:	3941      	subs	r1, #65	; 0x41
 800508a:	2919      	cmp	r1, #25
 800508c:	d801      	bhi.n	8005092 <_strtoul_l.isra.0+0xc0>
 800508e:	3c37      	subs	r4, #55	; 0x37
 8005090:	e7e6      	b.n	8005060 <_strtoul_l.isra.0+0x8e>
 8005092:	0021      	movs	r1, r4
 8005094:	3961      	subs	r1, #97	; 0x61
 8005096:	2919      	cmp	r1, #25
 8005098:	d803      	bhi.n	80050a2 <_strtoul_l.isra.0+0xd0>
 800509a:	3c57      	subs	r4, #87	; 0x57
 800509c:	e7e0      	b.n	8005060 <_strtoul_l.isra.0+0x8e>
 800509e:	0013      	movs	r3, r2
 80050a0:	e7ec      	b.n	800507c <_strtoul_l.isra.0+0xaa>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	da09      	bge.n	80050ba <_strtoul_l.isra.0+0xe8>
 80050a6:	2322      	movs	r3, #34	; 0x22
 80050a8:	2001      	movs	r0, #1
 80050aa:	9a05      	ldr	r2, [sp, #20]
 80050ac:	4240      	negs	r0, r0
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	9b01      	ldr	r3, [sp, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10b      	bne.n	80050ce <_strtoul_l.isra.0+0xfc>
 80050b6:	b007      	add	sp, #28
 80050b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ba:	9a02      	ldr	r2, [sp, #8]
 80050bc:	2a00      	cmp	r2, #0
 80050be:	d000      	beq.n	80050c2 <_strtoul_l.isra.0+0xf0>
 80050c0:	4240      	negs	r0, r0
 80050c2:	9a01      	ldr	r2, [sp, #4]
 80050c4:	2a00      	cmp	r2, #0
 80050c6:	d0f6      	beq.n	80050b6 <_strtoul_l.isra.0+0xe4>
 80050c8:	9a03      	ldr	r2, [sp, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d000      	beq.n	80050d0 <_strtoul_l.isra.0+0xfe>
 80050ce:	1e6a      	subs	r2, r5, #1
 80050d0:	9b01      	ldr	r3, [sp, #4]
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e7ef      	b.n	80050b6 <_strtoul_l.isra.0+0xe4>
 80050d6:	2430      	movs	r4, #48	; 0x30
 80050d8:	2f00      	cmp	r7, #0
 80050da:	d1aa      	bne.n	8005032 <_strtoul_l.isra.0+0x60>
 80050dc:	3708      	adds	r7, #8
 80050de:	e7a8      	b.n	8005032 <_strtoul_l.isra.0+0x60>

080050e0 <_strtoul_r>:
 80050e0:	b513      	push	{r0, r1, r4, lr}
 80050e2:	4c05      	ldr	r4, [pc, #20]	; (80050f8 <_strtoul_r+0x18>)
 80050e4:	6824      	ldr	r4, [r4, #0]
 80050e6:	6a24      	ldr	r4, [r4, #32]
 80050e8:	2c00      	cmp	r4, #0
 80050ea:	d100      	bne.n	80050ee <_strtoul_r+0xe>
 80050ec:	4c03      	ldr	r4, [pc, #12]	; (80050fc <_strtoul_r+0x1c>)
 80050ee:	9400      	str	r4, [sp, #0]
 80050f0:	f7ff ff6f 	bl	8004fd2 <_strtoul_l.isra.0>
 80050f4:	bd16      	pop	{r1, r2, r4, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	20000010 	.word	0x20000010
 80050fc:	200000bc 	.word	0x200000bc

08005100 <strtoul>:
 8005100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005102:	0013      	movs	r3, r2
 8005104:	4a06      	ldr	r2, [pc, #24]	; (8005120 <strtoul+0x20>)
 8005106:	0005      	movs	r5, r0
 8005108:	6810      	ldr	r0, [r2, #0]
 800510a:	6a04      	ldr	r4, [r0, #32]
 800510c:	2c00      	cmp	r4, #0
 800510e:	d100      	bne.n	8005112 <strtoul+0x12>
 8005110:	4c04      	ldr	r4, [pc, #16]	; (8005124 <strtoul+0x24>)
 8005112:	000a      	movs	r2, r1
 8005114:	9400      	str	r4, [sp, #0]
 8005116:	0029      	movs	r1, r5
 8005118:	f7ff ff5b 	bl	8004fd2 <_strtoul_l.isra.0>
 800511c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	20000010 	.word	0x20000010
 8005124:	200000bc 	.word	0x200000bc

08005128 <__env_lock>:
 8005128:	4770      	bx	lr

0800512a <__env_unlock>:
 800512a:	4770      	bx	lr

0800512c <__locale_ctype_ptr_l>:
 800512c:	30ec      	adds	r0, #236	; 0xec
 800512e:	6800      	ldr	r0, [r0, #0]
 8005130:	4770      	bx	lr
	...

08005134 <__locale_ctype_ptr>:
 8005134:	4b04      	ldr	r3, [pc, #16]	; (8005148 <__locale_ctype_ptr+0x14>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d100      	bne.n	8005140 <__locale_ctype_ptr+0xc>
 800513e:	4b03      	ldr	r3, [pc, #12]	; (800514c <__locale_ctype_ptr+0x18>)
 8005140:	33ec      	adds	r3, #236	; 0xec
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	4770      	bx	lr
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	20000010 	.word	0x20000010
 800514c:	200000bc 	.word	0x200000bc

08005150 <__ascii_mbtowc>:
 8005150:	b082      	sub	sp, #8
 8005152:	2900      	cmp	r1, #0
 8005154:	d100      	bne.n	8005158 <__ascii_mbtowc+0x8>
 8005156:	a901      	add	r1, sp, #4
 8005158:	1e10      	subs	r0, r2, #0
 800515a:	d006      	beq.n	800516a <__ascii_mbtowc+0x1a>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d006      	beq.n	800516e <__ascii_mbtowc+0x1e>
 8005160:	7813      	ldrb	r3, [r2, #0]
 8005162:	600b      	str	r3, [r1, #0]
 8005164:	7810      	ldrb	r0, [r2, #0]
 8005166:	1e43      	subs	r3, r0, #1
 8005168:	4198      	sbcs	r0, r3
 800516a:	b002      	add	sp, #8
 800516c:	4770      	bx	lr
 800516e:	2002      	movs	r0, #2
 8005170:	4240      	negs	r0, r0
 8005172:	e7fa      	b.n	800516a <__ascii_mbtowc+0x1a>

08005174 <memchr>:
 8005174:	b2c9      	uxtb	r1, r1
 8005176:	1882      	adds	r2, r0, r2
 8005178:	4290      	cmp	r0, r2
 800517a:	d101      	bne.n	8005180 <memchr+0xc>
 800517c:	2000      	movs	r0, #0
 800517e:	4770      	bx	lr
 8005180:	7803      	ldrb	r3, [r0, #0]
 8005182:	428b      	cmp	r3, r1
 8005184:	d0fb      	beq.n	800517e <memchr+0xa>
 8005186:	3001      	adds	r0, #1
 8005188:	e7f6      	b.n	8005178 <memchr+0x4>

0800518a <memcpy>:
 800518a:	2300      	movs	r3, #0
 800518c:	b510      	push	{r4, lr}
 800518e:	429a      	cmp	r2, r3
 8005190:	d100      	bne.n	8005194 <memcpy+0xa>
 8005192:	bd10      	pop	{r4, pc}
 8005194:	5ccc      	ldrb	r4, [r1, r3]
 8005196:	54c4      	strb	r4, [r0, r3]
 8005198:	3301      	adds	r3, #1
 800519a:	e7f8      	b.n	800518e <memcpy+0x4>

0800519c <memmove>:
 800519c:	b510      	push	{r4, lr}
 800519e:	4288      	cmp	r0, r1
 80051a0:	d902      	bls.n	80051a8 <memmove+0xc>
 80051a2:	188b      	adds	r3, r1, r2
 80051a4:	4298      	cmp	r0, r3
 80051a6:	d308      	bcc.n	80051ba <memmove+0x1e>
 80051a8:	2300      	movs	r3, #0
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d007      	beq.n	80051be <memmove+0x22>
 80051ae:	5ccc      	ldrb	r4, [r1, r3]
 80051b0:	54c4      	strb	r4, [r0, r3]
 80051b2:	3301      	adds	r3, #1
 80051b4:	e7f9      	b.n	80051aa <memmove+0xe>
 80051b6:	5c8b      	ldrb	r3, [r1, r2]
 80051b8:	5483      	strb	r3, [r0, r2]
 80051ba:	3a01      	subs	r2, #1
 80051bc:	d2fb      	bcs.n	80051b6 <memmove+0x1a>
 80051be:	bd10      	pop	{r4, pc}

080051c0 <_realloc_r>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	0007      	movs	r7, r0
 80051c4:	000d      	movs	r5, r1
 80051c6:	0016      	movs	r6, r2
 80051c8:	2900      	cmp	r1, #0
 80051ca:	d105      	bne.n	80051d8 <_realloc_r+0x18>
 80051cc:	0011      	movs	r1, r2
 80051ce:	f7ff f8a3 	bl	8004318 <_malloc_r>
 80051d2:	0004      	movs	r4, r0
 80051d4:	0020      	movs	r0, r4
 80051d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d8:	2a00      	cmp	r2, #0
 80051da:	d103      	bne.n	80051e4 <_realloc_r+0x24>
 80051dc:	f7ff f852 	bl	8004284 <_free_r>
 80051e0:	0034      	movs	r4, r6
 80051e2:	e7f7      	b.n	80051d4 <_realloc_r+0x14>
 80051e4:	f000 fc6a 	bl	8005abc <_malloc_usable_size_r>
 80051e8:	002c      	movs	r4, r5
 80051ea:	4286      	cmp	r6, r0
 80051ec:	d9f2      	bls.n	80051d4 <_realloc_r+0x14>
 80051ee:	0031      	movs	r1, r6
 80051f0:	0038      	movs	r0, r7
 80051f2:	f7ff f891 	bl	8004318 <_malloc_r>
 80051f6:	1e04      	subs	r4, r0, #0
 80051f8:	d0ec      	beq.n	80051d4 <_realloc_r+0x14>
 80051fa:	0029      	movs	r1, r5
 80051fc:	0032      	movs	r2, r6
 80051fe:	f7ff ffc4 	bl	800518a <memcpy>
 8005202:	0029      	movs	r1, r5
 8005204:	0038      	movs	r0, r7
 8005206:	f7ff f83d 	bl	8004284 <_free_r>
 800520a:	e7e3      	b.n	80051d4 <_realloc_r+0x14>

0800520c <_sungetc_r>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	0014      	movs	r4, r2
 8005210:	1c4b      	adds	r3, r1, #1
 8005212:	d103      	bne.n	800521c <_sungetc_r+0x10>
 8005214:	2501      	movs	r5, #1
 8005216:	426d      	negs	r5, r5
 8005218:	0028      	movs	r0, r5
 800521a:	bd70      	pop	{r4, r5, r6, pc}
 800521c:	8993      	ldrh	r3, [r2, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	4393      	bics	r3, r2
 8005222:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005224:	81a3      	strh	r3, [r4, #12]
 8005226:	b2ce      	uxtb	r6, r1
 8005228:	b2cd      	uxtb	r5, r1
 800522a:	6863      	ldr	r3, [r4, #4]
 800522c:	2a00      	cmp	r2, #0
 800522e:	d010      	beq.n	8005252 <_sungetc_r+0x46>
 8005230:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005232:	4293      	cmp	r3, r2
 8005234:	da07      	bge.n	8005246 <_sungetc_r+0x3a>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	3b01      	subs	r3, #1
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	701e      	strb	r6, [r3, #0]
 800523e:	6863      	ldr	r3, [r4, #4]
 8005240:	3301      	adds	r3, #1
 8005242:	6063      	str	r3, [r4, #4]
 8005244:	e7e8      	b.n	8005218 <_sungetc_r+0xc>
 8005246:	0021      	movs	r1, r4
 8005248:	f000 fbee 	bl	8005a28 <__submore>
 800524c:	2800      	cmp	r0, #0
 800524e:	d0f2      	beq.n	8005236 <_sungetc_r+0x2a>
 8005250:	e7e0      	b.n	8005214 <_sungetc_r+0x8>
 8005252:	6921      	ldr	r1, [r4, #16]
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	2900      	cmp	r1, #0
 8005258:	d007      	beq.n	800526a <_sungetc_r+0x5e>
 800525a:	4291      	cmp	r1, r2
 800525c:	d205      	bcs.n	800526a <_sungetc_r+0x5e>
 800525e:	1e51      	subs	r1, r2, #1
 8005260:	7808      	ldrb	r0, [r1, #0]
 8005262:	4285      	cmp	r5, r0
 8005264:	d101      	bne.n	800526a <_sungetc_r+0x5e>
 8005266:	6021      	str	r1, [r4, #0]
 8005268:	e7ea      	b.n	8005240 <_sungetc_r+0x34>
 800526a:	6423      	str	r3, [r4, #64]	; 0x40
 800526c:	0023      	movs	r3, r4
 800526e:	3344      	adds	r3, #68	; 0x44
 8005270:	6363      	str	r3, [r4, #52]	; 0x34
 8005272:	2303      	movs	r3, #3
 8005274:	63a3      	str	r3, [r4, #56]	; 0x38
 8005276:	0023      	movs	r3, r4
 8005278:	3346      	adds	r3, #70	; 0x46
 800527a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800527c:	701e      	strb	r6, [r3, #0]
 800527e:	6023      	str	r3, [r4, #0]
 8005280:	2301      	movs	r3, #1
 8005282:	e7de      	b.n	8005242 <_sungetc_r+0x36>

08005284 <__ssrefill_r>:
 8005284:	b510      	push	{r4, lr}
 8005286:	000c      	movs	r4, r1
 8005288:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800528a:	2900      	cmp	r1, #0
 800528c:	d00e      	beq.n	80052ac <__ssrefill_r+0x28>
 800528e:	0023      	movs	r3, r4
 8005290:	3344      	adds	r3, #68	; 0x44
 8005292:	4299      	cmp	r1, r3
 8005294:	d001      	beq.n	800529a <__ssrefill_r+0x16>
 8005296:	f7fe fff5 	bl	8004284 <_free_r>
 800529a:	2000      	movs	r0, #0
 800529c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800529e:	6360      	str	r0, [r4, #52]	; 0x34
 80052a0:	6063      	str	r3, [r4, #4]
 80052a2:	4283      	cmp	r3, r0
 80052a4:	d002      	beq.n	80052ac <__ssrefill_r+0x28>
 80052a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd10      	pop	{r4, pc}
 80052ac:	6923      	ldr	r3, [r4, #16]
 80052ae:	2001      	movs	r0, #1
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	2300      	movs	r3, #0
 80052b4:	89a2      	ldrh	r2, [r4, #12]
 80052b6:	6063      	str	r3, [r4, #4]
 80052b8:	3320      	adds	r3, #32
 80052ba:	4313      	orrs	r3, r2
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	4240      	negs	r0, r0
 80052c0:	e7f3      	b.n	80052aa <__ssrefill_r+0x26>
	...

080052c4 <__ssvfiscanf_r>:
 80052c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c6:	4cbd      	ldr	r4, [pc, #756]	; (80055bc <__ssvfiscanf_r+0x2f8>)
 80052c8:	2586      	movs	r5, #134	; 0x86
 80052ca:	44a5      	add	sp, r4
 80052cc:	9303      	str	r3, [sp, #12]
 80052ce:	2300      	movs	r3, #0
 80052d0:	9348      	str	r3, [sp, #288]	; 0x120
 80052d2:	9349      	str	r3, [sp, #292]	; 0x124
 80052d4:	ab05      	add	r3, sp, #20
 80052d6:	934a      	str	r3, [sp, #296]	; 0x128
 80052d8:	23be      	movs	r3, #190	; 0xbe
 80052da:	006d      	lsls	r5, r5, #1
 80052dc:	9000      	str	r0, [sp, #0]
 80052de:	000c      	movs	r4, r1
 80052e0:	a802      	add	r0, sp, #8
 80052e2:	49b7      	ldr	r1, [pc, #732]	; (80055c0 <__ssvfiscanf_r+0x2fc>)
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	1940      	adds	r0, r0, r5
 80052e8:	27c0      	movs	r7, #192	; 0xc0
 80052ea:	50c1      	str	r1, [r0, r3]
 80052ec:	ab02      	add	r3, sp, #8
 80052ee:	195b      	adds	r3, r3, r5
 80052f0:	0015      	movs	r5, r2
 80052f2:	49b4      	ldr	r1, [pc, #720]	; (80055c4 <__ssvfiscanf_r+0x300>)
 80052f4:	007f      	lsls	r7, r7, #1
 80052f6:	51d9      	str	r1, [r3, r7]
 80052f8:	782b      	ldrb	r3, [r5, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d100      	bne.n	8005300 <__ssvfiscanf_r+0x3c>
 80052fe:	e15b      	b.n	80055b8 <__ssvfiscanf_r+0x2f4>
 8005300:	f7ff ff18 	bl	8005134 <__locale_ctype_ptr>
 8005304:	2208      	movs	r2, #8
 8005306:	782b      	ldrb	r3, [r5, #0]
 8005308:	18c0      	adds	r0, r0, r3
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	7843      	ldrb	r3, [r0, #1]
 800530e:	4013      	ands	r3, r2
 8005310:	d141      	bne.n	8005396 <__ssvfiscanf_r+0xd2>
 8005312:	9a01      	ldr	r2, [sp, #4]
 8005314:	1c6e      	adds	r6, r5, #1
 8005316:	2a25      	cmp	r2, #37	; 0x25
 8005318:	d000      	beq.n	800531c <__ssvfiscanf_r+0x58>
 800531a:	e0a8      	b.n	800546e <__ssvfiscanf_r+0x1aa>
 800531c:	9347      	str	r3, [sp, #284]	; 0x11c
 800531e:	9345      	str	r3, [sp, #276]	; 0x114
 8005320:	786b      	ldrb	r3, [r5, #1]
 8005322:	2b2a      	cmp	r3, #42	; 0x2a
 8005324:	d102      	bne.n	800532c <__ssvfiscanf_r+0x68>
 8005326:	3b1a      	subs	r3, #26
 8005328:	9345      	str	r3, [sp, #276]	; 0x114
 800532a:	1cae      	adds	r6, r5, #2
 800532c:	0035      	movs	r5, r6
 800532e:	220a      	movs	r2, #10
 8005330:	7829      	ldrb	r1, [r5, #0]
 8005332:	000b      	movs	r3, r1
 8005334:	3b30      	subs	r3, #48	; 0x30
 8005336:	2b09      	cmp	r3, #9
 8005338:	d948      	bls.n	80053cc <__ssvfiscanf_r+0x108>
 800533a:	4ea3      	ldr	r6, [pc, #652]	; (80055c8 <__ssvfiscanf_r+0x304>)
 800533c:	2203      	movs	r2, #3
 800533e:	0030      	movs	r0, r6
 8005340:	f7ff ff18 	bl	8005174 <memchr>
 8005344:	2800      	cmp	r0, #0
 8005346:	d007      	beq.n	8005358 <__ssvfiscanf_r+0x94>
 8005348:	2301      	movs	r3, #1
 800534a:	1b80      	subs	r0, r0, r6
 800534c:	4083      	lsls	r3, r0
 800534e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005350:	3501      	adds	r5, #1
 8005352:	4313      	orrs	r3, r2
 8005354:	9202      	str	r2, [sp, #8]
 8005356:	9345      	str	r3, [sp, #276]	; 0x114
 8005358:	782b      	ldrb	r3, [r5, #0]
 800535a:	1c6e      	adds	r6, r5, #1
 800535c:	2b67      	cmp	r3, #103	; 0x67
 800535e:	d858      	bhi.n	8005412 <__ssvfiscanf_r+0x14e>
 8005360:	2b65      	cmp	r3, #101	; 0x65
 8005362:	d300      	bcc.n	8005366 <__ssvfiscanf_r+0xa2>
 8005364:	e0dd      	b.n	8005522 <__ssvfiscanf_r+0x25e>
 8005366:	2b47      	cmp	r3, #71	; 0x47
 8005368:	d838      	bhi.n	80053dc <__ssvfiscanf_r+0x118>
 800536a:	2b45      	cmp	r3, #69	; 0x45
 800536c:	d300      	bcc.n	8005370 <__ssvfiscanf_r+0xac>
 800536e:	e0d8      	b.n	8005522 <__ssvfiscanf_r+0x25e>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d100      	bne.n	8005376 <__ssvfiscanf_r+0xb2>
 8005374:	e11d      	b.n	80055b2 <__ssvfiscanf_r+0x2ee>
 8005376:	2b25      	cmp	r3, #37	; 0x25
 8005378:	d079      	beq.n	800546e <__ssvfiscanf_r+0x1aa>
 800537a:	2303      	movs	r3, #3
 800537c:	934b      	str	r3, [sp, #300]	; 0x12c
 800537e:	3307      	adds	r3, #7
 8005380:	9346      	str	r3, [sp, #280]	; 0x118
 8005382:	e053      	b.n	800542c <__ssvfiscanf_r+0x168>
 8005384:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8005386:	3301      	adds	r3, #1
 8005388:	9201      	str	r2, [sp, #4]
 800538a:	3201      	adds	r2, #1
 800538c:	9249      	str	r2, [sp, #292]	; 0x124
 800538e:	6862      	ldr	r2, [r4, #4]
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	3a01      	subs	r2, #1
 8005394:	6062      	str	r2, [r4, #4]
 8005396:	6863      	ldr	r3, [r4, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	dd0b      	ble.n	80053b4 <__ssvfiscanf_r+0xf0>
 800539c:	f7ff feca 	bl	8005134 <__locale_ctype_ptr>
 80053a0:	2108      	movs	r1, #8
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	1880      	adds	r0, r0, r2
 80053a8:	7842      	ldrb	r2, [r0, #1]
 80053aa:	420a      	tst	r2, r1
 80053ac:	d1ea      	bne.n	8005384 <__ssvfiscanf_r+0xc0>
 80053ae:	1c6e      	adds	r6, r5, #1
 80053b0:	0035      	movs	r5, r6
 80053b2:	e7a1      	b.n	80052f8 <__ssvfiscanf_r+0x34>
 80053b4:	2286      	movs	r2, #134	; 0x86
 80053b6:	ab02      	add	r3, sp, #8
 80053b8:	0052      	lsls	r2, r2, #1
 80053ba:	189b      	adds	r3, r3, r2
 80053bc:	59db      	ldr	r3, [r3, r7]
 80053be:	0021      	movs	r1, r4
 80053c0:	9800      	ldr	r0, [sp, #0]
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	4798      	blx	r3
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d0e8      	beq.n	800539c <__ssvfiscanf_r+0xd8>
 80053ca:	e7f0      	b.n	80053ae <__ssvfiscanf_r+0xea>
 80053cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80053ce:	3501      	adds	r5, #1
 80053d0:	9302      	str	r3, [sp, #8]
 80053d2:	4353      	muls	r3, r2
 80053d4:	3b30      	subs	r3, #48	; 0x30
 80053d6:	1859      	adds	r1, r3, r1
 80053d8:	9147      	str	r1, [sp, #284]	; 0x11c
 80053da:	e7a9      	b.n	8005330 <__ssvfiscanf_r+0x6c>
 80053dc:	2b5b      	cmp	r3, #91	; 0x5b
 80053de:	d100      	bne.n	80053e2 <__ssvfiscanf_r+0x11e>
 80053e0:	e077      	b.n	80054d2 <__ssvfiscanf_r+0x20e>
 80053e2:	d80f      	bhi.n	8005404 <__ssvfiscanf_r+0x140>
 80053e4:	2b58      	cmp	r3, #88	; 0x58
 80053e6:	d1c8      	bne.n	800537a <__ssvfiscanf_r+0xb6>
 80053e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80053ea:	9201      	str	r2, [sp, #4]
 80053ec:	2280      	movs	r2, #128	; 0x80
 80053ee:	9901      	ldr	r1, [sp, #4]
 80053f0:	0092      	lsls	r2, r2, #2
 80053f2:	430a      	orrs	r2, r1
 80053f4:	9245      	str	r2, [sp, #276]	; 0x114
 80053f6:	2210      	movs	r2, #16
 80053f8:	9246      	str	r2, [sp, #280]	; 0x118
 80053fa:	2203      	movs	r2, #3
 80053fc:	2b6e      	cmp	r3, #110	; 0x6e
 80053fe:	dd14      	ble.n	800542a <__ssvfiscanf_r+0x166>
 8005400:	3201      	adds	r2, #1
 8005402:	e012      	b.n	800542a <__ssvfiscanf_r+0x166>
 8005404:	2b63      	cmp	r3, #99	; 0x63
 8005406:	d100      	bne.n	800540a <__ssvfiscanf_r+0x146>
 8005408:	e071      	b.n	80054ee <__ssvfiscanf_r+0x22a>
 800540a:	2b64      	cmp	r3, #100	; 0x64
 800540c:	d1b5      	bne.n	800537a <__ssvfiscanf_r+0xb6>
 800540e:	220a      	movs	r2, #10
 8005410:	e7f2      	b.n	80053f8 <__ssvfiscanf_r+0x134>
 8005412:	2b70      	cmp	r3, #112	; 0x70
 8005414:	d052      	beq.n	80054bc <__ssvfiscanf_r+0x1f8>
 8005416:	d822      	bhi.n	800545e <__ssvfiscanf_r+0x19a>
 8005418:	2b6e      	cmp	r3, #110	; 0x6e
 800541a:	d100      	bne.n	800541e <__ssvfiscanf_r+0x15a>
 800541c:	e06f      	b.n	80054fe <__ssvfiscanf_r+0x23a>
 800541e:	d854      	bhi.n	80054ca <__ssvfiscanf_r+0x206>
 8005420:	2b69      	cmp	r3, #105	; 0x69
 8005422:	d1aa      	bne.n	800537a <__ssvfiscanf_r+0xb6>
 8005424:	2300      	movs	r3, #0
 8005426:	2203      	movs	r2, #3
 8005428:	9346      	str	r3, [sp, #280]	; 0x118
 800542a:	924b      	str	r2, [sp, #300]	; 0x12c
 800542c:	6863      	ldr	r3, [r4, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	dc00      	bgt.n	8005434 <__ssvfiscanf_r+0x170>
 8005432:	e078      	b.n	8005526 <__ssvfiscanf_r+0x262>
 8005434:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	065b      	lsls	r3, r3, #25
 800543a:	d400      	bmi.n	800543e <__ssvfiscanf_r+0x17a>
 800543c:	e08b      	b.n	8005556 <__ssvfiscanf_r+0x292>
 800543e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8005440:	2b02      	cmp	r3, #2
 8005442:	dd00      	ble.n	8005446 <__ssvfiscanf_r+0x182>
 8005444:	e09d      	b.n	8005582 <__ssvfiscanf_r+0x2be>
 8005446:	ab03      	add	r3, sp, #12
 8005448:	0022      	movs	r2, r4
 800544a:	a945      	add	r1, sp, #276	; 0x114
 800544c:	9800      	ldr	r0, [sp, #0]
 800544e:	f000 f8bf 	bl	80055d0 <_scanf_chars>
 8005452:	2801      	cmp	r0, #1
 8005454:	d100      	bne.n	8005458 <__ssvfiscanf_r+0x194>
 8005456:	e0af      	b.n	80055b8 <__ssvfiscanf_r+0x2f4>
 8005458:	2802      	cmp	r0, #2
 800545a:	d1a9      	bne.n	80053b0 <__ssvfiscanf_r+0xec>
 800545c:	e025      	b.n	80054aa <__ssvfiscanf_r+0x1e6>
 800545e:	2b75      	cmp	r3, #117	; 0x75
 8005460:	d0d5      	beq.n	800540e <__ssvfiscanf_r+0x14a>
 8005462:	2b78      	cmp	r3, #120	; 0x78
 8005464:	d0c0      	beq.n	80053e8 <__ssvfiscanf_r+0x124>
 8005466:	2b73      	cmp	r3, #115	; 0x73
 8005468:	d187      	bne.n	800537a <__ssvfiscanf_r+0xb6>
 800546a:	2302      	movs	r3, #2
 800546c:	e03d      	b.n	80054ea <__ssvfiscanf_r+0x226>
 800546e:	6863      	ldr	r3, [r4, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	dd0f      	ble.n	8005494 <__ssvfiscanf_r+0x1d0>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	9901      	ldr	r1, [sp, #4]
 8005478:	781a      	ldrb	r2, [r3, #0]
 800547a:	4291      	cmp	r1, r2
 800547c:	d000      	beq.n	8005480 <__ssvfiscanf_r+0x1bc>
 800547e:	e09b      	b.n	80055b8 <__ssvfiscanf_r+0x2f4>
 8005480:	3301      	adds	r3, #1
 8005482:	6862      	ldr	r2, [r4, #4]
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005488:	3a01      	subs	r2, #1
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	3301      	adds	r3, #1
 800548e:	6062      	str	r2, [r4, #4]
 8005490:	9349      	str	r3, [sp, #292]	; 0x124
 8005492:	e78d      	b.n	80053b0 <__ssvfiscanf_r+0xec>
 8005494:	2286      	movs	r2, #134	; 0x86
 8005496:	ab02      	add	r3, sp, #8
 8005498:	0052      	lsls	r2, r2, #1
 800549a:	189b      	adds	r3, r3, r2
 800549c:	59db      	ldr	r3, [r3, r7]
 800549e:	0021      	movs	r1, r4
 80054a0:	9800      	ldr	r0, [sp, #0]
 80054a2:	9302      	str	r3, [sp, #8]
 80054a4:	4798      	blx	r3
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d0e4      	beq.n	8005474 <__ssvfiscanf_r+0x1b0>
 80054aa:	9848      	ldr	r0, [sp, #288]	; 0x120
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d000      	beq.n	80054b2 <__ssvfiscanf_r+0x1ee>
 80054b0:	e07b      	b.n	80055aa <__ssvfiscanf_r+0x2e6>
 80054b2:	3801      	subs	r0, #1
 80054b4:	23a7      	movs	r3, #167	; 0xa7
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	449d      	add	sp, r3
 80054ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80054be:	9201      	str	r2, [sp, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	9901      	ldr	r1, [sp, #4]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	9245      	str	r2, [sp, #276]	; 0x114
 80054c8:	e78e      	b.n	80053e8 <__ssvfiscanf_r+0x124>
 80054ca:	2308      	movs	r3, #8
 80054cc:	2204      	movs	r2, #4
 80054ce:	9346      	str	r3, [sp, #280]	; 0x118
 80054d0:	e7ab      	b.n	800542a <__ssvfiscanf_r+0x166>
 80054d2:	0031      	movs	r1, r6
 80054d4:	a805      	add	r0, sp, #20
 80054d6:	f000 f9df 	bl	8005898 <__sccl>
 80054da:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80054dc:	0006      	movs	r6, r0
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	2340      	movs	r3, #64	; 0x40
 80054e2:	9a01      	ldr	r2, [sp, #4]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	9345      	str	r3, [sp, #276]	; 0x114
 80054e8:	2301      	movs	r3, #1
 80054ea:	934b      	str	r3, [sp, #300]	; 0x12c
 80054ec:	e79e      	b.n	800542c <__ssvfiscanf_r+0x168>
 80054ee:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	9a01      	ldr	r2, [sp, #4]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	9345      	str	r3, [sp, #276]	; 0x114
 80054fa:	2300      	movs	r3, #0
 80054fc:	e7f5      	b.n	80054ea <__ssvfiscanf_r+0x226>
 80054fe:	9945      	ldr	r1, [sp, #276]	; 0x114
 8005500:	06cb      	lsls	r3, r1, #27
 8005502:	d500      	bpl.n	8005506 <__ssvfiscanf_r+0x242>
 8005504:	e754      	b.n	80053b0 <__ssvfiscanf_r+0xec>
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800550a:	07c8      	lsls	r0, r1, #31
 800550c:	d504      	bpl.n	8005518 <__ssvfiscanf_r+0x254>
 800550e:	1d19      	adds	r1, r3, #4
 8005510:	9103      	str	r1, [sp, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	e74b      	b.n	80053b0 <__ssvfiscanf_r+0xec>
 8005518:	1d19      	adds	r1, r3, #4
 800551a:	9103      	str	r1, [sp, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e746      	b.n	80053b0 <__ssvfiscanf_r+0xec>
 8005522:	2305      	movs	r3, #5
 8005524:	e7e1      	b.n	80054ea <__ssvfiscanf_r+0x226>
 8005526:	2286      	movs	r2, #134	; 0x86
 8005528:	ab02      	add	r3, sp, #8
 800552a:	0052      	lsls	r2, r2, #1
 800552c:	189b      	adds	r3, r3, r2
 800552e:	59db      	ldr	r3, [r3, r7]
 8005530:	0021      	movs	r1, r4
 8005532:	9800      	ldr	r0, [sp, #0]
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	4798      	blx	r3
 8005538:	2800      	cmp	r0, #0
 800553a:	d100      	bne.n	800553e <__ssvfiscanf_r+0x27a>
 800553c:	e77a      	b.n	8005434 <__ssvfiscanf_r+0x170>
 800553e:	e7b4      	b.n	80054aa <__ssvfiscanf_r+0x1e6>
 8005540:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8005542:	9201      	str	r2, [sp, #4]
 8005544:	3201      	adds	r2, #1
 8005546:	9249      	str	r2, [sp, #292]	; 0x124
 8005548:	6862      	ldr	r2, [r4, #4]
 800554a:	3a01      	subs	r2, #1
 800554c:	6062      	str	r2, [r4, #4]
 800554e:	2a00      	cmp	r2, #0
 8005550:	dd0b      	ble.n	800556a <__ssvfiscanf_r+0x2a6>
 8005552:	3301      	adds	r3, #1
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	f7ff fded 	bl	8005134 <__locale_ctype_ptr>
 800555a:	2108      	movs	r1, #8
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	1880      	adds	r0, r0, r2
 8005562:	7842      	ldrb	r2, [r0, #1]
 8005564:	420a      	tst	r2, r1
 8005566:	d1eb      	bne.n	8005540 <__ssvfiscanf_r+0x27c>
 8005568:	e769      	b.n	800543e <__ssvfiscanf_r+0x17a>
 800556a:	2286      	movs	r2, #134	; 0x86
 800556c:	ab02      	add	r3, sp, #8
 800556e:	0052      	lsls	r2, r2, #1
 8005570:	189b      	adds	r3, r3, r2
 8005572:	59db      	ldr	r3, [r3, r7]
 8005574:	0021      	movs	r1, r4
 8005576:	9800      	ldr	r0, [sp, #0]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	4798      	blx	r3
 800557c:	2800      	cmp	r0, #0
 800557e:	d0ea      	beq.n	8005556 <__ssvfiscanf_r+0x292>
 8005580:	e793      	b.n	80054aa <__ssvfiscanf_r+0x1e6>
 8005582:	2b04      	cmp	r3, #4
 8005584:	dc06      	bgt.n	8005594 <__ssvfiscanf_r+0x2d0>
 8005586:	ab03      	add	r3, sp, #12
 8005588:	0022      	movs	r2, r4
 800558a:	a945      	add	r1, sp, #276	; 0x114
 800558c:	9800      	ldr	r0, [sp, #0]
 800558e:	f000 f883 	bl	8005698 <_scanf_i>
 8005592:	e75e      	b.n	8005452 <__ssvfiscanf_r+0x18e>
 8005594:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <__ssvfiscanf_r+0x308>)
 8005596:	2b00      	cmp	r3, #0
 8005598:	d100      	bne.n	800559c <__ssvfiscanf_r+0x2d8>
 800559a:	e709      	b.n	80053b0 <__ssvfiscanf_r+0xec>
 800559c:	ab03      	add	r3, sp, #12
 800559e:	0022      	movs	r2, r4
 80055a0:	a945      	add	r1, sp, #276	; 0x114
 80055a2:	9800      	ldr	r0, [sp, #0]
 80055a4:	e000      	b.n	80055a8 <__ssvfiscanf_r+0x2e4>
 80055a6:	bf00      	nop
 80055a8:	e753      	b.n	8005452 <__ssvfiscanf_r+0x18e>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	065b      	lsls	r3, r3, #25
 80055ae:	d400      	bmi.n	80055b2 <__ssvfiscanf_r+0x2ee>
 80055b0:	e780      	b.n	80054b4 <__ssvfiscanf_r+0x1f0>
 80055b2:	2001      	movs	r0, #1
 80055b4:	4240      	negs	r0, r0
 80055b6:	e77d      	b.n	80054b4 <__ssvfiscanf_r+0x1f0>
 80055b8:	9848      	ldr	r0, [sp, #288]	; 0x120
 80055ba:	e77b      	b.n	80054b4 <__ssvfiscanf_r+0x1f0>
 80055bc:	fffffd64 	.word	0xfffffd64
 80055c0:	0800520d 	.word	0x0800520d
 80055c4:	08005285 	.word	0x08005285
 80055c8:	08005cd2 	.word	0x08005cd2
 80055cc:	00000000 	.word	0x00000000

080055d0 <_scanf_chars>:
 80055d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055d2:	0015      	movs	r5, r2
 80055d4:	688a      	ldr	r2, [r1, #8]
 80055d6:	9001      	str	r0, [sp, #4]
 80055d8:	000c      	movs	r4, r1
 80055da:	2a00      	cmp	r2, #0
 80055dc:	d106      	bne.n	80055ec <_scanf_chars+0x1c>
 80055de:	698a      	ldr	r2, [r1, #24]
 80055e0:	1e51      	subs	r1, r2, #1
 80055e2:	418a      	sbcs	r2, r1
 80055e4:	2101      	movs	r1, #1
 80055e6:	4252      	negs	r2, r2
 80055e8:	430a      	orrs	r2, r1
 80055ea:	60a2      	str	r2, [r4, #8]
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	06d2      	lsls	r2, r2, #27
 80055f0:	d403      	bmi.n	80055fa <_scanf_chars+0x2a>
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	1d11      	adds	r1, r2, #4
 80055f6:	6019      	str	r1, [r3, #0]
 80055f8:	6817      	ldr	r7, [r2, #0]
 80055fa:	2600      	movs	r6, #0
 80055fc:	69a3      	ldr	r3, [r4, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01c      	beq.n	800563c <_scanf_chars+0x6c>
 8005602:	2b01      	cmp	r3, #1
 8005604:	d108      	bne.n	8005618 <_scanf_chars+0x48>
 8005606:	682b      	ldr	r3, [r5, #0]
 8005608:	6962      	ldr	r2, [r4, #20]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	5cd3      	ldrb	r3, [r2, r3]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d114      	bne.n	800563c <_scanf_chars+0x6c>
 8005612:	2e00      	cmp	r6, #0
 8005614:	d130      	bne.n	8005678 <_scanf_chars+0xa8>
 8005616:	e006      	b.n	8005626 <_scanf_chars+0x56>
 8005618:	2b02      	cmp	r3, #2
 800561a:	d006      	beq.n	800562a <_scanf_chars+0x5a>
 800561c:	2e00      	cmp	r6, #0
 800561e:	d12b      	bne.n	8005678 <_scanf_chars+0xa8>
 8005620:	69a3      	ldr	r3, [r4, #24]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d128      	bne.n	8005678 <_scanf_chars+0xa8>
 8005626:	2001      	movs	r0, #1
 8005628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800562a:	f7ff fd83 	bl	8005134 <__locale_ctype_ptr>
 800562e:	2208      	movs	r2, #8
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	18c0      	adds	r0, r0, r3
 8005636:	7843      	ldrb	r3, [r0, #1]
 8005638:	4213      	tst	r3, r2
 800563a:	d1ef      	bne.n	800561c <_scanf_chars+0x4c>
 800563c:	2210      	movs	r2, #16
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	3601      	adds	r6, #1
 8005642:	4213      	tst	r3, r2
 8005644:	d103      	bne.n	800564e <_scanf_chars+0x7e>
 8005646:	682b      	ldr	r3, [r5, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	703b      	strb	r3, [r7, #0]
 800564c:	3701      	adds	r7, #1
 800564e:	682a      	ldr	r2, [r5, #0]
 8005650:	686b      	ldr	r3, [r5, #4]
 8005652:	3201      	adds	r2, #1
 8005654:	602a      	str	r2, [r5, #0]
 8005656:	68a2      	ldr	r2, [r4, #8]
 8005658:	3b01      	subs	r3, #1
 800565a:	3a01      	subs	r2, #1
 800565c:	606b      	str	r3, [r5, #4]
 800565e:	60a2      	str	r2, [r4, #8]
 8005660:	2a00      	cmp	r2, #0
 8005662:	d009      	beq.n	8005678 <_scanf_chars+0xa8>
 8005664:	2b00      	cmp	r3, #0
 8005666:	dcc9      	bgt.n	80055fc <_scanf_chars+0x2c>
 8005668:	23c0      	movs	r3, #192	; 0xc0
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	58e3      	ldr	r3, [r4, r3]
 800566e:	0029      	movs	r1, r5
 8005670:	9801      	ldr	r0, [sp, #4]
 8005672:	4798      	blx	r3
 8005674:	2800      	cmp	r0, #0
 8005676:	d0c1      	beq.n	80055fc <_scanf_chars+0x2c>
 8005678:	2310      	movs	r3, #16
 800567a:	6822      	ldr	r2, [r4, #0]
 800567c:	4013      	ands	r3, r2
 800567e:	d106      	bne.n	800568e <_scanf_chars+0xbe>
 8005680:	68e2      	ldr	r2, [r4, #12]
 8005682:	3201      	adds	r2, #1
 8005684:	60e2      	str	r2, [r4, #12]
 8005686:	69a2      	ldr	r2, [r4, #24]
 8005688:	2a00      	cmp	r2, #0
 800568a:	d000      	beq.n	800568e <_scanf_chars+0xbe>
 800568c:	703b      	strb	r3, [r7, #0]
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	2000      	movs	r0, #0
 8005692:	199e      	adds	r6, r3, r6
 8005694:	6126      	str	r6, [r4, #16]
 8005696:	e7c7      	b.n	8005628 <_scanf_chars+0x58>

08005698 <_scanf_i>:
 8005698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569a:	000c      	movs	r4, r1
 800569c:	b08d      	sub	sp, #52	; 0x34
 800569e:	9302      	str	r3, [sp, #8]
 80056a0:	4b77      	ldr	r3, [pc, #476]	; (8005880 <_scanf_i+0x1e8>)
 80056a2:	9005      	str	r0, [sp, #20]
 80056a4:	0016      	movs	r6, r2
 80056a6:	aa09      	add	r2, sp, #36	; 0x24
 80056a8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80056aa:	c223      	stmia	r2!, {r0, r1, r5}
 80056ac:	4b75      	ldr	r3, [pc, #468]	; (8005884 <_scanf_i+0x1ec>)
 80056ae:	9306      	str	r3, [sp, #24]
 80056b0:	69a3      	ldr	r3, [r4, #24]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d001      	beq.n	80056ba <_scanf_i+0x22>
 80056b6:	4b74      	ldr	r3, [pc, #464]	; (8005888 <_scanf_i+0x1f0>)
 80056b8:	9306      	str	r3, [sp, #24]
 80056ba:	22ae      	movs	r2, #174	; 0xae
 80056bc:	2000      	movs	r0, #0
 80056be:	68a3      	ldr	r3, [r4, #8]
 80056c0:	0052      	lsls	r2, r2, #1
 80056c2:	1e59      	subs	r1, r3, #1
 80056c4:	9004      	str	r0, [sp, #16]
 80056c6:	4291      	cmp	r1, r2
 80056c8:	d905      	bls.n	80056d6 <_scanf_i+0x3e>
 80056ca:	3b5e      	subs	r3, #94	; 0x5e
 80056cc:	3bff      	subs	r3, #255	; 0xff
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	235e      	movs	r3, #94	; 0x5e
 80056d2:	33ff      	adds	r3, #255	; 0xff
 80056d4:	60a3      	str	r3, [r4, #8]
 80056d6:	0023      	movs	r3, r4
 80056d8:	331c      	adds	r3, #28
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	23d0      	movs	r3, #208	; 0xd0
 80056de:	2700      	movs	r7, #0
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	4313      	orrs	r3, r2
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	9303      	str	r3, [sp, #12]
 80056ec:	6833      	ldr	r3, [r6, #0]
 80056ee:	a809      	add	r0, sp, #36	; 0x24
 80056f0:	7819      	ldrb	r1, [r3, #0]
 80056f2:	00bb      	lsls	r3, r7, #2
 80056f4:	2202      	movs	r2, #2
 80056f6:	5818      	ldr	r0, [r3, r0]
 80056f8:	f7ff fd3c 	bl	8005174 <memchr>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d02b      	beq.n	8005758 <_scanf_i+0xc0>
 8005700:	2f01      	cmp	r7, #1
 8005702:	d15f      	bne.n	80057c4 <_scanf_i+0x12c>
 8005704:	6863      	ldr	r3, [r4, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <_scanf_i+0x80>
 800570a:	3308      	adds	r3, #8
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	6063      	str	r3, [r4, #4]
 8005710:	33f9      	adds	r3, #249	; 0xf9
 8005712:	33ff      	adds	r3, #255	; 0xff
 8005714:	4313      	orrs	r3, r2
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	4b5c      	ldr	r3, [pc, #368]	; (800588c <_scanf_i+0x1f4>)
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	4013      	ands	r3, r2
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	68a3      	ldr	r3, [r4, #8]
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	60a2      	str	r2, [r4, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d016      	beq.n	8005758 <_scanf_i+0xc0>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	1c5d      	adds	r5, r3, #1
 800572e:	6833      	ldr	r3, [r6, #0]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	6032      	str	r2, [r6, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	9a03      	ldr	r2, [sp, #12]
 8005738:	9503      	str	r5, [sp, #12]
 800573a:	7013      	strb	r3, [r2, #0]
 800573c:	6873      	ldr	r3, [r6, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	6073      	str	r3, [r6, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	dc08      	bgt.n	8005758 <_scanf_i+0xc0>
 8005746:	23c0      	movs	r3, #192	; 0xc0
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	58e3      	ldr	r3, [r4, r3]
 800574c:	0031      	movs	r1, r6
 800574e:	9805      	ldr	r0, [sp, #20]
 8005750:	9307      	str	r3, [sp, #28]
 8005752:	4798      	blx	r3
 8005754:	2800      	cmp	r0, #0
 8005756:	d17d      	bne.n	8005854 <_scanf_i+0x1bc>
 8005758:	3701      	adds	r7, #1
 800575a:	2f03      	cmp	r7, #3
 800575c:	d1c6      	bne.n	80056ec <_scanf_i+0x54>
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <_scanf_i+0xd0>
 8005764:	330a      	adds	r3, #10
 8005766:	6063      	str	r3, [r4, #4]
 8005768:	2110      	movs	r1, #16
 800576a:	2700      	movs	r7, #0
 800576c:	6863      	ldr	r3, [r4, #4]
 800576e:	6960      	ldr	r0, [r4, #20]
 8005770:	1ac9      	subs	r1, r1, r3
 8005772:	4b47      	ldr	r3, [pc, #284]	; (8005890 <_scanf_i+0x1f8>)
 8005774:	18c9      	adds	r1, r1, r3
 8005776:	f000 f88f 	bl	8005898 <__sccl>
 800577a:	9d03      	ldr	r5, [sp, #12]
 800577c:	68a3      	ldr	r3, [r4, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d041      	beq.n	8005806 <_scanf_i+0x16e>
 8005782:	6832      	ldr	r2, [r6, #0]
 8005784:	6960      	ldr	r0, [r4, #20]
 8005786:	7811      	ldrb	r1, [r2, #0]
 8005788:	5c40      	ldrb	r0, [r0, r1]
 800578a:	2800      	cmp	r0, #0
 800578c:	d03b      	beq.n	8005806 <_scanf_i+0x16e>
 800578e:	2930      	cmp	r1, #48	; 0x30
 8005790:	d128      	bne.n	80057e4 <_scanf_i+0x14c>
 8005792:	2080      	movs	r0, #128	; 0x80
 8005794:	6821      	ldr	r1, [r4, #0]
 8005796:	0100      	lsls	r0, r0, #4
 8005798:	4201      	tst	r1, r0
 800579a:	d023      	beq.n	80057e4 <_scanf_i+0x14c>
 800579c:	9a04      	ldr	r2, [sp, #16]
 800579e:	3701      	adds	r7, #1
 80057a0:	2a00      	cmp	r2, #0
 80057a2:	d003      	beq.n	80057ac <_scanf_i+0x114>
 80057a4:	3a01      	subs	r2, #1
 80057a6:	3301      	adds	r3, #1
 80057a8:	9204      	str	r2, [sp, #16]
 80057aa:	60a3      	str	r3, [r4, #8]
 80057ac:	6873      	ldr	r3, [r6, #4]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	6073      	str	r3, [r6, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dd1e      	ble.n	80057f4 <_scanf_i+0x15c>
 80057b6:	6833      	ldr	r3, [r6, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	6033      	str	r3, [r6, #0]
 80057bc:	68a3      	ldr	r3, [r4, #8]
 80057be:	3b01      	subs	r3, #1
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	e7db      	b.n	800577c <_scanf_i+0xe4>
 80057c4:	2f02      	cmp	r7, #2
 80057c6:	d1ab      	bne.n	8005720 <_scanf_i+0x88>
 80057c8:	21c0      	movs	r1, #192	; 0xc0
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	6822      	ldr	r2, [r4, #0]
 80057ce:	00c9      	lsls	r1, r1, #3
 80057d0:	4011      	ands	r1, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4299      	cmp	r1, r3
 80057d6:	d1c2      	bne.n	800575e <_scanf_i+0xc6>
 80057d8:	3bf1      	subs	r3, #241	; 0xf1
 80057da:	3bff      	subs	r3, #255	; 0xff
 80057dc:	6063      	str	r3, [r4, #4]
 80057de:	33f0      	adds	r3, #240	; 0xf0
 80057e0:	4313      	orrs	r3, r2
 80057e2:	e79c      	b.n	800571e <_scanf_i+0x86>
 80057e4:	6821      	ldr	r1, [r4, #0]
 80057e6:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <_scanf_i+0x1fc>)
 80057e8:	400b      	ands	r3, r1
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	7813      	ldrb	r3, [r2, #0]
 80057ee:	702b      	strb	r3, [r5, #0]
 80057f0:	3501      	adds	r5, #1
 80057f2:	e7db      	b.n	80057ac <_scanf_i+0x114>
 80057f4:	23c0      	movs	r3, #192	; 0xc0
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	58e3      	ldr	r3, [r4, r3]
 80057fa:	0031      	movs	r1, r6
 80057fc:	9805      	ldr	r0, [sp, #20]
 80057fe:	9303      	str	r3, [sp, #12]
 8005800:	4798      	blx	r3
 8005802:	2800      	cmp	r0, #0
 8005804:	d0da      	beq.n	80057bc <_scanf_i+0x124>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	05db      	lsls	r3, r3, #23
 800580a:	d50e      	bpl.n	800582a <_scanf_i+0x192>
 800580c:	9b01      	ldr	r3, [sp, #4]
 800580e:	429d      	cmp	r5, r3
 8005810:	d907      	bls.n	8005822 <_scanf_i+0x18a>
 8005812:	23be      	movs	r3, #190	; 0xbe
 8005814:	3d01      	subs	r5, #1
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	7829      	ldrb	r1, [r5, #0]
 800581a:	58e3      	ldr	r3, [r4, r3]
 800581c:	0032      	movs	r2, r6
 800581e:	9805      	ldr	r0, [sp, #20]
 8005820:	4798      	blx	r3
 8005822:	9b01      	ldr	r3, [sp, #4]
 8005824:	2001      	movs	r0, #1
 8005826:	429d      	cmp	r5, r3
 8005828:	d027      	beq.n	800587a <_scanf_i+0x1e2>
 800582a:	2210      	movs	r2, #16
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	401a      	ands	r2, r3
 8005830:	d11c      	bne.n	800586c <_scanf_i+0x1d4>
 8005832:	702a      	strb	r2, [r5, #0]
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	9901      	ldr	r1, [sp, #4]
 8005838:	9805      	ldr	r0, [sp, #20]
 800583a:	9e06      	ldr	r6, [sp, #24]
 800583c:	47b0      	blx	r6
 800583e:	9b02      	ldr	r3, [sp, #8]
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	0691      	lsls	r1, r2, #26
 8005846:	d507      	bpl.n	8005858 <_scanf_i+0x1c0>
 8005848:	9902      	ldr	r1, [sp, #8]
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	600a      	str	r2, [r1, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6018      	str	r0, [r3, #0]
 8005852:	e008      	b.n	8005866 <_scanf_i+0x1ce>
 8005854:	2700      	movs	r7, #0
 8005856:	e7d6      	b.n	8005806 <_scanf_i+0x16e>
 8005858:	07d1      	lsls	r1, r2, #31
 800585a:	d5f5      	bpl.n	8005848 <_scanf_i+0x1b0>
 800585c:	9902      	ldr	r1, [sp, #8]
 800585e:	1d1a      	adds	r2, r3, #4
 8005860:	600a      	str	r2, [r1, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	8018      	strh	r0, [r3, #0]
 8005866:	68e3      	ldr	r3, [r4, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60e3      	str	r3, [r4, #12]
 800586c:	2000      	movs	r0, #0
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	1aed      	subs	r5, r5, r3
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	19ef      	adds	r7, r5, r7
 8005876:	19df      	adds	r7, r3, r7
 8005878:	6127      	str	r7, [r4, #16]
 800587a:	b00d      	add	sp, #52	; 0x34
 800587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	08005ae4 	.word	0x08005ae4
 8005884:	08005a09 	.word	0x08005a09
 8005888:	080050e1 	.word	0x080050e1
 800588c:	fffffaff 	.word	0xfffffaff
 8005890:	08005d09 	.word	0x08005d09
 8005894:	fffff6ff 	.word	0xfffff6ff

08005898 <__sccl>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	780b      	ldrb	r3, [r1, #0]
 800589c:	2b5e      	cmp	r3, #94	; 0x5e
 800589e:	d00d      	beq.n	80058bc <__sccl+0x24>
 80058a0:	1c4a      	adds	r2, r1, #1
 80058a2:	2100      	movs	r1, #0
 80058a4:	0004      	movs	r4, r0
 80058a6:	1c45      	adds	r5, r0, #1
 80058a8:	35ff      	adds	r5, #255	; 0xff
 80058aa:	7021      	strb	r1, [r4, #0]
 80058ac:	3401      	adds	r4, #1
 80058ae:	42a5      	cmp	r5, r4
 80058b0:	d1fb      	bne.n	80058aa <__sccl+0x12>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <__sccl+0x2c>
 80058b6:	3a01      	subs	r2, #1
 80058b8:	0010      	movs	r0, r2
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	1c8a      	adds	r2, r1, #2
 80058be:	784b      	ldrb	r3, [r1, #1]
 80058c0:	2101      	movs	r1, #1
 80058c2:	e7ef      	b.n	80058a4 <__sccl+0xc>
 80058c4:	2401      	movs	r4, #1
 80058c6:	404c      	eors	r4, r1
 80058c8:	0011      	movs	r1, r2
 80058ca:	54c4      	strb	r4, [r0, r3]
 80058cc:	780d      	ldrb	r5, [r1, #0]
 80058ce:	1c4a      	adds	r2, r1, #1
 80058d0:	2d2d      	cmp	r5, #45	; 0x2d
 80058d2:	d007      	beq.n	80058e4 <__sccl+0x4c>
 80058d4:	2d5d      	cmp	r5, #93	; 0x5d
 80058d6:	d0ef      	beq.n	80058b8 <__sccl+0x20>
 80058d8:	2d00      	cmp	r5, #0
 80058da:	d101      	bne.n	80058e0 <__sccl+0x48>
 80058dc:	000a      	movs	r2, r1
 80058de:	e7eb      	b.n	80058b8 <__sccl+0x20>
 80058e0:	002b      	movs	r3, r5
 80058e2:	e7f1      	b.n	80058c8 <__sccl+0x30>
 80058e4:	784e      	ldrb	r6, [r1, #1]
 80058e6:	2e5d      	cmp	r6, #93	; 0x5d
 80058e8:	d0fa      	beq.n	80058e0 <__sccl+0x48>
 80058ea:	42b3      	cmp	r3, r6
 80058ec:	dcf8      	bgt.n	80058e0 <__sccl+0x48>
 80058ee:	3102      	adds	r1, #2
 80058f0:	3301      	adds	r3, #1
 80058f2:	54c4      	strb	r4, [r0, r3]
 80058f4:	429e      	cmp	r6, r3
 80058f6:	dcfb      	bgt.n	80058f0 <__sccl+0x58>
 80058f8:	e7e8      	b.n	80058cc <__sccl+0x34>
	...

080058fc <_strtol_l.isra.0>:
 80058fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fe:	001f      	movs	r7, r3
 8005900:	000e      	movs	r6, r1
 8005902:	b087      	sub	sp, #28
 8005904:	9005      	str	r0, [sp, #20]
 8005906:	9103      	str	r1, [sp, #12]
 8005908:	9202      	str	r2, [sp, #8]
 800590a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800590c:	7834      	ldrb	r4, [r6, #0]
 800590e:	f7ff fc0d 	bl	800512c <__locale_ctype_ptr_l>
 8005912:	2208      	movs	r2, #8
 8005914:	1900      	adds	r0, r0, r4
 8005916:	7843      	ldrb	r3, [r0, #1]
 8005918:	1c75      	adds	r5, r6, #1
 800591a:	4013      	ands	r3, r2
 800591c:	d10c      	bne.n	8005938 <_strtol_l.isra.0+0x3c>
 800591e:	2c2d      	cmp	r4, #45	; 0x2d
 8005920:	d10c      	bne.n	800593c <_strtol_l.isra.0+0x40>
 8005922:	3301      	adds	r3, #1
 8005924:	782c      	ldrb	r4, [r5, #0]
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	1cb5      	adds	r5, r6, #2
 800592a:	2f00      	cmp	r7, #0
 800592c:	d00c      	beq.n	8005948 <_strtol_l.isra.0+0x4c>
 800592e:	2f10      	cmp	r7, #16
 8005930:	d114      	bne.n	800595c <_strtol_l.isra.0+0x60>
 8005932:	2c30      	cmp	r4, #48	; 0x30
 8005934:	d00a      	beq.n	800594c <_strtol_l.isra.0+0x50>
 8005936:	e011      	b.n	800595c <_strtol_l.isra.0+0x60>
 8005938:	002e      	movs	r6, r5
 800593a:	e7e6      	b.n	800590a <_strtol_l.isra.0+0xe>
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	2c2b      	cmp	r4, #43	; 0x2b
 8005940:	d1f3      	bne.n	800592a <_strtol_l.isra.0+0x2e>
 8005942:	782c      	ldrb	r4, [r5, #0]
 8005944:	1cb5      	adds	r5, r6, #2
 8005946:	e7f0      	b.n	800592a <_strtol_l.isra.0+0x2e>
 8005948:	2c30      	cmp	r4, #48	; 0x30
 800594a:	d12f      	bne.n	80059ac <_strtol_l.isra.0+0xb0>
 800594c:	2220      	movs	r2, #32
 800594e:	782b      	ldrb	r3, [r5, #0]
 8005950:	4393      	bics	r3, r2
 8005952:	2b58      	cmp	r3, #88	; 0x58
 8005954:	d151      	bne.n	80059fa <_strtol_l.isra.0+0xfe>
 8005956:	2710      	movs	r7, #16
 8005958:	786c      	ldrb	r4, [r5, #1]
 800595a:	3502      	adds	r5, #2
 800595c:	9b01      	ldr	r3, [sp, #4]
 800595e:	4a29      	ldr	r2, [pc, #164]	; (8005a04 <_strtol_l.isra.0+0x108>)
 8005960:	0039      	movs	r1, r7
 8005962:	189e      	adds	r6, r3, r2
 8005964:	0030      	movs	r0, r6
 8005966:	f7fa fc71 	bl	800024c <__aeabi_uidivmod>
 800596a:	0030      	movs	r0, r6
 800596c:	9104      	str	r1, [sp, #16]
 800596e:	0039      	movs	r1, r7
 8005970:	f7fa fbe6 	bl	8000140 <__udivsi3>
 8005974:	2101      	movs	r1, #1
 8005976:	2300      	movs	r3, #0
 8005978:	4249      	negs	r1, r1
 800597a:	0002      	movs	r2, r0
 800597c:	468c      	mov	ip, r1
 800597e:	0018      	movs	r0, r3
 8005980:	0021      	movs	r1, r4
 8005982:	3930      	subs	r1, #48	; 0x30
 8005984:	2909      	cmp	r1, #9
 8005986:	d813      	bhi.n	80059b0 <_strtol_l.isra.0+0xb4>
 8005988:	000c      	movs	r4, r1
 800598a:	42a7      	cmp	r7, r4
 800598c:	dd1c      	ble.n	80059c8 <_strtol_l.isra.0+0xcc>
 800598e:	1c59      	adds	r1, r3, #1
 8005990:	d009      	beq.n	80059a6 <_strtol_l.isra.0+0xaa>
 8005992:	4663      	mov	r3, ip
 8005994:	4282      	cmp	r2, r0
 8005996:	d306      	bcc.n	80059a6 <_strtol_l.isra.0+0xaa>
 8005998:	d102      	bne.n	80059a0 <_strtol_l.isra.0+0xa4>
 800599a:	9904      	ldr	r1, [sp, #16]
 800599c:	42a1      	cmp	r1, r4
 800599e:	db02      	blt.n	80059a6 <_strtol_l.isra.0+0xaa>
 80059a0:	2301      	movs	r3, #1
 80059a2:	4378      	muls	r0, r7
 80059a4:	1820      	adds	r0, r4, r0
 80059a6:	782c      	ldrb	r4, [r5, #0]
 80059a8:	3501      	adds	r5, #1
 80059aa:	e7e9      	b.n	8005980 <_strtol_l.isra.0+0x84>
 80059ac:	270a      	movs	r7, #10
 80059ae:	e7d5      	b.n	800595c <_strtol_l.isra.0+0x60>
 80059b0:	0021      	movs	r1, r4
 80059b2:	3941      	subs	r1, #65	; 0x41
 80059b4:	2919      	cmp	r1, #25
 80059b6:	d801      	bhi.n	80059bc <_strtol_l.isra.0+0xc0>
 80059b8:	3c37      	subs	r4, #55	; 0x37
 80059ba:	e7e6      	b.n	800598a <_strtol_l.isra.0+0x8e>
 80059bc:	0021      	movs	r1, r4
 80059be:	3961      	subs	r1, #97	; 0x61
 80059c0:	2919      	cmp	r1, #25
 80059c2:	d801      	bhi.n	80059c8 <_strtol_l.isra.0+0xcc>
 80059c4:	3c57      	subs	r4, #87	; 0x57
 80059c6:	e7e0      	b.n	800598a <_strtol_l.isra.0+0x8e>
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	d108      	bne.n	80059de <_strtol_l.isra.0+0xe2>
 80059cc:	9a05      	ldr	r2, [sp, #20]
 80059ce:	3323      	adds	r3, #35	; 0x23
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	9b02      	ldr	r3, [sp, #8]
 80059d4:	0030      	movs	r0, r6
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <_strtol_l.isra.0+0xf6>
 80059da:	b007      	add	sp, #28
 80059dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059de:	9a01      	ldr	r2, [sp, #4]
 80059e0:	2a00      	cmp	r2, #0
 80059e2:	d000      	beq.n	80059e6 <_strtol_l.isra.0+0xea>
 80059e4:	4240      	negs	r0, r0
 80059e6:	9a02      	ldr	r2, [sp, #8]
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d0f6      	beq.n	80059da <_strtol_l.isra.0+0xde>
 80059ec:	9a03      	ldr	r2, [sp, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d000      	beq.n	80059f4 <_strtol_l.isra.0+0xf8>
 80059f2:	1e6a      	subs	r2, r5, #1
 80059f4:	9b02      	ldr	r3, [sp, #8]
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e7ef      	b.n	80059da <_strtol_l.isra.0+0xde>
 80059fa:	2430      	movs	r4, #48	; 0x30
 80059fc:	2f00      	cmp	r7, #0
 80059fe:	d1ad      	bne.n	800595c <_strtol_l.isra.0+0x60>
 8005a00:	3708      	adds	r7, #8
 8005a02:	e7ab      	b.n	800595c <_strtol_l.isra.0+0x60>
 8005a04:	7fffffff 	.word	0x7fffffff

08005a08 <_strtol_r>:
 8005a08:	b513      	push	{r0, r1, r4, lr}
 8005a0a:	4c05      	ldr	r4, [pc, #20]	; (8005a20 <_strtol_r+0x18>)
 8005a0c:	6824      	ldr	r4, [r4, #0]
 8005a0e:	6a24      	ldr	r4, [r4, #32]
 8005a10:	2c00      	cmp	r4, #0
 8005a12:	d100      	bne.n	8005a16 <_strtol_r+0xe>
 8005a14:	4c03      	ldr	r4, [pc, #12]	; (8005a24 <_strtol_r+0x1c>)
 8005a16:	9400      	str	r4, [sp, #0]
 8005a18:	f7ff ff70 	bl	80058fc <_strtol_l.isra.0>
 8005a1c:	bd16      	pop	{r1, r2, r4, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	20000010 	.word	0x20000010
 8005a24:	200000bc 	.word	0x200000bc

08005a28 <__submore>:
 8005a28:	000b      	movs	r3, r1
 8005a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8005a2e:	3344      	adds	r3, #68	; 0x44
 8005a30:	000c      	movs	r4, r1
 8005a32:	429d      	cmp	r5, r3
 8005a34:	d11c      	bne.n	8005a70 <__submore+0x48>
 8005a36:	2680      	movs	r6, #128	; 0x80
 8005a38:	00f6      	lsls	r6, r6, #3
 8005a3a:	0031      	movs	r1, r6
 8005a3c:	f7fe fc6c 	bl	8004318 <_malloc_r>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d102      	bne.n	8005a4a <__submore+0x22>
 8005a44:	2001      	movs	r0, #1
 8005a46:	4240      	negs	r0, r0
 8005a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a4a:	0023      	movs	r3, r4
 8005a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8005a4e:	63a6      	str	r6, [r4, #56]	; 0x38
 8005a50:	3346      	adds	r3, #70	; 0x46
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <__submore+0x70>)
 8005a56:	54c2      	strb	r2, [r0, r3]
 8005a58:	0023      	movs	r3, r4
 8005a5a:	3345      	adds	r3, #69	; 0x45
 8005a5c:	781a      	ldrb	r2, [r3, #0]
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <__submore+0x74>)
 8005a60:	54c2      	strb	r2, [r0, r3]
 8005a62:	782a      	ldrb	r2, [r5, #0]
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <__submore+0x78>)
 8005a66:	54c2      	strb	r2, [r0, r3]
 8005a68:	18c0      	adds	r0, r0, r3
 8005a6a:	6020      	str	r0, [r4, #0]
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	e7eb      	b.n	8005a48 <__submore+0x20>
 8005a70:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8005a72:	0029      	movs	r1, r5
 8005a74:	0073      	lsls	r3, r6, #1
 8005a76:	001a      	movs	r2, r3
 8005a78:	9301      	str	r3, [sp, #4]
 8005a7a:	f7ff fba1 	bl	80051c0 <_realloc_r>
 8005a7e:	1e05      	subs	r5, r0, #0
 8005a80:	d0e0      	beq.n	8005a44 <__submore+0x1c>
 8005a82:	1987      	adds	r7, r0, r6
 8005a84:	0001      	movs	r1, r0
 8005a86:	0032      	movs	r2, r6
 8005a88:	0038      	movs	r0, r7
 8005a8a:	f7ff fb7e 	bl	800518a <memcpy>
 8005a8e:	9b01      	ldr	r3, [sp, #4]
 8005a90:	6027      	str	r7, [r4, #0]
 8005a92:	6365      	str	r5, [r4, #52]	; 0x34
 8005a94:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a96:	e7e9      	b.n	8005a6c <__submore+0x44>
 8005a98:	000003ff 	.word	0x000003ff
 8005a9c:	000003fe 	.word	0x000003fe
 8005aa0:	000003fd 	.word	0x000003fd

08005aa4 <__ascii_wctomb>:
 8005aa4:	1e0b      	subs	r3, r1, #0
 8005aa6:	d004      	beq.n	8005ab2 <__ascii_wctomb+0xe>
 8005aa8:	2aff      	cmp	r2, #255	; 0xff
 8005aaa:	d904      	bls.n	8005ab6 <__ascii_wctomb+0x12>
 8005aac:	238a      	movs	r3, #138	; 0x8a
 8005aae:	6003      	str	r3, [r0, #0]
 8005ab0:	3b8b      	subs	r3, #139	; 0x8b
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	4770      	bx	lr
 8005ab6:	700a      	strb	r2, [r1, #0]
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e7fa      	b.n	8005ab2 <__ascii_wctomb+0xe>

08005abc <_malloc_usable_size_r>:
 8005abc:	1f0b      	subs	r3, r1, #4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	1f18      	subs	r0, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da01      	bge.n	8005aca <_malloc_usable_size_r+0xe>
 8005ac6:	580b      	ldr	r3, [r1, r0]
 8005ac8:	18c0      	adds	r0, r0, r3
 8005aca:	4770      	bx	lr

08005acc <_init>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_fini>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr
